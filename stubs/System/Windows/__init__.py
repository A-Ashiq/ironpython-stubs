# encoding: utf-8
# module System.Windows calls itself Windows
# from System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, PresentationCore, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
# by generator 1.145
# no doc
# no imports

# functions

def WeakEventManager(*args, **kwargs): # real signature unknown
    """ Provides a base class for the event manager that is used in the weak event pattern. The manager adds and removes listeners for events (or callbacks) that also use the pattern. """
    pass

# classes

class Application(DispatcherObject, IHaveResources, IQueryAmbient):
    """
    Encapsulates a Windows Presentation Foundation (WPF) application.
    
    Application()
    """
    def FindResource(self, resourceKey):
        """
        FindResource(self: Application, resourceKey: object) -> object
        
            Searches for a user interface (UI) resource, such as a System.Windows.Style or 
             System.Windows.Media.Brush, with the specified key, and throws an exception if 
             the requested resource is not found (see Resources Overview).
        
        
            resourceKey: The name of the resource to find.
            Returns: The requested resource object. If the requested resource is not found, a 
             System.Windows.ResourceReferenceKeyNotFoundException is thrown.
        """
        pass

    @staticmethod
    def GetContentStream(uriContent):
        """
        GetContentStream(uriContent: Uri) -> StreamResourceInfo
        
            Returns a resource stream for a content data file that is located at the 
             specified System.Uri (see WPF Application Resource, Content, and Data Files).
        
        
            uriContent: The relative System.Uri that maps to a loose resource.
            Returns: A System.Windows.Resources.StreamResourceInfo that contains a content data file 
             that is located at the specified System.Uri. If a loose resource is not found, 
             null is returned.
        """
        pass

    @staticmethod
    def GetCookie(uri):
        """
        GetCookie(uri: Uri) -> str
        
            Retrieves a cookie for the location specified by a System.Uri.
        
            uri: The System.Uri that specifies the location for which a cookie was created.
            Returns: A System.String value, if the cookie exists; otherwise, a 
             System.ComponentModel.Win32Exception is thrown.
        """
        pass

    @staticmethod
    def GetRemoteStream(uriRemote):
        """
        GetRemoteStream(uriRemote: Uri) -> StreamResourceInfo
        
            Returns a resource stream for a site-of-origin data file that is located at the 
             specified System.Uri (see WPF Application Resource, Content, and Data Files).
        
        
            uriRemote: The System.Uri that maps to a loose resource at the site of origin.
            Returns: A System.Windows.Resources.StreamResourceInfo that contains a resource stream 
             for a site-of-origin data file that is located at the specified System.Uri. If 
             the loose resource is not found, null is returned.
        """
        pass

    @staticmethod
    def GetResourceStream(uriResource):
        """
        GetResourceStream(uriResource: Uri) -> StreamResourceInfo
        
            Returns a resource stream for a resource data file that is located at the 
             specified System.Uri (see WPF Application Resource, Content, and Data Files).
        
        
            uriResource: The System.Uri that maps to an embedded resource.
            Returns: A System.Windows.Resources.StreamResourceInfo that contains a resource stream 
             for resource data file that is located at the specified System.Uri.
        """
        pass

    @staticmethod
    def LoadComponent(*__args):
        """
        LoadComponent(resourceLocator: Uri) -> object
        
            Loads a XAML file that is located at the specified uniform resource identifier 
             (URI), and converts it to an instance of the object that is specified by the 
             root element of the XAML file.
        
        
            resourceLocator: A System.Uri that maps to a relative XAML file.
            Returns: An instance of the root element specified by the XAML file loaded.
        LoadComponent(component: object, resourceLocator: Uri)
            Loads a XAML file that is located at the specified uniform resource identifier 
             (URI) and converts it to an instance of the object that is specified by the 
             root element of the XAML file.
        
        
            component: An object of the same type as the root element of the XAML file.
            resourceLocator: A System.Uri that maps to a relative XAML file.
        """
        pass

    def OnActivated(self, *args): #cannot find CLR method
        """
        OnActivated(self: Application, e: EventArgs)
            Raises the System.Windows.Application.Activated event.
        
            e: An System.EventArgs that contains the event data.
        """
        pass

    def OnDeactivated(self, *args): #cannot find CLR method
        """
        OnDeactivated(self: Application, e: EventArgs)
            Raises the System.Windows.Application.Deactivated event.
        
            e: An System.EventArgs that contains the event data.
        """
        pass

    def OnExit(self, *args): #cannot find CLR method
        """
        OnExit(self: Application, e: ExitEventArgs)
            Raises the System.Windows.Application.Exit event.
        
            e: An System.Windows.ExitEventArgs that contains the event data.
        """
        pass

    def OnFragmentNavigation(self, *args): #cannot find CLR method
        """
        OnFragmentNavigation(self: Application, e: FragmentNavigationEventArgs)
            Raises the System.Windows.Application.FragmentNavigation event.
        
            e: A System.Windows.Navigation.FragmentNavigationEventArgs that contains the event 
             data.
        """
        pass

    def OnLoadCompleted(self, *args): #cannot find CLR method
        """
        OnLoadCompleted(self: Application, e: NavigationEventArgs)
            Raises the System.Windows.Application.LoadCompleted event.
        
            e: A System.Windows.Navigation.NavigationEventArgs that contains the event data.
        """
        pass

    def OnNavigated(self, *args): #cannot find CLR method
        """
        OnNavigated(self: Application, e: NavigationEventArgs)
            Raises the System.Windows.Application.Navigated event.
        
            e: A System.Windows.Navigation.NavigationEventArgs that contains the event data.
        """
        pass

    def OnNavigating(self, *args): #cannot find CLR method
        """
        OnNavigating(self: Application, e: NavigatingCancelEventArgs)
            Raises the System.Windows.Application.Navigating event.
        
            e: A System.Windows.Navigation.NavigatingCancelEventArgs that contains the event 
             data.
        """
        pass

    def OnNavigationFailed(self, *args): #cannot find CLR method
        """
        OnNavigationFailed(self: Application, e: NavigationFailedEventArgs)
            Raises the System.Windows.Application.NavigationFailed event.
        
            e: A System.Windows.Navigation.NavigationFailedEventArgs that contains the event 
             data.
        """
        pass

    def OnNavigationProgress(self, *args): #cannot find CLR method
        """
        OnNavigationProgress(self: Application, e: NavigationProgressEventArgs)
            Raises the System.Windows.Application.NavigationProgress event.
        
            e: A System.Windows.Navigation.NavigationProgressEventArgs that contains the event 
             data.
        """
        pass

    def OnNavigationStopped(self, *args): #cannot find CLR method
        """
        OnNavigationStopped(self: Application, e: NavigationEventArgs)
            Raises the System.Windows.Application.NavigationStopped event.
        
            e: A System.Windows.Navigation.NavigationEventArgs that contains the event data.
        """
        pass

    def OnSessionEnding(self, *args): #cannot find CLR method
        """
        OnSessionEnding(self: Application, e: SessionEndingCancelEventArgs)
            Raises the System.Windows.Application.SessionEnding event.
        
            e: A System.Windows.SessionEndingCancelEventArgs that contains the event data.
        """
        pass

    def OnStartup(self, *args): #cannot find CLR method
        """
        OnStartup(self: Application, e: StartupEventArgs)
            Raises the System.Windows.Application.Startup event.
        
            e: A System.Windows.StartupEventArgs that contains the event data.
        """
        pass

    def Run(self, window=None):
        """
        Run(self: Application, window: Window) -> int
        
            Starts a Windows Presentation Foundation (WPF) application and opens the 
             specified window.
        
        
            window: A System.Windows.Window that opens automatically when an application starts.
            Returns: The System.Int32 application exit code that is returned to the operating system 
             when the application shuts down. By default, the exit code value is 0.
        
        Run(self: Application) -> int
        
            Starts a Windows Presentation Foundation (WPF) application.
            Returns: The System.Int32 application exit code that is returned to the operating system 
             when the application shuts down. By default, the exit code value is 0.
        """
        pass

    @staticmethod
    def SetCookie(uri, value):
        """
        SetCookie(uri: Uri, value: str)
            Creates a cookie for the location specified by a System.Uri.
        
            uri: The System.Uri that specifies the location for which the cookie should be 
             created.
        
            value: The System.String that contains the cookie data.
        """
        pass

    def Shutdown(self, exitCode=None):
        """
        Shutdown(self: Application, exitCode: int)
            Shuts down an application that returns the specified exit code to the operating 
             system.
        
        
            exitCode: An integer exit code for an application. The default exit code is 0.
        Shutdown(self: Application)
            Shuts down an application.
        """
        pass

    def TryFindResource(self, resourceKey):
        """
        TryFindResource(self: Application, resourceKey: object) -> object
        
            Searches for the specified resource.
        
            resourceKey: The name of the resource to find.
            Returns: The requested resource object. If the requested resource is not found, a null 
             reference is returned.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    MainWindow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the main window of the application.

Get: MainWindow(self: Application) -> Window

Set: MainWindow(self: Application) = value
"""

    Properties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of application-scope properties.

Get: Properties(self: Application) -> IDictionary

"""

    Resources = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a collection of application-scope resources, such as styles and brushes.

Get: Resources(self: Application) -> ResourceDictionary

Set: Resources(self: Application) = value
"""

    ShutdownMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the condition that causes the System.Windows.Application.Shutdown method to be called.

Get: ShutdownMode(self: Application) -> ShutdownMode

Set: ShutdownMode(self: Application) = value
"""

    StartupUri = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a UI that is automatically shown when an application starts.

Get: StartupUri(self: Application) -> Uri

Set: StartupUri(self: Application) = value
"""

    Windows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the instantiated windows in an application.

Get: Windows(self: Application) -> WindowCollection

"""


    Activated = None
    Current = None
    Deactivated = None
    DispatcherUnhandledException = None
    Exit = None
    FragmentNavigation = None
    LoadCompleted = None
    Navigated = None
    Navigating = None
    NavigationFailed = None
    NavigationProgress = None
    NavigationStopped = None
    ResourceAssembly = None
    SessionEnding = None
    Startup = None


class AttachedPropertyBrowsableAttribute(Attribute, _Attribute):
    """ Provides a base class for .NET Framework attributes that report the use scope of attached properties. """
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AttachedPropertyBrowsableForChildrenAttribute(AttachedPropertyBrowsableAttribute, _Attribute):
    """
    Specifies that an attached property has a browsable scope that extends to child elements in the logical tree.
    
    AttachedPropertyBrowsableForChildrenAttribute()
    """
    def Equals(self, obj):
        """
        Equals(self: AttachedPropertyBrowsableForChildrenAttribute, obj: object) -> bool
        
            Determines whether the current 
             System.Windows.AttachedPropertyBrowsableForChildrenAttribute�.NET Framework 
             attribute is equal to a specified object.
        
        
            obj: The System.Windows.AttachedPropertyBrowsableForChildrenAttribute to compare to 
             the current System.Windows.AttachedPropertyBrowsableForChildrenAttribute.
        
            Returns: true if the specified 
             System.Windows.AttachedPropertyBrowsableForChildrenAttribute is equal to the 
             current System.Windows.AttachedPropertyBrowsableForChildrenAttribute; 
             otherwise, false.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: AttachedPropertyBrowsableForChildrenAttribute) -> int
        
            Returns the hash code for this 
             System.Windows.AttachedPropertyBrowsableForChildrenAttribute�.NET Framework 
             attribute.
        
            Returns: An unsigned 32-bit integer value.
        """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    IncludeDescendants = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that declares whether to use the deep mode for detection of parent elements on the attached property where this �.NET Framework attribute is applied.

Get: IncludeDescendants(self: AttachedPropertyBrowsableForChildrenAttribute) -> bool

Set: IncludeDescendants(self: AttachedPropertyBrowsableForChildrenAttribute) = value
"""



class AttachedPropertyBrowsableForTypeAttribute(AttachedPropertyBrowsableAttribute, _Attribute):
    """
    Specifies that an attached property is browsable only for elements that derive from a specified type.
    
    AttachedPropertyBrowsableForTypeAttribute(targetType: Type)
    """
    def Equals(self, obj):
        """
        Equals(self: AttachedPropertyBrowsableForTypeAttribute, obj: object) -> bool
        
            Determines whether the current 
             System.Windows.AttachedPropertyBrowsableForTypeAttribute�.NET Framework 
             attribute is equal to a specified object.
        
        
            obj: The System.Windows.AttachedPropertyBrowsableForTypeAttribute to compare to the 
             current System.Windows.AttachedPropertyBrowsableForTypeAttribute.
        
            Returns: true if the specified System.Windows.AttachedPropertyBrowsableForTypeAttribute 
             is equal to the current 
             System.Windows.AttachedPropertyBrowsableForTypeAttribute; otherwise, false.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: AttachedPropertyBrowsableForTypeAttribute) -> int
        
            Returns the hash code for this 
             System.Windows.AttachedPropertyBrowsableForTypeAttribute�.NET Framework 
             attribute.
        
            Returns: An unsigned 32-bit integer value.
        """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, targetType):
        """ __new__(cls: type, targetType: Type) """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    TargetType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the base type that scopes the use of the attached property where this�.NET Framework attribute�applies.

Get: TargetType(self: AttachedPropertyBrowsableForTypeAttribute) -> Type

"""

    TypeId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a unique type identifier for this System.Windows.AttachedPropertyBrowsableForTypeAttribute�.NET Framework attribute.

Get: TypeId(self: AttachedPropertyBrowsableForTypeAttribute) -> object

"""



class AttachedPropertyBrowsableWhenAttributePresentAttribute(AttachedPropertyBrowsableAttribute, _Attribute):
    """
    Specifies that an attached property is only browsable on an element that also has another specific �.NET Framework attribute�applied to its class definition.
    
    AttachedPropertyBrowsableWhenAttributePresentAttribute(attributeType: Type)
    """
    def Equals(self, obj):
        """
        Equals(self: AttachedPropertyBrowsableWhenAttributePresentAttribute, obj: object) -> bool
        
            Determines whether the current 
             System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute�.NET 
             Framework attribute is equal to a specified object.
        
        
            obj: The System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute to 
             compare to the current 
             System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.
        
            Returns: true if the specified 
             System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute is equal 
             to the current 
             System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute; 
             otherwise, false.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: AttachedPropertyBrowsableWhenAttributePresentAttribute) -> int
        
            Returns the hash code for this 
             System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute�.NET 
             Framework attribute.
        
            Returns: An unsigned 32-bit integer value.
        """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, attributeType):
        """ __new__(cls: type, attributeType: Type) """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    AttributeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the type of the �.NET Framework attribute�that must also be applied on a class.

Get: AttributeType(self: AttachedPropertyBrowsableWhenAttributePresentAttribute) -> Type

"""



class AutoResizedEventArgs(EventArgs):
    """
    Provides data for the System.Windows.Interop.HwndSource.AutoResized event raised by System.Windows.Interop.HwndSource.
    
    AutoResizedEventArgs(size: Size)
    """
    @staticmethod # known case of __new__
    def __new__(self, size):
        """ __new__(cls: type, size: Size) """
        pass

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the new size of the window after the auto resize operation.

Get: Size(self: AutoResizedEventArgs) -> Size

"""



class AutoResizedEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """
    Represents the method that will handle the System.Windows.Interop.HwndSource.AutoResized event raised by System.Windows.Interop.HwndSource.
    
    AutoResizedEventHandler(object: object, method: IntPtr)
    """
    def BeginInvoke(self, sender, e, callback, object):
        """ BeginInvoke(self: AutoResizedEventHandler, sender: object, e: AutoResizedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        pass

    def CombineImpl(self, *args): #cannot find CLR method
        """
        CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate
        
            Combines this System.Delegate with the specified System.Delegate to form a new 
             delegate.
        
        
            follow: The delegate to combine with this delegate.
            Returns: A delegate that is the new root of the System.MulticastDelegate invocation list.
        """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """
        DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object
        
            Dynamically invokes (late-bound) the method represented by the current delegate.
        
            args: An array of objects that are the arguments to pass to the method represented by 
             the current delegate.-or- null, if the method represented by the current 
             delegate does not require arguments.
        
            Returns: The object returned by the method represented by the delegate.
        """
        pass

    def EndInvoke(self, result):
        """ EndInvoke(self: AutoResizedEventHandler, result: IAsyncResult) """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """
        GetMethodImpl(self: MulticastDelegate) -> MethodInfo
        
            Returns a static method represented by the current System.MulticastDelegate.
            Returns: A static method represented by the current System.MulticastDelegate.
        """
        pass

    def Invoke(self, sender, e):
        """ Invoke(self: AutoResizedEventHandler, sender: object, e: AutoResizedEventArgs) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """
        RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate
        
            Removes an element from the invocation list of this System.MulticastDelegate 
             that is equal to the specified delegate.
        
        
            value: The delegate to search for in the invocation list.
            Returns: If value is found in the invocation list for this instance, then a new 
             System.Delegate without value in its invocation list; otherwise, this instance 
             with its original invocation list.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, object, method):
        """ __new__(cls: type, object: object, method: IntPtr) """
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class BaseCompatibilityPreferences(object):
    # no doc
    FlowDispatcherSynchronizationContextPriority = False
    InlineDispatcherSynchronizationContextSend = False
    ReuseDispatcherSynchronizationContextInstance = True
    __all__ = []


class BaselineAlignment(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes how the baseline for a text-based element is positioned on the vertical axis, relative to the established baseline for text.
    
    enum BaselineAlignment, values: Baseline (3), Bottom (2), Center (1), Subscript (6), Superscript (7), TextBottom (5), TextTop (4), Top (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Baseline = None
    Bottom = None
    Center = None
    Subscript = None
    Superscript = None
    TextBottom = None
    TextTop = None
    Top = None
    value__ = None


class BaseValueSource(Enum, IComparable, IFormattable, IConvertible):
    """
    Identifies the property system source of a particular dependency property value.
    
    enum BaseValueSource, values: Default (1), DefaultStyle (3), DefaultStyleTrigger (4), ImplicitStyleReference (8), Inherited (2), Local (11), ParentTemplate (9), ParentTemplateTrigger (10), Style (5), StyleTrigger (7), TemplateTrigger (6), Unknown (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Default = None
    DefaultStyle = None
    DefaultStyleTrigger = None
    ImplicitStyleReference = None
    Inherited = None
    Local = None
    ParentTemplate = None
    ParentTemplateTrigger = None
    Style = None
    StyleTrigger = None
    TemplateTrigger = None
    Unknown = None
    value__ = None


class Clipboard(object):
    """ Provides static methods that facilitate transferring data to and from the system Clipboard. """
    @staticmethod
    def Clear():
        """
        Clear()
            Clears any data from the system Clipboard.
        """
        pass

    @staticmethod
    def ContainsAudio():
        """
        ContainsAudio() -> bool
        
            Queries the Clipboard for the presence of data in the 
             System.Windows.DataFormats.WaveAudio data format.
        
            Returns: true if the Clipboard contains data in the System.Windows.DataFormats.WaveAudio 
             data format; otherwise, false.
        """
        pass

    @staticmethod
    def ContainsData(format):
        """
        ContainsData(format: str) -> bool
        
            Queries the Clipboard for the presence of data in a specified data format.
        
            format: The format of the data to look for. See System.Windows.DataFormats for 
             predefined formats.
        
            Returns: true if data in the specified format is available on the Clipboard; otherwise, 
             false. See Remarks.
        """
        pass

    @staticmethod
    def ContainsFileDropList():
        """
        ContainsFileDropList() -> bool
        
            Queries the Clipboard for the presence of data in the 
             System.Windows.DataFormats.FileDrop data format.
        
            Returns: true if the Clipboard contains data in the System.Windows.DataFormats.FileDrop 
             data format; otherwise, false.
        """
        pass

    @staticmethod
    def ContainsImage():
        """
        ContainsImage() -> bool
        
            Queries the Clipboard for the presence of data in the 
             System.Windows.DataFormats.Bitmap data format.
        
            Returns: true if the Clipboard contains data in the System.Windows.DataFormats.Bitmap 
             data format; otherwise, false.
        """
        pass

    @staticmethod
    def ContainsText(format=None):
        """
        ContainsText(format: TextDataFormat) -> bool
        
            Queries the Clipboard for the presence of data in a text data format.
        
            format: A member of the System.Windows.TextDataFormat enumeration that specifies the 
             text data format to query for.
        
            Returns: true if the Clipboard contains data in the specified text data format; 
             otherwise, false.
        
        ContainsText() -> bool
        
            Queries the Clipboard for the presence of data in the 
             System.Windows.DataFormats.UnicodeText format.
        
            Returns: true if the Clipboard contains data in the 
             System.Windows.DataFormats.UnicodeText data format; otherwise, false.
        """
        pass

    @staticmethod
    def Flush():
        """ Flush() """
        pass

    @staticmethod
    def GetAudioStream():
        """
        GetAudioStream() -> Stream
        
            Returns a stream of Clipboard data in the System.Windows.DataFormats.WaveAudio 
             data format.
        
            Returns: A stream that contains the data in the System.Windows.DataFormats.WaveAudio 
             format, or null if the Clipboard does not contain data in this format.
        """
        pass

    @staticmethod
    def GetData(format):
        """
        GetData(format: str) -> object
        
            Retrieves data in a specified format from the Clipboard.
        
            format: A string that specifies the format of the data to retrieve. For a set of 
             predefined data formats, see the System.Windows.DataFormats class.
        
            Returns: An object that contains the data in the specified format, or null if the data 
             is unavailable in the specified format.
        """
        pass

    @staticmethod
    def GetDataObject():
        """
        GetDataObject() -> IDataObject
        
            Returns a data object that represents the entire contents of the Clipboard.
            Returns: A data object that enables access to the entire contents of the system 
             Clipboard, or null if there is no data on the Clipboard.
        """
        pass

    @staticmethod
    def GetFileDropList():
        """
        GetFileDropList() -> StringCollection
        
            Returns a string collection that contains a list of dropped files available on 
             the Clipboard.
        
            Returns: A collection of strings, where each string specifies the name of a file in the 
             list of dropped files on the Clipboard, or null if the data is unavailable in 
             this format.
        """
        pass

    @staticmethod
    def GetImage():
        """
        GetImage() -> BitmapSource
        
            Returns a System.Windows.Media.Imaging.BitmapSource object from the Clipboard 
             that contains data in the System.Windows.DataFormats.Bitmap format.
        
            Returns: A System.Windows.Media.Imaging.BitmapSource object that contains data in the 
             System.Windows.DataFormats.Bitmap format, or null if the data is unavailable in 
             this format.
        """
        pass

    @staticmethod
    def GetText(format=None):
        """
        GetText(format: TextDataFormat) -> str
        
            Returns a string containing text data on the Clipboard.
        
            format: A member of System.Windows.TextDataFormat that specifies the text data format 
             to retrieve.
        
            Returns: A string containing text data in the specified data format, or an empty string 
             if no corresponding text data is available.
        
        GetText() -> str
        
            Returns a string containing the System.Windows.DataFormats.UnicodeText data on 
             the Clipboard.
        
            Returns: A string containing the System.Windows.DataFormats.UnicodeText data , or an 
             empty string if no System.Windows.DataFormats.UnicodeText data is available on 
             the Clipboard.
        """
        pass

    @staticmethod
    def IsCurrent(data):
        """
        IsCurrent(data: IDataObject) -> bool
        
            Compares a specified data object to the contents of the Clipboard.
        
            data: A data object to compare to the contents of the system Clipboard.
            Returns: true if the specified data object matches what is on the system Clipboard; 
             otherwise, false.
        """
        pass

    @staticmethod
    def SetAudio(*__args):
        """
        SetAudio(audioStream: Stream)
            Stores audio data (System.Windows.DataFormats.WaveAudio data format) on the 
             Clipboard.  The audio data is specified as a stream.
        
        
            audioStream: A stream that contains audio data to store on the Clipboard.
        SetAudio(audioBytes: Array[Byte])
            Stores audio data (System.Windows.DataFormats.WaveAudio data format) on the 
             Clipboard.  The audio data is specified as a byte array.
        
        
            audioBytes: A byte array that contains audio data to store on the Clipboard.
        """
        pass

    @staticmethod
    def SetData(format, data):
        """
        SetData(format: str, data: object)
            Stores the specified data on the Clipboard in the specified format.
        
            format: A string that specifies the format to use to store the data. See the 
             System.Windows.DataFormats class for a set of predefined data formats.
        
            data: An object representing the data to store on the Clipboard.
        """
        pass

    @staticmethod
    def SetDataObject(data, copy=None):
        """
        SetDataObject(data: object, copy: bool)
            Places a specified data object on the system Clipboard and accepts a Boolean 
             parameter that indicates whether the data object should be left on the 
             Clipboard when the application exits.
        
        
            data: A data object (an object that implements System.Windows.IDataObject) to place 
             on the system Clipboard.
        
            copy: true to leave the data on the system Clipboard when the application exits; 
             false to clear the data from the system Clipboard when the application exits.
        
        SetDataObject(data: object)
            Places a specified non-persistent data object on the system Clipboard.
        
            data: A data object (an object that implements System.Windows.IDataObject) to place 
             on the system Clipboard.
        """
        pass

    @staticmethod
    def SetFileDropList(fileDropList):
        """
        SetFileDropList(fileDropList: StringCollection)
            Stores System.Windows.DataFormats.FileDrop data on the Clipboard.  The dropped 
             file list is specified as a string collection.
        
        
            fileDropList: A string collection that contains the dropped file list to store in the data 
             object.
        """
        pass

    @staticmethod
    def SetImage(image):
        """
        SetImage(image: BitmapSource)
            Stores System.Windows.DataFormats.Bitmap data on the Clipboard.  The image data 
             is specified as a System.Windows.Media.Imaging.BitmapSource.
        
        
            image: A System.Windows.Media.Imaging.BitmapSource object that contains the image data 
             to store on the Clipboard.
        """
        pass

    @staticmethod
    def SetText(text, format=None):
        """
        SetText(text: str, format: TextDataFormat)
            Stores text data on the Clipboard in a specified text data format.  The 
             System.Windows.DataFormats.UnicodeText data to store is specified as a string.
        
        
            text: A string that contains the text data to store on the Clipboard.
            format: A member of System.Windows.TextDataFormat that specifies the specific text data 
             format to store.
        
        SetText(text: str)
            Stores System.Windows.DataFormats.UnicodeText data on the Clipboard.
        
            text: A string that contains the System.Windows.DataFormats.UnicodeText data to store 
             on the Clipboard.
        """
        pass

    __all__ = [
        'Clear',
        'ContainsAudio',
        'ContainsData',
        'ContainsFileDropList',
        'ContainsImage',
        'ContainsText',
        'Flush',
        'GetAudioStream',
        'GetData',
        'GetDataObject',
        'GetFileDropList',
        'GetImage',
        'GetText',
        'IsCurrent',
        'SetAudio',
        'SetData',
        'SetDataObject',
        'SetFileDropList',
        'SetImage',
        'SetText',
    ]


class CoerceValueCallback(MulticastDelegate, ICloneable, ISerializable):
    """
    Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.
    
    CoerceValueCallback(object: object, method: IntPtr)
    """
    def BeginInvoke(self, d, baseValue, callback, object):
        """ BeginInvoke(self: CoerceValueCallback, d: DependencyObject, baseValue: object, callback: AsyncCallback, object: object) -> IAsyncResult """
        pass

    def CombineImpl(self, *args): #cannot find CLR method
        """
        CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate
        
            Combines this System.Delegate with the specified System.Delegate to form a new 
             delegate.
        
        
            follow: The delegate to combine with this delegate.
            Returns: A delegate that is the new root of the System.MulticastDelegate invocation list.
        """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """
        DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object
        
            Dynamically invokes (late-bound) the method represented by the current delegate.
        
            args: An array of objects that are the arguments to pass to the method represented by 
             the current delegate.-or- null, if the method represented by the current 
             delegate does not require arguments.
        
            Returns: The object returned by the method represented by the delegate.
        """
        pass

    def EndInvoke(self, result):
        """ EndInvoke(self: CoerceValueCallback, result: IAsyncResult) -> object """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """
        GetMethodImpl(self: MulticastDelegate) -> MethodInfo
        
            Returns a static method represented by the current System.MulticastDelegate.
            Returns: A static method represented by the current System.MulticastDelegate.
        """
        pass

    def Invoke(self, d, baseValue):
        """ Invoke(self: CoerceValueCallback, d: DependencyObject, baseValue: object) -> object """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """
        RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate
        
            Removes an element from the invocation list of this System.MulticastDelegate 
             that is equal to the specified delegate.
        
        
            value: The delegate to search for in the invocation list.
            Returns: If value is found in the invocation list for this instance, then a new 
             System.Delegate without value in its invocation list; otherwise, this instance 
             with its original invocation list.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, object, method):
        """ __new__(cls: type, object: object, method: IntPtr) """
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class ColorConvertedBitmapExtension(MarkupExtension):
    """
    Implements a markup extension that enables System.Windows.Media.Imaging.ColorConvertedBitmap creation. A System.Windows.Media.Imaging.ColorConvertedBitmap does not have an embedded profile, the profile instead being based on source and destination values.
    
    ColorConvertedBitmapExtension()
    ColorConvertedBitmapExtension(image: object)
    """
    def ProvideValue(self, serviceProvider):
        """
        ProvideValue(self: ColorConvertedBitmapExtension, serviceProvider: IServiceProvider) -> object
        
            Returns an object that should be set on the property where this extension is 
             applied. For System.Windows.ColorConvertedBitmapExtension, this is the 
             completed System.Windows.Media.Imaging.ColorConvertedBitmap.
        
        
            serviceProvider: An object that can provide services for the markup extension. This service is 
             expected to provide results for System.Windows.Markup.IUriContext.
        
            Returns: A System.Windows.Media.Imaging.ColorConvertedBitmap based on the values passed 
             to the constructor.
        """
        pass

    @staticmethod # known case of __new__
    def __new__(self, image=None):
        """
        __new__(cls: type)
        __new__(cls: type, image: object)
        """
        pass


class ColumnSpaceDistribution(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes how to distribute space in columnated flow content.
    
    enum ColumnSpaceDistribution, values: Between (2), Left (0), Right (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Between = None
    Left = None
    Right = None
    value__ = None


class ResourceKey(MarkupExtension):
    """ Provides an abstract base class for various resource keys. """
    def ProvideValue(self, serviceProvider):
        """
        ProvideValue(self: ResourceKey, serviceProvider: IServiceProvider) -> object
        
            Returns this System.Windows.ResourceKey. Instances of this class are typically 
             used as a key in a dictionary.
        
        
            serviceProvider: A service implementation that provides the desired value.
            Returns: Calling this method always returns the instance itself.
        """
        pass

    Assembly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets an assembly object that indicates which assembly's dictionary to look in for the value associated with this key.

Get: Assembly(self: ResourceKey) -> Assembly

"""



class ComponentResourceKey(ResourceKey):
    """
    Defines or references resource keys based on class names in external assemblies, as well as an additional identifier.
    
    ComponentResourceKey()
    ComponentResourceKey(typeInTargetAssembly: Type, resourceId: object)
    """
    def Equals(self, o):
        """
        Equals(self: ComponentResourceKey, o: object) -> bool
        
            Determines whether the provided object is equal to the current 
             System.Windows.ComponentResourceKey.
        
        
            o: Object to compare with the current System.Windows.ComponentResourceKey.
            Returns: true if the objects are equal; otherwise, false.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: ComponentResourceKey) -> int
        
            Returns a hash code for this System.Windows.ComponentResourceKey.
            Returns: A signed 32-bit integer value.
        """
        pass

    def ToString(self):
        """
        ToString(self: ComponentResourceKey) -> str
        
            Gets the string representation of a System.Windows.ComponentResourceKey.
            Returns: The string representation.
        """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    @staticmethod # known case of __new__
    def __new__(self, typeInTargetAssembly=None, resourceId=None):
        """
        __new__(cls: type)
        __new__(cls: type, typeInTargetAssembly: Type, resourceId: object)
        """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    Assembly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the assembly object that indicates which assembly's dictionary to look in for the value associated with this key.

Get: Assembly(self: ComponentResourceKey) -> Assembly

"""

    ResourceId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a unique identifier to differentiate this key from others associated with this type.

Get: ResourceId(self: ComponentResourceKey) -> object

Set: ResourceId(self: ComponentResourceKey) = value
"""

    TypeInTargetAssembly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Type that defines the resource key.

Get: TypeInTargetAssembly(self: ComponentResourceKey) -> Type

Set: TypeInTargetAssembly(self: ComponentResourceKey) = value
"""



class Condition(object, ISupportInitialize):
    """
    Represents a condition for the System.Windows.MultiTrigger and the System.Windows.MultiDataTrigger, which apply changes to property values based on a set of conditions.
    
    Condition()
    Condition(conditionProperty: DependencyProperty, conditionValue: object)
    Condition(conditionProperty: DependencyProperty, conditionValue: object, sourceName: str)
    Condition(binding: BindingBase, conditionValue: object)
    """
    @staticmethod
    def ReceiveMarkupExtension(targetObject, eventArgs):
        """
        ReceiveMarkupExtension(targetObject: object, eventArgs: XamlSetMarkupExtensionEventArgs)
            Handles cases where a markup extension provides a value for a property of a 
             System.Windows.Condition object
        
        
            targetObject: The object where the markup extension sets the value.
            eventArgs: Data that is relevant for markup extension processing.
        """
        pass

    @staticmethod
    def ReceiveTypeConverter(targetObject, eventArgs):
        """
        ReceiveTypeConverter(targetObject: object, eventArgs: XamlSetTypeConverterEventArgs)
            Handles cases where a type converter provides a value for a property of on 
             aSystem.Windows.Condition object.
        
        
            targetObject: The object where the type converter sets the value.
            eventArgs: Data that is relevant for type converter processing.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type)
        __new__(cls: type, conditionProperty: DependencyProperty, conditionValue: object)
        __new__(cls: type, conditionProperty: DependencyProperty, conditionValue: object, sourceName: str)
        __new__(cls: type, binding: BindingBase, conditionValue: object)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Binding = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the binding that specifies the property of the condition. This is only applicable to System.Windows.MultiDataTrigger objects.

Get: Binding(self: Condition) -> BindingBase

Set: Binding(self: Condition) = value
"""

    Property = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the property of the condition. This is only applicable to System.Windows.MultiTrigger objects.

Get: Property(self: Condition) -> DependencyProperty

Set: Property(self: Condition) = value
"""

    SourceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the name of the object with the property that causes the associated setters to be applied. This is only applicable to System.Windows.MultiTrigger objects.

Get: SourceName(self: Condition) -> str

Set: SourceName(self: Condition) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the value of the condition.

Get: Value(self: Condition) -> object

Set: Value(self: Condition) = value
"""



class ConditionCollection(Collection[Condition], IList[Condition], ICollection[Condition], IEnumerable[Condition], IEnumerable, IList, ICollection, IReadOnlyList[Condition], IReadOnlyCollection[Condition]):
    """
    Represents a collection of System.Windows.Condition objects.
    
    ConditionCollection()
    """
    def ClearItems(self, *args): #cannot find CLR method
        """ ClearItems(self: ConditionCollection) """
        pass

    def InsertItem(self, *args): #cannot find CLR method
        """ InsertItem(self: ConditionCollection, index: int, item: Condition) """
        pass

    def RemoveItem(self, *args): #cannot find CLR method
        """ RemoveItem(self: ConditionCollection, index: int) """
        pass

    def SetItem(self, *args): #cannot find CLR method
        """ SetItem(self: ConditionCollection, index: int, item: Condition) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsSealed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether this trigger is read-only and cannot be changed .

Get: IsSealed(self: ConditionCollection) -> bool

"""

    Items = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a System.Collections.Generic.IList wrapper around the System.Collections.ObjectModel.Collection.

"""



class DependencyObject(DispatcherObject):
    """
    Represents an object that participates in the dependency property system.
    
    DependencyObject()
    """
    def ClearValue(self, *__args):
        """
        ClearValue(self: DependencyObject, key: DependencyPropertyKey)
            Clears the local value of a read-only property. The property to be cleared is 
             specified by a System.Windows.DependencyPropertyKey.
        
        
            key: The key for the dependency property to be cleared.
        ClearValue(self: DependencyObject, dp: DependencyProperty)
            Clears the local value of a property. The property to be cleared is specified 
             by a System.Windows.DependencyProperty identifier.
        
        
            dp: The dependency property to be cleared, identified by a 
             System.Windows.DependencyProperty object reference.
        """
        pass

    def CoerceValue(self, dp):
        """
        CoerceValue(self: DependencyObject, dp: DependencyProperty)
            Coerces the value of the specified dependency property. This is accomplished by 
             invoking any System.Windows.CoerceValueCallback function specified in property 
             metadata for the dependency property as it exists on the calling 
             System.Windows.DependencyObject.
        
        
            dp: The identifier for the dependency property to coerce.
        """
        pass

    def Equals(self, obj):
        """
        Equals(self: DependencyObject, obj: object) -> bool
        
            Determines whether a provided System.Windows.DependencyObject is equivalent to 
             the current System.Windows.DependencyObject.
        
        
            obj: The System.Windows.DependencyObject  to compare to the current instance.
            Returns: true if the two instances are the same; otherwise, false.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: DependencyObject) -> int
        
            Gets a hash code for this System.Windows.DependencyObject.
            Returns: A signed 32-bit integer hash code.
        """
        pass

    def GetLocalValueEnumerator(self):
        """
        GetLocalValueEnumerator(self: DependencyObject) -> LocalValueEnumerator
        
            Creates a specialized enumerator for determining which dependency properties 
             have locally set values on this System.Windows.DependencyObject.
        
            Returns: A specialized local value enumerator.
        """
        pass

    def GetValue(self, dp):
        """
        GetValue(self: DependencyObject, dp: DependencyProperty) -> object
        
            Returns the current effective value of a dependency property on this instance 
             of a System.Windows.DependencyObject.
        
        
            dp: The System.Windows.DependencyProperty identifier of the property to retrieve 
             the value for.
        
            Returns: Returns the current effective value.
        """
        pass

    def InvalidateProperty(self, dp):
        """
        InvalidateProperty(self: DependencyObject, dp: DependencyProperty)
            Re-evaluates the effective value for the specified dependency property
        
            dp: The System.Windows.DependencyProperty identifier of the property to invalidate.
        """
        pass

    def OnPropertyChanged(self, *args): #cannot find CLR method
        """
        OnPropertyChanged(self: DependencyObject, e: DependencyPropertyChangedEventArgs)
            Invoked whenever the effective value of any dependency property on this 
             System.Windows.DependencyObject has been updated. The specific dependency 
             property that changed is reported in the event data.
        
        
            e: Event data that will contain the dependency property identifier of interest, 
             the property metadata for the type, and old and new values.
        
        OnPropertyChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def ReadLocalValue(self, dp):
        """
        ReadLocalValue(self: DependencyObject, dp: DependencyProperty) -> object
        
            Returns the local value of a dependency property, if it exists.
        
            dp: The System.Windows.DependencyProperty identifier of the property to retrieve 
             the value for.
        
            Returns: Returns the local value, or returns the sentinel value 
             System.Windows.DependencyProperty.UnsetValue if no local value is set.
        """
        pass

    def SetCurrentValue(self, dp, value):
        """
        SetCurrentValue(self: DependencyObject, dp: DependencyProperty, value: object)
            Sets the value of a dependency property without changing its value source.
        
            dp: The identifier of the dependency property to set.
            value: The new local value.
        """
        pass

    def SetValue(self, *__args):
        """
        SetValue(self: DependencyObject, key: DependencyPropertyKey, value: object)
            Sets the local value of a read-only dependency property, specified by the 
             System.Windows.DependencyPropertyKey identifier of the dependency property.
        
        
            key: The System.Windows.DependencyPropertyKey identifier of the property to set.
            value: The new local value.
        SetValue(self: DependencyObject, dp: DependencyProperty, value: object)
            Sets the local value of a dependency property, specified by its dependency 
             property identifier.
        
        
            dp: The identifier of the dependency property to set.
            value: The new local value.
        """
        pass

    def ShouldSerializeProperty(self, *args): #cannot find CLR method
        """
        ShouldSerializeProperty(self: DependencyObject, dp: DependencyProperty) -> bool
        
            Returns a value that indicates whether serialization processes should serialize 
             the value for the provided dependency property.
        
        
            dp: The identifier for the dependency property that should be serialized.
            Returns: true if the dependency property that is supplied should be value-serialized; 
             otherwise, false.
        
        ShouldSerializeProperty(self: Window_16$17, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Label_17$18, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: TextBox_18$19, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Button_19$20, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: CheckBox_20$21, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: ComboBox_21$22, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Separator_22$23, dp: DependencyProperty) -> bool
        """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    DependencyObjectType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the System.Windows.DependencyObjectType that wraps the CLR type of this instance.

Get: DependencyObjectType(self: DependencyObject) -> DependencyObjectType

"""

    IsSealed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether this instance is currently sealed (read-only).

Get: IsSealed(self: DependencyObject) -> bool

"""



class ContentElement(DependencyObject, IInputElement, IAnimatable):
    """
    Provides a WPF core-level base class for content elements. Content elements are designed for flow-style presentation, using an intuitive markup-oriented layout model and a deliberately simple object model.
    
    ContentElement()
    """
    def AddHandler(self, routedEvent, handler, handledEventsToo=None):
        """
        AddHandler(self: ContentElement, routedEvent: RoutedEvent, handler: Delegate, handledEventsToo: bool)
            Adds a�routed event handler for a specified routed event, adding the handler to 
             the handler collection on the current element. Specify handledEventsToo as true 
             to have the provided handler be invoked for routed event that had already been 
             marked as handled by another element along the event route.
        
        
            routedEvent: An identifier for the.routed event to be handled.
            handler: A reference to the handler implementation.
            handledEventsToo: true to register the handler such that it is invoked even when the routed event 
             is marked handled in its event data; false to register the handler with the 
             default condition that it will not be invoked if the routed event is already 
             marked handled. The default is false.Do not routinely ask to rehandle a routed 
             event. For more information, see Remarks.
        
        AddHandler(self: ContentElement, routedEvent: RoutedEvent, handler: Delegate)
            Adds a�routed event handler for a specified routed event, adding the handler to 
             the handler collection on the current element.
        
        
            routedEvent: An identifier for the routed event to be handled.
            handler: A reference to the handler implementation.
        """
        pass

    def AddToEventRoute(self, route, e):
        """
        AddToEventRoute(self: ContentElement, route: EventRoute, e: RoutedEventArgs)
            Adds handlers to the specified System.Windows.EventRoute for the current 
             System.Windows.ContentElement event handler collection.
        
        
            route: The event route that handlers are added to.
            e: The event data that is used to add the handlers. This method uses the 
             System.Windows.RoutedEventArgs.RoutedEvent property of the arguments to create 
             the handlers.
        """
        pass

    def ApplyAnimationClock(self, dp, clock, handoffBehavior=None):
        """
        ApplyAnimationClock(self: ContentElement, dp: DependencyProperty, clock: AnimationClock, handoffBehavior: HandoffBehavior)
            Applies an animation to a specified�dependency property on this element, with 
             the ability to specify what happens if the property already has a running 
             animation.
        
        
            dp: The property to animate.
            clock: The animation clock that controls and declares the animation.
            handoffBehavior: A value of the enumeration. The default is 
             System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace, which will 
             stop any existing animation and replace with the new one.
        
        ApplyAnimationClock(self: ContentElement, dp: DependencyProperty, clock: AnimationClock)
            Applies an animation to a specified�dependency property on this element. Any 
             existing animations are stopped and replaced with the new animation.
        
        
            dp: The identifier for the property to animate.
            clock: The animation clock that controls and declares the animation.
        """
        pass

    def BeginAnimation(self, dp, animation, handoffBehavior=None):
        """
        BeginAnimation(self: ContentElement, dp: DependencyProperty, animation: AnimationTimeline, handoffBehavior: HandoffBehavior)
            Starts a specific animation for a specified animated property on this element, 
             with the option of specifying what happens if the property already has a 
             running animation.
        
        
            dp: The property to animate, which is specified as the dependency property 
             identifier.
        
            animation: The timeline of the animation to be applied.
            handoffBehavior: A value of the enumeration that specifies how the new animation interacts with 
             any current (running) animations that are already affecting the property value.
        
        BeginAnimation(self: ContentElement, dp: DependencyProperty, animation: AnimationTimeline)
            Starts an animation for a specified animated property on this element.
        
            dp: The property to animate, which is specified as a dependency property identifier.
            animation: The timeline of the animation to start.
        """
        pass

    def CaptureMouse(self):
        """
        CaptureMouse(self: ContentElement) -> bool
        
            Attempts to force capture of the mouse to this element.
            Returns: true if the mouse is successfully captured; otherwise, false.
        """
        pass

    def CaptureStylus(self):
        """
        CaptureStylus(self: ContentElement) -> bool
        
            Attempts to force capture of the stylus to this element.
            Returns: true if the stylus is successfully captured; otherwise, false.
        """
        pass

    def CaptureTouch(self, touchDevice):
        """
        CaptureTouch(self: ContentElement, touchDevice: TouchDevice) -> bool
        
            Attempts to force capture of a touch to this element.
        
            touchDevice: The device to capture.
            Returns: true if the specified touch is captured to this element; otherwise, false.
        """
        pass

    def Focus(self):
        """
        Focus(self: ContentElement) -> bool
        
            Attempts to set focus to this element.
            Returns: true if keyboard focus could be set to this element; false if this method call 
             did not force focus.
        """
        pass

    def GetAnimationBaseValue(self, dp):
        """
        GetAnimationBaseValue(self: ContentElement, dp: DependencyProperty) -> object
        
            Returns the base property value for the specified property on this element, 
             disregarding any possible animated value from a running or stopped animation.
        
        
            dp: The.dependency property to check.
            Returns: The property value as if no animations are attached to the specified dependency 
             property.
        """
        pass

    def GetUIParentCore(self, *args): #cannot find CLR method
        """
        GetUIParentCore(self: ContentElement) -> DependencyObject
        
            When overridden in a derived class, returns an alternative user interface (UI) 
             parent for this element if no visual parent exists.
        
            Returns: An object, if implementation of a derived class has an alternate parent 
             connection to report.
        """
        pass

    def MoveFocus(self, request):
        """
        MoveFocus(self: ContentElement, request: TraversalRequest) -> bool
        
            Attempts to move focus from this element to another element. The direction to 
             move focus is specified by a guidance direction, which is interpreted within 
             the organization of the visual parent for this element.
        
        
            request: A traversal request, which contains a property that indicates either a mode to 
             traverse in existing tab order, or a direction to move visually.
        
            Returns: true if the requested traversal was performed; otherwise, false.
        """
        pass

    def OnCreateAutomationPeer(self, *args): #cannot find CLR method
        """
        OnCreateAutomationPeer(self: ContentElement) -> AutomationPeer
        
            Returns class-specific System.Windows.Automation.Peers.AutomationPeer 
             implementations for the Windows Presentation Foundation (WPF) infrastructure.
        
            Returns: The type-specific System.Windows.Automation.Peers.AutomationPeer implementation.
        """
        pass

    def OnDragEnter(self, *args): #cannot find CLR method
        """
        OnDragEnter(self: ContentElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.DragEnter�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnDragLeave(self, *args): #cannot find CLR method
        """
        OnDragLeave(self: ContentElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.DragLeave�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnDragOver(self, *args): #cannot find CLR method
        """
        OnDragOver(self: ContentElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.DragOver�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnDrop(self, *args): #cannot find CLR method
        """
        OnDrop(self: ContentElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.DragEnter�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnGiveFeedback(self, *args): #cannot find CLR method
        """
        OnGiveFeedback(self: ContentElement, e: GiveFeedbackEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.GiveFeedback�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.GiveFeedbackEventArgs that contains the event data.
        """
        pass

    def OnGotFocus(self, *args): #cannot find CLR method
        """
        OnGotFocus(self: ContentElement, e: RoutedEventArgs)
            Raises the System.Windows.ContentElement.GotFocus�routed event by using the 
             event data provided.
        
        
            e: A System.Windows.RoutedEventArgs that contains event data. This event data must 
             contain the identifier for the System.Windows.ContentElement.GotFocus event.
        """
        pass

    def OnGotKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnGotKeyboardFocus(self: ContentElement, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.GotKeyboardFocus�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnGotMouseCapture(self, *args): #cannot find CLR method
        """
        OnGotMouseCapture(self: ContentElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.GotMouseCapture�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        """
        pass

    def OnGotStylusCapture(self, *args): #cannot find CLR method
        """
        OnGotStylusCapture(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.GotStylusCapture�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnGotTouchCapture(self, *args): #cannot find CLR method
        """
        OnGotTouchCapture(self: ContentElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.ContentElement.GotTouchCapture 
             routed event that occurs when a touch is captured to this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnIsKeyboardFocusedChanged(self, *args): #cannot find CLR method
        """
        OnIsKeyboardFocusedChanged(self: ContentElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled 
             System.Windows.ContentElement.IsKeyboardFocusedChanged event is raised on this 
             element. Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnIsKeyboardFocusWithinChanged(self, *args): #cannot find CLR method
        """
        OnIsKeyboardFocusWithinChanged(self: ContentElement, e: DependencyPropertyChangedEventArgs)
            Invoked just before the 
             System.Windows.ContentElement.IsKeyboardFocusWithinChanged event is raised by 
             this element. Implement this method to add class handling for this event.
        
        
            e: A System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnIsMouseCapturedChanged(self, *args): #cannot find CLR method
        """
        OnIsMouseCapturedChanged(self: ContentElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.ContentElement.IsMouseCapturedChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnIsMouseCaptureWithinChanged(self, *args): #cannot find CLR method
        """
        OnIsMouseCaptureWithinChanged(self: ContentElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled 
             System.Windows.ContentElement.IsMouseCaptureWithinChanged event is raised on 
             this element. Implement this method to add class handling for this event.
        
        
            e: A System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnIsMouseDirectlyOverChanged(self, *args): #cannot find CLR method
        """
        OnIsMouseDirectlyOverChanged(self: ContentElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled 
             System.Windows.ContentElement.IsMouseDirectlyOverChanged event is raised on 
             this element. Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnIsStylusCapturedChanged(self, *args): #cannot find CLR method
        """
        OnIsStylusCapturedChanged(self: ContentElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.ContentElement.IsStylusCapturedChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: A System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnIsStylusCaptureWithinChanged(self, *args): #cannot find CLR method
        """
        OnIsStylusCaptureWithinChanged(self: ContentElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled 
             System.Windows.ContentElement.IsStylusCaptureWithinChanged event is raised on 
             this element. Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnIsStylusDirectlyOverChanged(self, *args): #cannot find CLR method
        """
        OnIsStylusDirectlyOverChanged(self: ContentElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled 
             System.Windows.ContentElement.IsStylusDirectlyOverChanged event is raised on 
             this element. Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnKeyDown(self, *args): #cannot find CLR method
        """
        OnKeyDown(self: ContentElement, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.KeyDown�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        """
        pass

    def OnKeyUp(self, *args): #cannot find CLR method
        """
        OnKeyUp(self: ContentElement, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.KeyUp�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        """
        pass

    def OnLostFocus(self, *args): #cannot find CLR method
        """
        OnLostFocus(self: ContentElement, e: RoutedEventArgs)
            Raises the System.Windows.ContentElement.LostFocus�routed event by using the 
             event data that is provided.
        
        
            e: A System.Windows.RoutedEventArgs that contains event data. This event data must 
             contain the identifier for the System.Windows.ContentElement.LostFocus event.
        """
        pass

    def OnLostKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnLostKeyboardFocus(self: ContentElement, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.LostKeyboardFocus�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains event data.
        """
        pass

    def OnLostMouseCapture(self, *args): #cannot find CLR method
        """
        OnLostMouseCapture(self: ContentElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.LostMouseCapture�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains event data.
        """
        pass

    def OnLostStylusCapture(self, *args): #cannot find CLR method
        """
        OnLostStylusCapture(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.LostStylusCapture�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains event data.
        """
        pass

    def OnLostTouchCapture(self, *args): #cannot find CLR method
        """
        OnLostTouchCapture(self: ContentElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.ContentElement.LostTouchCapture 
             routed event that occurs when this element loses a touch capture.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnMouseDown(self, *args): #cannot find CLR method
        """
        OnMouseDown(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseDown�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. 
             This event data reports details about the mouse button that was pressed and the 
             handled state.
        """
        pass

    def OnMouseEnter(self, *args): #cannot find CLR method
        """
        OnMouseEnter(self: ContentElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseEnter�attached event 
             is raised on this element. Implement this method to add class handling for this 
             event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        """
        pass

    def OnMouseLeave(self, *args): #cannot find CLR method
        """
        OnMouseLeave(self: ContentElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseLeave�attached event 
             is raised on this element. Implement this method to add class handling for this 
             event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        """
        pass

    def OnMouseLeftButtonDown(self, *args): #cannot find CLR method
        """
        OnMouseLeftButtonDown(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.ContentElement.MouseLeftButtonDown�
             routed event is raised on this element. Implement this method to add class 
             handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was pressed.
        """
        pass

    def OnMouseLeftButtonUp(self, *args): #cannot find CLR method
        """
        OnMouseLeftButtonUp(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.ContentElement.MouseLeftButtonUp�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was released.
        """
        pass

    def OnMouseMove(self, *args): #cannot find CLR method
        """
        OnMouseMove(self: ContentElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseMove�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        """
        pass

    def OnMouseRightButtonDown(self, *args): #cannot find CLR method
        """
        OnMouseRightButtonDown(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.ContentElement.MouseRightButtonDown�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was pressed.
        """
        pass

    def OnMouseRightButtonUp(self, *args): #cannot find CLR method
        """
        OnMouseRightButtonUp(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.ContentElement.MouseRightButtonUp�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was released.
        """
        pass

    def OnMouseUp(self, *args): #cannot find CLR method
        """
        OnMouseUp(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseUp�routed event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the mouse button was released.
        """
        pass

    def OnMouseWheel(self, *args): #cannot find CLR method
        """
        OnMouseWheel(self: ContentElement, e: MouseWheelEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseWheel�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseWheelEventArgs that contains the event data.
        """
        pass

    def OnPreviewDragEnter(self, *args): #cannot find CLR method
        """
        OnPreviewDragEnter(self: ContentElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDragEnter�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnPreviewDragLeave(self, *args): #cannot find CLR method
        """
        OnPreviewDragLeave(self: ContentElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDragLeave�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnPreviewDragOver(self, *args): #cannot find CLR method
        """
        OnPreviewDragOver(self: ContentElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDragOver�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnPreviewDrop(self, *args): #cannot find CLR method
        """
        OnPreviewDrop(self: ContentElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDrop�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnPreviewGiveFeedback(self, *args): #cannot find CLR method
        """
        OnPreviewGiveFeedback(self: ContentElement, e: GiveFeedbackEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewGiveFeedback�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.GiveFeedbackEventArgs that contains the event data.
        """
        pass

    def OnPreviewGotKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnPreviewGotKeyboardFocus(self: ContentElement, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewGotKeyboardFocus�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnPreviewKeyDown(self, *args): #cannot find CLR method
        """
        OnPreviewKeyDown(self: ContentElement, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewKeyDown�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        """
        pass

    def OnPreviewKeyUp(self, *args): #cannot find CLR method
        """
        OnPreviewKeyUp(self: ContentElement, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewKeyUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        """
        pass

    def OnPreviewLostKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnPreviewLostKeyboardFocus(self: ContentElement, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewKeyDown�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnPreviewMouseDown(self, *args): #cannot find CLR method
        """
        OnPreviewMouseDown(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseDown attached�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that one or more mouse buttons were pressed.
        """
        pass

    def OnPreviewMouseLeftButtonDown(self, *args): #cannot find CLR method
        """
        OnPreviewMouseLeftButtonDown(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled 
             System.Windows.ContentElement.PreviewMouseLeftButtonDown�routed event reaches 
             an element in its route that is derived from this class. Implement this method 
             to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was pressed.
        """
        pass

    def OnPreviewMouseLeftButtonUp(self, *args): #cannot find CLR method
        """
        OnPreviewMouseLeftButtonUp(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled 
             System.Windows.ContentElement.PreviewMouseLeftButtonUp�routed event reaches an 
             element in its route that is derived from this class. Implement this method to 
             add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was released.
        """
        pass

    def OnPreviewMouseMove(self, *args): #cannot find CLR method
        """
        OnPreviewMouseMove(self: ContentElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseMove�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        """
        pass

    def OnPreviewMouseRightButtonDown(self, *args): #cannot find CLR method
        """
        OnPreviewMouseRightButtonDown(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled 
             System.Windows.ContentElement.PreviewMouseRightButtonDown�routed event reaches 
             an element in its route that is derived from this class. Implement this method 
             to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was pressed.
        """
        pass

    def OnPreviewMouseRightButtonUp(self, *args): #cannot find CLR method
        """
        OnPreviewMouseRightButtonUp(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled 
             System.Windows.ContentElement.PreviewMouseRightButtonUp�routed event reaches an 
             element in its route that is derived from this class. Implement this method to 
             add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was released.
        """
        pass

    def OnPreviewMouseUp(self, *args): #cannot find CLR method
        """
        OnPreviewMouseUp(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that one or more mouse buttons were released.
        """
        pass

    def OnPreviewMouseWheel(self, *args): #cannot find CLR method
        """
        OnPreviewMouseWheel(self: ContentElement, e: MouseWheelEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseWheel�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseWheelEventArgs that contains the event data.
        """
        pass

    def OnPreviewQueryContinueDrag(self, *args): #cannot find CLR method
        """
        OnPreviewQueryContinueDrag(self: ContentElement, e: QueryContinueDragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewQueryContinueDrag�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.QueryContinueDragEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusButtonDown(self, *args): #cannot find CLR method
        """
        OnPreviewStylusButtonDown(self: ContentElement, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusButtonDown�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusButtonUp(self, *args): #cannot find CLR method
        """
        OnPreviewStylusButtonUp(self: ContentElement, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusButtonUp�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusDown(self, *args): #cannot find CLR method
        """
        OnPreviewStylusDown(self: ContentElement, e: StylusDownEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusDown�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusDownEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusInAirMove(self, *args): #cannot find CLR method
        """
        OnPreviewStylusInAirMove(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusInAirMove�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusInRange(self, *args): #cannot find CLR method
        """
        OnPreviewStylusInRange(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusInRange�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusMove(self, *args): #cannot find CLR method
        """
        OnPreviewStylusMove(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusMove�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusOutOfRange(self, *args): #cannot find CLR method
        """
        OnPreviewStylusOutOfRange(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusOutOfRange�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusSystemGesture(self, *args): #cannot find CLR method
        """
        OnPreviewStylusSystemGesture(self: ContentElement, e: StylusSystemGestureEventArgs)
            Invoked when an unhandled 
             System.Windows.Input.Stylus.PreviewStylusSystemGesture�attached event reaches 
             an element in its route that is derived from this class. Implement this method 
             to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusSystemGestureEventArgs that contains the event 
             data.
        """
        pass

    def OnPreviewStylusUp(self, *args): #cannot find CLR method
        """
        OnPreviewStylusUp(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnPreviewTextInput(self, *args): #cannot find CLR method
        """
        OnPreviewTextInput(self: ContentElement, e: TextCompositionEventArgs)
            Invoked when an unhandled 
             System.Windows.Input.TextCompositionManager.PreviewTextInput�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.TextCompositionEventArgs that contains the event data.
        """
        pass

    def OnPreviewTouchDown(self, *args): #cannot find CLR method
        """
        OnPreviewTouchDown(self: ContentElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.ContentElement.PreviewTouchDown 
             routed event that occurs when a touch presses this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnPreviewTouchMove(self, *args): #cannot find CLR method
        """
        OnPreviewTouchMove(self: ContentElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.ContentElement.PreviewTouchMove 
             routed event that occurs when a touch moves while inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnPreviewTouchUp(self, *args): #cannot find CLR method
        """
        OnPreviewTouchUp(self: ContentElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.ContentElement.PreviewTouchUp 
             routed event that occurs when a touch is released inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnPropertyChanged(self, *args): #cannot find CLR method
        """
        OnPropertyChanged(self: DependencyObject, e: DependencyPropertyChangedEventArgs)
            Invoked whenever the effective value of any dependency property on this 
             System.Windows.DependencyObject has been updated. The specific dependency 
             property that changed is reported in the event data.
        
        
            e: Event data that will contain the dependency property identifier of interest, 
             the property metadata for the type, and old and new values.
        
        OnPropertyChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnQueryContinueDrag(self, *args): #cannot find CLR method
        """
        OnQueryContinueDrag(self: ContentElement, e: QueryContinueDragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.QueryContinueDrag�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.QueryContinueDragEventArgs that contains the event data.
        """
        pass

    def OnQueryCursor(self, *args): #cannot find CLR method
        """
        OnQueryCursor(self: ContentElement, e: QueryCursorEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.QueryCursor�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.QueryCursorEventArgs that contains the event data.
        """
        pass

    def OnStylusButtonDown(self, *args): #cannot find CLR method
        """
        OnStylusButtonDown(self: ContentElement, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusButtonDown�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        """
        pass

    def OnStylusButtonUp(self, *args): #cannot find CLR method
        """
        OnStylusButtonUp(self: ContentElement, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusButtonUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        """
        pass

    def OnStylusDown(self, *args): #cannot find CLR method
        """
        OnStylusDown(self: ContentElement, e: StylusDownEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusDown�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusDownEventArgs that contains the event data.
        """
        pass

    def OnStylusEnter(self, *args): #cannot find CLR method
        """
        OnStylusEnter(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusEnter�attached 
             event is raised by this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnStylusInAirMove(self, *args): #cannot find CLR method
        """
        OnStylusInAirMove(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusInAirMove�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnStylusInRange(self, *args): #cannot find CLR method
        """
        OnStylusInRange(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusInRange�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnStylusLeave(self, *args): #cannot find CLR method
        """
        OnStylusLeave(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusLeave�attached 
             event is raised by this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnStylusMove(self, *args): #cannot find CLR method
        """
        OnStylusMove(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusMove�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnStylusOutOfRange(self, *args): #cannot find CLR method
        """
        OnStylusOutOfRange(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusOutOfRange�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnStylusSystemGesture(self, *args): #cannot find CLR method
        """
        OnStylusSystemGesture(self: ContentElement, e: StylusSystemGestureEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusSystemGesture�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusSystemGestureEventArgs that contains the event 
             data.
        """
        pass

    def OnStylusUp(self, *args): #cannot find CLR method
        """
        OnStylusUp(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusUp�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnTextInput(self, *args): #cannot find CLR method
        """
        OnTextInput(self: ContentElement, e: TextCompositionEventArgs)
            Invoked when an unhandled System.Windows.Input.TextCompositionManager.TextInput�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.TextCompositionEventArgs that contains the event data.
        """
        pass

    def OnTouchDown(self, *args): #cannot find CLR method
        """
        OnTouchDown(self: ContentElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.ContentElement.TouchDown routed 
             event that occurs when a touch presses inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnTouchEnter(self, *args): #cannot find CLR method
        """
        OnTouchEnter(self: ContentElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.ContentElement.TouchEnter routed 
             event that occurs when a touch moves from outside to inside the bounds of this 
             element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnTouchLeave(self, *args): #cannot find CLR method
        """
        OnTouchLeave(self: ContentElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.ContentElement.TouchLeave routed 
             event that occurs when a touch moves from inside to outside the bounds of this 
             element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnTouchMove(self, *args): #cannot find CLR method
        """
        OnTouchMove(self: ContentElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.ContentElement.TouchMove routed 
             event that occurs when a touch moves while inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnTouchUp(self, *args): #cannot find CLR method
        """
        OnTouchUp(self: ContentElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.ContentElement.TouchUp routed 
             event that occurs when a touch is released inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def PredictFocus(self, direction):
        """
        PredictFocus(self: ContentElement, direction: FocusNavigationDirection) -> DependencyObject
        
            When overridden in a derived class, returns the element that would receive 
             focus for a specified focus traversal direction, without actually moving focus 
             to that element.
        
        
            direction: The direction of the requested focus traversal.
            Returns: The element that would have received focus if 
             System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest) 
             were actually invoked.
        """
        pass

    def RaiseEvent(self, e):
        """
        RaiseEvent(self: ContentElement, e: RoutedEventArgs)
            Raises a specific routed event. The System.Windows.RoutedEvent to be raised is 
             identified within the System.Windows.RoutedEventArgs instance that is provided 
             (as the System.Windows.RoutedEventArgs.RoutedEvent property of that event 
             data).
        
        
            e: A System.Windows.RoutedEventArgs that contains the event data and also 
             identifies the event to raise.
        """
        pass

    def ReleaseAllTouchCaptures(self):
        """
        ReleaseAllTouchCaptures(self: ContentElement)
            Releases all captured touch devices from this element.
        """
        pass

    def ReleaseMouseCapture(self):
        """
        ReleaseMouseCapture(self: ContentElement)
            Releases the mouse capture, if this element held the capture.
        """
        pass

    def ReleaseStylusCapture(self):
        """
        ReleaseStylusCapture(self: ContentElement)
            Releases the stylus device capture, if this element held the capture.
        """
        pass

    def ReleaseTouchCapture(self, touchDevice):
        """
        ReleaseTouchCapture(self: ContentElement, touchDevice: TouchDevice) -> bool
        
            Attempts to release the specified touch device from this element.
        
            touchDevice: The device to release.
            Returns: true if the touch device is released; otherwise, false.
        """
        pass

    def RemoveHandler(self, routedEvent, handler):
        """
        RemoveHandler(self: ContentElement, routedEvent: RoutedEvent, handler: Delegate)
            Removes the specified�routed event handler from this element.
        
            routedEvent: The identifier of the.routed event for which the handler is attached.
            handler: The specific handler implementation to remove from the event handler collection 
             on this element.
        """
        pass

    def ShouldSerializeCommandBindings(self):
        """
        ShouldSerializeCommandBindings(self: ContentElement) -> bool
        
            Returns whether serialization processes should serialize the contents of the 
             System.Windows.ContentElement.CommandBindings property on instances of this 
             class.
        
            Returns: true if the System.Windows.ContentElement.CommandBindings property value should 
             be serialized; otherwise, false.
        """
        pass

    def ShouldSerializeInputBindings(self):
        """
        ShouldSerializeInputBindings(self: ContentElement) -> bool
        
            Returns whether serialization processes should serialize the contents of the 
             System.Windows.ContentElement.InputBindings property on instances of this 
             class.
        
            Returns: true if the System.Windows.ContentElement.InputBindings property value should 
             be serialized; otherwise, false.
        """
        pass

    def ShouldSerializeProperty(self, *args): #cannot find CLR method
        """
        ShouldSerializeProperty(self: DependencyObject, dp: DependencyProperty) -> bool
        
            Returns a value that indicates whether serialization processes should serialize 
             the value for the provided dependency property.
        
        
            dp: The identifier for the dependency property that should be serialized.
            Returns: true if the dependency property that is supplied should be value-serialized; 
             otherwise, false.
        
        ShouldSerializeProperty(self: Window_16$17, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Label_17$18, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: TextBox_18$19, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Button_19$20, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: CheckBox_20$21, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: ComboBox_21$22, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Separator_22$23, dp: DependencyProperty) -> bool
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AllowDrop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether this element can be used as the target of a drag-and-drop operation.

Get: AllowDrop(self: ContentElement) -> bool

Set: AllowDrop(self: ContentElement) = value
"""

    AreAnyTouchesCaptured = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether at least one touch is captured to this element.

Get: AreAnyTouchesCaptured(self: ContentElement) -> bool

"""

    AreAnyTouchesCapturedWithin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.

Get: AreAnyTouchesCapturedWithin(self: ContentElement) -> bool

"""

    AreAnyTouchesDirectlyOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether at least one touch is pressed over this element.

Get: AreAnyTouchesDirectlyOver(self: ContentElement) -> bool

"""

    AreAnyTouchesOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.

Get: AreAnyTouchesOver(self: ContentElement) -> bool

"""

    CommandBindings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of System.Windows.Input.CommandBinding objects that are associated with this element.

Get: CommandBindings(self: ContentElement) -> CommandBindingCollection

"""

    Focusable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether the element can receive focus.

Get: Focusable(self: ContentElement) -> bool

Set: Focusable(self: ContentElement) = value
"""

    HasAnimatedProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether this element has any animated properties.

Get: HasAnimatedProperties(self: ContentElement) -> bool

"""

    InputBindings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the collection of input bindings that are associated with this element.

Get: InputBindings(self: ContentElement) -> InputBindingCollection

"""

    IsEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether this element is enabled in the user interface (UI).

Get: IsEnabled(self: ContentElement) -> bool

Set: IsEnabled(self: ContentElement) = value
"""

    IsEnabledCore = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that becomes the return value of System.Windows.ContentElement.IsEnabled in derived classes.

"""

    IsFocused = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that determines whether this element has logical focus.

Get: IsFocused(self: ContentElement) -> bool

"""

    IsInputMethodEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether an input method system, such as an Input Method Editor (IME), is enabled for processing the input to this element.

Get: IsInputMethodEnabled(self: ContentElement) -> bool

"""

    IsKeyboardFocused = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether this element has keyboard focus.

Get: IsKeyboardFocused(self: ContentElement) -> bool

"""

    IsKeyboardFocusWithin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether keyboard focus is anywhere within the element or child elements.

Get: IsKeyboardFocusWithin(self: ContentElement) -> bool

"""

    IsMouseCaptured = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the mouse is captured by this element.

Get: IsMouseCaptured(self: ContentElement) -> bool

"""

    IsMouseCaptureWithin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that determines whether mouse capture is held by this element or by child elements in its element�tree.

Get: IsMouseCaptureWithin(self: ContentElement) -> bool

"""

    IsMouseDirectlyOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the position of the mouse pointer corresponds to�hit test results, which take element compositing into account.

Get: IsMouseDirectlyOver(self: ContentElement) -> bool

"""

    IsMouseOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the mouse pointer is located over this element (including visual child elements, or its control compositing).

Get: IsMouseOver(self: ContentElement) -> bool

"""

    IsStylusCaptured = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the stylus is captured to this element.

Get: IsStylusCaptured(self: ContentElement) -> bool

"""

    IsStylusCaptureWithin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that determines whether stylus capture is held by this element, including child elements and control compositing.

Get: IsStylusCaptureWithin(self: ContentElement) -> bool

"""

    IsStylusDirectlyOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the stylus position corresponds to�hit test results, which take element compositing into account.

Get: IsStylusDirectlyOver(self: ContentElement) -> bool

"""

    IsStylusOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the stylus is located over this element (including visual child elements).

Get: IsStylusOver(self: ContentElement) -> bool

"""

    TouchesCaptured = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets all touch devices that are captured to this element.

Get: TouchesCaptured(self: ContentElement) -> IEnumerable[TouchDevice]

"""

    TouchesCapturedWithin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets all touch devices that are captured to this element or any child elements in its visual tree.

Get: TouchesCapturedWithin(self: ContentElement) -> IEnumerable[TouchDevice]

"""

    TouchesDirectlyOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets all touch devices that are over this element.

Get: TouchesDirectlyOver(self: ContentElement) -> IEnumerable[TouchDevice]

"""

    TouchesOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets all touch devices that are over this element or any child elements in its visual tree.

Get: TouchesOver(self: ContentElement) -> IEnumerable[TouchDevice]

"""


    AllowDropProperty = None
    AreAnyTouchesCapturedProperty = None
    AreAnyTouchesCapturedWithinProperty = None
    AreAnyTouchesDirectlyOverProperty = None
    AreAnyTouchesOverProperty = None
    DragEnter = None
    DragEnterEvent = None
    DragLeave = None
    DragLeaveEvent = None
    DragOver = None
    DragOverEvent = None
    Drop = None
    DropEvent = None
    FocusableChanged = None
    FocusableProperty = None
    GiveFeedback = None
    GiveFeedbackEvent = None
    GotFocus = None
    GotFocusEvent = None
    GotKeyboardFocus = None
    GotKeyboardFocusEvent = None
    GotMouseCapture = None
    GotMouseCaptureEvent = None
    GotStylusCapture = None
    GotStylusCaptureEvent = None
    GotTouchCapture = None
    GotTouchCaptureEvent = None
    IsEnabledChanged = None
    IsEnabledProperty = None
    IsFocusedProperty = None
    IsKeyboardFocusedChanged = None
    IsKeyboardFocusedProperty = None
    IsKeyboardFocusWithinChanged = None
    IsKeyboardFocusWithinProperty = None
    IsMouseCapturedChanged = None
    IsMouseCapturedProperty = None
    IsMouseCaptureWithinChanged = None
    IsMouseCaptureWithinProperty = None
    IsMouseDirectlyOverChanged = None
    IsMouseDirectlyOverProperty = None
    IsMouseOverProperty = None
    IsStylusCapturedChanged = None
    IsStylusCapturedProperty = None
    IsStylusCaptureWithinChanged = None
    IsStylusCaptureWithinProperty = None
    IsStylusDirectlyOverChanged = None
    IsStylusDirectlyOverProperty = None
    IsStylusOverProperty = None
    KeyDown = None
    KeyDownEvent = None
    KeyUp = None
    KeyUpEvent = None
    LostFocus = None
    LostFocusEvent = None
    LostKeyboardFocus = None
    LostKeyboardFocusEvent = None
    LostMouseCapture = None
    LostMouseCaptureEvent = None
    LostStylusCapture = None
    LostStylusCaptureEvent = None
    LostTouchCapture = None
    LostTouchCaptureEvent = None
    MouseDown = None
    MouseDownEvent = None
    MouseEnter = None
    MouseEnterEvent = None
    MouseLeave = None
    MouseLeaveEvent = None
    MouseLeftButtonDown = None
    MouseLeftButtonDownEvent = None
    MouseLeftButtonUp = None
    MouseLeftButtonUpEvent = None
    MouseMove = None
    MouseMoveEvent = None
    MouseRightButtonDown = None
    MouseRightButtonDownEvent = None
    MouseRightButtonUp = None
    MouseRightButtonUpEvent = None
    MouseUp = None
    MouseUpEvent = None
    MouseWheel = None
    MouseWheelEvent = None
    PreviewDragEnter = None
    PreviewDragEnterEvent = None
    PreviewDragLeave = None
    PreviewDragLeaveEvent = None
    PreviewDragOver = None
    PreviewDragOverEvent = None
    PreviewDrop = None
    PreviewDropEvent = None
    PreviewGiveFeedback = None
    PreviewGiveFeedbackEvent = None
    PreviewGotKeyboardFocus = None
    PreviewGotKeyboardFocusEvent = None
    PreviewKeyDown = None
    PreviewKeyDownEvent = None
    PreviewKeyUp = None
    PreviewKeyUpEvent = None
    PreviewLostKeyboardFocus = None
    PreviewLostKeyboardFocusEvent = None
    PreviewMouseDown = None
    PreviewMouseDownEvent = None
    PreviewMouseLeftButtonDown = None
    PreviewMouseLeftButtonDownEvent = None
    PreviewMouseLeftButtonUp = None
    PreviewMouseLeftButtonUpEvent = None
    PreviewMouseMove = None
    PreviewMouseMoveEvent = None
    PreviewMouseRightButtonDown = None
    PreviewMouseRightButtonDownEvent = None
    PreviewMouseRightButtonUp = None
    PreviewMouseRightButtonUpEvent = None
    PreviewMouseUp = None
    PreviewMouseUpEvent = None
    PreviewMouseWheel = None
    PreviewMouseWheelEvent = None
    PreviewQueryContinueDrag = None
    PreviewQueryContinueDragEvent = None
    PreviewStylusButtonDown = None
    PreviewStylusButtonDownEvent = None
    PreviewStylusButtonUp = None
    PreviewStylusButtonUpEvent = None
    PreviewStylusDown = None
    PreviewStylusDownEvent = None
    PreviewStylusInAirMove = None
    PreviewStylusInAirMoveEvent = None
    PreviewStylusInRange = None
    PreviewStylusInRangeEvent = None
    PreviewStylusMove = None
    PreviewStylusMoveEvent = None
    PreviewStylusOutOfRange = None
    PreviewStylusOutOfRangeEvent = None
    PreviewStylusSystemGesture = None
    PreviewStylusSystemGestureEvent = None
    PreviewStylusUp = None
    PreviewStylusUpEvent = None
    PreviewTextInput = None
    PreviewTextInputEvent = None
    PreviewTouchDown = None
    PreviewTouchDownEvent = None
    PreviewTouchMove = None
    PreviewTouchMoveEvent = None
    PreviewTouchUp = None
    PreviewTouchUpEvent = None
    QueryContinueDrag = None
    QueryContinueDragEvent = None
    QueryCursor = None
    QueryCursorEvent = None
    StylusButtonDown = None
    StylusButtonDownEvent = None
    StylusButtonUp = None
    StylusButtonUpEvent = None
    StylusDown = None
    StylusDownEvent = None
    StylusEnter = None
    StylusEnterEvent = None
    StylusInAirMove = None
    StylusInAirMoveEvent = None
    StylusInRange = None
    StylusInRangeEvent = None
    StylusLeave = None
    StylusLeaveEvent = None
    StylusMove = None
    StylusMoveEvent = None
    StylusOutOfRange = None
    StylusOutOfRangeEvent = None
    StylusSystemGesture = None
    StylusSystemGestureEvent = None
    StylusUp = None
    StylusUpEvent = None
    TextInput = None
    TextInputEvent = None
    TouchDown = None
    TouchDownEvent = None
    TouchEnter = None
    TouchEnterEvent = None
    TouchLeave = None
    TouchLeaveEvent = None
    TouchMove = None
    TouchMoveEvent = None
    TouchUp = None
    TouchUpEvent = None


class ContentOperations(object):
    """ Provides static utility methods for getting or setting the position of a System.Windows.ContentElement in an element tree. """
    @staticmethod
    def GetParent(reference):
        """
        GetParent(reference: ContentElement) -> DependencyObject
        
            Gets the parent element of the specified System.Windows.ContentElement.
        
            reference: The System.Windows.ContentElement to get the parent from.
            Returns: The parent element in the current tree.
        """
        pass

    @staticmethod
    def SetParent(reference, parent):
        """
        SetParent(reference: ContentElement, parent: DependencyObject)
            Sets the parent element of the provided System.Windows.ContentElement.
        
            reference: The System.Windows.ContentElement to reparent.
            parent: The new parent element.
        """
        pass

    __all__ = [
        'GetParent',
        'SetParent',
    ]


class CoreCompatibilityPreferences(object):
    # no doc
    EnableMultiMonitorDisplayClipping = None
    IsAltKeyRequiredInAccessKeyDefaultScope = False
    __all__ = []


class CornerRadius(object, IEquatable[CornerRadius]):
    """
    Represents the radii of a rectangle's corners.
    
    CornerRadius(uniformRadius: float)
    CornerRadius(topLeft: float, topRight: float, bottomRight: float, bottomLeft: float)
    """
    def Equals(self, *__args):
        """
        Equals(self: CornerRadius, cornerRadius: CornerRadius) -> bool
        
            Compares two System.Windows.CornerRadius structures for equality.
        
            cornerRadius: The System.Windows.CornerRadius to compare to this System.Windows.CornerRadius.
            Returns: true if cornerRadius contains the same corner radius values as this 
             System.Windows.CornerRadius; otherwise, false.
        
        Equals(self: CornerRadius, obj: object) -> bool
        
            Determines whether the specified System.Object is a System.Windows.CornerRadius 
             and whether it contains the same corner radius values as this 
             System.Windows.CornerRadius.
        
        
            obj: The System.Object to compare.
            Returns: true if obj is a System.Windows.CornerRadius and contains the same corner 
             radius values as this System.Windows.CornerRadius; otherwise, false.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: CornerRadius) -> int
        
            Returns the hash code for this System.Windows.CornerRadius.
            Returns: The hash code for this System.Windows.CornerRadius structure.
        """
        pass

    def ToString(self):
        """
        ToString(self: CornerRadius) -> str
        
            Returns the string representation of the System.Windows.CornerRadius.
            Returns: A string representation of the System.Windows.CornerRadius.
        """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__[CornerRadius]() -> CornerRadius
        
        __new__(cls: type, uniformRadius: float)
        __new__(cls: type, topLeft: float, topRight: float, bottomRight: float, bottomLeft: float)
        """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    BottomLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the radius of the bottom-left corner.

Get: BottomLeft(self: CornerRadius) -> float

Set: BottomLeft(self: CornerRadius) = value
"""

    BottomRight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the radius of the bottom-right corner.

Get: BottomRight(self: CornerRadius) -> float

Set: BottomRight(self: CornerRadius) = value
"""

    TopLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the radius of the top-left corner.

Get: TopLeft(self: CornerRadius) -> float

Set: TopLeft(self: CornerRadius) = value
"""

    TopRight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the radius of the top-right corner.

Get: TopRight(self: CornerRadius) -> float

Set: TopRight(self: CornerRadius) = value
"""



class CornerRadiusConverter(TypeConverter):
    """
    Converts instances of other types to and from a System.Windows.CornerRadius.
    
    CornerRadiusConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: CornerRadiusConverter, typeDescriptorContext: ITypeDescriptorContext, sourceType: Type) -> bool
        
            Indicates whether an object can be converted from a given type to a 
             System.Windows.CornerRadius.
        
        
            typeDescriptorContext: Describes the context information of a type.
            sourceType: The source System.Type that is being queried for conversion support.
            Returns: true if sourceType is of type System.String; otherwise, false.
        """
        pass

    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: CornerRadiusConverter, typeDescriptorContext: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Determines whether System.Windows.CornerRadius values can be converted to the 
             specified type.
        
        
            typeDescriptorContext: Describes the context information of a type.
            destinationType: The desired type this System.Windows.CornerRadius is being evaluated to be 
             converted to.
        
            Returns: true if destinationType is of type System.String; otherwise, false.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: CornerRadiusConverter, typeDescriptorContext: ITypeDescriptorContext, cultureInfo: CultureInfo, source: object) -> object
        
            Converts the specified object to a System.Windows.CornerRadius.
        
            typeDescriptorContext: Describes the context information of a type.
            cultureInfo: Describes the System.Globalization.CultureInfo of the type being converted.
            source: The object being converted.
            Returns: The System.Windows.CornerRadius created from converting source.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: CornerRadiusConverter, typeDescriptorContext: ITypeDescriptorContext, cultureInfo: CultureInfo, value: object, destinationType: Type) -> object
        
            Converts the specified System.Windows.CornerRadius to the specified type.
        
            typeDescriptorContext: Describes the context information of a type.
            cultureInfo: Describes the System.Globalization.CultureInfo of the type being converted.
            value: The System.Windows.CornerRadius to convert.
            destinationType: The type to convert the System.Windows.CornerRadius to.
            Returns: The object created from converting this System.Windows.CornerRadius (a string).
        """
        pass


class CultureInfoIetfLanguageTagConverter(TypeConverter):
    """
    Converts instances of System.Globalization.CultureInfo to and from other data types.
    
    CultureInfoIetfLanguageTagConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: CultureInfoIetfLanguageTagConverter, typeDescriptorContext: ITypeDescriptorContext, sourceType: Type) -> bool
        
            Determines whether System.Windows.CultureInfoIetfLanguageTagConverter can 
             convert from a given type.
        
        
            typeDescriptorContext: The System.ComponentModel.ITypeDescriptorContext value.
            sourceType: The System.Type being queried for conversion support.
            Returns: true if System.Windows.CultureInfoIetfLanguageTagConverter can convert; 
             otherwise, false.
        """
        pass

    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: CultureInfoIetfLanguageTagConverter, typeDescriptorContext: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Determines whether System.Windows.CultureInfoIetfLanguageTagConverter can 
             convert to a given type.
        
        
            typeDescriptorContext: The System.ComponentModel.ITypeDescriptorContext value.
            destinationType: The System.Type being queried for conversion support.
            Returns: true if System.Windows.CultureInfoIetfLanguageTagConverter can convert; 
             otherwise, false.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: CultureInfoIetfLanguageTagConverter, typeDescriptorContext: ITypeDescriptorContext, cultureInfo: CultureInfo, source: object) -> object
        
            Converts a given object type to a System.Globalization.CultureInfo object.
        
            typeDescriptorContext: The System.ComponentModel.ITypeDescriptorContext value.
            cultureInfo: The System.Globalization.CultureInfo object whose value is respected during 
             conversion.
        
            source: The System.Type being converted.
            Returns: A System.Globalization.CultureInfo object.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: CultureInfoIetfLanguageTagConverter, typeDescriptorContext: ITypeDescriptorContext, cultureInfo: CultureInfo, value: object, destinationType: Type) -> object
        
            Converts a System.Globalization.CultureInfo object to a given object type.
        
            typeDescriptorContext: The System.ComponentModel.ITypeDescriptorContext value.
            cultureInfo: The System.Globalization.CultureInfo object whose value is respected during 
             conversion.
        
            value: The object that represents the System.Globalization.CultureInfo to convert.
            destinationType: The System.Type of the returned converted object.
            Returns: A System.Object.
        """
        pass


class DataFormat(object):
    """
    Represents a data format by using a format name and numeric ID.
    
    DataFormat(name: str, id: int)
    """
    @staticmethod # known case of __new__
    def __new__(self, name, id):
        """ __new__(cls: type, name: str, id: int) """
        pass

    Id = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the numeric ID of the data format.

Get: Id(self: DataFormat) -> int

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the name of the data format.

Get: Name(self: DataFormat) -> str

"""



class DataFormats(object):
    """ Provides a set of predefined data format names that can be used to identify data formats available in the clipboard or drag-and-drop operations. """
    @staticmethod
    def GetDataFormat(*__args):
        """
        GetDataFormat(format: str) -> DataFormat
        
            Returns a System.Windows.DataFormat object that defines a name and numeric ID 
             for the specified data format. The desired data format is specified by name (a 
             string).
        
        
            format: The name of the data format to request a System.Windows.DataFormat object for.
            Returns: A System.Windows.DataFormat object that contains the numeric ID and the name of 
             the requested data format.
        
        GetDataFormat(id: int) -> DataFormat
        
            Returns a System.Windows.DataFormat object that defines a name and numeric ID 
             for the specified data format. The desired data format is specified by numeric 
             ID.
        
        
            id: The numeric ID of the data format to request a System.Windows.DataFormat object 
             for.
        
            Returns: A System.Windows.DataFormat object that contains the numeric ID and the name of 
             the requested data format.
        """
        pass

    Bitmap = 'Bitmap'
    CommaSeparatedValue = 'CSV'
    Dib = 'DeviceIndependentBitmap'
    Dif = 'DataInterchangeFormat'
    EnhancedMetafile = 'EnhancedMetafile'
    FileDrop = 'FileDrop'
    Html = 'HTML Format'
    Locale = 'Locale'
    MetafilePicture = 'MetaFilePict'
    OemText = 'OEMText'
    Palette = 'Palette'
    PenData = 'PenData'
    Riff = 'RiffAudio'
    Rtf = 'Rich Text Format'
    Serializable = 'PersistentObject'
    StringFormat = 'System.String'
    SymbolicLink = 'SymbolicLink'
    Text = 'Text'
    Tiff = 'TaggedImageFileFormat'
    UnicodeText = 'UnicodeText'
    WaveAudio = 'WaveAudio'
    Xaml = 'Xaml'
    XamlPackage = 'XamlPackage'
    __all__ = [
        'Bitmap',
        'CommaSeparatedValue',
        'Dib',
        'Dif',
        'EnhancedMetafile',
        'FileDrop',
        'GetDataFormat',
        'Html',
        'Locale',
        'MetafilePicture',
        'OemText',
        'Palette',
        'PenData',
        'Riff',
        'Rtf',
        'Serializable',
        'StringFormat',
        'SymbolicLink',
        'Text',
        'Tiff',
        'UnicodeText',
        'WaveAudio',
        'Xaml',
        'XamlPackage',
    ]


class IDataObject:
    """ Provides a format-independent mechanism for transferring data. """
    def GetData(self, format, autoConvert=None):
        """
        GetData(self: IDataObject, format: str, autoConvert: bool) -> object
        
            Retrieves a data object in a specified format, optionally converting the data 
             to the specified format.
        
        
            format: A string that specifies what format to retrieve the data as. See the 
             System.Windows.DataFormats class for a set of predefined data formats.
        
            autoConvert: true to attempt to automatically convert the data to the specified format; 
             false for no data format conversion.�If this parameter is false, the method 
             returns data in the specified format if available, or null if the data is not 
             available in the specified format.
        
            Returns: A data object with the data in the specified format, or null if the data is not 
             available in the specified format.
        
        GetData(self: IDataObject, format: Type) -> object
        
            Retrieves a data object in a specified format; the data format is specified by 
             a System.Type object.
        
        
            format: A System.Type object that specifies what format to retrieve the data as. See 
             the System.Windows.DataFormats class for a set of predefined data formats.
        
            Returns: A data object with the data in the specified format, or null if the data is not 
             available in the specified format.
        
        GetData(self: IDataObject, format: str) -> object
        
            Retrieves a data object in a specified format; the data format is specified by 
             a string.
        
        
            format: A string that specifies what format to retrieve the data as. See the 
             System.Windows.DataFormats class for a set of predefined data formats.
        
            Returns: A data object with the data in the specified format, or null if the data is not 
             available in the specified format.
        """
        pass

    def GetDataPresent(self, format, autoConvert=None):
        """
        GetDataPresent(self: IDataObject, format: str, autoConvert: bool) -> bool
        
            Checks to see whether the data is available in, or can be converted to, a 
             specified format. A Boolean flag indicates whether to check if the data can be 
             converted to the specified format, if it is not available in that format.
        
        
            format: A string that specifies what format to check for. See the 
             System.Windows.DataFormats class for a set of pre-defined data formats.
        
            autoConvert: false to only check for the specified format; true to also check whether or not 
             data stored in this data object can be converted to the specified format.
        
            Returns: true if the data is in, or can be converted to, the specified format; 
             otherwise, false.
        
        GetDataPresent(self: IDataObject, format: Type) -> bool
        
            Checks to see whether the data is available in, or can be converted to, a 
             specified format. The data format is specified by a System.Type object.
        
        
            format: A System.Type that specifies what format to check for. See the 
             System.Windows.DataFormats class for a set of predefined data formats.
        
            Returns: true if the data is in, or can be converted to, the specified format; 
             otherwise, false.
        
        GetDataPresent(self: IDataObject, format: str) -> bool
        
            Checks to see whether the data is available in, or can be converted to, a 
             specified format; the data format is specified by a string.
        
        
            format: A string that specifies what format to check for. See the 
             System.Windows.DataFormats class for a set of pre-defined data formats.
        
            Returns: true if the data is in, or can be converted to, the specified format; 
             otherwise, false.
        """
        pass

    def GetFormats(self, autoConvert=None):
        """
        GetFormats(self: IDataObject, autoConvert: bool) -> Array[str]
        
            Returns a list of all formats that the data in this data object is stored in. A 
             Boolean flag indicates whether or not to also include formats that the data can 
             be automatically converted to.
        
        
            autoConvert: true to retrieve all formats that data stored in this data object is stored in, 
             or can be converted to; false to retrieve only formats that data stored in this 
             data object is stored in (excluding formats that the data is not stored in, but 
             can be automatically converted to).
        
            Returns: An array of strings, with each string specifying the name of a format supported 
             by this data object.
        
        GetFormats(self: IDataObject) -> Array[str]
        
            Returns a list of all formats that the data in this data object is stored in, 
             or can be converted to.
        
            Returns: An array of strings, with each string specifying the name of a format supported 
             by this data object.
        """
        pass

    def SetData(self, *__args):
        """
        SetData(self: IDataObject, format: Type, data: object)
            Stores the specified data in this data object, along with one or more specified 
             data formats. The data format is specified by a System.Type class.
        
        
            format: A System.Type that specifies what format to store the data in. See the 
             System.Windows.DataFormats class for a set of predefined data formats.
        
            data: The data to store in this data object.
        SetData(self: IDataObject, format: str, data: object, autoConvert: bool)
            Stores the specified data in this data object, along with one or more specified 
             data formats. This overload includes a Boolean flag to indicate whether the 
             data may be converted to another format on retrieval.
        
        
            format: A string that specifies what format to store the data in. See the 
             System.Windows.DataFormats class for a set of pre-defined data formats.
        
            data: The data to store in this data object.
            autoConvert: true to allow the data to be converted to another format on retrieval; false to 
             prohibit the data from being converted to another format on retrieval.
        
        SetData(self: IDataObject, data: object)
            Stores the specified data in this data object, automatically converting the 
             data format from the source object type.
        
        
            data: The data to store in this data object.
        SetData(self: IDataObject, format: str, data: object)
            Stores the specified data in this data object, along with one or more specified 
             data formats. The data format is specified by a string.
        
        
            format: A string that specifies what format to store the data in. See the 
             System.Windows.DataFormats class for a set of pre-defined data formats.
        
            data: The data to store in this data object.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class DataObject(object, IDataObject, IDataObject):
    """
    Provides a basic implementation of the System.Windows.IDataObject interface, which defines a format-independent mechanism for transferring data.
    
    DataObject()
    DataObject(data: object)
    DataObject(format: str, data: object)
    DataObject(format: Type, data: object)
    DataObject(format: str, data: object, autoConvert: bool)
    """
    @staticmethod
    def AddCopyingHandler(element, handler):
        """
        AddCopyingHandler(element: DependencyObject, handler: DataObjectCopyingEventHandler)
            Adds a System.Windows.DataObject.Copying event handler to a specified 
             dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) to which to add the event handler.
        
            handler: A delegate that references the handler method to add.
        """
        pass

    @staticmethod
    def AddPastingHandler(element, handler):
        """
        AddPastingHandler(element: DependencyObject, handler: DataObjectPastingEventHandler)
            Adds a System.Windows.DataObject.Pasting event handler to a specified 
             dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) to which to add the event handler.
        
            handler: A delegate that references the handler method to add.
        """
        pass

    @staticmethod
    def AddSettingDataHandler(element, handler):
        """
        AddSettingDataHandler(element: DependencyObject, handler: DataObjectSettingDataEventHandler)
            Adds a System.Windows.DataObject.SettingData event handler to a specified 
             dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) to which to add the event handler.
        
            handler: A delegate that references the handler method to add.
        """
        pass

    def ContainsAudio(self):
        """
        ContainsAudio(self: DataObject) -> bool
        
            Queries a data object for the presence of data in the 
             System.Windows.DataFormats.WaveAudio data format.
        
            Returns: true if the data object contains data in the 
             System.Windows.DataFormats.WaveAudio data format; otherwise, false.
        """
        pass

    def ContainsFileDropList(self):
        """
        ContainsFileDropList(self: DataObject) -> bool
        
            Queries a data object for the presence of data in the 
             System.Windows.DataFormats.FileDrop data format.
        
            Returns: true if the data object contains data in the 
             System.Windows.DataFormats.FileDrop data format; otherwise, false.
        """
        pass

    def ContainsImage(self):
        """
        ContainsImage(self: DataObject) -> bool
        
            Queries a data object for the presence of data in the 
             System.Windows.DataFormats.Bitmap data format.
        
            Returns: true if the data object contains data in the System.Windows.DataFormats.Bitmap 
             data format; otherwise, false.
        """
        pass

    def ContainsText(self, format=None):
        """
        ContainsText(self: DataObject, format: TextDataFormat) -> bool
        
            Queries a data object for the presence of data in a text data format.
        
            format: A member of the System.Windows.TextDataFormat enumeration that specifies the 
             text data format to query for.
        
            Returns: true if the data object contains data in a text data format; otherwise, false.
        ContainsText(self: DataObject) -> bool
        
            Queries a data object for the presence of data in the 
             System.Windows.DataFormats.UnicodeText format.
        
            Returns: true if the data object contains data in the 
             System.Windows.DataFormats.UnicodeText data format; otherwise, false.
        """
        pass

    def GetAudioStream(self):
        """
        GetAudioStream(self: DataObject) -> Stream
        
            Returns a stream that contains data in the System.Windows.DataFormats.WaveAudio 
             data format.
        
            Returns: A stream that contains data in the System.Windows.DataFormats.WaveAudio format, 
             or null if the data is unavailable in this format.
        """
        pass

    def GetData(self, format, autoConvert=None):
        """
        GetData(self: DataObject, format: Type) -> object
        
            Returns a data object in a format specified by a System.Type object.
        
            format: A System.Type that specifies the format for the data. For a set of predefined 
             data formats, see the System.Windows.DataFormats class.
        
            Returns: A data object with the data in the specified format, or null if the data is 
             unavailable in the specified format.
        
        GetData(self: DataObject, format: str) -> object
        
            Returns data in a format specified by a string.
        
            format: A string that specifies the format for the data. For a set of predefined data 
             formats, see the System.Windows.DataFormats class.
        
            Returns: An object that contains the data in the specified format, or null if the data 
             is unavailable in the specified format.
        
        GetData(self: DataObject, format: str, autoConvert: bool) -> object
        
            Returns a data object in a specified format, optionally converting the data to 
             the specified format.
        
        
            format: A string that specifies the format for the data. For a set of predefined data 
             formats, see the System.Windows.DataFormats class.
        
            autoConvert: true to attempt to automatically convert the data to the specified format; 
             false for no data format conversion.
        
            Returns: A data object with the data in the specified format, or null if the data is 
             unavailable in the specified format.If the autoConvert parameter is true and 
             the data cannot be converted to the specified format, or if automatic 
             conversion is disabled (by calling 
             System.Windows.DataObject.SetData(System.String,System.Object,System.Boolean) 
             with the autoConvert parameter set to false), this method returns null.
        """
        pass

    def GetDataPresent(self, format, autoConvert=None):
        """
        GetDataPresent(self: DataObject, format: str) -> bool
        
            Determines whether the data is available in, or can be converted to, a format 
             specified by a string.
        
        
            format: A string that specifies the format for the data. For a set of predefined data 
             formats, see the System.Windows.DataFormats class.
        
            Returns: true if the data is in, or can be converted to, the specified format; 
             otherwise, false.
        
        GetDataPresent(self: DataObject, format: str, autoConvert: bool) -> bool
        
            Determines whether the data is available in, or can be converted to, a 
             specified format. A Boolean flag indicates whether to check if the data can be 
             converted to the specified format if it is not available in that format.
        
        
            format: A string that specifies the data format to check. For a set of predefined data 
             formats, see the System.Windows.DataFormats class.
        
            autoConvert: false to check only for the specified format; true to also check whether data 
             stored in this data object can be converted to the specified format.
        
            Returns: true if the data is in, or can be converted to, the specified format; 
             otherwise, false.
        
        GetDataPresent(self: DataObject, format: Type) -> bool
        
            Determines whether the data is available in, or can be converted to, a format 
             specified by a System.Type object.
        
        
            format: A System.Type that specifies the data format to check. F or a set of predefined 
             data formats, see the System.Windows.DataFormats class.
        
            Returns: true if the data is in, or can be converted to, the specified format; 
             otherwise, false.
        """
        pass

    def GetFileDropList(self):
        """
        GetFileDropList(self: DataObject) -> StringCollection
        
            Returns a string collection that contains a list of dropped files.
            Returns: A collection of strings, where each string specifies the name of a file in the 
             list of dropped files, or null if the data is unavailable in this format.
        """
        pass

    def GetFormats(self, autoConvert=None):
        """
        GetFormats(self: DataObject) -> Array[str]
        
            Returns a list of formats in which the data in this data object is stored, or 
             can be converted to.
        
            Returns: An array of strings, with each string specifying the name of a format that this 
             data object supports.
        
        GetFormats(self: DataObject, autoConvert: bool) -> Array[str]
        
            Returns a list of formats in which the data in this data object is stored. A 
             Boolean flag indicates whether to also include formats that the data can be 
             automatically converted to.
        
        
            autoConvert: true to retrieve all formats in which the data in this data object is stored, 
             or can be converted to; false to retrieve only formats in which the data in 
             this data object is stored.
        
            Returns: An array of strings, with each string specifying the name of a format supported 
             by this data object.
        """
        pass

    def GetImage(self):
        """
        GetImage(self: DataObject) -> BitmapSource
        
            Returns a System.Windows.Media.Imaging.BitmapSource object that contains data 
             in the System.Windows.DataFormats.Bitmap format.
        
            Returns: A System.Windows.Media.Imaging.BitmapSource object that contains data in the 
             System.Windows.DataFormats.Bitmap format, or null if the data is unavailable in 
             this format.
        """
        pass

    def GetText(self, format=None):
        """
        GetText(self: DataObject, format: TextDataFormat) -> str
        
            Returns a string that contains text data of the specified format in this data 
             object.
        
        
            format: A member of System.Windows.TextDataFormat that specifies the specific text data 
             format to retrieve.
        
            Returns: A string containing text data in the specified data format, or an empty string 
             if no corresponding text data is available.
        
        GetText(self: DataObject) -> str
        
            Returns a string that contains the System.Windows.DataFormats.UnicodeText data 
             in this data object.
        
            Returns: A string that contains the System.Windows.DataFormats.UnicodeText data, or an 
             empty string if no System.Windows.DataFormats.UnicodeText data is available.
        """
        pass

    @staticmethod
    def RemoveCopyingHandler(element, handler):
        """
        RemoveCopyingHandler(element: DependencyObject, handler: DataObjectCopyingEventHandler)
            Removes a System.Windows.DataObject.Copying event handler from a specified 
             dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) from which to remove the event handler.
        
            handler: A delegate that references the handler method to remove.
        """
        pass

    @staticmethod
    def RemovePastingHandler(element, handler):
        """
        RemovePastingHandler(element: DependencyObject, handler: DataObjectPastingEventHandler)
            Removes a System.Windows.DataObject.Pasting event handler from a specified 
             dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) from which to remove the event handler.
        
            handler: A delegate that references the handler method to remove.
        """
        pass

    @staticmethod
    def RemoveSettingDataHandler(element, handler):
        """
        RemoveSettingDataHandler(element: DependencyObject, handler: DataObjectSettingDataEventHandler)
            Removes a System.Windows.DataObject.SettingData event handler from a specified 
             dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) from which to remove the event handler.
        
            handler: A delegate that references the handler method to remove.
        """
        pass

    def SetAudio(self, *__args):
        """
        SetAudio(self: DataObject, audioStream: Stream)
            Stores audio data (System.Windows.DataFormats.WaveAudio data format) in this 
             data object.  The audio data is specified as a stream.
        
        
            audioStream: A stream that contains audio data to store in the data object.
        SetAudio(self: DataObject, audioBytes: Array[Byte])
            Stores audio data (System.Windows.DataFormats.WaveAudio data format) in this 
             data object. The audio data is specified as a byte array.
        
        
            audioBytes: A byte array that contains audio data to store in the data object.
        """
        pass

    def SetData(self, *__args):
        """
        SetData(self: DataObject, format: Type, data: object)
            Stores the specified data in this data object, along with one or more specified 
             data formats; the data format is specified by a System.Type object.
        
        
            format: A System.Type object that specifies the format for the data. For a set of 
             predefined data formats, see the System.Windows.DataFormats class.
        
            data: An object that represents the data to store in this data object.
        SetData(self: DataObject, format: str, data: object, autoConvert: bool)
            Stores the specified data in this data object, along with one or more specified 
             data formats. This overload includes a Boolean flag to indicate whether the 
             data can be converted to another format on retrieval.
        
        
            format: A string that specifies the format for the data. For a set of predefined data 
             formats, see the System.Windows.DataFormats class.
        
            data: An object that represents the data to store in this data object.
            autoConvert: true to allow the data to be converted to another format on retrieval; false to 
             prohibit the data from being converted to another format on retrieval.
        
        SetData(self: DataObject, data: object)
            Stores the specified data in this data object, automatically determining the 
             data format from the source object type.
        
        
            data: An object that represents the data to store in this data object.
        SetData(self: DataObject, format: str, data: object)
            Stores the specified data in this data object, along with one or more specified 
             data formats; the data format is specified by a string.
        
        
            format: A string that specifies the format for the data. For a set of predefined data 
             formats, see the System.Windows.DataFormats class.
        
            data: An object that represents the data to store in this data object.
        """
        pass

    def SetFileDropList(self, fileDropList):
        """
        SetFileDropList(self: DataObject, fileDropList: StringCollection)
            Stores System.Windows.DataFormats.FileDrop data in this data object.  The 
             dropped file list is specified as a string collection.
        
        
            fileDropList: A string collection that contains the dropped file list to store in the data 
             object.
        """
        pass

    def SetImage(self, image):
        """
        SetImage(self: DataObject, image: BitmapSource)
            Stores System.Windows.DataFormats.Bitmap data in this data object.  The image 
             data is specified as a System.Windows.Media.Imaging.BitmapSource.
        
        
            image: A System.Windows.Media.Imaging.BitmapSource object that contains the image data 
             to store in the data object.
        """
        pass

    def SetText(self, textData, format=None):
        """
        SetText(self: DataObject, textData: str, format: TextDataFormat)
            Stores text data in this data object. The format of the text data to store is 
             specified with a member of System.Windows.TextDataFormat.
        
        
            textData: A string that contains the text data to store in the data object.
            format: A member of System.Windows.TextDataFormat that specifies the text data format 
             to store.
        
        SetText(self: DataObject, textData: str)
            Stores System.Windows.DataFormats.UnicodeText data, specified as a string, in 
             this data object.
        
        
            textData: A string that contains the System.Windows.DataFormats.UnicodeText data to store 
             in the data object.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type)
        __new__(cls: type, data: object)
        __new__(cls: type, format: str, data: object)
        __new__(cls: type, format: Type, data: object)
        __new__(cls: type, format: str, data: object, autoConvert: bool)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    CopyingEvent = None
    PastingEvent = None
    SettingDataEvent = None


class RoutedEventArgs(EventArgs):
    """
    Contains state information and event data associated with a routed event.
    
    RoutedEventArgs()
    RoutedEventArgs(routedEvent: RoutedEvent)
    RoutedEventArgs(routedEvent: RoutedEvent, source: object)
    """
    def InvokeEventHandler(self, *args): #cannot find CLR method
        """
        InvokeEventHandler(self: RoutedEventArgs, genericHandler: Delegate, genericTarget: object)
            When overridden in a derived class, provides a way to invoke event handlers in 
             a type-specific way, which can increase efficiency over the base 
             implementation.
        
        
            genericHandler: The generic handler / delegate implementation to be invoked.
            genericTarget: The target on which the provided handler should be invoked.
        """
        pass

    def OnSetSource(self, *args): #cannot find CLR method
        """
        OnSetSource(self: RoutedEventArgs, source: object)
            When overridden in a derived class, provides a notification callback entry 
             point whenever the value of the System.Windows.RoutedEventArgs.Source property 
             of an instance changes.
        
        
            source: The new value that System.Windows.RoutedEventArgs.Source is being set to.
        """
        pass

    @staticmethod # known case of __new__
    def __new__(self, routedEvent=None, source=None):
        """
        __new__(cls: type)
        __new__(cls: type, routedEvent: RoutedEvent)
        __new__(cls: type, routedEvent: RoutedEvent, source: object)
        """
        pass

    Handled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates the present state of the event handling for a routed event as it travels the route.

Get: Handled(self: RoutedEventArgs) -> bool

Set: Handled(self: RoutedEventArgs) = value
"""

    OriginalSource = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the original reporting source as determined by pure hit testing, before any possible System.Windows.RoutedEventArgs.Source adjustment by a parent class.

Get: OriginalSource(self: RoutedEventArgs) -> object

"""

    RoutedEvent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.RoutedEventArgs.RoutedEvent associated with this System.Windows.RoutedEventArgs instance.

Get: RoutedEvent(self: RoutedEventArgs) -> RoutedEvent

Set: RoutedEvent(self: RoutedEventArgs) = value
"""

    Source = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a reference to the object that raised the event.

Get: Source(self: RoutedEventArgs) -> object

Set: Source(self: RoutedEventArgs) = value
"""



class DataObjectEventArgs(RoutedEventArgs):
    """ Provides an abstract base class for events associated with the System.Windows.DataObject class. """
    def CancelCommand(self):
        """
        CancelCommand(self: DataObjectEventArgs)
            Cancels the associated command or operation.
        """
        pass

    CommandCancelled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether the associated command or operation has been canceled.

Get: CommandCancelled(self: DataObjectEventArgs) -> bool

"""

    IsDragDrop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether the associated event is part of a drag-and-drop operation.

Get: IsDragDrop(self: DataObjectEventArgs) -> bool

"""



class DataObjectCopyingEventArgs(DataObjectEventArgs):
    """
    Arguments for the System.Windows.DataObject.System.Windows.DataObject.Copying event.
    
    DataObjectCopyingEventArgs(dataObject: IDataObject, isDragDrop: bool)
    """
    @staticmethod # known case of __new__
    def __new__(self, dataObject, isDragDrop):
        """ __new__(cls: type, dataObject: IDataObject, isDragDrop: bool) """
        pass

    DataObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the data object associated with the System.Windows.DataObject.Copying event.

Get: DataObject(self: DataObjectCopyingEventArgs) -> IDataObject

"""



class DataObjectCopyingEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """
    Represents a method that will handle the System.Windows.DataObject.Copying�attached event.
    
    DataObjectCopyingEventHandler(object: object, method: IntPtr)
    """
    def BeginInvoke(self, sender, e, callback, object):
        """ BeginInvoke(self: DataObjectCopyingEventHandler, sender: object, e: DataObjectCopyingEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        pass

    def CombineImpl(self, *args): #cannot find CLR method
        """
        CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate
        
            Combines this System.Delegate with the specified System.Delegate to form a new 
             delegate.
        
        
            follow: The delegate to combine with this delegate.
            Returns: A delegate that is the new root of the System.MulticastDelegate invocation list.
        """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """
        DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object
        
            Dynamically invokes (late-bound) the method represented by the current delegate.
        
            args: An array of objects that are the arguments to pass to the method represented by 
             the current delegate.-or- null, if the method represented by the current 
             delegate does not require arguments.
        
            Returns: The object returned by the method represented by the delegate.
        """
        pass

    def EndInvoke(self, result):
        """ EndInvoke(self: DataObjectCopyingEventHandler, result: IAsyncResult) """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """
        GetMethodImpl(self: MulticastDelegate) -> MethodInfo
        
            Returns a static method represented by the current System.MulticastDelegate.
            Returns: A static method represented by the current System.MulticastDelegate.
        """
        pass

    def Invoke(self, sender, e):
        """ Invoke(self: DataObjectCopyingEventHandler, sender: object, e: DataObjectCopyingEventArgs) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """
        RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate
        
            Removes an element from the invocation list of this System.MulticastDelegate 
             that is equal to the specified delegate.
        
        
            value: The delegate to search for in the invocation list.
            Returns: If value is found in the invocation list for this instance, then a new 
             System.Delegate without value in its invocation list; otherwise, this instance 
             with its original invocation list.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, object, method):
        """ __new__(cls: type, object: object, method: IntPtr) """
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class DataObjectPastingEventArgs(DataObjectEventArgs):
    """
    Contains arguments for the System.Windows.DataObject.System.Windows.DataObject.Pasting event.
    
    DataObjectPastingEventArgs(dataObject: IDataObject, isDragDrop: bool, formatToApply: str)
    """
    @staticmethod # known case of __new__
    def __new__(self, dataObject, isDragDrop, formatToApply):
        """ __new__(cls: type, dataObject: IDataObject, isDragDrop: bool, formatToApply: str) """
        pass

    DataObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a suggested System.Windows.DataObject to use for the paste operation.

Get: DataObject(self: DataObjectPastingEventArgs) -> IDataObject

Set: DataObject(self: DataObjectPastingEventArgs) = value
"""

    FormatToApply = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a string specifying the suggested data format to use for the paste operation.

Get: FormatToApply(self: DataObjectPastingEventArgs) -> str

Set: FormatToApply(self: DataObjectPastingEventArgs) = value
"""

    SourceDataObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a copy of the original data object associated with the paste operation.

Get: SourceDataObject(self: DataObjectPastingEventArgs) -> IDataObject

"""



class DataObjectPastingEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """
    Represents a method that will handle the System.Windows.DataObject.Pasting�attached event.
    
    DataObjectPastingEventHandler(object: object, method: IntPtr)
    """
    def BeginInvoke(self, sender, e, callback, object):
        """ BeginInvoke(self: DataObjectPastingEventHandler, sender: object, e: DataObjectPastingEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        pass

    def CombineImpl(self, *args): #cannot find CLR method
        """
        CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate
        
            Combines this System.Delegate with the specified System.Delegate to form a new 
             delegate.
        
        
            follow: The delegate to combine with this delegate.
            Returns: A delegate that is the new root of the System.MulticastDelegate invocation list.
        """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """
        DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object
        
            Dynamically invokes (late-bound) the method represented by the current delegate.
        
            args: An array of objects that are the arguments to pass to the method represented by 
             the current delegate.-or- null, if the method represented by the current 
             delegate does not require arguments.
        
            Returns: The object returned by the method represented by the delegate.
        """
        pass

    def EndInvoke(self, result):
        """ EndInvoke(self: DataObjectPastingEventHandler, result: IAsyncResult) """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """
        GetMethodImpl(self: MulticastDelegate) -> MethodInfo
        
            Returns a static method represented by the current System.MulticastDelegate.
            Returns: A static method represented by the current System.MulticastDelegate.
        """
        pass

    def Invoke(self, sender, e):
        """ Invoke(self: DataObjectPastingEventHandler, sender: object, e: DataObjectPastingEventArgs) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """
        RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate
        
            Removes an element from the invocation list of this System.MulticastDelegate 
             that is equal to the specified delegate.
        
        
            value: The delegate to search for in the invocation list.
            Returns: If value is found in the invocation list for this instance, then a new 
             System.Delegate without value in its invocation list; otherwise, this instance 
             with its original invocation list.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, object, method):
        """ __new__(cls: type, object: object, method: IntPtr) """
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class DataObjectSettingDataEventArgs(DataObjectEventArgs):
    """
    Contains arguments for the System.Windows.DataObject.System.Windows.DataObject.SettingData event.
    
    DataObjectSettingDataEventArgs(dataObject: IDataObject, format: str)
    """
    @staticmethod # known case of __new__
    def __new__(self, dataObject, format):
        """ __new__(cls: type, dataObject: IDataObject, format: str) """
        pass

    DataObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the System.Windows.DataObject associated with the System.Windows.DataObject.SettingData event.

Get: DataObject(self: DataObjectSettingDataEventArgs) -> IDataObject

"""

    Format = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a string specifying the new data format that is being added to the accompanying data object.

Get: Format(self: DataObjectSettingDataEventArgs) -> str

"""



class DataObjectSettingDataEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """
    Represents a method that will handle the System.Windows.DataObject.SettingData�attached event.
    
    DataObjectSettingDataEventHandler(object: object, method: IntPtr)
    """
    def BeginInvoke(self, sender, e, callback, object):
        """ BeginInvoke(self: DataObjectSettingDataEventHandler, sender: object, e: DataObjectSettingDataEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        pass

    def CombineImpl(self, *args): #cannot find CLR method
        """
        CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate
        
            Combines this System.Delegate with the specified System.Delegate to form a new 
             delegate.
        
        
            follow: The delegate to combine with this delegate.
            Returns: A delegate that is the new root of the System.MulticastDelegate invocation list.
        """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """
        DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object
        
            Dynamically invokes (late-bound) the method represented by the current delegate.
        
            args: An array of objects that are the arguments to pass to the method represented by 
             the current delegate.-or- null, if the method represented by the current 
             delegate does not require arguments.
        
            Returns: The object returned by the method represented by the delegate.
        """
        pass

    def EndInvoke(self, result):
        """ EndInvoke(self: DataObjectSettingDataEventHandler, result: IAsyncResult) """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """
        GetMethodImpl(self: MulticastDelegate) -> MethodInfo
        
            Returns a static method represented by the current System.MulticastDelegate.
            Returns: A static method represented by the current System.MulticastDelegate.
        """
        pass

    def Invoke(self, sender, e):
        """ Invoke(self: DataObjectSettingDataEventHandler, sender: object, e: DataObjectSettingDataEventArgs) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """
        RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate
        
            Removes an element from the invocation list of this System.MulticastDelegate 
             that is equal to the specified delegate.
        
        
            value: The delegate to search for in the invocation list.
            Returns: If value is found in the invocation list for this instance, then a new 
             System.Delegate without value in its invocation list; otherwise, this instance 
             with its original invocation list.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, object, method):
        """ __new__(cls: type, object: object, method: IntPtr) """
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class FrameworkTemplate(DispatcherObject, INameScope, ISealable, IHaveResources, IQueryAmbient):
    """ Enables the instantiation of a tree of System.Windows.FrameworkElement and/or System.Windows.FrameworkContentElement objects. """
    def FindName(self, name, templatedParent):
        """
        FindName(self: FrameworkTemplate, name: str, templatedParent: FrameworkElement) -> object
        
            Finds the element associated with the specified name defined within this 
             template.
        
        
            name: The string name.
            templatedParent: The context of the System.Windows.FrameworkElement where this template is 
             applied.
        
            Returns: The element associated with the specified name.
        """
        pass

    def LoadContent(self):
        """
        LoadContent(self: FrameworkTemplate) -> DependencyObject
        
            Loads the content of the template as an instance of an object and returns the 
             root element of the content.
        
            Returns: The root element of the content. Calling this multiple times returns separate 
             instances.
        """
        pass

    def RegisterName(self, name, scopedElement):
        """
        RegisterName(self: FrameworkTemplate, name: str, scopedElement: object)
            Registers a new name/object pair into the current name scope.
        
            name: The name to register.
            scopedElement: The object to be mapped to the provided name.
        """
        pass

    def Seal(self):
        """
        Seal(self: FrameworkTemplate)
            Locks the template so it cannot be changed.
        """
        pass

    def ShouldSerializeResources(self, manager):
        """
        ShouldSerializeResources(self: FrameworkTemplate, manager: XamlDesignerSerializationManager) -> bool
        
            Returns a value that indicates whether serialization processes should serialize 
             the value of the System.Windows.FrameworkTemplate.Resources property on 
             instances of this class.
        
        
            manager: The System.Windows.Markup.XamlDesignerSerializationManager.
            Returns: true if the System.Windows.FrameworkTemplate.Resources property value should be 
             serialized; otherwise, false.
        """
        pass

    def ShouldSerializeVisualTree(self):
        """
        ShouldSerializeVisualTree(self: FrameworkTemplate) -> bool
        
            Returns a value that indicates whether serialization processes should serialize 
             the value of the System.Windows.FrameworkTemplate.VisualTree property on 
             instances of this class.
        
            Returns: true if the System.Windows.FrameworkTemplate.VisualTree property value should 
             be serialized; otherwise, false.
        """
        pass

    def UnregisterName(self, name):
        """
        UnregisterName(self: FrameworkTemplate, name: str)
            Removes a name/object mapping from the XAML namescope.
        
            name: The name of the mapping to remove.
        """
        pass

    def ValidateTemplatedParent(self, *args): #cannot find CLR method
        """
        ValidateTemplatedParent(self: FrameworkTemplate, templatedParent: FrameworkElement)
            When overridden in a derived class, supplies rules for the element this 
             template is applied to.
        
        
            templatedParent: The element this template is applied to.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    HasContent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether this template has optimized content.

Get: HasContent(self: FrameworkTemplate) -> bool

"""

    IsSealed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether this object is in an immutable state so it cannot be changed.

Get: IsSealed(self: FrameworkTemplate) -> bool

"""

    Resources = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the collection of resources that can be used within the scope of this template.

Get: Resources(self: FrameworkTemplate) -> ResourceDictionary

Set: Resources(self: FrameworkTemplate) = value
"""

    Template = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a reference to the object that records or plays the XAML nodes for the template when the template is defined or applied by a writer.

Get: Template(self: FrameworkTemplate) -> TemplateContent

Set: Template(self: FrameworkTemplate) = value
"""

    VisualTree = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the root node of the template.

Get: VisualTree(self: FrameworkTemplate) -> FrameworkElementFactory

Set: VisualTree(self: FrameworkTemplate) = value
"""



class DataTemplate(FrameworkTemplate, INameScope, ISealable, IHaveResources, IQueryAmbient):
    """
    Describes the visual structure of a data object.
    
    DataTemplate()
    DataTemplate(dataType: object)
    """
    def ValidateTemplatedParent(self, *args): #cannot find CLR method
        """
        ValidateTemplatedParent(self: DataTemplate, templatedParent: FrameworkElement)
            Checks the templated parent against a set of rules.
        
            templatedParent: The element this template is applied to.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, dataType=None):
        """
        __new__(cls: type)
        __new__(cls: type, dataType: object)
        """
        pass

    DataTemplateKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default key of the System.Windows.DataTemplate.

Get: DataTemplateKey(self: DataTemplate) -> object

"""

    DataType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the type for which this System.Windows.DataTemplate is intended.

Get: DataType(self: DataTemplate) -> object

Set: DataType(self: DataTemplate) = value
"""

    Triggers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of triggers that apply property values or perform actions based on one or more conditions.

Get: Triggers(self: DataTemplate) -> TriggerCollection

"""



class TemplateKey(ResourceKey, ISupportInitialize):
    """ When used as a resource key for a data template, allows the data template to participate in the lookup process. """
    def Equals(self, o):
        """
        Equals(self: TemplateKey, o: object) -> bool
        
            Returns a value that indicates whether the given instance is identical to this 
             instance of System.Windows.TemplateKey.
        
        
            o: The object to compare for equality.
            Returns: true if the two instances are identical; otherwise, false.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: TemplateKey) -> int
        
            Returns the hash code for this instance of System.Windows.TemplateKey.
            Returns: The hash code for this instance of System.Windows.TemplateKey.
        """
        pass

    def ToString(self):
        """
        ToString(self: TemplateKey) -> str
        
            Returns a string representation of this System.Windows.TemplateKey.
            Returns: A string representation of this System.Windows.TemplateKey.
        """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *args): #cannot find CLR constructor
        """
        __new__(cls: type, templateType: TemplateType)
        __new__(cls: type, templateType: TemplateType, dataType: object)
        """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Assembly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the assembly that contains the template definition.

Get: Assembly(self: TemplateKey) -> Assembly

"""

    DataType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the type for which the template is designed.

Get: DataType(self: TemplateKey) -> object

Set: DataType(self: TemplateKey) = value
"""


    TemplateType = None


class DataTemplateKey(TemplateKey, ISupportInitialize):
    """
    Represents the resource key for the System.Windows.DataTemplate class.
    
    DataTemplateKey()
    DataTemplateKey(dataType: object)
    """
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, dataType=None):
        """
        __new__(cls: type)
        __new__(cls: type, dataType: object)
        """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass


class TriggerBase(DependencyObject):
    """ Represents the base class for specifying a conditional value within a System.Windows.Style object. """
    EnterActions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of System.Windows.TriggerAction objects to apply when the trigger object becomes active. This property does not apply to the System.Windows.EventTrigger class.

Get: EnterActions(self: TriggerBase) -> TriggerActionCollection

"""

    ExitActions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of System.Windows.TriggerAction objects to apply when the trigger object becomes inactive. This property does not apply to the System.Windows.EventTrigger class.

Get: ExitActions(self: TriggerBase) -> TriggerActionCollection

"""



class DataTrigger(TriggerBase, IAddChild):
    """
    Represents a trigger that applies property values or performs actions when the bound data meets a specified condition.
    
    DataTrigger()
    """
    def OnPropertyChanged(self, *args): #cannot find CLR method
        """
        OnPropertyChanged(self: DependencyObject, e: DependencyPropertyChangedEventArgs)
            Invoked whenever the effective value of any dependency property on this 
             System.Windows.DependencyObject has been updated. The specific dependency 
             property that changed is reported in the event data.
        
        
            e: Event data that will contain the dependency property identifier of interest, 
             the property metadata for the type, and old and new values.
        
        OnPropertyChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    @staticmethod
    def ReceiveMarkupExtension(targetObject, eventArgs):
        """
        ReceiveMarkupExtension(targetObject: object, eventArgs: XamlSetMarkupExtensionEventArgs)
            Handles cases where a markup extension provides a value for a property of a 
             System.Windows.DataTrigger object.
        
        
            targetObject: The object where the markup extension sets the value.
            eventArgs: Data that is relevant for markup extension processing.
        """
        pass

    def ShouldSerializeProperty(self, *args): #cannot find CLR method
        """
        ShouldSerializeProperty(self: DependencyObject, dp: DependencyProperty) -> bool
        
            Returns a value that indicates whether serialization processes should serialize 
             the value for the provided dependency property.
        
        
            dp: The identifier for the dependency property that should be serialized.
            Returns: true if the dependency property that is supplied should be value-serialized; 
             otherwise, false.
        
        ShouldSerializeProperty(self: Window_16$17, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Label_17$18, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: TextBox_18$19, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Button_19$20, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: CheckBox_20$21, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: ComboBox_21$22, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Separator_22$23, dp: DependencyProperty) -> bool
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Binding = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the binding that produces the property value of the data object.

Get: Binding(self: DataTrigger) -> BindingBase

Set: Binding(self: DataTrigger) = value
"""

    Setters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of System.Windows.Setter objects, which describe the property values to apply when the data item meets the specified condition.

Get: Setters(self: DataTrigger) -> SetterBaseCollection

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the value to be compared with the property value of the data object.

Get: Value(self: DataTrigger) -> object

Set: Value(self: DataTrigger) = value
"""



class DeferrableContent(object):
    """ Represents deferrable content that is held within BAML as a stream. """

class DeferrableContentConverter(TypeConverter):
    """
    Converts a stream to a System.Windows.DeferrableContent instance.
    
    DeferrableContentConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: DeferrableContentConverter, context: ITypeDescriptorContext, sourceType: Type) -> bool
        
            Returns whether this converter can convert the specified object to a 
             System.Windows.DeferrableContent object.
        
        
            context: An System.ComponentModel.ITypeDescriptorContext that provides a format context.
            sourceType: A System.Type that represents the type you want to convert from.
            Returns: true if this converter can perform the conversion; otherwise, false.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: DeferrableContentConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object) -> object
        
            Converts the specified stream to a new System.Windows.DeferrableContent object.
        
            context: An System.ComponentModel.ITypeDescriptorContext that provides a format context.
            culture: The System.Globalization.CultureInfo to use as the current culture.
            value: The source stream to convert.
            Returns: A new System.Windows.DeferrableContent object.
        """
        pass


class DependencyObjectType(object):
    """ Implements an underlying type cache for all System.Windows.DependencyObject derived types. """
    @staticmethod
    def FromSystemType(systemType):
        """
        FromSystemType(systemType: Type) -> DependencyObjectType
        
            Returns a System.Windows.DependencyObjectType that represents a given system 
             (CLR) type.
        
        
            systemType: The system (CLR) type to convert.
            Returns: A System.Windows.DependencyObjectType that represents the system (CLR) type.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: DependencyObjectType) -> int
        
            Returns the hash code for this System.Windows.DependencyObjectType.
            Returns: A 32-bit signed integer hash code.
        """
        pass

    def IsInstanceOfType(self, dependencyObject):
        """
        IsInstanceOfType(self: DependencyObjectType, dependencyObject: DependencyObject) -> bool
        
            Determines whether the specified object is an instance of the current 
             System.Windows.DependencyObjectType.
        
        
            dependencyObject: The object to compare with the current System.Windows.DependencyObjectType.
            Returns: true if the class represented by the current 
             System.Windows.DependencyObjectType is in the inheritance hierarchy of the 
             System.Windows.DependencyObject passed as d; otherwise, false.
        """
        pass

    def IsSubclassOf(self, dependencyObjectType):
        """
        IsSubclassOf(self: DependencyObjectType, dependencyObjectType: DependencyObjectType) -> bool
        
            Determines whether the current System.Windows.DependencyObjectType derives from 
             the specified System.Windows.DependencyObjectType.
        
        
            dependencyObjectType: The System.Windows.DependencyObjectType to compare.
            Returns: true if the dependencyObjectType parameter and the current 
             System.Windows.DependencyObjectType represent types of classes, and the class 
             represented by the current System.Windows.DependencyObjectType derives from the 
             class represented by dependencyObjectType. Otherwise, false. This method also 
             returns false if dependencyObjectType and the current 
             System.Windows.DependencyObjectType represent the same class.
        """
        pass

    BaseType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the System.Windows.DependencyObjectType of the immediate base class of the current System.Windows.DependencyObjectType.

Get: BaseType(self: DependencyObjectType) -> DependencyObjectType

"""

    Id = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a zero-based unique identifier for constant-time array lookup operations.

Get: Id(self: DependencyObjectType) -> int

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the name of the represented common language runtime (CLR) system type.

Get: Name(self: DependencyObjectType) -> str

"""

    SystemType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the common language runtime (CLR) system type represented by this System.Windows.DependencyObjectType.

Get: SystemType(self: DependencyObjectType) -> Type

"""



class DependencyProperty(object):
    """ Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance. """
    def AddOwner(self, ownerType, typeMetadata=None):
        """
        AddOwner(self: DependencyProperty, ownerType: Type, typeMetadata: PropertyMetadata) -> DependencyProperty
        
            Adds another type as an owner of a dependency property that has already been 
             registered, providing dependency property metadata for the dependency property 
             as it will exist on the provided owner type.
        
        
            ownerType: The type to add as owner of this dependency property.
            typeMetadata: The metadata that qualifies the dependency property as it exists on the 
             provided type.
        
            Returns: A reference to the original System.Windows.DependencyProperty identifier that 
             identifies the dependency property. This identifier should be exposed by the 
             adding class as a public�static�readonly field.
        
        AddOwner(self: DependencyProperty, ownerType: Type) -> DependencyProperty
        
            Adds another type as an owner of a dependency property that has already been 
             registered.
        
        
            ownerType: The type to add as an owner of this dependency property.
            Returns: A reference to the original System.Windows.DependencyProperty identifier that 
             identifies the dependency property. This identifier should be exposed by the 
             adding class as a public static readonly field.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: DependencyProperty) -> int
        
            Returns a hash code for this System.Windows.DependencyProperty.
            Returns: The hash code for this System.Windows.DependencyProperty.
        """
        pass

    def GetMetadata(self, *__args):
        """
        GetMetadata(self: DependencyProperty, dependencyObjectType: DependencyObjectType) -> PropertyMetadata
        
            Returns the metadata for this dependency property as it exists on a specified 
             type.
        
        
            dependencyObjectType: A specific object that records the dependency object type from which the 
             dependency property metadata is desired.
        
            Returns: A property metadata object.
        GetMetadata(self: DependencyProperty, dependencyObject: DependencyObject) -> PropertyMetadata
        
            Returns the metadata for this dependency property as it exists on the specified 
             object instance.
        
        
            dependencyObject: A dependency object that is checked for type, to determine which type-specific 
             version of the dependency property the metadata should come from.
        
            Returns: A property metadata object.
        GetMetadata(self: DependencyProperty, forType: Type) -> PropertyMetadata
        
            Returns the metadata for this dependency property as it exists on a specified 
             existing type.
        
        
            forType: The specific type from which to retrieve the dependency property metadata.
            Returns: A property metadata object.
        """
        pass

    def IsValidType(self, value):
        """
        IsValidType(self: DependencyProperty, value: object) -> bool
        
            Determines whether a specified value is acceptable for this dependency 
             property's type, as checked against the property type provided in the original 
             dependency property registration.
        
        
            value: The value to check.
            Returns: true if the specified value is the registered property type or an acceptable 
             derived type; otherwise, false.
        """
        pass

    def IsValidValue(self, value):
        """
        IsValidValue(self: DependencyProperty, value: object) -> bool
        
            Determines whether the provided value is accepted for the type of property 
             through basic type checking, and also potentially if it is within the allowed 
             range of values for that type.
        
        
            value: The value to check.
            Returns: true if the value is acceptable and is of the correct type or a derived type; 
             otherwise, false.
        """
        pass

    def OverrideMetadata(self, forType, typeMetadata, key=None):
        """
        OverrideMetadata(self: DependencyProperty, forType: Type, typeMetadata: PropertyMetadata, key: DependencyPropertyKey)
            Supplies alternate metadata for a read-only dependency property when it is 
             present on instances of a specified type, overriding the metadata that was 
             provided in the initial dependency property registration. You must pass the 
             System.Windows.DependencyPropertyKey for the read-only dependency property to 
             avoid raising an exception.
        
        
            forType: The type where this dependency property is inherited and where the provided 
             alternate metadata will be applied.
        
            typeMetadata: The metadata to apply to the dependency property on the overriding type.
            key: The access key for a read-only dependency property.
        OverrideMetadata(self: DependencyProperty, forType: Type, typeMetadata: PropertyMetadata)
            Specifies alternate metadata for this dependency property when it is present on 
             instances of a specified type, overriding the metadata that existed for the 
             dependency property as it was inherited from base types.
        
        
            forType: The type where this dependency property is inherited and where the provided 
             alternate metadata will be applied.
        
            typeMetadata: The metadata to apply to the dependency property on the overriding type.
        """
        pass

    @staticmethod
    def Register(name, propertyType, ownerType, typeMetadata=None, validateValueCallback=None):
        """
        Register(name: str, propertyType: Type, ownerType: Type, typeMetadata: PropertyMetadata, validateValueCallback: ValidateValueCallback) -> DependencyProperty
        
            Registers a dependency property with the specified property name, property 
             type, owner type, property metadata, and a value validation callback for the 
             property.
        
        
            name: The name of the dependency property to register.
            propertyType: The type of the property.
            ownerType: The owner type that is registering the dependency property.
            typeMetadata: Property metadata for the dependency property.
            validateValueCallback: A reference to a callback that should perform any custom validation of the 
             dependency property value beyond typical type validation.
        
            Returns: A dependency property identifier that should be used to set the value of a 
             public�static�readonly field in your class. That identifier is then used to 
             reference the dependency property later, for operations such as setting its 
             value programmatically or obtaining metadata.
        
        Register(name: str, propertyType: Type, ownerType: Type, typeMetadata: PropertyMetadata) -> DependencyProperty
        
            Registers a dependency property with the specified property name, property 
             type, owner type, and property metadata.
        
        
            name: The name of the dependency property to register.
            propertyType: The type of the property.
            ownerType: The owner type that is registering the dependency property.
            typeMetadata: Property metadata for the dependency property.
            Returns: A dependency property identifier that should be used to set the value of a 
             public�static�readonly field in your class. That identifier is then used to 
             reference the dependency property later, for operations such as setting its 
             value programmatically or obtaining metadata.
        
        Register(name: str, propertyType: Type, ownerType: Type) -> DependencyProperty
        
            Registers a dependency property with the specified property name, property 
             type, and owner type.
        
        
            name: The name of the dependency property to register. The name must be unique within 
             the registration namespace of the owner type.
        
            propertyType: The type of the property.
            ownerType: The owner type that is registering the dependency property.
            Returns: A dependency property identifier that should be used to set the value of a 
             public static readonly field in your class. That identifier is then used to 
             reference the dependency property later, for operations such as setting its 
             value programmatically or obtaining metadata.
        """
        pass

    @staticmethod
    def RegisterAttached(name, propertyType, ownerType, defaultMetadata=None, validateValueCallback=None):
        """
        RegisterAttached(name: str, propertyType: Type, ownerType: Type, defaultMetadata: PropertyMetadata, validateValueCallback: ValidateValueCallback) -> DependencyProperty
        
            Registers an attached property with the specified property type, owner type, 
             property metadata, and value validation callback for the property.
        
        
            name: The name of the dependency property to register.
            propertyType: The type of the property.
            ownerType: The owner type that is registering the dependency property.
            defaultMetadata: Property metadata for the dependency property. This can include the default 
             value as well as other characteristics.
        
            validateValueCallback: A reference to a callback that should perform any custom validation of the 
             dependency property value beyond typical type validation.
        
            Returns: A dependency property identifier that should be used to set the value of a 
             public static readonly field in your class. That identifier is then used to 
             reference the dependency property later, for operations such as setting its 
             value programmatically or obtaining metadata.
        
        RegisterAttached(name: str, propertyType: Type, ownerType: Type, defaultMetadata: PropertyMetadata) -> DependencyProperty
        
            Registers an attached property with the specified property name, property type, 
             owner type, and property metadata.
        
        
            name: The name of the dependency property to register.
            propertyType: The type of the property.
            ownerType: The owner type that is registering the dependency property.
            defaultMetadata: Property metadata for the dependency property. This can include the default 
             value as well as other characteristics.
        
            Returns: A dependency property identifier that should be used to set the value of a 
             public�static�readonly field in your class. That identifier is then used to 
             reference the dependency property later, for operations such as setting its 
             value programmatically or obtaining metadata.
        
        RegisterAttached(name: str, propertyType: Type, ownerType: Type) -> DependencyProperty
        
            Registers an attached property with the specified property name, property type, 
             and owner type.
        
        
            name: The name of the dependency property to register.
            propertyType: The type of the property.
            ownerType: The owner type that is registering the dependency property.
            Returns: A dependency property identifier that should be used to set the value of a 
             public�static�readonly field in your class. That identifier is then used to 
             reference the dependency property later, for operations such as setting its 
             value programmatically or obtaining metadata.
        """
        pass

    @staticmethod
    def RegisterAttachedReadOnly(name, propertyType, ownerType, defaultMetadata, validateValueCallback=None):
        """
        RegisterAttachedReadOnly(name: str, propertyType: Type, ownerType: Type, defaultMetadata: PropertyMetadata, validateValueCallback: ValidateValueCallback) -> DependencyPropertyKey
        
            Registers a read-only attached property, with the specified property type, 
             owner type, property metadata, and a validation callback.
        
        
            name: The name of the dependency property to register.
            propertyType: The type of the property.
            ownerType: The owner type that is registering the dependency property.
            defaultMetadata: Property metadata for the dependency property.
            validateValueCallback: A reference to a user-created callback that should perform any custom 
             validation of the dependency property value beyond typical type validation.
        
            Returns: A dependency property key that should be used to set the value of a static 
             read-only field in your class, which is then used to reference the dependency 
             property.
        
        RegisterAttachedReadOnly(name: str, propertyType: Type, ownerType: Type, defaultMetadata: PropertyMetadata) -> DependencyPropertyKey
        
            Registers a read-only attached property, with the specified property type, 
             owner type, and property metadata.
        
        
            name: The name of the dependency property to register.
            propertyType: The type of the property.
            ownerType: The owner type that is registering the dependency property.
            defaultMetadata: Property metadata for the dependency property.
            Returns: A dependency property key that should be used to set the value of a static 
             read-only field in your class, which is then used to reference the dependency 
             property later.
        """
        pass

    @staticmethod
    def RegisterReadOnly(name, propertyType, ownerType, typeMetadata, validateValueCallback=None):
        """
        RegisterReadOnly(name: str, propertyType: Type, ownerType: Type, typeMetadata: PropertyMetadata, validateValueCallback: ValidateValueCallback) -> DependencyPropertyKey
        
            Registers a read-only dependency property, with the specified property type, 
             owner type, property metadata, and a validation callback.
        
        
            name: The name of the dependency property to register.
            propertyType: The type of the property.
            ownerType: The owner type that is registering the dependency property.
            typeMetadata: Property metadata for the dependency property.
            validateValueCallback: A reference to a user-created callback that should perform any custom 
             validation of the dependency property value beyond typical type validation.
        
            Returns: A dependency property key that should be used to set the value of a static 
             read-only field in your class, which is then used to reference the dependency 
             property later.
        
        RegisterReadOnly(name: str, propertyType: Type, ownerType: Type, typeMetadata: PropertyMetadata) -> DependencyPropertyKey
        
            Registers a read-only dependency property, with the specified property type, 
             owner type, and property metadata.
        
        
            name: The name of the dependency property to register.
            propertyType: The type of the property.
            ownerType: The owner type that is registering the dependency property.
            typeMetadata: Property metadata for the dependency property.
            Returns: A dependency property key that should be used to set the value of a static 
             read-only field in your class, which is then used to reference the dependency 
             property.
        """
        pass

    def ToString(self):
        """
        ToString(self: DependencyProperty) -> str
        
            Returns the string representation of the dependency property.
            Returns: The string representation of the dependency property.
        """
        pass

    DefaultMetadata = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the default metadata of the dependency property.

Get: DefaultMetadata(self: DependencyProperty) -> PropertyMetadata

"""

    GlobalIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets an internally generated value that uniquely identifies the dependency property.

Get: GlobalIndex(self: DependencyProperty) -> int

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the name of the dependency property.

Get: Name(self: DependencyProperty) -> str

"""

    OwnerType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.

Get: OwnerType(self: DependencyProperty) -> Type

"""

    PropertyType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the type that the dependency property uses for its value.

Get: PropertyType(self: DependencyProperty) -> Type

"""

    ReadOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the dependency property identified by this System.Windows.DependencyProperty instance is a read-only dependency property.

Get: ReadOnly(self: DependencyProperty) -> bool

"""

    ValidateValueCallback = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the value validation callback for the dependency property.

Get: ValidateValueCallback(self: DependencyProperty) -> ValidateValueCallback

"""


    UnsetValue = None


class DependencyPropertyChangedEventArgs(object):
    """
    Provides data for various property changed events. Typically these events report effective value changes in the value of a read-only dependency property. Another usage is as part of a System.Windows.PropertyChangedCallback implementation.
    
    DependencyPropertyChangedEventArgs(property: DependencyProperty, oldValue: object, newValue: object)
    """
    def Equals(self, *__args):
        """
        Equals(self: DependencyPropertyChangedEventArgs, args: DependencyPropertyChangedEventArgs) -> bool
        
            Determines whether the provided 
             System.Windows.DependencyPropertyChangedEventArgs is equivalent to the current 
             System.Windows.DependencyPropertyChangedEventArgs.
        
        
            args: The System.Windows.DependencyPropertyChangedEventArgs to compare to the current 
             System.Windows.DependencyPropertyChangedEventArgs
        
            Returns: true if the provided System.Windows.DependencyPropertyChangedEventArgs is 
             equivalent to the current System.Windows.DependencyPropertyChangedEventArgs; 
             otherwise, false.
        
        Equals(self: DependencyPropertyChangedEventArgs, obj: object) -> bool
        
            Determines whether the provided object is equivalent to the current 
             System.Windows.DependencyPropertyChangedEventArgs.
        
        
            obj: The object to compare to the current 
             System.Windows.DependencyPropertyChangedEventArgs.
        
            Returns: true if the provided object is equivalent to the current 
             System.Windows.DependencyPropertyChangedEventArgs; otherwise, false.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: DependencyPropertyChangedEventArgs) -> int
        
            Gets a hash code  for this System.Windows.DependencyPropertyChangedEventArgs.
            Returns: A signed 32-bit integer hash code.
        """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    @staticmethod # known case of __new__
    def __new__(self, property, oldValue, newValue):
        """
        __new__(cls: type, property: DependencyProperty, oldValue: object, newValue: object)
        __new__[DependencyPropertyChangedEventArgs]() -> DependencyPropertyChangedEventArgs
        """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    NewValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the value of the property after the change.

Get: NewValue(self: DependencyPropertyChangedEventArgs) -> object

"""

    OldValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the value of the property before the change.

Get: OldValue(self: DependencyPropertyChangedEventArgs) -> object

"""

    Property = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the identifier for the dependency property where the value change occurred.

Get: Property(self: DependencyPropertyChangedEventArgs) -> DependencyProperty

"""



class DependencyPropertyChangedEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """
    Represents the method that will handle events raised when a System.Windows.DependencyProperty is changed on a particular System.Windows.DependencyObject implementation.
    
    DependencyPropertyChangedEventHandler(object: object, method: IntPtr)
    """
    def BeginInvoke(self, sender, e, callback, object):
        """ BeginInvoke(self: DependencyPropertyChangedEventHandler, sender: object, e: DependencyPropertyChangedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        pass

    def CombineImpl(self, *args): #cannot find CLR method
        """
        CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate
        
            Combines this System.Delegate with the specified System.Delegate to form a new 
             delegate.
        
        
            follow: The delegate to combine with this delegate.
            Returns: A delegate that is the new root of the System.MulticastDelegate invocation list.
        """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """
        DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object
        
            Dynamically invokes (late-bound) the method represented by the current delegate.
        
            args: An array of objects that are the arguments to pass to the method represented by 
             the current delegate.-or- null, if the method represented by the current 
             delegate does not require arguments.
        
            Returns: The object returned by the method represented by the delegate.
        """
        pass

    def EndInvoke(self, result):
        """ EndInvoke(self: DependencyPropertyChangedEventHandler, result: IAsyncResult) """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """
        GetMethodImpl(self: MulticastDelegate) -> MethodInfo
        
            Returns a static method represented by the current System.MulticastDelegate.
            Returns: A static method represented by the current System.MulticastDelegate.
        """
        pass

    def Invoke(self, sender, e):
        """ Invoke(self: DependencyPropertyChangedEventHandler, sender: object, e: DependencyPropertyChangedEventArgs) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """
        RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate
        
            Removes an element from the invocation list of this System.MulticastDelegate 
             that is equal to the specified delegate.
        
        
            value: The delegate to search for in the invocation list.
            Returns: If value is found in the invocation list for this instance, then a new 
             System.Delegate without value in its invocation list; otherwise, this instance 
             with its original invocation list.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, object, method):
        """ __new__(cls: type, object: object, method: IntPtr) """
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class DependencyPropertyHelper(object):
    """ Provides a single helper method (System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)) that reports the property system source for the effective value of a dependency property. """
    @staticmethod
    def GetValueSource(dependencyObject, dependencyProperty):
        """
        GetValueSource(dependencyObject: DependencyObject, dependencyProperty: DependencyProperty) -> ValueSource
        
            Returns a structure that reports various metadata and property system 
             characteristics of a specified dependency property on a particular 
             System.Windows.DependencyObject.
        
        
            dependencyObject: The element that contains the dependencyProperty to report information for.
            dependencyProperty: The identifier for the dependency property to report information for.
            Returns: A System.Windows.ValueSource structure that reports the specific information.
        """
        pass

    __all__ = [
        'GetValueSource',
    ]


class DependencyPropertyKey(object):
    """ Provides a dependency property identifier for limited write access to a read-only dependency property. """
    def OverrideMetadata(self, forType, typeMetadata):
        """
        OverrideMetadata(self: DependencyPropertyKey, forType: Type, typeMetadata: PropertyMetadata)
            Overrides the metadata of a read-only dependency property that is represented 
             by this dependency property identifier.
        
        
            forType: The type on which this dependency property exists and metadata should be 
             overridden.
        
            typeMetadata: Metadata supplied for this type.
        """
        pass

    DependencyProperty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the dependency property identifier associated with this specialized read-only dependency property identifier.

Get: DependencyProperty(self: DependencyPropertyKey) -> DependencyProperty

"""



class DialogResultConverter(TypeConverter):
    """
    Converts the System.Windows.Window.DialogResult property, which is a System.Nullable value of type System.Boolean, to and from other types.
    
    DialogResultConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: DialogResultConverter, typeDescriptorContext: ITypeDescriptorContext, sourceType: Type) -> bool
        
            System.Windows.DialogResultConverter does not support converting from other 
             types to System.Windows.Window.DialogResult (a System.Nullable value of type 
             System.Boolean).
        
        
            typeDescriptorContext: A System.ComponentModel.ITypeDescriptorContext that provides a format context.
            sourceType: A System.Type that represents the type to convert from.
            Returns: A System.Boolean that always returns false.
        """
        pass

    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: DialogResultConverter, typeDescriptorContext: ITypeDescriptorContext, destinationType: Type) -> bool
        
            System.Windows.DialogResultConverter does not support converting from 
             System.Windows.Window.DialogResult (a System.Nullable value of type 
             System.Boolean) to other types.
        
        
            typeDescriptorContext: A System.ComponentModel.ITypeDescriptorContext that provides a format context.
            destinationType: A System.Type that represents the type to convert to.
            Returns: A System.Boolean that always returns false.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: DialogResultConverter, typeDescriptorContext: ITypeDescriptorContext, cultureInfo: CultureInfo, source: object) -> object
        
            System.Windows.DialogResultConverter does not support converting from 
             System.Windows.Window.DialogResult (a System.Nullable value of type 
             System.Boolean) to other types.
        
        
            typeDescriptorContext: A System.ComponentModel.ITypeDescriptorContext that provides a format context.
            cultureInfo: The System.Globalization.CultureInfo to use as the current culture. If null is 
             passed, the current culture is assumed.
        
            source: The System.Object to convert.
            Returns: Always raises System.InvalidOperationException.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: DialogResultConverter, typeDescriptorContext: ITypeDescriptorContext, cultureInfo: CultureInfo, value: object, destinationType: Type) -> object
        
            System.Windows.DialogResultConverter does not support converting from other 
             types to System.Windows.Window.DialogResult (a System.Nullable value of type 
             System.Boolean).
        
        
            typeDescriptorContext: A System.ComponentModel.ITypeDescriptorContext that provides a format context.
            cultureInfo: The System.Globalization.CultureInfo to use as the current culture. If null is 
             passed, the current culture is assumed.
        
            value: The System.Object to convert.
            destinationType: The System.Type to convert the value parameter to.
            Returns: Always raises System.InvalidOperationException.
        """
        pass


class DpiChangedEventArgs(RoutedEventArgs):
    # no doc
    NewDpi = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NewDpi(self: DpiChangedEventArgs) -> DpiScale

"""

    OldDpi = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OldDpi(self: DpiChangedEventArgs) -> DpiScale

"""



class DpiChangedEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ DpiChangedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender, e, callback, object):
        """ BeginInvoke(self: DpiChangedEventHandler, sender: object, e: DpiChangedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        pass

    def CombineImpl(self, *args): #cannot find CLR method
        """
        CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate
        
            Combines this System.Delegate with the specified System.Delegate to form a new 
             delegate.
        
        
            follow: The delegate to combine with this delegate.
            Returns: A delegate that is the new root of the System.MulticastDelegate invocation list.
        """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """
        DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object
        
            Dynamically invokes (late-bound) the method represented by the current delegate.
        
            args: An array of objects that are the arguments to pass to the method represented by 
             the current delegate.-or- null, if the method represented by the current 
             delegate does not require arguments.
        
            Returns: The object returned by the method represented by the delegate.
        """
        pass

    def EndInvoke(self, result):
        """ EndInvoke(self: DpiChangedEventHandler, result: IAsyncResult) """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """
        GetMethodImpl(self: MulticastDelegate) -> MethodInfo
        
            Returns a static method represented by the current System.MulticastDelegate.
            Returns: A static method represented by the current System.MulticastDelegate.
        """
        pass

    def Invoke(self, sender, e):
        """ Invoke(self: DpiChangedEventHandler, sender: object, e: DpiChangedEventArgs) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """
        RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate
        
            Removes an element from the invocation list of this System.MulticastDelegate 
             that is equal to the specified delegate.
        
        
            value: The delegate to search for in the invocation list.
            Returns: If value is found in the invocation list for this instance, then a new 
             System.Delegate without value in its invocation list; otherwise, this instance 
             with its original invocation list.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, object, method):
        """ __new__(cls: type, object: object, method: IntPtr) """
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class DpiScale(object):
    """ DpiScale(dpiScaleX: float, dpiScaleY: float) """
    @staticmethod # known case of __new__
    def __new__(self, dpiScaleX, dpiScaleY):
        """
        __new__[DpiScale]() -> DpiScale
        
        __new__(cls: type, dpiScaleX: float, dpiScaleY: float)
        """
        pass

    DpiScaleX = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DpiScaleX(self: DpiScale) -> float

"""

    DpiScaleY = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DpiScaleY(self: DpiScale) -> float

"""

    PixelsPerDip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PixelsPerDip(self: DpiScale) -> float

"""

    PixelsPerInchX = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PixelsPerInchX(self: DpiScale) -> float

"""

    PixelsPerInchY = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PixelsPerInchY(self: DpiScale) -> float

"""



class DragAction(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies how and if a drag-and-drop operation should continue.
    
    enum DragAction, values: Cancel (2), Continue (0), Drop (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Cancel = None
    Continue = None
    Drop = None
    value__ = None


class DragDrop(object):
    """ Provides helper methods and fields for initiating drag-and-drop operations, including a method to begin a drag-and-drop operation, and facilities for adding and removing drag-and-drop related event handlers. """
    @staticmethod
    def AddDragEnterHandler(element, handler):
        """
        AddDragEnterHandler(element: DependencyObject, handler: DragEventHandler)
            Adds a System.Windows.UIElement.DragEnter event handler to a specified 
             dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) to which to add the event handler.
        
            handler: A delegate that references the handler method to be added.
        """
        pass

    @staticmethod
    def AddDragLeaveHandler(element, handler):
        """
        AddDragLeaveHandler(element: DependencyObject, handler: DragEventHandler)
            Adds a System.Windows.UIElement.DragLeave event handler to a specified 
             dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) to which to add the event handler.
        
            handler: A delegate that references the handler method to be added.
        """
        pass

    @staticmethod
    def AddDragOverHandler(element, handler):
        """
        AddDragOverHandler(element: DependencyObject, handler: DragEventHandler)
            Adds a System.Windows.UIElement.DragOver event handler to a specified 
             dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) to which to add the event handler.
        
            handler: A delegate that references the handler method to be added.
        """
        pass

    @staticmethod
    def AddDropHandler(element, handler):
        """
        AddDropHandler(element: DependencyObject, handler: DragEventHandler)
            Adds a System.Windows.UIElement.Drop event handler to a specified dependency 
             object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) to which to add the event handler.
        
            handler: A delegate that references the handler method to be added.
        """
        pass

    @staticmethod
    def AddGiveFeedbackHandler(element, handler):
        """
        AddGiveFeedbackHandler(element: DependencyObject, handler: GiveFeedbackEventHandler)
            Adds a System.Windows.UIElement.GiveFeedback event handler to a specified 
             dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) to which to add the event handler.
        
            handler: A delegate that references the handler method to be added.
        """
        pass

    @staticmethod
    def AddPreviewDragEnterHandler(element, handler):
        """
        AddPreviewDragEnterHandler(element: DependencyObject, handler: DragEventHandler)
            Adds a System.Windows.UIElement.PreviewDragEnter event handler to a specified 
             dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) to which to add the event handler.
        
            handler: A delegate that references the handler method to be added.
        """
        pass

    @staticmethod
    def AddPreviewDragLeaveHandler(element, handler):
        """
        AddPreviewDragLeaveHandler(element: DependencyObject, handler: DragEventHandler)
            Adds a System.Windows.UIElement.PreviewDragLeave event handler to a specified 
             dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) to which to add the event handler.
        
            handler: A delegate that references the handler method to be added.
        """
        pass

    @staticmethod
    def AddPreviewDragOverHandler(element, handler):
        """
        AddPreviewDragOverHandler(element: DependencyObject, handler: DragEventHandler)
            Adds a System.Windows.UIElement.PreviewDragOver event handler to a specified 
             dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) to which to add the event handler.
        
            handler: A delegate that references the handler method to be added.
        """
        pass

    @staticmethod
    def AddPreviewDropHandler(element, handler):
        """
        AddPreviewDropHandler(element: DependencyObject, handler: DragEventHandler)
            Adds a System.Windows.UIElement.PreviewDrop event handler to a specified 
             dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) to which to add the event handler.
        
            handler: A delegate that references the handler method to be added.
        """
        pass

    @staticmethod
    def AddPreviewGiveFeedbackHandler(element, handler):
        """
        AddPreviewGiveFeedbackHandler(element: DependencyObject, handler: GiveFeedbackEventHandler)
            Adds a System.Windows.UIElement.PreviewGiveFeedback event handler to a 
             specified dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) to which to add the event handler.
        
            handler: A delegate that references the handler method to be added.
        """
        pass

    @staticmethod
    def AddPreviewQueryContinueDragHandler(element, handler):
        """
        AddPreviewQueryContinueDragHandler(element: DependencyObject, handler: QueryContinueDragEventHandler)
            Adds a System.Windows.UIElement.PreviewQueryContinueDrag event handler to a 
             specified dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) to which to add the event handler.
        
            handler: A delegate that references the handler method to be added.
        """
        pass

    @staticmethod
    def AddQueryContinueDragHandler(element, handler):
        """
        AddQueryContinueDragHandler(element: DependencyObject, handler: QueryContinueDragEventHandler)
            Adds a System.Windows.UIElement.QueryContinueDrag event handler to a specified 
             dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) to which to add the event handler.
        
            handler: A delegate that references the handler method to be added.
        """
        pass

    @staticmethod
    def DoDragDrop(dragSource, data, allowedEffects):
        """
        DoDragDrop(dragSource: DependencyObject, data: object, allowedEffects: DragDropEffects) -> DragDropEffects
        
            Initiates a drag-and-drop operation.
        
            dragSource: A reference to the dependency object that is the source of the data being 
             dragged.
        
            data: A data object that contains the data being dragged.
            allowedEffects: One of the System.Windows.DragDropEffects values that specifies permitted 
             effects of the drag-and-drop operation.
        
            Returns: One of the System.Windows.DragDropEffects values that specifies the final 
             effect that was performed during the drag-and-drop operation.
        """
        pass

    @staticmethod
    def RemoveDragEnterHandler(element, handler):
        """
        RemoveDragEnterHandler(element: DependencyObject, handler: DragEventHandler)
            Removes a System.Windows.UIElement.DragEnter event handler from a specified 
             dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) from which to remove the event handler.
        
            handler: A delegate that references the handler method to be removed
        """
        pass

    @staticmethod
    def RemoveDragLeaveHandler(element, handler):
        """
        RemoveDragLeaveHandler(element: DependencyObject, handler: DragEventHandler)
            Removes a System.Windows.UIElement.DragLeave event handler from a specified 
             dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) from which to remove the event handler.
        
            handler: A delegate that references the handler method to be removed
        """
        pass

    @staticmethod
    def RemoveDragOverHandler(element, handler):
        """
        RemoveDragOverHandler(element: DependencyObject, handler: DragEventHandler)
            Removes a System.Windows.UIElement.DragOver event handler from a specified 
             dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) from which to remove the event handler.
        
            handler: A delegate that references the handler method to be removed
        """
        pass

    @staticmethod
    def RemoveDropHandler(element, handler):
        """
        RemoveDropHandler(element: DependencyObject, handler: DragEventHandler)
            Removes a System.Windows.UIElement.Drop event handler from a specified 
             dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) from which to remove the event handler.
        
            handler: A delegate that references the handler method to be removed
        """
        pass

    @staticmethod
    def RemoveGiveFeedbackHandler(element, handler):
        """
        RemoveGiveFeedbackHandler(element: DependencyObject, handler: GiveFeedbackEventHandler)
            Removes a System.Windows.UIElement.GiveFeedback event handler from a specified 
             dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) from which to remove the event handler.
        
            handler: A delegate that references the handler method to be removed
        """
        pass

    @staticmethod
    def RemovePreviewDragEnterHandler(element, handler):
        """
        RemovePreviewDragEnterHandler(element: DependencyObject, handler: DragEventHandler)
            Removes a System.Windows.UIElement.PreviewDragEnter event handler from a 
             specified dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) from which to remove the event handler.
        
            handler: A delegate that references the handler method to be removed
        """
        pass

    @staticmethod
    def RemovePreviewDragLeaveHandler(element, handler):
        """
        RemovePreviewDragLeaveHandler(element: DependencyObject, handler: DragEventHandler)
            Removes a System.Windows.UIElement.PreviewDragLeave event handler from a 
             specified dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) from which to remove the event handler.
        
            handler: A delegate that references the handler method to be removed
        """
        pass

    @staticmethod
    def RemovePreviewDragOverHandler(element, handler):
        """
        RemovePreviewDragOverHandler(element: DependencyObject, handler: DragEventHandler)
            Removes a System.Windows.UIElement.PreviewDragOver event handler from a 
             specified dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) from which to remove the event handler.
        
            handler: A delegate that references the handler method to be removed
        """
        pass

    @staticmethod
    def RemovePreviewDropHandler(element, handler):
        """
        RemovePreviewDropHandler(element: DependencyObject, handler: DragEventHandler)
            Removes a System.Windows.UIElement.PreviewDrop event handler from a specified 
             dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) from which to remove the event handler.
        
            handler: A delegate that references the handler method to be removed
        """
        pass

    @staticmethod
    def RemovePreviewGiveFeedbackHandler(element, handler):
        """
        RemovePreviewGiveFeedbackHandler(element: DependencyObject, handler: GiveFeedbackEventHandler)
            Removes a System.Windows.UIElement.PreviewGiveFeedback event handler from a 
             specified dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) from which to remove the event handler.
        
            handler: A delegate that references the handler method to be removed
        """
        pass

    @staticmethod
    def RemovePreviewQueryContinueDragHandler(element, handler):
        """
        RemovePreviewQueryContinueDragHandler(element: DependencyObject, handler: QueryContinueDragEventHandler)
            Removes a System.Windows.UIElement.PreviewQueryContinueDrag event handler from 
             a specified dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) from which to remove the event handler.
        
            handler: A delegate that references the handler method to be removed
        """
        pass

    @staticmethod
    def RemoveQueryContinueDragHandler(element, handler):
        """
        RemoveQueryContinueDragHandler(element: DependencyObject, handler: QueryContinueDragEventHandler)
            Removes a System.Windows.UIElement.QueryContinueDrag event handler from a 
             specified dependency object.
        
        
            element: The dependency object (a System.Windows.UIElement or 
             System.Windows.ContentElement) from which to remove the event handler.
        
            handler: A delegate that references the handler method to be removed
        """
        pass

    DragEnterEvent = None
    DragLeaveEvent = None
    DragOverEvent = None
    DropEvent = None
    GiveFeedbackEvent = None
    PreviewDragEnterEvent = None
    PreviewDragLeaveEvent = None
    PreviewDragOverEvent = None
    PreviewDropEvent = None
    PreviewGiveFeedbackEvent = None
    PreviewQueryContinueDragEvent = None
    QueryContinueDragEvent = None
    __all__ = [
        'AddDragEnterHandler',
        'AddDragLeaveHandler',
        'AddDragOverHandler',
        'AddDropHandler',
        'AddGiveFeedbackHandler',
        'AddPreviewDragEnterHandler',
        'AddPreviewDragLeaveHandler',
        'AddPreviewDragOverHandler',
        'AddPreviewDropHandler',
        'AddPreviewGiveFeedbackHandler',
        'AddPreviewQueryContinueDragHandler',
        'AddQueryContinueDragHandler',
        'DoDragDrop',
        'DragEnterEvent',
        'DragLeaveEvent',
        'DragOverEvent',
        'DropEvent',
        'GiveFeedbackEvent',
        'PreviewDragEnterEvent',
        'PreviewDragLeaveEvent',
        'PreviewDragOverEvent',
        'PreviewDropEvent',
        'PreviewGiveFeedbackEvent',
        'PreviewQueryContinueDragEvent',
        'QueryContinueDragEvent',
        'RemoveDragEnterHandler',
        'RemoveDragLeaveHandler',
        'RemoveDragOverHandler',
        'RemoveDropHandler',
        'RemoveGiveFeedbackHandler',
        'RemovePreviewDragEnterHandler',
        'RemovePreviewDragLeaveHandler',
        'RemovePreviewDragOverHandler',
        'RemovePreviewDropHandler',
        'RemovePreviewGiveFeedbackHandler',
        'RemovePreviewQueryContinueDragHandler',
        'RemoveQueryContinueDragHandler',
    ]


class DragDropEffects(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies the effects of a drag-and-drop operation.
    
    enum (flags) DragDropEffects, values: All (-2147483645), Copy (1), Link (4), Move (2), None (0), Scroll (-2147483648)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    All = None
    Copy = None
    Link = None
    Move = None
    None = None
    Scroll = None
    value__ = None


class DragDropKeyStates(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies the current state of the modifier keys (SHIFT, CTRL, and ALT), as well as the state of the mouse buttons.
    
    enum (flags) DragDropKeyStates, values: AltKey (32), ControlKey (8), LeftMouseButton (1), MiddleMouseButton (16), None (0), RightMouseButton (2), ShiftKey (4)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AltKey = None
    ControlKey = None
    LeftMouseButton = None
    MiddleMouseButton = None
    None = None
    RightMouseButton = None
    ShiftKey = None
    value__ = None


class DragEventArgs(RoutedEventArgs):
    """ Contains arguments relevant to all drag-and-drop events (System.Windows.DragDrop.DragEnter, System.Windows.DragDrop.DragLeave, System.Windows.DragDrop.DragOver, and System.Windows.DragDrop.Drop). """
    def GetPosition(self, relativeTo):
        """
        GetPosition(self: DragEventArgs, relativeTo: IInputElement) -> Point
        
            Returns a drop point that is relative to a specified 
             System.Windows.IInputElement.
        
        
            relativeTo: An System.Windows.IInputElement object for which to get a relative drop point.
            Returns: A drop point that is relative to the element specified in relativeTo.
        """
        pass

    AllowedEffects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a member of the System.Windows.DragDropEffects enumeration that specifies which operations are allowed by the originator of the drag event.

Get: AllowedEffects(self: DragEventArgs) -> DragDropEffects

"""

    Data = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a data object that contains the data associated with the corresponding drag event.

Get: Data(self: DragEventArgs) -> IDataObject

"""

    Effects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the target drag-and-drop operation.

Get: Effects(self: DragEventArgs) -> DragDropEffects

Set: Effects(self: DragEventArgs) = value
"""

    KeyStates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a flag enumeration indicating the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.

Get: KeyStates(self: DragEventArgs) -> DragDropKeyStates

"""



class DragEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """
    Represents a method that will handle drag-and-drop�routed events, for example System.Windows.UIElement.DragEnter.
    
    DragEventHandler(object: object, method: IntPtr)
    """
    def BeginInvoke(self, sender, e, callback, object):
        """ BeginInvoke(self: DragEventHandler, sender: object, e: DragEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        pass

    def CombineImpl(self, *args): #cannot find CLR method
        """
        CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate
        
            Combines this System.Delegate with the specified System.Delegate to form a new 
             delegate.
        
        
            follow: The delegate to combine with this delegate.
            Returns: A delegate that is the new root of the System.MulticastDelegate invocation list.
        """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """
        DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object
        
            Dynamically invokes (late-bound) the method represented by the current delegate.
        
            args: An array of objects that are the arguments to pass to the method represented by 
             the current delegate.-or- null, if the method represented by the current 
             delegate does not require arguments.
        
            Returns: The object returned by the method represented by the delegate.
        """
        pass

    def EndInvoke(self, result):
        """ EndInvoke(self: DragEventHandler, result: IAsyncResult) """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """
        GetMethodImpl(self: MulticastDelegate) -> MethodInfo
        
            Returns a static method represented by the current System.MulticastDelegate.
            Returns: A static method represented by the current System.MulticastDelegate.
        """
        pass

    def Invoke(self, sender, e):
        """ Invoke(self: DragEventHandler, sender: object, e: DragEventArgs) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """
        RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate
        
            Removes an element from the invocation list of this System.MulticastDelegate 
             that is equal to the specified delegate.
        
        
            value: The delegate to search for in the invocation list.
            Returns: If value is found in the invocation list for this instance, then a new 
             System.Delegate without value in its invocation list; otherwise, this instance 
             with its original invocation list.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, object, method):
        """ __new__(cls: type, object: object, method: IntPtr) """
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class Duration(object):
    """
    Represents the duration of time that a System.Windows.Media.Animation.Timeline is active.
    
    Duration(timeSpan: TimeSpan)
    """
    def Add(self, duration):
        """
        Add(self: Duration, duration: Duration) -> Duration
        
            Adds the value of the specified instance of System.Windows.Duration to the 
             value of the current instance.
        
        
            duration: An instance of System.Windows.Duration that represents the value of the current 
             instance plus duration.
        
            Returns: If both instances of System.Windows.Duration have values, an instance of 
             System.Windows.Duration that represents the combined values. Otherwise this 
             method returns null.
        """
        pass

    @staticmethod
    def Compare(t1, t2):
        """
        Compare(t1: Duration, t2: Duration) -> int
        
            Compares one System.Windows.Duration value to another.
        
            t1: The first instance of System.Windows.Duration to compare.
            t2: The second instance of System.Windows.Duration to compare.
            Returns: If t1 is less than t2, a negative value that represents the difference. If t1 
             is equal to t2, zero. If t1 is greater than t2, a positive value that 
             represents the difference.
        """
        pass

    def Equals(self, *__args):
        """
        Equals(t1: Duration, t2: Duration) -> bool
        
            Determines whether two instances of System.Windows.Duration are equal.
        
            t1: First instance of System.Windows.Duration to compare.
            t2: Second instance of System.Windows.Duration to compare.
            Returns: true if t1 is equal to t2; otherwise, false.
        Equals(self: Duration, duration: Duration) -> bool
        
            Determines whether a specified System.Windows.Duration is equal to this 
             instance of System.Windows.Duration.
        
        
            duration: Instance of System.Windows.Duration to check for equality.
            Returns: true if duration is equal to the current instance of System.Windows.Duration; 
             otherwise, false.
        
        Equals(self: Duration, value: object) -> bool
        
            Determines whether a specified object is equal to an instance of 
             System.Windows.Duration.
        
        
            value: Object to check for equality.
            Returns: true if value is equal to the current instance of Duration; otherwise, false.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: Duration) -> int
        
            Gets a hash code for this instance.
            Returns: A signed 32-bit integer hash code.
        """
        pass

    @staticmethod
    def Plus(duration):
        """
        Plus(duration: Duration) -> Duration
        
            Returns the specified instance of System.Windows.Duration.
        
            duration: The instance of System.Windows.Duration to get.
            Returns: An instance of System.Windows.Duration.
        """
        pass

    def Subtract(self, duration):
        """
        Subtract(self: Duration, duration: Duration) -> Duration
        
            Subtracts the value of the specified instance of System.Windows.Duration from 
             this instance.
        
        
            duration: The instance of System.Windows.Duration to subtract from the current instance.
            Returns: A new instance of System.Windows.Duration whose value is the result of this 
             instance minus the value of duration.
        """
        pass

    def ToString(self):
        """
        ToString(self: Duration) -> str
        
            Converts an instance of System.Windows.Duration to a System.String 
             representation.
        
            Returns: A System.String representation of this instance of System.Windows.Duration.
        """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __cmp__(self, *args): #cannot find CLR method
        """ x.__cmp__(y) <==> cmp(x,y) """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    @staticmethod # known case of __new__
    def __new__(self, timeSpan):
        """
        __new__[Duration]() -> Duration
        
        __new__(cls: type, timeSpan: TimeSpan)
        """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __pos__(self, *args): #cannot find CLR method
        """
        __pos__(duration: Duration) -> Duration
        
            Returns the specified instance of System.Windows.Duration.
        
            duration: The instance of System.Windows.Duration to get.
            Returns: An instance of System.Windows.Duration.
        """
        pass

    def __radd__(self, *args): #cannot find CLR method
        """
        __radd__(t1: Duration, t2: Duration) -> Duration
        
            Adds two instances of System.Windows.Duration together.
        
            t1: The first instance of System.Windows.Duration to add.
            t2: The second instance of System.Windows.Duration to add.
            Returns: If both instances of System.Windows.Duration have System.TimeSpan values, this 
             method returns the sum of those two values. If either value is set to 
             System.Windows.Duration.Automatic, the method returns 
             System.Windows.Duration.Automatic. If either value is set to 
             System.Windows.Duration.Forever, the method returns 
             System.Windows.Duration.Forever.If either t1 or t2 has no value, this method 
             returns null.
        """
        pass

    def __rsub__(self, *args): #cannot find CLR method
        """
        __rsub__(t1: Duration, t2: Duration) -> Duration
        
            Subtracts the value of one instance of System.Windows.Duration from another.
        
            t1: The first instance of System.Windows.Duration.
            t2: The instance of System.Windows.Duration to subtract.
            Returns: If both instances of System.Windows.Duration have values, an instance of 
             System.Windows.Duration that represents the value of t1 minus t2. If t1 has a 
             value of System.Windows.Duration.Forever and t2 has a value of 
             System.Windows.Duration.TimeSpan, this method returns 
             System.Windows.Duration.Forever. Otherwise this method returns null.
        """
        pass

    def __sub__(self, *args): #cannot find CLR method
        """ x.__sub__(y) <==> x-y """
        pass

    HasTimeSpan = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates if this System.Windows.Duration represents a System.TimeSpan value.

Get: HasTimeSpan(self: Duration) -> bool

"""

    TimeSpan = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the System.TimeSpan value that this System.Windows.Duration represents.

Get: TimeSpan(self: Duration) -> TimeSpan

"""


    Automatic = None
    Forever = None


class DurationConverter(TypeConverter):
    """
    Converts instances of System.Windows.Duration to and from other type representations.
    
    DurationConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: DurationConverter, td: ITypeDescriptorContext, t: Type) -> bool
        
            Determines if conversion from a given type to an instance of 
             System.Windows.Duration is possible.
        
        
            td: Context information used for conversion.
            t: Type being evaluated for conversion.
            Returns: true if t is of type System.String; otherwise, false.
        """
        pass

    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: DurationConverter, context: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Determines if conversion to a specified type is possible.
        
            context: Context information used for conversion.
            destinationType: Type being evaluated for conversion.
            Returns: true if destinationType is of type System.String; otherwise, false.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: DurationConverter, td: ITypeDescriptorContext, cultureInfo: CultureInfo, value: object) -> object
        
            Converts a given string value to an instance of System.Windows.Duration.
        
            td: Context information used for conversion.
            cultureInfo: Cultural information that is respected during conversion.
            value: String value to convert to an instance of System.Windows.Duration.
            Returns: A new instance of System.Windows.Duration.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: DurationConverter, context: ITypeDescriptorContext, cultureInfo: CultureInfo, value: object, destinationType: Type) -> object
        
            Converts an instance of System.Windows.Duration to another type.
        
            context: Context information used for conversion.
            cultureInfo: Cultural information that is respected during conversion.
            value: Duration value to convert from.
            destinationType: Type being evaluated for conversion.
            Returns: A new instance of the destinationType.
        """
        pass


class DynamicResourceExtension(MarkupExtension):
    """
    Implements a markup extension that supports dynamic resource references made from XAML.
    
    DynamicResourceExtension(resourceKey: object)
    DynamicResourceExtension()
    """
    def ProvideValue(self, serviceProvider):
        """
        ProvideValue(self: DynamicResourceExtension, serviceProvider: IServiceProvider) -> object
        
            Returns an object that should be set on the property where this extension is 
             applied. For System.Windows.DynamicResourceExtension, this is the object found 
             in a resource dictionary in the current parent chain that is keyed by the 
             System.Windows.DynamicResourceExtension.ResourceKey.
        
        
            serviceProvider: Object that can provide services for the markup extension.
            Returns: The object to set on the property where the extension is applied. Rather than 
             the actual value, this will be an expression that will be evaluated at a later 
             time.
        """
        pass

    @staticmethod # known case of __new__
    def __new__(self, resourceKey=None):
        """
        __new__(cls: type)
        __new__(cls: type, resourceKey: object)
        """
        pass

    ResourceKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the key specified by this dynamic resource reference. The key is used to lookup a resource in resource dictionaries, by means of an intermediate expression.

Get: ResourceKey(self: DynamicResourceExtension) -> object

Set: ResourceKey(self: DynamicResourceExtension) = value
"""



class DynamicResourceExtensionConverter(TypeConverter):
    """
    Converts from parsed XAML to System.Windows.DynamicResourceExtension and supports dynamic resource references made from XAML.
    
    DynamicResourceExtensionConverter()
    """
    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: DynamicResourceExtensionConverter, context: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Returns a value indicating whether this converter can convert an object to the 
             given destination type using the context.
        
        
            context: Context in which the provided type should be evaluated.
            destinationType: The type of the destination/output of conversion.
            Returns: true if destinationType is type of 
             System.ComponentModel.Design.Serialization.InstanceDescriptor; otherwise, 
             false.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: DynamicResourceExtensionConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object, destinationType: Type) -> object
        
            Converts the specified object to another type.
        
            context: An System.ComponentModel.ITypeDescriptorContext object that provides a format 
             context.
        
            culture: A System.Globalization.CultureInfo object that specifies the culture to 
             represent the number.
        
            value: Value to be converted. This is expected to be type 
             System.Windows.DynamicResourceExtension.
        
            destinationType: Type that should be converted to.
            Returns: The returned converted object. Cast this to the requested type. Ordinarily this 
             should be cast to 
             System.ComponentModel.Design.Serialization.InstanceDescriptor.
        """
        pass


class EventManager(object):
    """ Provides event-related utility methods that register routed events for class owners and add class handlers. """
    @staticmethod
    def GetRoutedEvents():
        """
        GetRoutedEvents() -> Array[RoutedEvent]
        
            Returns identifiers for routed events that have been registered to the event 
             system.
        
            Returns: An array of type System.Windows.RoutedEvent that contains the registered 
             objects.
        """
        pass

    @staticmethod
    def GetRoutedEventsForOwner(ownerType):
        """
        GetRoutedEventsForOwner(ownerType: Type) -> Array[RoutedEvent]
        
            Finds all routed event identifiers for events that are registered with the 
             provided owner type.
        
        
            ownerType: The type to start the search with. Base classes are included in the search.
            Returns: An array of matching routed event identifiers if any match is found; otherwise, 
             null.
        """
        pass

    @staticmethod
    def RegisterClassHandler(classType, routedEvent, handler, handledEventsToo=None):
        """
        RegisterClassHandler(classType: Type, routedEvent: RoutedEvent, handler: Delegate, handledEventsToo: bool)
            Registers a class handler for a particular routed event, with the option to 
             handle events where event data is already marked handled.
        
        
            classType: The type of the class that is declaring class handling.
            routedEvent: The routed event identifier of the event to handle.
            handler: A reference to the class handler implementation.
            handledEventsToo: true to invoke this class handler even if arguments of the routed event have 
             been marked as handled; false to retain the default behavior of not invoking 
             the handler on any marked-handled event.
        
        RegisterClassHandler(classType: Type, routedEvent: RoutedEvent, handler: Delegate)
            Registers a class handler for a particular routed event.
        
            classType: The type of the class that is declaring class handling.
            routedEvent: The routed event identifier of the event to handle.
            handler: A reference to the class handler implementation.
        """
        pass

    @staticmethod
    def RegisterRoutedEvent(name, routingStrategy, handlerType, ownerType):
        """
        RegisterRoutedEvent(name: str, routingStrategy: RoutingStrategy, handlerType: Type, ownerType: Type) -> RoutedEvent
        
            Registers a new routed event with the Windows Presentation Foundation (WPF) 
             event system.
        
        
            name: The name of the routed event. The name must be unique within the owner type and 
             cannot be null or an empty string.
        
            routingStrategy: The routing strategy of the event as a value of the enumeration.
            handlerType: The type of the event handler. This must be a delegate type and cannot be null.
            ownerType: The owner class type of the routed event. This cannot be null.
            Returns: The identifier for the newly registered routed event. This identifier object 
             can now be stored as a static field in a class and then used as a parameter for 
             methods that attach handlers to the event. The routed event identifier is also 
             used for other event system APIs.
        """
        pass

    __all__ = [
        'GetRoutedEvents',
        'GetRoutedEventsForOwner',
        'RegisterClassHandler',
        'RegisterRoutedEvent',
    ]


class EventPrivateKey(object):
    """
    Provides unique identification for events whose handlers are stored into an internal hashtable.
    
    EventPrivateKey()
    """

class EventRoute(object):
    """
    Represents the container for the route to be followed by a routed event.
    
    EventRoute(routedEvent: RoutedEvent)
    """
    def Add(self, target, handler, handledEventsToo):
        """
        Add(self: EventRoute, target: object, handler: Delegate, handledEventsToo: bool)
            Adds the specified handler for the specified target to the route.
        
            target: Specifies the target object of which the handler is to be added to the route.
            handler: Specifies the handler to be added to the route.
            handledEventsToo: Indicates whether or not the listener detects events that have already been 
             handled.
        """
        pass

    def PeekBranchNode(self):
        """
        PeekBranchNode(self: EventRoute) -> object
        
            Returns the top-most element on the event route stack at which two logical 
             trees diverge.
        
            Returns: The top-most element on the event route stack at which two logical trees 
             diverge.
        """
        pass

    def PeekBranchSource(self):
        """
        PeekBranchSource(self: EventRoute) -> object
        
            Returns the source for the top-most element on the event route stack at which 
             two logical trees diverge.
        
            Returns: The source for the top-most element on the event route stack at which two 
             logical trees diverge.
        """
        pass

    def PopBranchNode(self):
        """
        PopBranchNode(self: EventRoute) -> object
        
            Returns the top-most node on the event route stack at which two logical trees 
             diverge.
        
            Returns: The top-most node on the event route stack at which two logical trees diverge.
        """
        pass

    def PushBranchNode(self, node, source):
        """
        PushBranchNode(self: EventRoute, node: object, source: object)
            Adds the top-most node to the event route stack at which two logical trees 
             diverge.
        
        
            node: The top-most element on the event route stack at which two logical trees 
             diverge.
        
            source: The source for the top-most element on the event route stack at which two 
             logical trees diverge.
        """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    @staticmethod # known case of __new__
    def __new__(self, routedEvent):
        """ __new__(cls: type, routedEvent: RoutedEvent) """
        pass


class SetterBase(object):
    """ Represents the base class for value setters. """
    def CheckSealed(self, *args): #cannot find CLR method
        """
        CheckSealed(self: SetterBase)
            Checks whether this object is read-only and cannot be changed.
        """
        pass

    IsSealed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether this object is in an immutable state.

Get: IsSealed(self: SetterBase) -> bool

"""



class EventSetter(SetterBase):
    """
    Represents an event setter in a style. Event setters invoke the specified event handlers in response to events.
    
    EventSetter()
    EventSetter(routedEvent: RoutedEvent, handler: Delegate)
    """
    @staticmethod # known case of __new__
    def __new__(self, routedEvent=None, handler=None):
        """
        __new__(cls: type)
        __new__(cls: type, routedEvent: RoutedEvent, handler: Delegate)
        """
        pass

    Event = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the particular routed event that this System.Windows.EventSetter responds to.

Get: Event(self: EventSetter) -> RoutedEvent

Set: Event(self: EventSetter) = value
"""

    HandledEventsToo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that determines whether the handler assigned to the setter should still be invoked, even if the event is marked handled in its event data.

Get: HandledEventsToo(self: EventSetter) -> bool

Set: HandledEventsToo(self: EventSetter) = value
"""

    Handler = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the reference to a handler for a routed event in the setter.

Get: Handler(self: EventSetter) -> Delegate

Set: Handler(self: EventSetter) = value
"""



class EventTrigger(TriggerBase, IAddChild):
    """
    Represents a trigger that applies a set of actions in response to an event.
    
    EventTrigger()
    EventTrigger(routedEvent: RoutedEvent)
    """
    def AddChild(self, *args): #cannot find CLR method
        """
        AddChild(self: EventTrigger, value: object)
            Adds the specified object to the System.Windows.EventTrigger.Actions collection 
             of the current event trigger.
        
        
            value: A System.Windows.TriggerAction object to add to the 
             System.Windows.EventTrigger.Actions collection of this trigger.
        """
        pass

    def AddText(self, *args): #cannot find CLR method
        """
        AddText(self: EventTrigger, text: str)
            This method is not supported and results in an exception.
        
            text: This parameter is not used.
        """
        pass

    def OnPropertyChanged(self, *args): #cannot find CLR method
        """
        OnPropertyChanged(self: DependencyObject, e: DependencyPropertyChangedEventArgs)
            Invoked whenever the effective value of any dependency property on this 
             System.Windows.DependencyObject has been updated. The specific dependency 
             property that changed is reported in the event data.
        
        
            e: Event data that will contain the dependency property identifier of interest, 
             the property metadata for the type, and old and new values.
        
        OnPropertyChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def ShouldSerializeActions(self):
        """
        ShouldSerializeActions(self: EventTrigger) -> bool
        
            Returns whether serialization processes should serialize the effective value of 
             the System.Windows.EventTrigger.Actions property on instances of this class.
        
            Returns: Returns true if the System.Windows.EventTrigger.Actions property value should 
             be serialized; otherwise, false.
        """
        pass

    def ShouldSerializeProperty(self, *args): #cannot find CLR method
        """
        ShouldSerializeProperty(self: DependencyObject, dp: DependencyProperty) -> bool
        
            Returns a value that indicates whether serialization processes should serialize 
             the value for the provided dependency property.
        
        
            dp: The identifier for the dependency property that should be serialized.
            Returns: true if the dependency property that is supplied should be value-serialized; 
             otherwise, false.
        
        ShouldSerializeProperty(self: Window_16$17, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Label_17$18, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: TextBox_18$19, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Button_19$20, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: CheckBox_20$21, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: ComboBox_21$22, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Separator_22$23, dp: DependencyProperty) -> bool
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, routedEvent=None):
        """
        __new__(cls: type)
        __new__(cls: type, routedEvent: RoutedEvent)
        """
        pass

    Actions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the collection of actions to apply when the event occurs.

Get: Actions(self: EventTrigger) -> TriggerActionCollection

"""

    RoutedEvent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.RoutedEvent that will activate this trigger.

Get: RoutedEvent(self: EventTrigger) -> RoutedEvent

Set: RoutedEvent(self: EventTrigger) = value
"""

    SourceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the name of the object with the event that activates this trigger. This is only used by element triggers or template triggers.

Get: SourceName(self: EventTrigger) -> str

Set: SourceName(self: EventTrigger) = value
"""



class ExceptionRoutedEventArgs(RoutedEventArgs):
    """ Provides data for the  System.Windows.Controls.Image and System.Windows.Controls.MediaElement failed events. """
    ErrorException = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the exception that caused the error condition.

Get: ErrorException(self: ExceptionRoutedEventArgs) -> Exception

"""



class ExitEventArgs(EventArgs):
    """ Event arguments for the System.Windows.Application.Exit event. """
    ApplicationExitCode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the exit code that an application returns to the operating system when the application exits.

Get: ApplicationExitCode(self: ExitEventArgs) -> int

Set: ApplicationExitCode(self: ExitEventArgs) = value
"""



class ExitEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """
    Represents the method that handles the System.Windows.Application.Exit event.
    
    ExitEventHandler(object: object, method: IntPtr)
    """
    def BeginInvoke(self, sender, e, callback, object):
        """ BeginInvoke(self: ExitEventHandler, sender: object, e: ExitEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        pass

    def CombineImpl(self, *args): #cannot find CLR method
        """
        CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate
        
            Combines this System.Delegate with the specified System.Delegate to form a new 
             delegate.
        
        
            follow: The delegate to combine with this delegate.
            Returns: A delegate that is the new root of the System.MulticastDelegate invocation list.
        """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """
        DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object
        
            Dynamically invokes (late-bound) the method represented by the current delegate.
        
            args: An array of objects that are the arguments to pass to the method represented by 
             the current delegate.-or- null, if the method represented by the current 
             delegate does not require arguments.
        
            Returns: The object returned by the method represented by the delegate.
        """
        pass

    def EndInvoke(self, result):
        """ EndInvoke(self: ExitEventHandler, result: IAsyncResult) """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """
        GetMethodImpl(self: MulticastDelegate) -> MethodInfo
        
            Returns a static method represented by the current System.MulticastDelegate.
            Returns: A static method represented by the current System.MulticastDelegate.
        """
        pass

    def Invoke(self, sender, e):
        """ Invoke(self: ExitEventHandler, sender: object, e: ExitEventArgs) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """
        RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate
        
            Removes an element from the invocation list of this System.MulticastDelegate 
             that is equal to the specified delegate.
        
        
            value: The delegate to search for in the invocation list.
            Returns: If value is found in the invocation list for this instance, then a new 
             System.Delegate without value in its invocation list; otherwise, this instance 
             with its original invocation list.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, object, method):
        """ __new__(cls: type, object: object, method: IntPtr) """
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class Expression(object):
    """ This type supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. """

class ExpressionConverter(TypeConverter):
    """
    Converts instances of System.Windows.Expression  to and from other types.
    
    ExpressionConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: ExpressionConverter, context: ITypeDescriptorContext, sourceType: Type) -> bool
        
            Returns whether this converter can convert from a source object to an 
             System.Windows.Expression object.
        
        
            context: An System.ComponentModel.ITypeDescriptorContext that provides a format context.
            sourceType: A System.Type that represents the type you wish to convert from.
            Returns: Always false.
        """
        pass

    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: ExpressionConverter, context: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Returns whether this converter can convert an System.Windows.Expression object 
             to a specific destination type.
        
        
            context: An System.ComponentModel.ITypeDescriptorContext that provides a format context.
            destinationType: A System.Type that represents the type you wish to convert to.
            Returns: Always false.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: ExpressionConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object) -> object
        
            Converts the provided value to the System.Windows.Expression type.
        
            context: An System.ComponentModel.ITypeDescriptorContext that provides a format context.
            culture: The System.Globalization.CultureInfo to use as the current culture.
            value: The object to convert.
            Returns: Always throws an exception and returns null.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: ExpressionConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object, destinationType: Type) -> object
        
            Converts the provided System.Windows.Expression object to the specified type.
        
            context: An System.ComponentModel.ITypeDescriptorContext that provides a format context.
            culture: The System.Globalization.CultureInfo to use as the current culture.
            value: The object to convert.
            destinationType: A System.Type that represents the type you wish to convert to.
            Returns: Always throws an exception and returns null.
        """
        pass


class FigureHorizontalAnchor(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes a position reference for a figure in a horizontal direction.
    
    enum FigureHorizontalAnchor, values: ColumnCenter (7), ColumnLeft (6), ColumnRight (8), ContentCenter (4), ContentLeft (3), ContentRight (5), PageCenter (1), PageLeft (0), PageRight (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    ColumnCenter = None
    ColumnLeft = None
    ColumnRight = None
    ContentCenter = None
    ContentLeft = None
    ContentRight = None
    PageCenter = None
    PageLeft = None
    PageRight = None
    value__ = None


class FigureLength(object, IEquatable[FigureLength]):
    """
    Describes the height or width of a System.Windows.Documents.Figure.
    
    FigureLength(pixels: float)
    FigureLength(value: float, type: FigureUnitType)
    """
    def Equals(self, *__args):
        """
        Equals(self: FigureLength, figureLength: FigureLength) -> bool
        
            Compares two System.Windows.FigureLength structures for equality.
        
            figureLength: The System.Windows.FigureLength to compare to this instance.
            Returns: true if figureLength is identical to this System.Windows.FigureLength; 
             otherwise, false.
        
        Equals(self: FigureLength, oCompare: object) -> bool
        
            Determines whether the specified System.Object is a System.Windows.FigureLength 
             and whether it is identical to this System.Windows.FigureLength.
        
        
            oCompare: The System.Object to compare to this instance.
            Returns: true if oCompare is a System.Windows.FigureLength and is identical to this 
             System.Windows.FigureLength; otherwise, false.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: FigureLength) -> int
        
            Returns the hash code for this System.Windows.FigureLength.
            Returns: The hash code for this System.Windows.FigureLength structure.
        """
        pass

    def ToString(self):
        """
        ToString(self: FigureLength) -> str
        
            Creates a System.String representation of this System.Windows.FigureLength.
            Returns: A System.String representation of this System.Windows.FigureLength.
        """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__[FigureLength]() -> FigureLength
        
        __new__(cls: type, pixels: float)
        __new__(cls: type, value: float, type: FigureUnitType)
        """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    FigureUnitType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the unit type of the System.Windows.FigureLength.Value.

Get: FigureUnitType(self: FigureLength) -> FigureUnitType

"""

    IsAbsolute = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that determines whether this System.Windows.FigureLength holds an absolute value (in pixels).

Get: IsAbsolute(self: FigureLength) -> bool

"""

    IsAuto = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that determines whether this System.Windows.FigureLength is automatic (not specified).

Get: IsAuto(self: FigureLength) -> bool

"""

    IsColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that determines whether this System.Windows.FigureLength has a System.Windows.FigureUnitType property value of System.Windows.FigureUnitType.Column.

Get: IsColumn(self: FigureLength) -> bool

"""

    IsContent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that determines whether this System.Windows.FigureLength has a System.Windows.FigureUnitType property value of System.Windows.FigureUnitType.Content.

Get: IsContent(self: FigureLength) -> bool

"""

    IsPage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that determines whether this System.Windows.FigureLength has a System.Windows.FigureUnitType property value of System.Windows.FigureUnitType.Page.

Get: IsPage(self: FigureLength) -> bool

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the value of this System.Windows.FigureLength.

Get: Value(self: FigureLength) -> float

"""



class FigureLengthConverter(TypeConverter):
    """
    Converts instances of other types to and from a System.Windows.FigureLength.
    
    FigureLengthConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: FigureLengthConverter, typeDescriptorContext: ITypeDescriptorContext, sourceType: Type) -> bool
        
            Indicates whether an object can be converted from a given type to an instance 
             of a System.Windows.FigureLength.
        
        
            typeDescriptorContext: Describes the context information of a type.
            sourceType: The source System.Type that is being queried for conversion support.
            Returns: true if object of the specified type can be converted to a 
             System.Windows.FigureLength; otherwise, false.
        """
        pass

    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: FigureLengthConverter, typeDescriptorContext: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Determines whether instances of System.Windows.FigureLength can be converted to 
             the specified type.
        
        
            typeDescriptorContext: Describes the context information of a type.
            destinationType: The desired type this System.Windows.FigureLength is being evaluated to be 
             converted to.
        
            Returns: true if instances of System.Windows.FigureLength can be converted to 
             destinationType; otherwise, false.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: FigureLengthConverter, typeDescriptorContext: ITypeDescriptorContext, cultureInfo: CultureInfo, source: object) -> object
        
            Converts the specified object to a System.Windows.FigureLength.
        
            typeDescriptorContext: Describes the context information of a type.
            cultureInfo: Describes the System.Globalization.CultureInfo of the type being converted.
            source: The object being converted.
            Returns: The System.Windows.FigureLength created from converting source.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: FigureLengthConverter, typeDescriptorContext: ITypeDescriptorContext, cultureInfo: CultureInfo, value: object, destinationType: Type) -> object
        
            Converts the specified System.Windows.FigureLength to the specified type.
        
            typeDescriptorContext: Describes the context information of a type.
            cultureInfo: Describes the System.Globalization.CultureInfo of the type being converted.
            value: The System.Windows.FigureLength to convert.
            destinationType: The type to convert the System.Windows.FigureLength to.
            Returns: The object created from converting this System.Windows.FigureLength.
        """
        pass


class FigureUnitType(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes the unit type associated with the width or height of a System.Windows.FigureLength.
    
    enum FigureUnitType, values: Auto (0), Column (2), Content (3), Page (4), Pixel (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Auto = None
    Column = None
    Content = None
    Page = None
    Pixel = None
    value__ = None


class FigureVerticalAnchor(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes the point of reference of a figure in the vertical direction.
    
    enum FigureVerticalAnchor, values: ContentBottom (5), ContentCenter (4), ContentTop (3), PageBottom (2), PageCenter (1), PageTop (0), ParagraphTop (6)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    ContentBottom = None
    ContentCenter = None
    ContentTop = None
    PageBottom = None
    PageCenter = None
    PageTop = None
    ParagraphTop = None
    value__ = None


class FlowDirection(Enum, IComparable, IFormattable, IConvertible):
    """
    Defines constants that specify the content flow direction for text and user interface (UI) elements.
    
    enum FlowDirection, values: LeftToRight (0), RightToLeft (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    LeftToRight = None
    RightToLeft = None
    value__ = None


class FontCapitals(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes the capital letter style for a System.Windows.Documents.Typography object.
    
    enum FontCapitals, values: AllPetiteCaps (3), AllSmallCaps (1), Normal (0), PetiteCaps (4), SmallCaps (2), Titling (6), Unicase (5)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AllPetiteCaps = None
    AllSmallCaps = None
    Normal = None
    PetiteCaps = None
    SmallCaps = None
    Titling = None
    Unicase = None
    value__ = None


class FontEastAsianLanguage(Enum, IComparable, IFormattable, IConvertible):
    """
    Provides a mechanism for the user to select font-specific versions of glyphs for a specified East Asian writing system or language.
    
    enum FontEastAsianLanguage, values: HojoKanji (5), Jis04 (4), Jis78 (1), Jis83 (2), Jis90 (3), NlcKanji (6), Normal (0), Simplified (7), Traditional (8), TraditionalNames (9)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    HojoKanji = None
    Jis04 = None
    Jis78 = None
    Jis83 = None
    Jis90 = None
    NlcKanji = None
    Normal = None
    Simplified = None
    Traditional = None
    TraditionalNames = None
    value__ = None


class FontEastAsianWidths(Enum, IComparable, IFormattable, IConvertible):
    """
    Provides a mechanism for the user to select glyphs of different width styles.
    
    enum FontEastAsianWidths, values: Full (2), Half (3), Normal (0), Proportional (1), Quarter (5), Third (4)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Full = None
    Half = None
    Normal = None
    Proportional = None
    Quarter = None
    Third = None
    value__ = None


class FontFraction(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes the fraction style for a System.Windows.Documents.Typography object.
    
    enum FontFraction, values: Normal (0), Slashed (1), Stacked (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Normal = None
    Slashed = None
    Stacked = None
    value__ = None


class FontNumeralAlignment(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes the numeral alignment for a System.Windows.Documents.Typography object.
    
    enum FontNumeralAlignment, values: Normal (0), Proportional (1), Tabular (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Normal = None
    Proportional = None
    Tabular = None
    value__ = None


class FontNumeralStyle(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes the numeral style for a System.Windows.Documents.Typography object.
    
    enum FontNumeralStyle, values: Lining (1), Normal (0), OldStyle (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Lining = None
    Normal = None
    OldStyle = None
    value__ = None


class FontSizeConverter(TypeConverter):
    """
    Converts font size values to and from other type representations.
    
    FontSizeConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: FontSizeConverter, context: ITypeDescriptorContext, sourceType: Type) -> bool
        
            Determines if conversion from a specified type to a System.Double value is 
             possible.
        
        
            context: Describes context information of a component such as its container and 
             System.ComponentModel.PropertyDescriptor.
        
            sourceType: Identifies the data type to evaluate for purposes of conversion.
            Returns: true if sourceType can be converted to System.Double; otherwise, false.
        """
        pass

    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: FontSizeConverter, context: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Determines if conversion of a font size value to a specified type is possible.
        
            context: Context information of a component such as its container and 
             System.ComponentModel.PropertyDescriptor.
        
            destinationType: The data type to evaluate for purposes of conversion.
            Returns: true if this type can be converted; otherwise, false.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: FontSizeConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object) -> object
        
            Converts a specified type to a System.Double.
        
            context: Context information of a component such as its container and 
             System.ComponentModel.PropertyDescriptor.
        
            culture: Cultural specific information, including the writing system and calendar used.
            value: The value which is being converted to a font size value.
            Returns: A System.Double value that represents the converted font size value.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: FontSizeConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object, destinationType: Type) -> object
        
            Converts a System.Double value to a specified type.
        
            context: Context information of a component such as its container and 
             System.ComponentModel.PropertyDescriptor.
        
            culture: Cultural specific information, including writing system and calendar used.
            value: The System.Object being converted.
            destinationType: The data type this font size value is being converted to.
            Returns: A new System.Object that is the value of the conversion.
        """
        pass


class FontStretch(object, IFormattable):
    """ Describes the degree to which a font has been stretched compared to the normal aspect ratio of that font. """
    @staticmethod
    def Compare(left, right):
        """
        Compare(left: FontStretch, right: FontStretch) -> int
        
            Compares two instances of System.Windows.FontStretch objects.
        
            left: The first System.Windows.FontStretch object to compare.
            right: The second System.Windows.FontStretch object to compare.
            Returns: An System.Int32 value that represents the relationship between the two 
             instances of System.Windows.FontStretch.
        """
        pass

    def Equals(self, obj):
        """
        Equals(self: FontStretch, obj: FontStretch) -> bool
        
            Compares a System.Windows.FontStretch object with the current 
             System.Windows.FontStretch object.
        
        
            obj: The instance of the System.Windows.FontStretch object to compare for equality.
            Returns: true if two instances are equal; otherwise, false.
        Equals(self: FontStretch, obj: object) -> bool
        
            Compares a System.Object with the current System.Windows.FontStretch object.
        
            obj: The instance of the System.Object to compare for equality.
            Returns: true if two instances are equal; otherwise, false.
        """
        pass

    @staticmethod
    def FromOpenTypeStretch(stretchValue):
        """
        FromOpenTypeStretch(stretchValue: int) -> FontStretch
        
            Creates a new instance of System.Windows.FontStretch that corresponds to the 
             OpenType usStretchClass value.
        
        
            stretchValue: An integer value between one and nine that corresponds to the usStretchValue 
             definition in the OpenType specification.
        
            Returns: A new instance of System.Windows.FontStretch.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: FontStretch) -> int
        
            Retrieves the hash code for this object.
            Returns: An System.Int32 value representing the hash code for the object.
        """
        pass

    def ToOpenTypeStretch(self):
        """
        ToOpenTypeStretch(self: FontStretch) -> int
        
            Returns a value that represents the OpenType�usStretchClass for this 
             System.Windows.FontStretch object.
        
            Returns: An integer value between 1 and 999 that corresponds to the usStretchClass 
             definition in the OpenType specification.
        """
        pass

    def ToString(self):
        """
        ToString(self: FontStretch) -> str
        
            Creates a System.String representation of the current 
             System.Windows.FontStretch object based on the current culture.
        
            Returns: A System.String value representation of the object.
        """
        pass

    def __cmp__(self, *args): #cannot find CLR method
        """ x.__cmp__(y) <==> cmp(x,y) """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass


class FontStretchConverter(TypeConverter):
    """
    Converts instances of System.Windows.FontStretch to and from other type representations.
    
    FontStretchConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: FontStretchConverter, td: ITypeDescriptorContext, t: Type) -> bool
        
            Determines if conversion from a specified type to a System.Windows.FontStretch 
             value is possible.
        
        
            td: Context information of a type.
            t: The type of the source that is being evaluated for conversion.
            Returns: true if t can create a System.Windows.FontStretch; otherwise, false.
        """
        pass

    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: FontStretchConverter, context: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Determines whether an instance of System.Windows.FontStretch can be converted 
             to a different type.
        
        
            context: Context information of a type.
            destinationType: The desired type that that this instance of System.Windows.FontStretch is being 
             evaluated for conversion to.
        
            Returns: true if the converter can convert System.Windows.FontStretch to 
             destinationType; otherwise, false.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: FontStretchConverter, td: ITypeDescriptorContext, ci: CultureInfo, value: object) -> object
        
            Attempts to convert a specified object to an instance of 
             System.Windows.FontStretch.
        
        
            td: Context information of a type.
            ci: System.Globalization.CultureInfo of the type being converted.
            value: The object being converted.
            Returns: The instance of System.Windows.FontStretch created from the converted value.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: FontStretchConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object, destinationType: Type) -> object
        
            Attempts to convert an instance of System.Windows.FontStretch to a specified 
             type.
        
        
            context: Context information of a type.
            culture: System.Globalization.CultureInfo of the type being converted.
            value: The instance of System.Windows.FontStretch to convert.
            destinationType: The type this instance of System.Windows.FontStretch is converted to.
            Returns: The object created from the converted instance of System.Windows.FontStretch.
        """
        pass


class FontStretches(object):
    """ Provides a set of static predefined System.Windows.FontStretch values. """
    Condensed = None
    Expanded = None
    ExtraCondensed = None
    ExtraExpanded = None
    Medium = None
    Normal = None
    SemiCondensed = None
    SemiExpanded = None
    UltraCondensed = None
    UltraExpanded = None
    __all__ = []


class FontStyle(object, IFormattable):
    """ Defines a structure that represents the style of a font face as normal, italic, or oblique. """
    def Equals(self, obj):
        """
        Equals(self: FontStyle, obj: FontStyle) -> bool
        
            Compares a System.Windows.FontStyle with the current System.Windows.FontStyle 
             instance for equality.
        
        
            obj: An instance of System.Windows.FontStyle to compare for equality.
            Returns: true to show the two instances are equal; otherwise, false.
        Equals(self: FontStyle, obj: object) -> bool
        
            Compares an System.Object with the current System.Windows.FontStyle instance 
             for equality.
        
        
            obj: An System.Object value that represents the System.Windows.FontStyle to compare 
             for equality.
        
            Returns: true to show the two instances are equal; otherwise, false.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: FontStyle) -> int
        
            Retrieves the hash code for this object.
            Returns: A 32-bit hash code, which is a signed integer.
        """
        pass

    def ToString(self):
        """
        ToString(self: FontStyle) -> str
        
            Creates a System.String that represents the current System.Windows.FontStyle 
             object and is based on the System.Globalization.CultureInfo.CurrentCulture 
             property information.
        
            Returns: A System.String that represents the value of the System.Windows.FontStyle 
             object, such as "Normal", "Italic", or "Oblique".
        """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass


class FontStyleConverter(TypeConverter):
    """
    Converts instances of System.Windows.FontStyle to and from other data types.
    
    FontStyleConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: FontStyleConverter, td: ITypeDescriptorContext, t: Type) -> bool
        
            Returns a value that indicates whether this converter can convert an object of 
             the given type to an instance of System.Windows.FontStyle.
        
        
            td: Describes the context information of a type.
            t: The type of the source that is being evaluated for conversion.
            Returns: true if the converter can convert the provided type to an instance of 
             System.Windows.FontStyle; otherwise, false.
        """
        pass

    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: FontStyleConverter, context: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Determines whether an instance of System.Windows.FontStyle can be converted to 
             a different type.
        
        
            context: Context information of a type.
            destinationType: The desired type that that this instance of System.Windows.FontStyle is being 
             evaluated for conversion to.
        
            Returns: true if the converter can convert this instance of System.Windows.FontStyle; 
             otherwise, false.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: FontStyleConverter, td: ITypeDescriptorContext, ci: CultureInfo, value: object) -> object
        
            Attempts to convert a specified object to an instance of 
             System.Windows.FontStyle.
        
        
            td: Context information of a type.
            ci: System.Globalization.CultureInfo of the type being converted.
            value: The object being converted.
            Returns: The instance of System.Windows.FontStyle created from the converted value.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: FontStyleConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object, destinationType: Type) -> object
        
            Attempts to convert an instance of System.Windows.FontStyle to a specified type.
        
            context: Context information of a type.
            culture: System.Globalization.CultureInfo of the type being converted.
            value: The instance of System.Windows.FontStyle to convert.
            destinationType: The type this instance of System.Windows.FontStyle is converted to.
            Returns: The object created from the converted instance of System.Windows.FontStyle.
        """
        pass


class FontStyles(object):
    """ Provides a set of static predefined System.Windows.FontStyle values. """
    Italic = None
    Normal = None
    Oblique = None
    __all__ = []


class FontVariants(Enum, IComparable, IFormattable, IConvertible):
    """
    Renders variant typographic glyph forms.
    
    enum FontVariants, values: Inferior (4), Normal (0), Ordinal (3), Ruby (5), Subscript (2), Superscript (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Inferior = None
    Normal = None
    Ordinal = None
    Ruby = None
    Subscript = None
    Superscript = None
    value__ = None


class FontWeight(object, IFormattable):
    """ Refers to the density of a typeface, in terms of the lightness or heaviness of the strokes. """
    @staticmethod
    def Compare(left, right):
        """
        Compare(left: FontWeight, right: FontWeight) -> int
        
            Compares two instances of System.Windows.FontWeight.
        
            left: The first System.Windows.FontWeight object to compare.
            right: The second System.Windows.FontWeight object to compare.
            Returns: An System.Int32 value that indicates the relationship between the two instances 
             of System.Windows.FontWeight. When the return value is less than zero, left is 
             less than right. When this value is zero, it indicates that both operands are 
             equal. When the value is greater than zero, it indicates that left is greater 
             than right.
        """
        pass

    def Equals(self, obj):
        """
        Equals(self: FontWeight, obj: object) -> bool
        
            Determines whether the current System.Windows.FontWeight object is equal to a 
             specified object.
        
        
            obj: The System.Object to compare for equality.
            Returns: true if the two instances are equal; otherwise, false.
        Equals(self: FontWeight, obj: FontWeight) -> bool
        
            Determines whether the current System.Windows.FontWeight object is equal to a 
             specified System.Windows.FontWeight object.
        
        
            obj: The instance of System.Windows.FontWeight to compare for equality.
            Returns: true if the two instances are equal; otherwise, false.
        """
        pass

    @staticmethod
    def FromOpenTypeWeight(weightValue):
        """
        FromOpenTypeWeight(weightValue: int) -> FontWeight
        
            Creates a new instance of System.Windows.FontWeight that corresponds to the 
             OpenType�usWeightClass value.
        
        
            weightValue: An integer value between 1 and 999 that corresponds to the usWeightClass 
             definition in the OpenType specification.
        
            Returns: A new instance of System.Windows.FontWeight.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: FontWeight) -> int
        
            Retrieves the hash code for this object.
            Returns: A 32-bit hash code, which is a signed integer.
        """
        pass

    def ToOpenTypeWeight(self):
        """
        ToOpenTypeWeight(self: FontWeight) -> int
        
            Returns a value that represents the OpenType�usWeightClass for the 
             System.Windows.FontWeight object.
        
            Returns: An integer value between 1 and 999 that corresponds to the usWeightClass 
             definition in the OpenType specification.
        """
        pass

    def ToString(self):
        """
        ToString(self: FontWeight) -> str
        
            Returns a text string that represents the value of the 
             System.Windows.FontWeight object and is based on the 
             System.Globalization.CultureInfo.CurrentCulture property information.
        
            Returns: A System.String that represents the value of the System.Windows.FontWeight 
             object, such as "Light", "Normal", or "UltraBold".
        """
        pass

    def __cmp__(self, *args): #cannot find CLR method
        """ x.__cmp__(y) <==> cmp(x,y) """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass


class FontWeightConverter(TypeConverter):
    """
    Converts instances of System.Windows.FontWeight to and from other data types.
    
    FontWeightConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: FontWeightConverter, td: ITypeDescriptorContext, t: Type) -> bool
        
            Returns a value that indicates whether this converter can convert an object of 
             the given type to an instance of System.Windows.FontWeight.
        
        
            td: Context information of a type.
            t: The type of the source that is being evaluated for conversion.
            Returns: true if the converter can convert the provided type to an instance of 
             System.Windows.FontWeight; otherwise, false.
        """
        pass

    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: FontWeightConverter, context: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Determines whether an instance of System.Windows.FontWeight can be converted to 
             a different type.
        
        
            context: Context information of a type.
            destinationType: The desired type that that this instance of System.Windows.FontWeight is being 
             evaluated for conversion to.
        
            Returns: true if the converter can convert this instance of System.Windows.FontWeight; 
             otherwise, false.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: FontWeightConverter, td: ITypeDescriptorContext, ci: CultureInfo, value: object) -> object
        
            Attempts to convert a specified object to an instance of 
             System.Windows.FontWeight.
        
        
            td: Context information of a type.
            ci: System.Globalization.CultureInfo of the type being converted.
            value: The object being converted.
            Returns: The instance of System.Windows.FontWeight created from the converted value.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: FontWeightConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object, destinationType: Type) -> object
        
            Attempts to convert an instance of System.Windows.FontWeight to a specified 
             type.
        
        
            context: Describes the context information of a type.
            culture: Describes the System.Globalization.CultureInfo of the type being converted.
            value: The instance of System.Windows.FontWeight to convert.
            destinationType: The type this instance of System.Windows.FontWeight is converted to.
            Returns: The object created from the converted instance of System.Windows.FontWeight.
        """
        pass


class FontWeights(object):
    """ Provides a set of static predefined System.Windows.FontWeight values. """
    Black = None
    Bold = None
    DemiBold = None
    ExtraBlack = None
    ExtraBold = None
    ExtraLight = None
    Heavy = None
    Light = None
    Medium = None
    Normal = None
    Regular = None
    SemiBold = None
    Thin = None
    UltraBlack = None
    UltraBold = None
    UltraLight = None
    __all__ = []


class FrameworkCompatibilityPreferences(object):
    # no doc
    AreInactiveSelectionHighlightBrushKeysSupported = False
    KeepTextBoxDisplaySynchronizedWithTextProperty = False
    ShouldThrowOnCopyOrCutFailure = False
    __all__ = []


class IInputElement:
    """ Establishes the common events and also the event-related properties and methods for basic input processing by Windows Presentation Foundation (WPF) elements. """
    def AddHandler(self, routedEvent, handler):
        """
        AddHandler(self: IInputElement, routedEvent: RoutedEvent, handler: Delegate)
            Adds a routed event handler for a specific routed event to an element.
        
            routedEvent: The identifier for the routed event that is being handled.
            handler: A reference to the handler implementation.
        """
        pass

    def CaptureMouse(self):
        """
        CaptureMouse(self: IInputElement) -> bool
        
            Attempts to force capture of the mouse to this element.
            Returns: true if the mouse is successfully captured; otherwise, false.
        """
        pass

    def CaptureStylus(self):
        """
        CaptureStylus(self: IInputElement) -> bool
        
            Attempts to force capture of the stylus to this element.
            Returns: true if the stylus is successfully captured; otherwise, false.
        """
        pass

    def Focus(self):
        """
        Focus(self: IInputElement) -> bool
        
            Attempts to focus the keyboard on this element.
            Returns: true if keyboard focus is moved to this element or already was on this element; 
             otherwise, false.
        """
        pass

    def RaiseEvent(self, e):
        """
        RaiseEvent(self: IInputElement, e: RoutedEventArgs)
            Raises the routed event that is specified by the 
             System.Windows.RoutedEventArgs.RoutedEvent property within the provided 
             System.Windows.RoutedEventArgs.
        
        
            e: An instance of the System.Windows.RoutedEventArgs class that contains the 
             identifier for the event to raise.
        """
        pass

    def ReleaseMouseCapture(self):
        """
        ReleaseMouseCapture(self: IInputElement)
            Releases the mouse capture, if this element holds the capture.
        """
        pass

    def ReleaseStylusCapture(self):
        """
        ReleaseStylusCapture(self: IInputElement)
            Releases the stylus capture, if this element holds the capture.
        """
        pass

    def RemoveHandler(self, routedEvent, handler):
        """
        RemoveHandler(self: IInputElement, routedEvent: RoutedEvent, handler: Delegate)
            Removes all instances of the specified routed event handler from this element.
        
            routedEvent: Identifier of the routed event for which the handler is attached.
            handler: The specific handler implementation to remove from this element's event handler 
             collection.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Focusable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether focus can be set to this element.

Get: Focusable(self: IInputElement) -> bool

Set: Focusable(self: IInputElement) = value
"""

    IsEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether this element is enabled in the user interface (UI).

Get: IsEnabled(self: IInputElement) -> bool

"""

    IsKeyboardFocused = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether this element has keyboard focus.

Get: IsKeyboardFocused(self: IInputElement) -> bool

"""

    IsKeyboardFocusWithin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether keyboard focus is anywhere inside the element bounds, including if keyboard focus is inside the bounds of any visual child elements.

Get: IsKeyboardFocusWithin(self: IInputElement) -> bool

"""

    IsMouseCaptured = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the mouse is captured to this element.

Get: IsMouseCaptured(self: IInputElement) -> bool

"""

    IsMouseDirectlyOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the mouse pointer is over this element in the strictest hit testing sense.

Get: IsMouseDirectlyOver(self: IInputElement) -> bool

"""

    IsMouseOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the mouse pointer is located over this element (including visual children elements that are inside its bounds).

Get: IsMouseOver(self: IInputElement) -> bool

"""

    IsStylusCaptured = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the stylus is captured to this element.

Get: IsStylusCaptured(self: IInputElement) -> bool

"""

    IsStylusDirectlyOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the stylus is over this element in the strictest hit testing sense.

Get: IsStylusDirectlyOver(self: IInputElement) -> bool

"""

    IsStylusOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the stylus is located over this element (or over visual child elements that are inside its bounds).

Get: IsStylusOver(self: IInputElement) -> bool

"""


    GotKeyboardFocus = None
    GotMouseCapture = None
    GotStylusCapture = None
    KeyDown = None
    KeyUp = None
    LostKeyboardFocus = None
    LostMouseCapture = None
    LostStylusCapture = None
    MouseEnter = None
    MouseLeave = None
    MouseLeftButtonDown = None
    MouseLeftButtonUp = None
    MouseMove = None
    MouseRightButtonDown = None
    MouseRightButtonUp = None
    MouseWheel = None
    PreviewGotKeyboardFocus = None
    PreviewKeyDown = None
    PreviewKeyUp = None
    PreviewLostKeyboardFocus = None
    PreviewMouseLeftButtonDown = None
    PreviewMouseLeftButtonUp = None
    PreviewMouseMove = None
    PreviewMouseRightButtonDown = None
    PreviewMouseRightButtonUp = None
    PreviewMouseWheel = None
    PreviewStylusButtonDown = None
    PreviewStylusButtonUp = None
    PreviewStylusDown = None
    PreviewStylusInAirMove = None
    PreviewStylusInRange = None
    PreviewStylusMove = None
    PreviewStylusOutOfRange = None
    PreviewStylusSystemGesture = None
    PreviewStylusUp = None
    PreviewTextInput = None
    StylusButtonDown = None
    StylusButtonUp = None
    StylusDown = None
    StylusEnter = None
    StylusInAirMove = None
    StylusInRange = None
    StylusLeave = None
    StylusMove = None
    StylusOutOfRange = None
    StylusSystemGesture = None
    StylusUp = None
    TextInput = None


class IFrameworkInputElement(IInputElement):
    """ Declares a namescope contract for framework elements. """
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the name of an element.

Get: Name(self: IFrameworkInputElement) -> str

Set: Name(self: IFrameworkInputElement) = value
"""



class FrameworkContentElement(ContentElement, IInputElement, IAnimatable, IFrameworkInputElement, ISupportInitialize, IQueryAmbient):
    """
    System.Windows.FrameworkContentElement is the WPF framework-level implementation and expansion of the System.Windows.ContentElement base class. System.Windows.FrameworkContentElement adds support for additional input APIs (including tooltips and context menus), storyboards, data context for data�binding, styles support, and logical tree helper APIs.
    
    FrameworkContentElement()
    """
    def AddLogicalChild(self, *args): #cannot find CLR method
        """
        AddLogicalChild(self: FrameworkContentElement, child: object)
            Adds the provided element as a child of this element.
        
            child: The child element to be added.
        """
        pass

    def BeginInit(self):
        """
        BeginInit(self: FrameworkContentElement)
            Called before an element is initialized.
        """
        pass

    def BeginStoryboard(self, storyboard, handoffBehavior=None, isControllable=None):
        """
        BeginStoryboard(self: FrameworkContentElement, storyboard: Storyboard, handoffBehavior: HandoffBehavior, isControllable: bool)
            Begins the sequence of actions that are contained in the provided storyboard, 
             with specified state for control of the animation after it is started.
        
        
            storyboard: The storyboard to begin.
            handoffBehavior: A value of the enumeration that describes behavior to use if a  property 
             described in the storyboard is already animated.
        
            isControllable: Declares whether the animation is controllable (can be paused) after it is 
             started.
        
        BeginStoryboard(self: FrameworkContentElement, storyboard: Storyboard, handoffBehavior: HandoffBehavior)
            Begins the sequence of actions that are contained in the provided storyboard, 
             with options specified for what should occur if the property is already 
             animated.
        
        
            storyboard: The storyboard to begin.
            handoffBehavior: A value of the enumeration that describes behavior to use if a property 
             described in the storyboard is already animated.
        
        BeginStoryboard(self: FrameworkContentElement, storyboard: Storyboard)
            Begins the sequence of actions that are contained in the provided storyboard.
        
            storyboard: The storyboard to begin.
        """
        pass

    def BringIntoView(self):
        """
        BringIntoView(self: FrameworkContentElement)
            Attempts to bring this element into view, within any scrollable regions it is 
             contained within.
        """
        pass

    def EndInit(self):
        """
        EndInit(self: FrameworkContentElement)
            Called immediately after an element is initialized.
        """
        pass

    def FindName(self, name):
        """
        FindName(self: FrameworkContentElement, name: str) -> object
        
            Finds an element that has the provided identifier name.
        
            name: Name of the element to search for.
            Returns: The requested element. May be null if no matching element was found.
        """
        pass

    def FindResource(self, resourceKey):
        """
        FindResource(self: FrameworkContentElement, resourceKey: object) -> object
        
            Searches for a resource with the specified key, and will throw an exception if 
             the requested resource is not found.
        
        
            resourceKey: Key identifier of the resource to be found.
            Returns: The found resource, or null if no matching resource was found (but will also 
             throw an exception if null).
        """
        pass

    def GetBindingExpression(self, dp):
        """
        GetBindingExpression(self: FrameworkContentElement, dp: DependencyProperty) -> BindingExpression
        
            Gets the System.Windows.Data.BindingExpression for the specified property's 
             binding.
        
        
            dp: The target System.Windows.DependencyProperty from which to get the binding.
            Returns: Returns a System.Windows.Data.BindingExpression if the target is data bound; 
             otherwise, null.
        """
        pass

    def GetUIParentCore(self, *args): #cannot find CLR method
        """
        GetUIParentCore(self: FrameworkContentElement) -> DependencyObject
        
            Returns an alternative logical parent for this element if there is no visual 
             parent. In this case, a System.Windows.FrameworkContentElement  parent is 
             always the same value as the System.Windows.FrameworkContentElement.Parent 
             property.
        
            Returns: Returns something other than null whenever a WPF framework-level implementation 
             of this method has a non-visual parent connection.
        """
        pass

    def MoveFocus(self, request):
        """
        MoveFocus(self: FrameworkContentElement, request: TraversalRequest) -> bool
        
            Moves the keyboard focus from this element to another element.
        
            request: The direction that focus is to be moved, as a value of the enumeration.
            Returns: Returns true if focus is moved successfully; false if the target element in 
             direction as specified does not exist.
        """
        pass

    def OnContextMenuClosing(self, *args): #cannot find CLR method
        """
        OnContextMenuClosing(self: FrameworkContentElement, e: ContextMenuEventArgs)
            Invoked whenever the System.Windows.FrameworkContentElement.ContextMenuClosing 
             routed event reaches this class in its route. Implement this method to add 
             class handling for this event.
        
        
            e: Provides data about the event.
        """
        pass

    def OnContextMenuOpening(self, *args): #cannot find CLR method
        """
        OnContextMenuOpening(self: FrameworkContentElement, e: ContextMenuEventArgs)
            Invoked whenever the System.Windows.FrameworkContentElement.ContextMenuOpening 
             routed event reaches this class in its route. Implement this method to add 
             class handling for this event.
        
        
            e: Event data for the event.
        """
        pass

    def OnCreateAutomationPeer(self, *args): #cannot find CLR method
        """
        OnCreateAutomationPeer(self: ContentElement) -> AutomationPeer
        
            Returns class-specific System.Windows.Automation.Peers.AutomationPeer 
             implementations for the Windows Presentation Foundation (WPF) infrastructure.
        
            Returns: The type-specific System.Windows.Automation.Peers.AutomationPeer implementation.
        """
        pass

    def OnDragEnter(self, *args): #cannot find CLR method
        """
        OnDragEnter(self: ContentElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.DragEnter�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnDragLeave(self, *args): #cannot find CLR method
        """
        OnDragLeave(self: ContentElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.DragLeave�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnDragOver(self, *args): #cannot find CLR method
        """
        OnDragOver(self: ContentElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.DragOver�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnDrop(self, *args): #cannot find CLR method
        """
        OnDrop(self: ContentElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.DragEnter�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnGiveFeedback(self, *args): #cannot find CLR method
        """
        OnGiveFeedback(self: ContentElement, e: GiveFeedbackEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.GiveFeedback�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.GiveFeedbackEventArgs that contains the event data.
        """
        pass

    def OnGotFocus(self, *args): #cannot find CLR method
        """
        OnGotFocus(self: FrameworkContentElement, e: RoutedEventArgs)
            Class handler for the System.Windows.ContentElement.GotFocus event.
        
            e: Event data for the event.
        """
        pass

    def OnGotKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnGotKeyboardFocus(self: ContentElement, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.GotKeyboardFocus�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnGotMouseCapture(self, *args): #cannot find CLR method
        """
        OnGotMouseCapture(self: ContentElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.GotMouseCapture�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        """
        pass

    def OnGotStylusCapture(self, *args): #cannot find CLR method
        """
        OnGotStylusCapture(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.GotStylusCapture�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnGotTouchCapture(self, *args): #cannot find CLR method
        """
        OnGotTouchCapture(self: ContentElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.ContentElement.GotTouchCapture 
             routed event that occurs when a touch is captured to this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnInitialized(self, *args): #cannot find CLR method
        """
        OnInitialized(self: FrameworkContentElement, e: EventArgs)
            Raises the System.Windows.FrameworkContentElement.Initialized event. This 
             method is invoked whenever System.Windows.FrameworkContentElement.IsInitialized 
             is set to true.
        
        
            e: Event data for the event.
        """
        pass

    def OnIsKeyboardFocusedChanged(self, *args): #cannot find CLR method
        """
        OnIsKeyboardFocusedChanged(self: ContentElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled 
             System.Windows.ContentElement.IsKeyboardFocusedChanged event is raised on this 
             element. Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnIsKeyboardFocusWithinChanged(self, *args): #cannot find CLR method
        """
        OnIsKeyboardFocusWithinChanged(self: ContentElement, e: DependencyPropertyChangedEventArgs)
            Invoked just before the 
             System.Windows.ContentElement.IsKeyboardFocusWithinChanged event is raised by 
             this element. Implement this method to add class handling for this event.
        
        
            e: A System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnIsMouseCapturedChanged(self, *args): #cannot find CLR method
        """
        OnIsMouseCapturedChanged(self: ContentElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.ContentElement.IsMouseCapturedChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnIsMouseCaptureWithinChanged(self, *args): #cannot find CLR method
        """
        OnIsMouseCaptureWithinChanged(self: ContentElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled 
             System.Windows.ContentElement.IsMouseCaptureWithinChanged event is raised on 
             this element. Implement this method to add class handling for this event.
        
        
            e: A System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnIsMouseDirectlyOverChanged(self, *args): #cannot find CLR method
        """
        OnIsMouseDirectlyOverChanged(self: ContentElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled 
             System.Windows.ContentElement.IsMouseDirectlyOverChanged event is raised on 
             this element. Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnIsStylusCapturedChanged(self, *args): #cannot find CLR method
        """
        OnIsStylusCapturedChanged(self: ContentElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.ContentElement.IsStylusCapturedChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: A System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnIsStylusCaptureWithinChanged(self, *args): #cannot find CLR method
        """
        OnIsStylusCaptureWithinChanged(self: ContentElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled 
             System.Windows.ContentElement.IsStylusCaptureWithinChanged event is raised on 
             this element. Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnIsStylusDirectlyOverChanged(self, *args): #cannot find CLR method
        """
        OnIsStylusDirectlyOverChanged(self: ContentElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled 
             System.Windows.ContentElement.IsStylusDirectlyOverChanged event is raised on 
             this element. Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnKeyDown(self, *args): #cannot find CLR method
        """
        OnKeyDown(self: ContentElement, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.KeyDown�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        """
        pass

    def OnKeyUp(self, *args): #cannot find CLR method
        """
        OnKeyUp(self: ContentElement, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.KeyUp�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        """
        pass

    def OnLostFocus(self, *args): #cannot find CLR method
        """
        OnLostFocus(self: ContentElement, e: RoutedEventArgs)
            Raises the System.Windows.ContentElement.LostFocus�routed event by using the 
             event data that is provided.
        
        
            e: A System.Windows.RoutedEventArgs that contains event data. This event data must 
             contain the identifier for the System.Windows.ContentElement.LostFocus event.
        """
        pass

    def OnLostKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnLostKeyboardFocus(self: ContentElement, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.LostKeyboardFocus�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains event data.
        """
        pass

    def OnLostMouseCapture(self, *args): #cannot find CLR method
        """
        OnLostMouseCapture(self: ContentElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.LostMouseCapture�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains event data.
        """
        pass

    def OnLostStylusCapture(self, *args): #cannot find CLR method
        """
        OnLostStylusCapture(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.LostStylusCapture�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains event data.
        """
        pass

    def OnLostTouchCapture(self, *args): #cannot find CLR method
        """
        OnLostTouchCapture(self: ContentElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.ContentElement.LostTouchCapture 
             routed event that occurs when this element loses a touch capture.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnMouseDown(self, *args): #cannot find CLR method
        """
        OnMouseDown(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseDown�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. 
             This event data reports details about the mouse button that was pressed and the 
             handled state.
        """
        pass

    def OnMouseEnter(self, *args): #cannot find CLR method
        """
        OnMouseEnter(self: ContentElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseEnter�attached event 
             is raised on this element. Implement this method to add class handling for this 
             event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        """
        pass

    def OnMouseLeave(self, *args): #cannot find CLR method
        """
        OnMouseLeave(self: ContentElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseLeave�attached event 
             is raised on this element. Implement this method to add class handling for this 
             event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        """
        pass

    def OnMouseLeftButtonDown(self, *args): #cannot find CLR method
        """
        OnMouseLeftButtonDown(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.ContentElement.MouseLeftButtonDown�
             routed event is raised on this element. Implement this method to add class 
             handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was pressed.
        """
        pass

    def OnMouseLeftButtonUp(self, *args): #cannot find CLR method
        """
        OnMouseLeftButtonUp(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.ContentElement.MouseLeftButtonUp�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was released.
        """
        pass

    def OnMouseMove(self, *args): #cannot find CLR method
        """
        OnMouseMove(self: ContentElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseMove�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        """
        pass

    def OnMouseRightButtonDown(self, *args): #cannot find CLR method
        """
        OnMouseRightButtonDown(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.ContentElement.MouseRightButtonDown�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was pressed.
        """
        pass

    def OnMouseRightButtonUp(self, *args): #cannot find CLR method
        """
        OnMouseRightButtonUp(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.ContentElement.MouseRightButtonUp�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was released.
        """
        pass

    def OnMouseUp(self, *args): #cannot find CLR method
        """
        OnMouseUp(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseUp�routed event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the mouse button was released.
        """
        pass

    def OnMouseWheel(self, *args): #cannot find CLR method
        """
        OnMouseWheel(self: ContentElement, e: MouseWheelEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseWheel�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseWheelEventArgs that contains the event data.
        """
        pass

    def OnPreviewDragEnter(self, *args): #cannot find CLR method
        """
        OnPreviewDragEnter(self: ContentElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDragEnter�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnPreviewDragLeave(self, *args): #cannot find CLR method
        """
        OnPreviewDragLeave(self: ContentElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDragLeave�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnPreviewDragOver(self, *args): #cannot find CLR method
        """
        OnPreviewDragOver(self: ContentElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDragOver�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnPreviewDrop(self, *args): #cannot find CLR method
        """
        OnPreviewDrop(self: ContentElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDrop�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnPreviewGiveFeedback(self, *args): #cannot find CLR method
        """
        OnPreviewGiveFeedback(self: ContentElement, e: GiveFeedbackEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewGiveFeedback�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.GiveFeedbackEventArgs that contains the event data.
        """
        pass

    def OnPreviewGotKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnPreviewGotKeyboardFocus(self: ContentElement, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewGotKeyboardFocus�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnPreviewKeyDown(self, *args): #cannot find CLR method
        """
        OnPreviewKeyDown(self: ContentElement, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewKeyDown�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        """
        pass

    def OnPreviewKeyUp(self, *args): #cannot find CLR method
        """
        OnPreviewKeyUp(self: ContentElement, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewKeyUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        """
        pass

    def OnPreviewLostKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnPreviewLostKeyboardFocus(self: ContentElement, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewKeyDown�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnPreviewMouseDown(self, *args): #cannot find CLR method
        """
        OnPreviewMouseDown(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseDown attached�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that one or more mouse buttons were pressed.
        """
        pass

    def OnPreviewMouseLeftButtonDown(self, *args): #cannot find CLR method
        """
        OnPreviewMouseLeftButtonDown(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled 
             System.Windows.ContentElement.PreviewMouseLeftButtonDown�routed event reaches 
             an element in its route that is derived from this class. Implement this method 
             to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was pressed.
        """
        pass

    def OnPreviewMouseLeftButtonUp(self, *args): #cannot find CLR method
        """
        OnPreviewMouseLeftButtonUp(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled 
             System.Windows.ContentElement.PreviewMouseLeftButtonUp�routed event reaches an 
             element in its route that is derived from this class. Implement this method to 
             add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was released.
        """
        pass

    def OnPreviewMouseMove(self, *args): #cannot find CLR method
        """
        OnPreviewMouseMove(self: ContentElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseMove�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        """
        pass

    def OnPreviewMouseRightButtonDown(self, *args): #cannot find CLR method
        """
        OnPreviewMouseRightButtonDown(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled 
             System.Windows.ContentElement.PreviewMouseRightButtonDown�routed event reaches 
             an element in its route that is derived from this class. Implement this method 
             to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was pressed.
        """
        pass

    def OnPreviewMouseRightButtonUp(self, *args): #cannot find CLR method
        """
        OnPreviewMouseRightButtonUp(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled 
             System.Windows.ContentElement.PreviewMouseRightButtonUp�routed event reaches an 
             element in its route that is derived from this class. Implement this method to 
             add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was released.
        """
        pass

    def OnPreviewMouseUp(self, *args): #cannot find CLR method
        """
        OnPreviewMouseUp(self: ContentElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that one or more mouse buttons were released.
        """
        pass

    def OnPreviewMouseWheel(self, *args): #cannot find CLR method
        """
        OnPreviewMouseWheel(self: ContentElement, e: MouseWheelEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseWheel�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseWheelEventArgs that contains the event data.
        """
        pass

    def OnPreviewQueryContinueDrag(self, *args): #cannot find CLR method
        """
        OnPreviewQueryContinueDrag(self: ContentElement, e: QueryContinueDragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewQueryContinueDrag�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.QueryContinueDragEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusButtonDown(self, *args): #cannot find CLR method
        """
        OnPreviewStylusButtonDown(self: ContentElement, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusButtonDown�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusButtonUp(self, *args): #cannot find CLR method
        """
        OnPreviewStylusButtonUp(self: ContentElement, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusButtonUp�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusDown(self, *args): #cannot find CLR method
        """
        OnPreviewStylusDown(self: ContentElement, e: StylusDownEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusDown�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusDownEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusInAirMove(self, *args): #cannot find CLR method
        """
        OnPreviewStylusInAirMove(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusInAirMove�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusInRange(self, *args): #cannot find CLR method
        """
        OnPreviewStylusInRange(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusInRange�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusMove(self, *args): #cannot find CLR method
        """
        OnPreviewStylusMove(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusMove�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusOutOfRange(self, *args): #cannot find CLR method
        """
        OnPreviewStylusOutOfRange(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusOutOfRange�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusSystemGesture(self, *args): #cannot find CLR method
        """
        OnPreviewStylusSystemGesture(self: ContentElement, e: StylusSystemGestureEventArgs)
            Invoked when an unhandled 
             System.Windows.Input.Stylus.PreviewStylusSystemGesture�attached event reaches 
             an element in its route that is derived from this class. Implement this method 
             to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusSystemGestureEventArgs that contains the event 
             data.
        """
        pass

    def OnPreviewStylusUp(self, *args): #cannot find CLR method
        """
        OnPreviewStylusUp(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnPreviewTextInput(self, *args): #cannot find CLR method
        """
        OnPreviewTextInput(self: ContentElement, e: TextCompositionEventArgs)
            Invoked when an unhandled 
             System.Windows.Input.TextCompositionManager.PreviewTextInput�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.TextCompositionEventArgs that contains the event data.
        """
        pass

    def OnPreviewTouchDown(self, *args): #cannot find CLR method
        """
        OnPreviewTouchDown(self: ContentElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.ContentElement.PreviewTouchDown 
             routed event that occurs when a touch presses this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnPreviewTouchMove(self, *args): #cannot find CLR method
        """
        OnPreviewTouchMove(self: ContentElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.ContentElement.PreviewTouchMove 
             routed event that occurs when a touch moves while inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnPreviewTouchUp(self, *args): #cannot find CLR method
        """
        OnPreviewTouchUp(self: ContentElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.ContentElement.PreviewTouchUp 
             routed event that occurs when a touch is released inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnPropertyChanged(self, *args): #cannot find CLR method
        """
        OnPropertyChanged(self: FrameworkContentElement, e: DependencyPropertyChangedEventArgs)
            Invoked whenever the effective value of any dependency property on this 
             System.Windows.FrameworkContentElement has been updated. The specific 
             dependency property that changed is reported in the arguments parameter. 
             Overrides 
             System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPrope
             rtyChangedEventArgs).
        
        
            e: The event data that describes the property that changed, including the old and 
             new values.
        """
        pass

    def OnQueryContinueDrag(self, *args): #cannot find CLR method
        """
        OnQueryContinueDrag(self: ContentElement, e: QueryContinueDragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.QueryContinueDrag�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.QueryContinueDragEventArgs that contains the event data.
        """
        pass

    def OnQueryCursor(self, *args): #cannot find CLR method
        """
        OnQueryCursor(self: ContentElement, e: QueryCursorEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.QueryCursor�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.QueryCursorEventArgs that contains the event data.
        """
        pass

    def OnStyleChanged(self, *args): #cannot find CLR method
        """
        OnStyleChanged(self: FrameworkContentElement, oldStyle: Style, newStyle: Style)
            Invoked when the style that is in use on this element changes.
        
            oldStyle: The old style.
            newStyle: The new style.
        """
        pass

    def OnStylusButtonDown(self, *args): #cannot find CLR method
        """
        OnStylusButtonDown(self: ContentElement, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusButtonDown�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        """
        pass

    def OnStylusButtonUp(self, *args): #cannot find CLR method
        """
        OnStylusButtonUp(self: ContentElement, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusButtonUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        """
        pass

    def OnStylusDown(self, *args): #cannot find CLR method
        """
        OnStylusDown(self: ContentElement, e: StylusDownEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusDown�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusDownEventArgs that contains the event data.
        """
        pass

    def OnStylusEnter(self, *args): #cannot find CLR method
        """
        OnStylusEnter(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusEnter�attached 
             event is raised by this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnStylusInAirMove(self, *args): #cannot find CLR method
        """
        OnStylusInAirMove(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusInAirMove�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnStylusInRange(self, *args): #cannot find CLR method
        """
        OnStylusInRange(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusInRange�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnStylusLeave(self, *args): #cannot find CLR method
        """
        OnStylusLeave(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusLeave�attached 
             event is raised by this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnStylusMove(self, *args): #cannot find CLR method
        """
        OnStylusMove(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusMove�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnStylusOutOfRange(self, *args): #cannot find CLR method
        """
        OnStylusOutOfRange(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusOutOfRange�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnStylusSystemGesture(self, *args): #cannot find CLR method
        """
        OnStylusSystemGesture(self: ContentElement, e: StylusSystemGestureEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusSystemGesture�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusSystemGestureEventArgs that contains the event 
             data.
        """
        pass

    def OnStylusUp(self, *args): #cannot find CLR method
        """
        OnStylusUp(self: ContentElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusUp�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnTextInput(self, *args): #cannot find CLR method
        """
        OnTextInput(self: ContentElement, e: TextCompositionEventArgs)
            Invoked when an unhandled System.Windows.Input.TextCompositionManager.TextInput�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.TextCompositionEventArgs that contains the event data.
        """
        pass

    def OnToolTipClosing(self, *args): #cannot find CLR method
        """
        OnToolTipClosing(self: FrameworkContentElement, e: ToolTipEventArgs)
            Invoked whenever the System.Windows.FrameworkContentElement.ToolTipClosing 
             routed event reaches this class in its route. Implement this method to add 
             class handling for this event.
        
        
            e: Provides data about the event.
        """
        pass

    def OnToolTipOpening(self, *args): #cannot find CLR method
        """
        OnToolTipOpening(self: FrameworkContentElement, e: ToolTipEventArgs)
            Invoked whenever the System.Windows.FrameworkContentElement.ToolTipOpening 
             routed event reaches this class in its route. Implement this method to add 
             class handling for this event.
        
        
            e: Provides data about the event.
        """
        pass

    def OnTouchDown(self, *args): #cannot find CLR method
        """
        OnTouchDown(self: ContentElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.ContentElement.TouchDown routed 
             event that occurs when a touch presses inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnTouchEnter(self, *args): #cannot find CLR method
        """
        OnTouchEnter(self: ContentElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.ContentElement.TouchEnter routed 
             event that occurs when a touch moves from outside to inside the bounds of this 
             element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnTouchLeave(self, *args): #cannot find CLR method
        """
        OnTouchLeave(self: ContentElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.ContentElement.TouchLeave routed 
             event that occurs when a touch moves from inside to outside the bounds of this 
             element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnTouchMove(self, *args): #cannot find CLR method
        """
        OnTouchMove(self: ContentElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.ContentElement.TouchMove routed 
             event that occurs when a touch moves while inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnTouchUp(self, *args): #cannot find CLR method
        """
        OnTouchUp(self: ContentElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.ContentElement.TouchUp routed 
             event that occurs when a touch is released inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def PredictFocus(self, direction):
        """
        PredictFocus(self: FrameworkContentElement, direction: FocusNavigationDirection) -> DependencyObject
        
            Determines the next element that would receive focus relative to this element 
             for a provided focus movement direction, but does not actually move the focus. 
             This method is sealed and cannot be overridden.
        
        
            direction: The direction for which a prospective focus change should be determined.
            Returns: The next element that focus would move to if focus were actually traversed. May 
             return null if focus cannot be moved relative to this element for the provided 
             direction.
        """
        pass

    def RegisterName(self, name, scopedElement):
        """
        RegisterName(self: FrameworkContentElement, name: str, scopedElement: object)
            Provides an accessor that simplifies access to the System.Windows.NameScope 
             registration method.
        
        
            name: Name to use for the specified name-object mapping.
            scopedElement: Object for the mapping.
        """
        pass

    def RemoveLogicalChild(self, *args): #cannot find CLR method
        """
        RemoveLogicalChild(self: FrameworkContentElement, child: object)
            Removes the specified element from the logical tree for this element.
        
            child: The element to remove.
        """
        pass

    def SetBinding(self, dp, *__args):
        """
        SetBinding(self: FrameworkContentElement, dp: DependencyProperty, path: str) -> BindingExpression
        
            Attaches a binding to this element, based on the provided source property name 
             as a path qualification to the data source.
        
        
            dp: Identifies the bound property.
            path: The source property name or the path to the property used for the binding.
            Returns: Records the conditions of the binding. This return value can be useful for 
             error checking.
        
        SetBinding(self: FrameworkContentElement, dp: DependencyProperty, binding: BindingBase) -> BindingExpressionBase
        
            Attaches a binding to this element, based on the provided binding object.
        
            dp: Identifies the bound property.
            binding: Represents a data binding.
            Returns: Records the conditions of the binding. This return value can be useful for 
             error checking.
        """
        pass

    def SetResourceReference(self, dp, name):
        """
        SetResourceReference(self: FrameworkContentElement, dp: DependencyProperty, name: object)
            Searches for a resource with the specified name and sets up a resource 
             reference to it for the specified property.
        
        
            dp: The property to which the resource is bound.
            name: The name of the resource.
        """
        pass

    def ShouldSerializeProperty(self, *args): #cannot find CLR method
        """
        ShouldSerializeProperty(self: DependencyObject, dp: DependencyProperty) -> bool
        
            Returns a value that indicates whether serialization processes should serialize 
             the value for the provided dependency property.
        
        
            dp: The identifier for the dependency property that should be serialized.
            Returns: true if the dependency property that is supplied should be value-serialized; 
             otherwise, false.
        
        ShouldSerializeProperty(self: Window_16$17, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Label_17$18, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: TextBox_18$19, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Button_19$20, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: CheckBox_20$21, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: ComboBox_21$22, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Separator_22$23, dp: DependencyProperty) -> bool
        """
        pass

    def ShouldSerializeResources(self):
        """
        ShouldSerializeResources(self: FrameworkContentElement) -> bool
        
            Returns whether serialization processes should serialize the contents of the 
             System.Windows.FrameworkContentElement.Resources property on instances of this 
             class.
        
            Returns: true if the System.Windows.FrameworkContentElement.Resources property value 
             should be serialized; otherwise, false.
        """
        pass

    def ShouldSerializeStyle(self):
        """
        ShouldSerializeStyle(self: FrameworkContentElement) -> bool
        
            Returns whether serialization processes should serialize the contents of the 
             System.Windows.FrameworkContentElement.Style property on instances of this 
             class.
        
            Returns: true if the System.Windows.FrameworkContentElement.Style property value should 
             be serialized; otherwise, false.
        """
        pass

    def TryFindResource(self, resourceKey):
        """
        TryFindResource(self: FrameworkContentElement, resourceKey: object) -> object
        
            Searches for a resource with the specified key, and returns that resource if 
             found.
        
        
            resourceKey: Key identifier of the resource to be found.
            Returns: The found resource. If no resource was found, null is returned.
        """
        pass

    def UnregisterName(self, name):
        """
        UnregisterName(self: FrameworkContentElement, name: str)
            Simplifies access to the System.Windows.NameScope de-registration method.
        
            name: Name of the name-object pair to remove from the current scope.
        """
        pass

    def UpdateDefaultStyle(self):
        """ UpdateDefaultStyle(self: FrameworkContentElement) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    BindingGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Data.BindingGroup that is used for the element.

Get: BindingGroup(self: FrameworkContentElement) -> BindingGroup

Set: BindingGroup(self: FrameworkContentElement) = value
"""

    ContextMenu = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the context menu element that should appear whenever the context menu is requested via user interface (UI) from within this element.

Get: ContextMenu(self: FrameworkContentElement) -> ContextMenu

Set: ContextMenu(self: FrameworkContentElement) = value
"""

    Cursor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the cursor that displays when the mouse pointer is over this element.

Get: Cursor(self: FrameworkContentElement) -> Cursor

Set: Cursor(self: FrameworkContentElement) = value
"""

    DataContext = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the data context for an element when it participates in data binding.

Get: DataContext(self: FrameworkContentElement) -> object

Set: DataContext(self: FrameworkContentElement) = value
"""

    DefaultStyleKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the key to use to find the style template for this control in themes.

"""

    FocusVisualStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets an object that enables customization of appearance, effects, or other style characteristics that will apply to this element when it captures keyboard focus.

Get: FocusVisualStyle(self: FrameworkContentElement) -> Style

Set: FocusVisualStyle(self: FrameworkContentElement) = value
"""

    ForceCursor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value indicating whether this System.Windows.FrameworkContentElement should force the user interface (UI) to render the cursor as declared by this instance's System.Windows.FrameworkContentElement.Cursor property.

Get: ForceCursor(self: FrameworkContentElement) -> bool

Set: ForceCursor(self: FrameworkContentElement) = value
"""

    InputScope = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the context for input used by this System.Windows.FrameworkContentElement.

Get: InputScope(self: FrameworkContentElement) -> InputScope

Set: InputScope(self: FrameworkContentElement) = value
"""

    IsEnabledCore = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that becomes the return value of System.Windows.ContentElement.IsEnabled in derived classes.

"""

    IsInitialized = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether this element has been initialized, either by being loaded as Extensible Application Markup Language (XAML), or by explicitly having its System.Windows.FrameworkContentElement.EndInit method called.

Get: IsInitialized(self: FrameworkContentElement) -> bool

"""

    IsLoaded = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether this element has been loaded for presentation.

Get: IsLoaded(self: FrameworkContentElement) -> bool

"""

    Language = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets localization/globalization language information that applies to an individual element.

Get: Language(self: FrameworkContentElement) -> XmlLanguage

Set: Language(self: FrameworkContentElement) = value
"""

    LogicalChildren = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets an enumerator for the logical child elements of this element.

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the identifying name of the element. The name provides an instance reference so that programmatic code-behind, such as event handler code, can refer to an element once it is constructed during parsing of XAML.

Get: Name(self: FrameworkContentElement) -> str

Set: Name(self: FrameworkContentElement) = value
"""

    OverridesDefaultStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value indicating whether this element incorporates style properties from theme styles.

Get: OverridesDefaultStyle(self: FrameworkContentElement) -> bool

Set: OverridesDefaultStyle(self: FrameworkContentElement) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the parent in the logical tree for this element.

Get: Parent(self: FrameworkContentElement) -> DependencyObject

"""

    Resources = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the current locally-defined resource dictionary.

Get: Resources(self: FrameworkContentElement) -> ResourceDictionary

Set: Resources(self: FrameworkContentElement) = value
"""

    Style = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the style to be used by this element.

Get: Style(self: FrameworkContentElement) -> Style

Set: Style(self: FrameworkContentElement) = value
"""

    Tag = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets an arbitrary object value that can be used to store custom information about this element.

Get: Tag(self: FrameworkContentElement) -> object

Set: Tag(self: FrameworkContentElement) = value
"""

    TemplatedParent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a reference to the template parent of this element. This property is not relevant if the element was not created through a template.

Get: TemplatedParent(self: FrameworkContentElement) -> DependencyObject

"""

    ToolTip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the tool-tip object that is displayed for this element in the user interface (UI).

Get: ToolTip(self: FrameworkContentElement) -> object

Set: ToolTip(self: FrameworkContentElement) = value
"""


    BindingGroupProperty = None
    ContextMenuClosing = None
    ContextMenuClosingEvent = None
    ContextMenuOpening = None
    ContextMenuOpeningEvent = None
    ContextMenuProperty = None
    CursorProperty = None
    DataContextChanged = None
    DataContextProperty = None
    DefaultStyleKeyProperty = None
    FocusVisualStyleProperty = None
    ForceCursorProperty = None
    Initialized = None
    InputScopeProperty = None
    LanguageProperty = None
    Loaded = None
    LoadedEvent = None
    NameProperty = None
    OverridesDefaultStyleProperty = None
    SourceUpdated = None
    StyleProperty = None
    TagProperty = None
    TargetUpdated = None
    ToolTipClosing = None
    ToolTipClosingEvent = None
    ToolTipOpening = None
    ToolTipOpeningEvent = None
    ToolTipProperty = None
    Unloaded = None
    UnloadedEvent = None


class UIElement(Visual, IResource, IAnimatable, IInputElement):
    """
    System.Windows.UIElement is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics.
    
    UIElement()
    """
    def AddHandler(self, routedEvent, handler, handledEventsToo=None):
        """
        AddHandler(self: UIElement, routedEvent: RoutedEvent, handler: Delegate, handledEventsToo: bool)
            Adds a�routed event handler for a specified routed event, adding the handler to 
             the handler collection on the current element. Specify handledEventsToo as true 
             to have the provided handler be invoked for routed event that had already been 
             marked as handled by another element along the event route.
        
        
            routedEvent: An identifier for the�routed event to be handled.
            handler: A reference to the handler implementation.
            handledEventsToo: true to register the handler such that it is invoked even when  the routed 
             event is marked handled in its event data; false to register the handler with 
             the default condition that it will not be invoked if the routed event is 
             already marked handled. The default is false.Do not routinely ask to rehandle a 
             routed event. For more information, see Remarks.
        
        AddHandler(self: UIElement, routedEvent: RoutedEvent, handler: Delegate)
            Adds a�routed event handler for a specified routed event, adding the handler to 
             the handler collection on the current element.
        
        
            routedEvent: An identifier for the�routed event to be handled.
            handler: A reference to the handler implementation.
        """
        pass

    def AddToEventRoute(self, route, e):
        """
        AddToEventRoute(self: UIElement, route: EventRoute, e: RoutedEventArgs)
            Adds handlers to the specified System.Windows.EventRoute for the current 
             System.Windows.UIElement event handler collection.
        
        
            route: The event route that handlers are added to.
            e: The event data that is used to add the handlers. This method uses the 
             System.Windows.RoutedEventArgs.RoutedEvent property of the event data to create 
             the handlers.
        """
        pass

    def AddVisualChild(self, *args): #cannot find CLR method
        """
        AddVisualChild(self: Visual, child: Visual)
            Defines the parent-child relationship between two visuals.
        
            child: The child visual object to add to parent visual.
        AddVisualChild(self: Window_16$17, child: Window_16$17)AddVisualChild(self: Label_17$18, child: Label_17$18)AddVisualChild(self: TextBox_18$19, child: TextBox_18$19)AddVisualChild(self: Button_19$20, child: Button_19$20)AddVisualChild(self: CheckBox_20$21, child: CheckBox_20$21)AddVisualChild(self: ComboBox_21$22, child: ComboBox_21$22)AddVisualChild(self: Separator_22$23, child: Separator_22$23)
        """
        pass

    def ApplyAnimationClock(self, dp, clock, handoffBehavior=None):
        """
        ApplyAnimationClock(self: UIElement, dp: DependencyProperty, clock: AnimationClock, handoffBehavior: HandoffBehavior)
            Applies an animation to a specified�dependency property on this element, with 
             the ability to specify what happens if the property already has a running 
             animation.
        
        
            dp: The property to animate.
            clock: The animation clock that controls and declares the animation.
            handoffBehavior: A value of the enumeration. The default is 
             System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace, which will 
             stop any existing animation and replace with the new one.
        
        ApplyAnimationClock(self: UIElement, dp: DependencyProperty, clock: AnimationClock)
            Applies an animation to a specified�dependency property on this element. Any 
             existing animations are stopped and replaced with the new animation.
        
        
            dp: The identifier for the property to animate.
            clock: The animation clock that controls and declares the animation.
        """
        pass

    def Arrange(self, finalRect):
        """
        Arrange(self: UIElement, finalRect: Rect)
            Positions child elements and determines a size for a System.Windows.UIElement. 
             Parent elements call this method from their 
             System.Windows.UIElement.ArrangeCore(System.Windows.Rect) implementation (or a 
             WPF framework-level equivalent) to form a recursive layout update. This method 
             constitutes the second pass of a layout update.
        
        
            finalRect: The final size that the parent computes for the child element, provided as a 
             System.Windows.Rect instance.
        """
        pass

    def ArrangeCore(self, *args): #cannot find CLR method
        """
        ArrangeCore(self: UIElement, finalRect: Rect)
            Defines the template for WPF core-level arrange layout definition.
        
            finalRect: The final area within the parent that element should use to arrange itself and 
             its child elements.
        
        ArrangeCore(self: Window_16$17, finalRect: Rect)ArrangeCore(self: Label_17$18, finalRect: Rect)ArrangeCore(self: TextBox_18$19, finalRect: Rect)ArrangeCore(self: Button_19$20, finalRect: Rect)ArrangeCore(self: CheckBox_20$21, finalRect: Rect)ArrangeCore(self: ComboBox_21$22, finalRect: Rect)ArrangeCore(self: Separator_22$23, finalRect: Rect)
        """
        pass

    def BeginAnimation(self, dp, animation, handoffBehavior=None):
        """
        BeginAnimation(self: UIElement, dp: DependencyProperty, animation: AnimationTimeline, handoffBehavior: HandoffBehavior)
            Starts a specific animation for a specified animated property on this element, 
             with the option of specifying what happens if the property already has a 
             running animation.
        
        
            dp: The property to animate, which is specified as the dependency property 
             identifier.
        
            animation: The timeline of the animation to be applied.
            handoffBehavior: A value of the enumeration that specifies how the new animation interacts with 
             any current (running) animations that are already affecting the property value.
        
        BeginAnimation(self: UIElement, dp: DependencyProperty, animation: AnimationTimeline)
            Starts an animation for a specified animated property on this element.
        
            dp: The property to animate, which is specified as a dependency property identifier.
            animation: The timeline of the animation to start.
        """
        pass

    def CaptureMouse(self):
        """
        CaptureMouse(self: UIElement) -> bool
        
            Attempts to force capture of the mouse to this element.
            Returns: true if the mouse is successfully captured; otherwise, false.
        """
        pass

    def CaptureStylus(self):
        """
        CaptureStylus(self: UIElement) -> bool
        
            Attempts to force capture of the stylus to this element.
            Returns: true if the stylus was successfully captured; otherwise, false.
        """
        pass

    def CaptureTouch(self, touchDevice):
        """
        CaptureTouch(self: UIElement, touchDevice: TouchDevice) -> bool
        
            Attempts to force capture of a touch to this element.
        
            touchDevice: The device to capture.
            Returns: true if the specified touch is captured to this element; otherwise, false.
        """
        pass

    def Focus(self):
        """
        Focus(self: UIElement) -> bool
        
            Attempts to set focus to this element.
            Returns: true if keyboard focus and logical focus were set to this element; false if 
             only logical focus was set to this element, or if the call to this method did 
             not force the focus to change.
        """
        pass

    def GetAnimationBaseValue(self, dp):
        """
        GetAnimationBaseValue(self: UIElement, dp: DependencyProperty) -> object
        
            Returns the base property value for the specified property on this element, 
             disregarding any possible animated value from a running or stopped animation.
        
        
            dp: The�dependency property to check.
            Returns: The property value as if no animations are attached to the specified dependency 
             property.
        """
        pass

    def GetLayoutClip(self, *args): #cannot find CLR method
        """
        GetLayoutClip(self: UIElement, layoutSlotSize: Size) -> Geometry
        
            Returns an alternative clipping geometry that represents the region that would 
             be clipped if System.Windows.UIElement.ClipToBounds were set to true.
        
        
            layoutSlotSize: The available size provided by the element.
            Returns: The potential clipping geometry.
        GetLayoutClip(self: Window_16$17, layoutSlotSize: Size) -> Geometry
        GetLayoutClip(self: Label_17$18, layoutSlotSize: Size) -> Geometry
        GetLayoutClip(self: TextBox_18$19, layoutSlotSize: Size) -> Geometry
        GetLayoutClip(self: Button_19$20, layoutSlotSize: Size) -> Geometry
        GetLayoutClip(self: CheckBox_20$21, layoutSlotSize: Size) -> Geometry
        GetLayoutClip(self: ComboBox_21$22, layoutSlotSize: Size) -> Geometry
        GetLayoutClip(self: Separator_22$23, layoutSlotSize: Size) -> Geometry
        """
        pass

    def GetUIParentCore(self, *args): #cannot find CLR method
        """
        GetUIParentCore(self: UIElement) -> DependencyObject
        
            When overridden in a derived class, returns an alternative user interface (UI) 
             parent for this element if no visual parent exists.
        
            Returns: An object, if implementation of a derived class has an alternate parent 
             connection to report.
        
        GetUIParentCore(self: Window_16$17) -> DependencyObject
        GetUIParentCore(self: Label_17$18) -> DependencyObject
        GetUIParentCore(self: TextBox_18$19) -> DependencyObject
        GetUIParentCore(self: Button_19$20) -> DependencyObject
        GetUIParentCore(self: CheckBox_20$21) -> DependencyObject
        GetUIParentCore(self: ComboBox_21$22) -> DependencyObject
        GetUIParentCore(self: Separator_22$23) -> DependencyObject
        """
        pass

    def GetVisualChild(self, *args): #cannot find CLR method
        """
        GetVisualChild(self: Visual, index: int) -> Visual
        
            Returns the specified System.Windows.Media.Visual in the parent 
             System.Windows.Media.VisualCollection.
        
        
            index: The index of the visual object in the System.Windows.Media.VisualCollection.
            Returns: The child in the System.Windows.Media.VisualCollection at the specified index 
             value.
        
        GetVisualChild(self: Window_16$17, index: int) -> Visual
        GetVisualChild(self: Label_17$18, index: int) -> Visual
        GetVisualChild(self: TextBox_18$19, index: int) -> Visual
        GetVisualChild(self: Button_19$20, index: int) -> Visual
        GetVisualChild(self: CheckBox_20$21, index: int) -> Visual
        GetVisualChild(self: ComboBox_21$22, index: int) -> Visual
        GetVisualChild(self: Separator_22$23, index: int) -> Visual
        """
        pass

    def HitTestCore(self, *args): #cannot find CLR method
        """
        HitTestCore(self: UIElement, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        
            Implements 
             System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestPara
             meters) to supply base element hit testing behavior (returning 
             System.Windows.Media.GeometryHitTestResult).
        
        
            hitTestParameters: Describes the hit test to perform, including the initial hit point.
            Returns: Results of the test, including the evaluated geometry.
        HitTestCore(self: UIElement, hitTestParameters: PointHitTestParameters) -> HitTestResult
        
            Implements 
             System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParamet
             ers) to supply base element hit testing behavior (returning 
             System.Windows.Media.HitTestResult).
        
        
            hitTestParameters: Describes the hit test to perform, including the initial hit point.
            Returns: Results of the test, including the evaluated point.
        HitTestCore(self: Window_16$17, hitTestParameters: PointHitTestParameters) -> HitTestResult
        HitTestCore(self: Window_16$17, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        HitTestCore(self: Label_17$18, hitTestParameters: PointHitTestParameters) -> HitTestResult
        HitTestCore(self: Label_17$18, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        HitTestCore(self: TextBox_18$19, hitTestParameters: PointHitTestParameters) -> HitTestResult
        HitTestCore(self: TextBox_18$19, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        HitTestCore(self: Button_19$20, hitTestParameters: PointHitTestParameters) -> HitTestResult
        HitTestCore(self: Button_19$20, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        HitTestCore(self: CheckBox_20$21, hitTestParameters: PointHitTestParameters) -> HitTestResult
        HitTestCore(self: CheckBox_20$21, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        HitTestCore(self: ComboBox_21$22, hitTestParameters: PointHitTestParameters) -> HitTestResult
        HitTestCore(self: ComboBox_21$22, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        HitTestCore(self: Separator_22$23, hitTestParameters: PointHitTestParameters) -> HitTestResult
        HitTestCore(self: Separator_22$23, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        """
        pass

    def InputHitTest(self, point):
        """
        InputHitTest(self: UIElement, point: Point) -> IInputElement
        
            Returns the input element within the current element that is at the specified 
             coordinates, relative to the current element's origin.
        
        
            point: The offset coordinates within this element.
            Returns: The element child that is located at the given position.
        """
        pass

    def InvalidateArrange(self):
        """
        InvalidateArrange(self: UIElement)
            Invalidates the arrange state (layout) for the element. After the invalidation, 
             the element will have its layout updated, which will occur asynchronously 
             unless subsequently forced by System.Windows.UIElement.UpdateLayout.
        """
        pass

    def InvalidateMeasure(self):
        """
        InvalidateMeasure(self: UIElement)
            Invalidates the measurement state (layout) for the element.
        """
        pass

    def InvalidateVisual(self):
        """
        InvalidateVisual(self: UIElement)
            Invalidates the rendering of the element, and forces a complete new layout 
             pass. System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext) is 
             called after the layout cycle is completed.
        """
        pass

    def Measure(self, availableSize):
        """
        Measure(self: UIElement, availableSize: Size)
            Updates the System.Windows.UIElement.DesiredSize of a System.Windows.UIElement. 
             Parent elements call this method from their own 
             System.Windows.UIElement.MeasureCore(System.Windows.Size) implementations to 
             form a recursive layout update. Calling this method constitutes the first pass 
             (the "Measure" pass) of a layout update.
        
        
            availableSize: The available space that a parent element can allocate a child element. A child 
             element can request a larger space than what is available; the provided size 
             might be accommodated if scrolling is possible in the content model for the 
             current element.
        """
        pass

    def MeasureCore(self, *args): #cannot find CLR method
        """
        MeasureCore(self: UIElement, availableSize: Size) -> Size
        
            When overridden in a derived class, provides measurement logic for sizing this 
             element properly, with consideration of the size of any child element content.
        
        
            availableSize: The available size that the parent element can allocate for the child.
            Returns: The desired size of this element in layout.
        MeasureCore(self: Window_16$17, availableSize: Size) -> Size
        MeasureCore(self: Label_17$18, availableSize: Size) -> Size
        MeasureCore(self: TextBox_18$19, availableSize: Size) -> Size
        MeasureCore(self: Button_19$20, availableSize: Size) -> Size
        MeasureCore(self: CheckBox_20$21, availableSize: Size) -> Size
        MeasureCore(self: ComboBox_21$22, availableSize: Size) -> Size
        MeasureCore(self: Separator_22$23, availableSize: Size) -> Size
        """
        pass

    def MoveFocus(self, request):
        """
        MoveFocus(self: UIElement, request: TraversalRequest) -> bool
        
            Attempts to move focus from this element to another element. The direction to 
             move focus is specified by a guidance direction, which is interpreted within 
             the organization of the visual parent for this element.
        
        
            request: A traversal request, which contains a property that indicates either a mode to 
             traverse in existing tab order, or a direction to move visually.
        
            Returns: true if the requested traversal was performed; otherwise, false.
        """
        pass

    def OnAccessKey(self, *args): #cannot find CLR method
        """
        OnAccessKey(self: UIElement, e: AccessKeyEventArgs)
            Provides class handling for when an access key that is meaningful for this 
             element is invoked.
        
        
            e: The event data to the access key event. The event data reports which key was 
             invoked, and indicate whether the System.Windows.Input.AccessKeyManager object 
             that controls the sending of these events also sent this access key invocation 
             to other elements.
        
        OnAccessKey(self: Window_16$17, e: AccessKeyEventArgs)OnAccessKey(self: Label_17$18, e: AccessKeyEventArgs)OnAccessKey(self: TextBox_18$19, e: AccessKeyEventArgs)OnAccessKey(self: Button_19$20, e: AccessKeyEventArgs)OnAccessKey(self: CheckBox_20$21, e: AccessKeyEventArgs)OnAccessKey(self: ComboBox_21$22, e: AccessKeyEventArgs)OnAccessKey(self: Separator_22$23, e: AccessKeyEventArgs)
        """
        pass

    def OnChildDesiredSizeChanged(self, *args): #cannot find CLR method
        """
        OnChildDesiredSizeChanged(self: UIElement, child: UIElement)
            Supports layout behavior when a child element is resized.
        
            child: The child element that is being resized.
        OnChildDesiredSizeChanged(self: Window_16$17, child: Window_16$17)OnChildDesiredSizeChanged(self: Label_17$18, child: Label_17$18)OnChildDesiredSizeChanged(self: TextBox_18$19, child: TextBox_18$19)OnChildDesiredSizeChanged(self: Button_19$20, child: Button_19$20)OnChildDesiredSizeChanged(self: CheckBox_20$21, child: CheckBox_20$21)OnChildDesiredSizeChanged(self: ComboBox_21$22, child: ComboBox_21$22)OnChildDesiredSizeChanged(self: Separator_22$23, child: Separator_22$23)
        """
        pass

    def OnCreateAutomationPeer(self, *args): #cannot find CLR method
        """
        OnCreateAutomationPeer(self: UIElement) -> AutomationPeer
        
            Returns class-specific System.Windows.Automation.Peers.AutomationPeer 
             implementations for the Windows Presentation Foundation (WPF) infrastructure.
        
            Returns: The type-specific System.Windows.Automation.Peers.AutomationPeer implementation.
        OnCreateAutomationPeer(self: Window_16$17) -> AutomationPeer
        OnCreateAutomationPeer(self: Label_17$18) -> AutomationPeer
        OnCreateAutomationPeer(self: TextBox_18$19) -> AutomationPeer
        OnCreateAutomationPeer(self: Button_19$20) -> AutomationPeer
        OnCreateAutomationPeer(self: CheckBox_20$21) -> AutomationPeer
        OnCreateAutomationPeer(self: ComboBox_21$22) -> AutomationPeer
        OnCreateAutomationPeer(self: Separator_22$23) -> AutomationPeer
        """
        pass

    def OnDpiChanged(self, *args): #cannot find CLR method
        """ OnDpiChanged(self: Visual, oldDpi: DpiScale, newDpi: DpiScale)OnDpiChanged(self: Window_16$17, oldDpi: DpiScale, newDpi: DpiScale)OnDpiChanged(self: Label_17$18, oldDpi: DpiScale, newDpi: DpiScale)OnDpiChanged(self: TextBox_18$19, oldDpi: DpiScale, newDpi: DpiScale)OnDpiChanged(self: Button_19$20, oldDpi: DpiScale, newDpi: DpiScale)OnDpiChanged(self: CheckBox_20$21, oldDpi: DpiScale, newDpi: DpiScale)OnDpiChanged(self: ComboBox_21$22, oldDpi: DpiScale, newDpi: DpiScale)OnDpiChanged(self: Separator_22$23, oldDpi: DpiScale, newDpi: DpiScale) """
        pass

    def OnDragEnter(self, *args): #cannot find CLR method
        """
        OnDragEnter(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.DragEnter�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnDragEnter(self: Window_16$17, e: DragEventArgs)OnDragEnter(self: Label_17$18, e: DragEventArgs)OnDragEnter(self: TextBox_18$19, e: DragEventArgs)OnDragEnter(self: Button_19$20, e: DragEventArgs)OnDragEnter(self: CheckBox_20$21, e: DragEventArgs)OnDragEnter(self: ComboBox_21$22, e: DragEventArgs)OnDragEnter(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnDragLeave(self, *args): #cannot find CLR method
        """
        OnDragLeave(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.DragLeave�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnDragLeave(self: Window_16$17, e: DragEventArgs)OnDragLeave(self: Label_17$18, e: DragEventArgs)OnDragLeave(self: TextBox_18$19, e: DragEventArgs)OnDragLeave(self: Button_19$20, e: DragEventArgs)OnDragLeave(self: CheckBox_20$21, e: DragEventArgs)OnDragLeave(self: ComboBox_21$22, e: DragEventArgs)OnDragLeave(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnDragOver(self, *args): #cannot find CLR method
        """
        OnDragOver(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.DragOver�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnDragOver(self: Window_16$17, e: DragEventArgs)OnDragOver(self: Label_17$18, e: DragEventArgs)OnDragOver(self: TextBox_18$19, e: DragEventArgs)OnDragOver(self: Button_19$20, e: DragEventArgs)OnDragOver(self: CheckBox_20$21, e: DragEventArgs)OnDragOver(self: ComboBox_21$22, e: DragEventArgs)OnDragOver(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnDrop(self, *args): #cannot find CLR method
        """
        OnDrop(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.DragEnter�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnDrop(self: Window_16$17, e: DragEventArgs)OnDrop(self: Label_17$18, e: DragEventArgs)OnDrop(self: TextBox_18$19, e: DragEventArgs)OnDrop(self: Button_19$20, e: DragEventArgs)OnDrop(self: CheckBox_20$21, e: DragEventArgs)OnDrop(self: ComboBox_21$22, e: DragEventArgs)OnDrop(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnGiveFeedback(self, *args): #cannot find CLR method
        """
        OnGiveFeedback(self: UIElement, e: GiveFeedbackEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.GiveFeedback�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.GiveFeedbackEventArgs that contains the event data.
        OnGiveFeedback(self: Window_16$17, e: GiveFeedbackEventArgs)OnGiveFeedback(self: Label_17$18, e: GiveFeedbackEventArgs)OnGiveFeedback(self: TextBox_18$19, e: GiveFeedbackEventArgs)OnGiveFeedback(self: Button_19$20, e: GiveFeedbackEventArgs)OnGiveFeedback(self: CheckBox_20$21, e: GiveFeedbackEventArgs)OnGiveFeedback(self: ComboBox_21$22, e: GiveFeedbackEventArgs)OnGiveFeedback(self: Separator_22$23, e: GiveFeedbackEventArgs)
        """
        pass

    def OnGotFocus(self, *args): #cannot find CLR method
        """
        OnGotFocus(self: UIElement, e: RoutedEventArgs)
            Raises the System.Windows.UIElement.GotFocus�routed event by using the event 
             data provided.
        
        
            e: A System.Windows.RoutedEventArgs that contains event data. This event data must 
             contain the identifier for the System.Windows.UIElement.GotFocus event.
        
        OnGotFocus(self: Window_16$17, e: RoutedEventArgs)OnGotFocus(self: Label_17$18, e: RoutedEventArgs)OnGotFocus(self: TextBox_18$19, e: RoutedEventArgs)OnGotFocus(self: Button_19$20, e: RoutedEventArgs)OnGotFocus(self: CheckBox_20$21, e: RoutedEventArgs)OnGotFocus(self: Separator_22$23, e: RoutedEventArgs)
        """
        pass

    def OnGotKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnGotKeyboardFocus(self: UIElement, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.GotKeyboardFocus�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains the event 
             data.
        
        OnGotKeyboardFocus(self: Window_16$17, e: KeyboardFocusChangedEventArgs)OnGotKeyboardFocus(self: Label_17$18, e: KeyboardFocusChangedEventArgs)OnGotKeyboardFocus(self: TextBox_18$19, e: KeyboardFocusChangedEventArgs)OnGotKeyboardFocus(self: Button_19$20, e: KeyboardFocusChangedEventArgs)OnGotKeyboardFocus(self: CheckBox_20$21, e: KeyboardFocusChangedEventArgs)OnGotKeyboardFocus(self: ComboBox_21$22, e: KeyboardFocusChangedEventArgs)OnGotKeyboardFocus(self: Separator_22$23, e: KeyboardFocusChangedEventArgs)
        """
        pass

    def OnGotMouseCapture(self, *args): #cannot find CLR method
        """
        OnGotMouseCapture(self: UIElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.GotMouseCapture�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        OnGotMouseCapture(self: Window_16$17, e: MouseEventArgs)OnGotMouseCapture(self: Label_17$18, e: MouseEventArgs)OnGotMouseCapture(self: TextBox_18$19, e: MouseEventArgs)OnGotMouseCapture(self: Button_19$20, e: MouseEventArgs)OnGotMouseCapture(self: CheckBox_20$21, e: MouseEventArgs)OnGotMouseCapture(self: ComboBox_21$22, e: MouseEventArgs)OnGotMouseCapture(self: Separator_22$23, e: MouseEventArgs)
        """
        pass

    def OnGotStylusCapture(self, *args): #cannot find CLR method
        """
        OnGotStylusCapture(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.GotStylusCapture�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnGotStylusCapture(self: Window_16$17, e: StylusEventArgs)OnGotStylusCapture(self: Label_17$18, e: StylusEventArgs)OnGotStylusCapture(self: TextBox_18$19, e: StylusEventArgs)OnGotStylusCapture(self: Button_19$20, e: StylusEventArgs)OnGotStylusCapture(self: CheckBox_20$21, e: StylusEventArgs)OnGotStylusCapture(self: ComboBox_21$22, e: StylusEventArgs)OnGotStylusCapture(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnGotTouchCapture(self, *args): #cannot find CLR method
        """
        OnGotTouchCapture(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.GotTouchCapture routed 
             event that occurs when a touch is captured to this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnGotTouchCapture(self: Window_16$17, e: TouchEventArgs)OnGotTouchCapture(self: Label_17$18, e: TouchEventArgs)OnGotTouchCapture(self: TextBox_18$19, e: TouchEventArgs)OnGotTouchCapture(self: Button_19$20, e: TouchEventArgs)OnGotTouchCapture(self: CheckBox_20$21, e: TouchEventArgs)OnGotTouchCapture(self: ComboBox_21$22, e: TouchEventArgs)OnGotTouchCapture(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnIsKeyboardFocusedChanged(self, *args): #cannot find CLR method
        """
        OnIsKeyboardFocusedChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement.IsKeyboardFocusedChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsKeyboardFocusedChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusedChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusedChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusedChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusedChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusedChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusedChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnIsKeyboardFocusWithinChanged(self, *args): #cannot find CLR method
        """
        OnIsKeyboardFocusWithinChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked just before the System.Windows.UIElement.IsKeyboardFocusWithinChanged 
             event is raised by this element. Implement this method to add class handling 
             for this event.
        
        
            e: A System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsKeyboardFocusWithinChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusWithinChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusWithinChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusWithinChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusWithinChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusWithinChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusWithinChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnIsMouseCapturedChanged(self, *args): #cannot find CLR method
        """
        OnIsMouseCapturedChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement.IsMouseCapturedChanged event 
             is raised on this element. Implement this method to add class handling for this 
             event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsMouseCapturedChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsMouseCapturedChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsMouseCapturedChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsMouseCapturedChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsMouseCapturedChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsMouseCapturedChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsMouseCapturedChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnIsMouseCaptureWithinChanged(self, *args): #cannot find CLR method
        """
        OnIsMouseCaptureWithinChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement.IsMouseCaptureWithinChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: A System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsMouseCaptureWithinChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsMouseCaptureWithinChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsMouseCaptureWithinChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsMouseCaptureWithinChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsMouseCaptureWithinChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsMouseCaptureWithinChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsMouseCaptureWithinChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnIsMouseDirectlyOverChanged(self, *args): #cannot find CLR method
        """
        OnIsMouseDirectlyOverChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement.IsMouseDirectlyOverChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsMouseDirectlyOverChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsMouseDirectlyOverChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsMouseDirectlyOverChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsMouseDirectlyOverChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsMouseDirectlyOverChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsMouseDirectlyOverChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsMouseDirectlyOverChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnIsStylusCapturedChanged(self, *args): #cannot find CLR method
        """
        OnIsStylusCapturedChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement.IsStylusCapturedChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: A System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsStylusCapturedChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsStylusCapturedChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsStylusCapturedChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsStylusCapturedChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsStylusCapturedChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsStylusCapturedChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsStylusCapturedChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnIsStylusCaptureWithinChanged(self, *args): #cannot find CLR method
        """
        OnIsStylusCaptureWithinChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement.IsStylusCaptureWithinChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsStylusCaptureWithinChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsStylusCaptureWithinChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsStylusCaptureWithinChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsStylusCaptureWithinChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsStylusCaptureWithinChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsStylusCaptureWithinChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsStylusCaptureWithinChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnIsStylusDirectlyOverChanged(self, *args): #cannot find CLR method
        """
        OnIsStylusDirectlyOverChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement.IsStylusDirectlyOverChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsStylusDirectlyOverChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsStylusDirectlyOverChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsStylusDirectlyOverChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsStylusDirectlyOverChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsStylusDirectlyOverChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsStylusDirectlyOverChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsStylusDirectlyOverChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnKeyDown(self, *args): #cannot find CLR method
        """
        OnKeyDown(self: UIElement, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.KeyDown�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        OnKeyDown(self: Window_16$17, e: KeyEventArgs)OnKeyDown(self: Label_17$18, e: KeyEventArgs)OnKeyDown(self: TextBox_18$19, e: KeyEventArgs)OnKeyDown(self: Button_19$20, e: KeyEventArgs)OnKeyDown(self: CheckBox_20$21, e: KeyEventArgs)OnKeyDown(self: ComboBox_21$22, e: KeyEventArgs)OnKeyDown(self: Separator_22$23, e: KeyEventArgs)
        """
        pass

    def OnKeyUp(self, *args): #cannot find CLR method
        """
        OnKeyUp(self: UIElement, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.KeyUp�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        OnKeyUp(self: Window_16$17, e: KeyEventArgs)OnKeyUp(self: Label_17$18, e: KeyEventArgs)OnKeyUp(self: TextBox_18$19, e: KeyEventArgs)OnKeyUp(self: Button_19$20, e: KeyEventArgs)OnKeyUp(self: CheckBox_20$21, e: KeyEventArgs)OnKeyUp(self: ComboBox_21$22, e: KeyEventArgs)OnKeyUp(self: Separator_22$23, e: KeyEventArgs)
        """
        pass

    def OnLostFocus(self, *args): #cannot find CLR method
        """
        OnLostFocus(self: UIElement, e: RoutedEventArgs)
            Raises the System.Windows.UIElement.LostFocus�routed event by using the event 
             data that is provided.
        
        
            e: A System.Windows.RoutedEventArgs that contains event data. This event data must 
             contain the identifier for the System.Windows.UIElement.LostFocus event.
        
        OnLostFocus(self: Window_16$17, e: RoutedEventArgs)OnLostFocus(self: Label_17$18, e: RoutedEventArgs)OnLostFocus(self: TextBox_18$19, e: RoutedEventArgs)OnLostFocus(self: Button_19$20, e: RoutedEventArgs)OnLostFocus(self: CheckBox_20$21, e: RoutedEventArgs)OnLostFocus(self: ComboBox_21$22, e: RoutedEventArgs)OnLostFocus(self: Separator_22$23, e: RoutedEventArgs)
        """
        pass

    def OnLostKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnLostKeyboardFocus(self: UIElement, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.LostKeyboardFocus�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains event data.
        OnLostKeyboardFocus(self: Window_16$17, e: KeyboardFocusChangedEventArgs)OnLostKeyboardFocus(self: Label_17$18, e: KeyboardFocusChangedEventArgs)OnLostKeyboardFocus(self: TextBox_18$19, e: KeyboardFocusChangedEventArgs)OnLostKeyboardFocus(self: Button_19$20, e: KeyboardFocusChangedEventArgs)OnLostKeyboardFocus(self: CheckBox_20$21, e: KeyboardFocusChangedEventArgs)OnLostKeyboardFocus(self: ComboBox_21$22, e: KeyboardFocusChangedEventArgs)OnLostKeyboardFocus(self: Separator_22$23, e: KeyboardFocusChangedEventArgs)
        """
        pass

    def OnLostMouseCapture(self, *args): #cannot find CLR method
        """
        OnLostMouseCapture(self: UIElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.LostMouseCapture�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains event data.
        OnLostMouseCapture(self: Window_16$17, e: MouseEventArgs)OnLostMouseCapture(self: Label_17$18, e: MouseEventArgs)OnLostMouseCapture(self: TextBox_18$19, e: MouseEventArgs)OnLostMouseCapture(self: Button_19$20, e: MouseEventArgs)OnLostMouseCapture(self: CheckBox_20$21, e: MouseEventArgs)OnLostMouseCapture(self: Separator_22$23, e: MouseEventArgs)
        """
        pass

    def OnLostStylusCapture(self, *args): #cannot find CLR method
        """
        OnLostStylusCapture(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.LostStylusCapture�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains event data.
        OnLostStylusCapture(self: Window_16$17, e: StylusEventArgs)OnLostStylusCapture(self: Label_17$18, e: StylusEventArgs)OnLostStylusCapture(self: TextBox_18$19, e: StylusEventArgs)OnLostStylusCapture(self: Button_19$20, e: StylusEventArgs)OnLostStylusCapture(self: CheckBox_20$21, e: StylusEventArgs)OnLostStylusCapture(self: ComboBox_21$22, e: StylusEventArgs)OnLostStylusCapture(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnLostTouchCapture(self, *args): #cannot find CLR method
        """
        OnLostTouchCapture(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.LostTouchCapture 
             routed event that occurs when this element loses a touch capture.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnLostTouchCapture(self: Window_16$17, e: TouchEventArgs)OnLostTouchCapture(self: Label_17$18, e: TouchEventArgs)OnLostTouchCapture(self: TextBox_18$19, e: TouchEventArgs)OnLostTouchCapture(self: Button_19$20, e: TouchEventArgs)OnLostTouchCapture(self: CheckBox_20$21, e: TouchEventArgs)OnLostTouchCapture(self: ComboBox_21$22, e: TouchEventArgs)OnLostTouchCapture(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnManipulationBoundaryFeedback(self, *args): #cannot find CLR method
        """
        OnManipulationBoundaryFeedback(self: UIElement, e: ManipulationBoundaryFeedbackEventArgs)
            Called when the System.Windows.UIElement.ManipulationBoundaryFeedback event 
             occurs.
        
        
            e: The data for the event.
        OnManipulationBoundaryFeedback(self: Window_16$17, e: ManipulationBoundaryFeedbackEventArgs)OnManipulationBoundaryFeedback(self: Label_17$18, e: ManipulationBoundaryFeedbackEventArgs)OnManipulationBoundaryFeedback(self: TextBox_18$19, e: ManipulationBoundaryFeedbackEventArgs)OnManipulationBoundaryFeedback(self: Button_19$20, e: ManipulationBoundaryFeedbackEventArgs)OnManipulationBoundaryFeedback(self: CheckBox_20$21, e: ManipulationBoundaryFeedbackEventArgs)OnManipulationBoundaryFeedback(self: ComboBox_21$22, e: ManipulationBoundaryFeedbackEventArgs)OnManipulationBoundaryFeedback(self: Separator_22$23, e: ManipulationBoundaryFeedbackEventArgs)
        """
        pass

    def OnManipulationCompleted(self, *args): #cannot find CLR method
        """
        OnManipulationCompleted(self: UIElement, e: ManipulationCompletedEventArgs)
            Called when the System.Windows.UIElement.ManipulationCompleted event occurs.
        
            e: The data for the event.
        OnManipulationCompleted(self: Window_16$17, e: ManipulationCompletedEventArgs)OnManipulationCompleted(self: Label_17$18, e: ManipulationCompletedEventArgs)OnManipulationCompleted(self: TextBox_18$19, e: ManipulationCompletedEventArgs)OnManipulationCompleted(self: Button_19$20, e: ManipulationCompletedEventArgs)OnManipulationCompleted(self: CheckBox_20$21, e: ManipulationCompletedEventArgs)OnManipulationCompleted(self: ComboBox_21$22, e: ManipulationCompletedEventArgs)OnManipulationCompleted(self: Separator_22$23, e: ManipulationCompletedEventArgs)
        """
        pass

    def OnManipulationDelta(self, *args): #cannot find CLR method
        """
        OnManipulationDelta(self: UIElement, e: ManipulationDeltaEventArgs)
            Called when the System.Windows.UIElement.ManipulationDelta event occurs.
        
            e: The data for the event.
        OnManipulationDelta(self: Window_16$17, e: ManipulationDeltaEventArgs)OnManipulationDelta(self: Label_17$18, e: ManipulationDeltaEventArgs)OnManipulationDelta(self: TextBox_18$19, e: ManipulationDeltaEventArgs)OnManipulationDelta(self: Button_19$20, e: ManipulationDeltaEventArgs)OnManipulationDelta(self: CheckBox_20$21, e: ManipulationDeltaEventArgs)OnManipulationDelta(self: ComboBox_21$22, e: ManipulationDeltaEventArgs)OnManipulationDelta(self: Separator_22$23, e: ManipulationDeltaEventArgs)
        """
        pass

    def OnManipulationInertiaStarting(self, *args): #cannot find CLR method
        """
        OnManipulationInertiaStarting(self: UIElement, e: ManipulationInertiaStartingEventArgs)
            Called when the System.Windows.UIElement.ManipulationInertiaStarting event 
             occurs.
        
        
            e: The data for the event.
        OnManipulationInertiaStarting(self: Window_16$17, e: ManipulationInertiaStartingEventArgs)OnManipulationInertiaStarting(self: Label_17$18, e: ManipulationInertiaStartingEventArgs)OnManipulationInertiaStarting(self: TextBox_18$19, e: ManipulationInertiaStartingEventArgs)OnManipulationInertiaStarting(self: Button_19$20, e: ManipulationInertiaStartingEventArgs)OnManipulationInertiaStarting(self: CheckBox_20$21, e: ManipulationInertiaStartingEventArgs)OnManipulationInertiaStarting(self: ComboBox_21$22, e: ManipulationInertiaStartingEventArgs)OnManipulationInertiaStarting(self: Separator_22$23, e: ManipulationInertiaStartingEventArgs)
        """
        pass

    def OnManipulationStarted(self, *args): #cannot find CLR method
        """
        OnManipulationStarted(self: UIElement, e: ManipulationStartedEventArgs)
            Called when the System.Windows.UIElement.ManipulationStarted event occurs.
        
            e: The data for the event.
        OnManipulationStarted(self: Window_16$17, e: ManipulationStartedEventArgs)OnManipulationStarted(self: Label_17$18, e: ManipulationStartedEventArgs)OnManipulationStarted(self: TextBox_18$19, e: ManipulationStartedEventArgs)OnManipulationStarted(self: Button_19$20, e: ManipulationStartedEventArgs)OnManipulationStarted(self: CheckBox_20$21, e: ManipulationStartedEventArgs)OnManipulationStarted(self: ComboBox_21$22, e: ManipulationStartedEventArgs)OnManipulationStarted(self: Separator_22$23, e: ManipulationStartedEventArgs)
        """
        pass

    def OnManipulationStarting(self, *args): #cannot find CLR method
        """
        OnManipulationStarting(self: UIElement, e: ManipulationStartingEventArgs)
            Provides class handling for the System.Windows.UIElement.ManipulationStarting 
             routed event that occurs when the manipulation processor is first created.
        
        
            e: A System.Windows.Input.ManipulationStartingEventArgs  that contains the event 
             data.
        
        OnManipulationStarting(self: Window_16$17, e: ManipulationStartingEventArgs)OnManipulationStarting(self: Label_17$18, e: ManipulationStartingEventArgs)OnManipulationStarting(self: TextBox_18$19, e: ManipulationStartingEventArgs)OnManipulationStarting(self: Button_19$20, e: ManipulationStartingEventArgs)OnManipulationStarting(self: CheckBox_20$21, e: ManipulationStartingEventArgs)OnManipulationStarting(self: ComboBox_21$22, e: ManipulationStartingEventArgs)OnManipulationStarting(self: Separator_22$23, e: ManipulationStartingEventArgs)
        """
        pass

    def OnMouseDown(self, *args): #cannot find CLR method
        """
        OnMouseDown(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseDown�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. 
             This event data reports details about the mouse button that was pressed and the 
             handled state.
        
        OnMouseDown(self: Window_16$17, e: MouseButtonEventArgs)OnMouseDown(self: Label_17$18, e: MouseButtonEventArgs)OnMouseDown(self: TextBox_18$19, e: MouseButtonEventArgs)OnMouseDown(self: Button_19$20, e: MouseButtonEventArgs)OnMouseDown(self: CheckBox_20$21, e: MouseButtonEventArgs)OnMouseDown(self: ComboBox_21$22, e: MouseButtonEventArgs)OnMouseDown(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnMouseEnter(self, *args): #cannot find CLR method
        """
        OnMouseEnter(self: UIElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseEnter�attached event 
             is raised on this element. Implement this method to add class handling for this 
             event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        OnMouseEnter(self: Window_16$17, e: MouseEventArgs)OnMouseEnter(self: Label_17$18, e: MouseEventArgs)OnMouseEnter(self: TextBox_18$19, e: MouseEventArgs)OnMouseEnter(self: Button_19$20, e: MouseEventArgs)OnMouseEnter(self: CheckBox_20$21, e: MouseEventArgs)OnMouseEnter(self: ComboBox_21$22, e: MouseEventArgs)OnMouseEnter(self: Separator_22$23, e: MouseEventArgs)
        """
        pass

    def OnMouseLeave(self, *args): #cannot find CLR method
        """
        OnMouseLeave(self: UIElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseLeave�attached event 
             is raised on this element. Implement this method to add class handling for this 
             event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        OnMouseLeave(self: Window_16$17, e: MouseEventArgs)OnMouseLeave(self: Label_17$18, e: MouseEventArgs)OnMouseLeave(self: TextBox_18$19, e: MouseEventArgs)OnMouseLeave(self: Button_19$20, e: MouseEventArgs)OnMouseLeave(self: CheckBox_20$21, e: MouseEventArgs)OnMouseLeave(self: ComboBox_21$22, e: MouseEventArgs)OnMouseLeave(self: Separator_22$23, e: MouseEventArgs)
        """
        pass

    def OnMouseLeftButtonDown(self, *args): #cannot find CLR method
        """
        OnMouseLeftButtonDown(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.MouseLeftButtonDown�routed 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was pressed.
        
        OnMouseLeftButtonDown(self: Window_16$17, e: MouseButtonEventArgs)OnMouseLeftButtonDown(self: Label_17$18, e: MouseButtonEventArgs)OnMouseLeftButtonDown(self: TextBox_18$19, e: MouseButtonEventArgs)OnMouseLeftButtonDown(self: Button_19$20, e: MouseButtonEventArgs)OnMouseLeftButtonDown(self: CheckBox_20$21, e: MouseButtonEventArgs)OnMouseLeftButtonDown(self: ComboBox_21$22, e: MouseButtonEventArgs)OnMouseLeftButtonDown(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnMouseLeftButtonUp(self, *args): #cannot find CLR method
        """
        OnMouseLeftButtonUp(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.MouseLeftButtonUp�routed 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was released.
        
        OnMouseLeftButtonUp(self: Window_16$17, e: MouseButtonEventArgs)OnMouseLeftButtonUp(self: Label_17$18, e: MouseButtonEventArgs)OnMouseLeftButtonUp(self: TextBox_18$19, e: MouseButtonEventArgs)OnMouseLeftButtonUp(self: Button_19$20, e: MouseButtonEventArgs)OnMouseLeftButtonUp(self: CheckBox_20$21, e: MouseButtonEventArgs)OnMouseLeftButtonUp(self: ComboBox_21$22, e: MouseButtonEventArgs)OnMouseLeftButtonUp(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnMouseMove(self, *args): #cannot find CLR method
        """
        OnMouseMove(self: UIElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseMove�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        OnMouseMove(self: Window_16$17, e: MouseEventArgs)OnMouseMove(self: Label_17$18, e: MouseEventArgs)OnMouseMove(self: TextBox_18$19, e: MouseEventArgs)OnMouseMove(self: Button_19$20, e: MouseEventArgs)OnMouseMove(self: CheckBox_20$21, e: MouseEventArgs)OnMouseMove(self: Separator_22$23, e: MouseEventArgs)
        """
        pass

    def OnMouseRightButtonDown(self, *args): #cannot find CLR method
        """
        OnMouseRightButtonDown(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.MouseRightButtonDown�routed 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was pressed.
        
        OnMouseRightButtonDown(self: Window_16$17, e: MouseButtonEventArgs)OnMouseRightButtonDown(self: Label_17$18, e: MouseButtonEventArgs)OnMouseRightButtonDown(self: TextBox_18$19, e: MouseButtonEventArgs)OnMouseRightButtonDown(self: Button_19$20, e: MouseButtonEventArgs)OnMouseRightButtonDown(self: CheckBox_20$21, e: MouseButtonEventArgs)OnMouseRightButtonDown(self: ComboBox_21$22, e: MouseButtonEventArgs)OnMouseRightButtonDown(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnMouseRightButtonUp(self, *args): #cannot find CLR method
        """
        OnMouseRightButtonUp(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.MouseRightButtonUp�routed 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was released.
        
        OnMouseRightButtonUp(self: Window_16$17, e: MouseButtonEventArgs)OnMouseRightButtonUp(self: Label_17$18, e: MouseButtonEventArgs)OnMouseRightButtonUp(self: TextBox_18$19, e: MouseButtonEventArgs)OnMouseRightButtonUp(self: Button_19$20, e: MouseButtonEventArgs)OnMouseRightButtonUp(self: CheckBox_20$21, e: MouseButtonEventArgs)OnMouseRightButtonUp(self: ComboBox_21$22, e: MouseButtonEventArgs)OnMouseRightButtonUp(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnMouseUp(self, *args): #cannot find CLR method
        """
        OnMouseUp(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseUp�routed event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the mouse button was released.
        
        OnMouseUp(self: Window_16$17, e: MouseButtonEventArgs)OnMouseUp(self: Label_17$18, e: MouseButtonEventArgs)OnMouseUp(self: TextBox_18$19, e: MouseButtonEventArgs)OnMouseUp(self: Button_19$20, e: MouseButtonEventArgs)OnMouseUp(self: CheckBox_20$21, e: MouseButtonEventArgs)OnMouseUp(self: ComboBox_21$22, e: MouseButtonEventArgs)OnMouseUp(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnMouseWheel(self, *args): #cannot find CLR method
        """
        OnMouseWheel(self: UIElement, e: MouseWheelEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseWheel�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseWheelEventArgs that contains the event data.
        OnMouseWheel(self: Window_16$17, e: MouseWheelEventArgs)OnMouseWheel(self: Label_17$18, e: MouseWheelEventArgs)OnMouseWheel(self: TextBox_18$19, e: MouseWheelEventArgs)OnMouseWheel(self: Button_19$20, e: MouseWheelEventArgs)OnMouseWheel(self: CheckBox_20$21, e: MouseWheelEventArgs)OnMouseWheel(self: Separator_22$23, e: MouseWheelEventArgs)
        """
        pass

    def OnPreviewDragEnter(self, *args): #cannot find CLR method
        """
        OnPreviewDragEnter(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDragEnter�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnPreviewDragEnter(self: Window_16$17, e: DragEventArgs)OnPreviewDragEnter(self: Label_17$18, e: DragEventArgs)OnPreviewDragEnter(self: TextBox_18$19, e: DragEventArgs)OnPreviewDragEnter(self: Button_19$20, e: DragEventArgs)OnPreviewDragEnter(self: CheckBox_20$21, e: DragEventArgs)OnPreviewDragEnter(self: ComboBox_21$22, e: DragEventArgs)OnPreviewDragEnter(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnPreviewDragLeave(self, *args): #cannot find CLR method
        """
        OnPreviewDragLeave(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDragLeave�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnPreviewDragLeave(self: Window_16$17, e: DragEventArgs)OnPreviewDragLeave(self: Label_17$18, e: DragEventArgs)OnPreviewDragLeave(self: TextBox_18$19, e: DragEventArgs)OnPreviewDragLeave(self: Button_19$20, e: DragEventArgs)OnPreviewDragLeave(self: CheckBox_20$21, e: DragEventArgs)OnPreviewDragLeave(self: ComboBox_21$22, e: DragEventArgs)OnPreviewDragLeave(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnPreviewDragOver(self, *args): #cannot find CLR method
        """
        OnPreviewDragOver(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDragOver�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnPreviewDragOver(self: Window_16$17, e: DragEventArgs)OnPreviewDragOver(self: Label_17$18, e: DragEventArgs)OnPreviewDragOver(self: TextBox_18$19, e: DragEventArgs)OnPreviewDragOver(self: Button_19$20, e: DragEventArgs)OnPreviewDragOver(self: CheckBox_20$21, e: DragEventArgs)OnPreviewDragOver(self: ComboBox_21$22, e: DragEventArgs)OnPreviewDragOver(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnPreviewDrop(self, *args): #cannot find CLR method
        """
        OnPreviewDrop(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDrop�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnPreviewDrop(self: Window_16$17, e: DragEventArgs)OnPreviewDrop(self: Label_17$18, e: DragEventArgs)OnPreviewDrop(self: TextBox_18$19, e: DragEventArgs)OnPreviewDrop(self: Button_19$20, e: DragEventArgs)OnPreviewDrop(self: CheckBox_20$21, e: DragEventArgs)OnPreviewDrop(self: ComboBox_21$22, e: DragEventArgs)OnPreviewDrop(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnPreviewGiveFeedback(self, *args): #cannot find CLR method
        """
        OnPreviewGiveFeedback(self: UIElement, e: GiveFeedbackEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewGiveFeedback�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.GiveFeedbackEventArgs that contains the event data.
        OnPreviewGiveFeedback(self: Window_16$17, e: GiveFeedbackEventArgs)OnPreviewGiveFeedback(self: Label_17$18, e: GiveFeedbackEventArgs)OnPreviewGiveFeedback(self: TextBox_18$19, e: GiveFeedbackEventArgs)OnPreviewGiveFeedback(self: Button_19$20, e: GiveFeedbackEventArgs)OnPreviewGiveFeedback(self: CheckBox_20$21, e: GiveFeedbackEventArgs)OnPreviewGiveFeedback(self: ComboBox_21$22, e: GiveFeedbackEventArgs)OnPreviewGiveFeedback(self: Separator_22$23, e: GiveFeedbackEventArgs)
        """
        pass

    def OnPreviewGotKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnPreviewGotKeyboardFocus(self: UIElement, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewGotKeyboardFocus�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains the event 
             data.
        
        OnPreviewGotKeyboardFocus(self: Window_16$17, e: KeyboardFocusChangedEventArgs)OnPreviewGotKeyboardFocus(self: Label_17$18, e: KeyboardFocusChangedEventArgs)OnPreviewGotKeyboardFocus(self: TextBox_18$19, e: KeyboardFocusChangedEventArgs)OnPreviewGotKeyboardFocus(self: Button_19$20, e: KeyboardFocusChangedEventArgs)OnPreviewGotKeyboardFocus(self: CheckBox_20$21, e: KeyboardFocusChangedEventArgs)OnPreviewGotKeyboardFocus(self: ComboBox_21$22, e: KeyboardFocusChangedEventArgs)OnPreviewGotKeyboardFocus(self: Separator_22$23, e: KeyboardFocusChangedEventArgs)
        """
        pass

    def OnPreviewKeyDown(self, *args): #cannot find CLR method
        """
        OnPreviewKeyDown(self: UIElement, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewKeyDown�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        OnPreviewKeyDown(self: Window_16$17, e: KeyEventArgs)OnPreviewKeyDown(self: Label_17$18, e: KeyEventArgs)OnPreviewKeyDown(self: TextBox_18$19, e: KeyEventArgs)OnPreviewKeyDown(self: Button_19$20, e: KeyEventArgs)OnPreviewKeyDown(self: CheckBox_20$21, e: KeyEventArgs)OnPreviewKeyDown(self: ComboBox_21$22, e: KeyEventArgs)OnPreviewKeyDown(self: Separator_22$23, e: KeyEventArgs)
        """
        pass

    def OnPreviewKeyUp(self, *args): #cannot find CLR method
        """
        OnPreviewKeyUp(self: UIElement, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewKeyUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        OnPreviewKeyUp(self: Window_16$17, e: KeyEventArgs)OnPreviewKeyUp(self: Label_17$18, e: KeyEventArgs)OnPreviewKeyUp(self: TextBox_18$19, e: KeyEventArgs)OnPreviewKeyUp(self: Button_19$20, e: KeyEventArgs)OnPreviewKeyUp(self: CheckBox_20$21, e: KeyEventArgs)OnPreviewKeyUp(self: ComboBox_21$22, e: KeyEventArgs)OnPreviewKeyUp(self: Separator_22$23, e: KeyEventArgs)
        """
        pass

    def OnPreviewLostKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnPreviewLostKeyboardFocus(self: UIElement, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewKeyDown�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains the event 
             data.
        
        OnPreviewLostKeyboardFocus(self: Window_16$17, e: KeyboardFocusChangedEventArgs)OnPreviewLostKeyboardFocus(self: Label_17$18, e: KeyboardFocusChangedEventArgs)OnPreviewLostKeyboardFocus(self: TextBox_18$19, e: KeyboardFocusChangedEventArgs)OnPreviewLostKeyboardFocus(self: Button_19$20, e: KeyboardFocusChangedEventArgs)OnPreviewLostKeyboardFocus(self: CheckBox_20$21, e: KeyboardFocusChangedEventArgs)OnPreviewLostKeyboardFocus(self: ComboBox_21$22, e: KeyboardFocusChangedEventArgs)OnPreviewLostKeyboardFocus(self: Separator_22$23, e: KeyboardFocusChangedEventArgs)
        """
        pass

    def OnPreviewMouseDown(self, *args): #cannot find CLR method
        """
        OnPreviewMouseDown(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseDown attached�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that one or more mouse buttons were pressed.
        
        OnPreviewMouseDown(self: Window_16$17, e: MouseButtonEventArgs)OnPreviewMouseDown(self: Label_17$18, e: MouseButtonEventArgs)OnPreviewMouseDown(self: TextBox_18$19, e: MouseButtonEventArgs)OnPreviewMouseDown(self: Button_19$20, e: MouseButtonEventArgs)OnPreviewMouseDown(self: CheckBox_20$21, e: MouseButtonEventArgs)OnPreviewMouseDown(self: ComboBox_21$22, e: MouseButtonEventArgs)OnPreviewMouseDown(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnPreviewMouseLeftButtonDown(self, *args): #cannot find CLR method
        """
        OnPreviewMouseLeftButtonDown(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.PreviewMouseLeftButtonDown�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was pressed.
        
        OnPreviewMouseLeftButtonDown(self: Window_16$17, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonDown(self: Label_17$18, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonDown(self: TextBox_18$19, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonDown(self: Button_19$20, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonDown(self: CheckBox_20$21, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonDown(self: ComboBox_21$22, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonDown(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnPreviewMouseLeftButtonUp(self, *args): #cannot find CLR method
        """
        OnPreviewMouseLeftButtonUp(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.PreviewMouseLeftButtonUp�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was released.
        
        OnPreviewMouseLeftButtonUp(self: Window_16$17, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonUp(self: Label_17$18, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonUp(self: TextBox_18$19, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonUp(self: Button_19$20, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonUp(self: CheckBox_20$21, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonUp(self: ComboBox_21$22, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonUp(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnPreviewMouseMove(self, *args): #cannot find CLR method
        """
        OnPreviewMouseMove(self: UIElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseMove�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        OnPreviewMouseMove(self: Window_16$17, e: MouseEventArgs)OnPreviewMouseMove(self: Label_17$18, e: MouseEventArgs)OnPreviewMouseMove(self: TextBox_18$19, e: MouseEventArgs)OnPreviewMouseMove(self: Button_19$20, e: MouseEventArgs)OnPreviewMouseMove(self: CheckBox_20$21, e: MouseEventArgs)OnPreviewMouseMove(self: ComboBox_21$22, e: MouseEventArgs)OnPreviewMouseMove(self: Separator_22$23, e: MouseEventArgs)
        """
        pass

    def OnPreviewMouseRightButtonDown(self, *args): #cannot find CLR method
        """
        OnPreviewMouseRightButtonDown(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.PreviewMouseRightButtonDown�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was pressed.
        
        OnPreviewMouseRightButtonDown(self: Window_16$17, e: MouseButtonEventArgs)OnPreviewMouseRightButtonDown(self: Label_17$18, e: MouseButtonEventArgs)OnPreviewMouseRightButtonDown(self: TextBox_18$19, e: MouseButtonEventArgs)OnPreviewMouseRightButtonDown(self: Button_19$20, e: MouseButtonEventArgs)OnPreviewMouseRightButtonDown(self: CheckBox_20$21, e: MouseButtonEventArgs)OnPreviewMouseRightButtonDown(self: ComboBox_21$22, e: MouseButtonEventArgs)OnPreviewMouseRightButtonDown(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnPreviewMouseRightButtonUp(self, *args): #cannot find CLR method
        """
        OnPreviewMouseRightButtonUp(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.PreviewMouseRightButtonUp�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was released.
        
        OnPreviewMouseRightButtonUp(self: Window_16$17, e: MouseButtonEventArgs)OnPreviewMouseRightButtonUp(self: Label_17$18, e: MouseButtonEventArgs)OnPreviewMouseRightButtonUp(self: TextBox_18$19, e: MouseButtonEventArgs)OnPreviewMouseRightButtonUp(self: Button_19$20, e: MouseButtonEventArgs)OnPreviewMouseRightButtonUp(self: CheckBox_20$21, e: MouseButtonEventArgs)OnPreviewMouseRightButtonUp(self: ComboBox_21$22, e: MouseButtonEventArgs)OnPreviewMouseRightButtonUp(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnPreviewMouseUp(self, *args): #cannot find CLR method
        """
        OnPreviewMouseUp(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that one or more mouse buttons were released.
        
        OnPreviewMouseUp(self: Window_16$17, e: MouseButtonEventArgs)OnPreviewMouseUp(self: Label_17$18, e: MouseButtonEventArgs)OnPreviewMouseUp(self: TextBox_18$19, e: MouseButtonEventArgs)OnPreviewMouseUp(self: Button_19$20, e: MouseButtonEventArgs)OnPreviewMouseUp(self: CheckBox_20$21, e: MouseButtonEventArgs)OnPreviewMouseUp(self: ComboBox_21$22, e: MouseButtonEventArgs)OnPreviewMouseUp(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnPreviewMouseWheel(self, *args): #cannot find CLR method
        """
        OnPreviewMouseWheel(self: UIElement, e: MouseWheelEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseWheel�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseWheelEventArgs that contains the event data.
        OnPreviewMouseWheel(self: Window_16$17, e: MouseWheelEventArgs)OnPreviewMouseWheel(self: Label_17$18, e: MouseWheelEventArgs)OnPreviewMouseWheel(self: TextBox_18$19, e: MouseWheelEventArgs)OnPreviewMouseWheel(self: Button_19$20, e: MouseWheelEventArgs)OnPreviewMouseWheel(self: CheckBox_20$21, e: MouseWheelEventArgs)OnPreviewMouseWheel(self: ComboBox_21$22, e: MouseWheelEventArgs)OnPreviewMouseWheel(self: Separator_22$23, e: MouseWheelEventArgs)
        """
        pass

    def OnPreviewQueryContinueDrag(self, *args): #cannot find CLR method
        """
        OnPreviewQueryContinueDrag(self: UIElement, e: QueryContinueDragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewQueryContinueDrag�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.QueryContinueDragEventArgs that contains the event data.
        OnPreviewQueryContinueDrag(self: Window_16$17, e: QueryContinueDragEventArgs)OnPreviewQueryContinueDrag(self: Label_17$18, e: QueryContinueDragEventArgs)OnPreviewQueryContinueDrag(self: TextBox_18$19, e: QueryContinueDragEventArgs)OnPreviewQueryContinueDrag(self: Button_19$20, e: QueryContinueDragEventArgs)OnPreviewQueryContinueDrag(self: CheckBox_20$21, e: QueryContinueDragEventArgs)OnPreviewQueryContinueDrag(self: ComboBox_21$22, e: QueryContinueDragEventArgs)OnPreviewQueryContinueDrag(self: Separator_22$23, e: QueryContinueDragEventArgs)
        """
        pass

    def OnPreviewStylusButtonDown(self, *args): #cannot find CLR method
        """
        OnPreviewStylusButtonDown(self: UIElement, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusButtonDown�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        OnPreviewStylusButtonDown(self: Window_16$17, e: StylusButtonEventArgs)OnPreviewStylusButtonDown(self: Label_17$18, e: StylusButtonEventArgs)OnPreviewStylusButtonDown(self: TextBox_18$19, e: StylusButtonEventArgs)OnPreviewStylusButtonDown(self: Button_19$20, e: StylusButtonEventArgs)OnPreviewStylusButtonDown(self: CheckBox_20$21, e: StylusButtonEventArgs)OnPreviewStylusButtonDown(self: ComboBox_21$22, e: StylusButtonEventArgs)OnPreviewStylusButtonDown(self: Separator_22$23, e: StylusButtonEventArgs)
        """
        pass

    def OnPreviewStylusButtonUp(self, *args): #cannot find CLR method
        """
        OnPreviewStylusButtonUp(self: UIElement, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusButtonUp�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        OnPreviewStylusButtonUp(self: Window_16$17, e: StylusButtonEventArgs)OnPreviewStylusButtonUp(self: Label_17$18, e: StylusButtonEventArgs)OnPreviewStylusButtonUp(self: TextBox_18$19, e: StylusButtonEventArgs)OnPreviewStylusButtonUp(self: Button_19$20, e: StylusButtonEventArgs)OnPreviewStylusButtonUp(self: CheckBox_20$21, e: StylusButtonEventArgs)OnPreviewStylusButtonUp(self: ComboBox_21$22, e: StylusButtonEventArgs)OnPreviewStylusButtonUp(self: Separator_22$23, e: StylusButtonEventArgs)
        """
        pass

    def OnPreviewStylusDown(self, *args): #cannot find CLR method
        """
        OnPreviewStylusDown(self: UIElement, e: StylusDownEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusDown�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusDownEventArgs that contains the event data.
        OnPreviewStylusDown(self: Window_16$17, e: StylusDownEventArgs)OnPreviewStylusDown(self: Label_17$18, e: StylusDownEventArgs)OnPreviewStylusDown(self: TextBox_18$19, e: StylusDownEventArgs)OnPreviewStylusDown(self: Button_19$20, e: StylusDownEventArgs)OnPreviewStylusDown(self: CheckBox_20$21, e: StylusDownEventArgs)OnPreviewStylusDown(self: ComboBox_21$22, e: StylusDownEventArgs)OnPreviewStylusDown(self: Separator_22$23, e: StylusDownEventArgs)
        """
        pass

    def OnPreviewStylusInAirMove(self, *args): #cannot find CLR method
        """
        OnPreviewStylusInAirMove(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusInAirMove�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnPreviewStylusInAirMove(self: Window_16$17, e: StylusEventArgs)OnPreviewStylusInAirMove(self: Label_17$18, e: StylusEventArgs)OnPreviewStylusInAirMove(self: TextBox_18$19, e: StylusEventArgs)OnPreviewStylusInAirMove(self: Button_19$20, e: StylusEventArgs)OnPreviewStylusInAirMove(self: CheckBox_20$21, e: StylusEventArgs)OnPreviewStylusInAirMove(self: ComboBox_21$22, e: StylusEventArgs)OnPreviewStylusInAirMove(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnPreviewStylusInRange(self, *args): #cannot find CLR method
        """
        OnPreviewStylusInRange(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusInRange�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnPreviewStylusInRange(self: Window_16$17, e: StylusEventArgs)OnPreviewStylusInRange(self: Label_17$18, e: StylusEventArgs)OnPreviewStylusInRange(self: TextBox_18$19, e: StylusEventArgs)OnPreviewStylusInRange(self: Button_19$20, e: StylusEventArgs)OnPreviewStylusInRange(self: CheckBox_20$21, e: StylusEventArgs)OnPreviewStylusInRange(self: ComboBox_21$22, e: StylusEventArgs)OnPreviewStylusInRange(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnPreviewStylusMove(self, *args): #cannot find CLR method
        """
        OnPreviewStylusMove(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusMove�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnPreviewStylusMove(self: Window_16$17, e: StylusEventArgs)OnPreviewStylusMove(self: Label_17$18, e: StylusEventArgs)OnPreviewStylusMove(self: TextBox_18$19, e: StylusEventArgs)OnPreviewStylusMove(self: Button_19$20, e: StylusEventArgs)OnPreviewStylusMove(self: CheckBox_20$21, e: StylusEventArgs)OnPreviewStylusMove(self: ComboBox_21$22, e: StylusEventArgs)OnPreviewStylusMove(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnPreviewStylusOutOfRange(self, *args): #cannot find CLR method
        """
        OnPreviewStylusOutOfRange(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusOutOfRange�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnPreviewStylusOutOfRange(self: Window_16$17, e: StylusEventArgs)OnPreviewStylusOutOfRange(self: Label_17$18, e: StylusEventArgs)OnPreviewStylusOutOfRange(self: TextBox_18$19, e: StylusEventArgs)OnPreviewStylusOutOfRange(self: Button_19$20, e: StylusEventArgs)OnPreviewStylusOutOfRange(self: CheckBox_20$21, e: StylusEventArgs)OnPreviewStylusOutOfRange(self: ComboBox_21$22, e: StylusEventArgs)OnPreviewStylusOutOfRange(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnPreviewStylusSystemGesture(self, *args): #cannot find CLR method
        """
        OnPreviewStylusSystemGesture(self: UIElement, e: StylusSystemGestureEventArgs)
            Invoked when an unhandled 
             System.Windows.Input.Stylus.PreviewStylusSystemGesture�attached event reaches 
             an element in its route that is derived from this class. Implement this method 
             to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusSystemGestureEventArgs that contains the event 
             data.
        
        OnPreviewStylusSystemGesture(self: Window_16$17, e: StylusSystemGestureEventArgs)OnPreviewStylusSystemGesture(self: Label_17$18, e: StylusSystemGestureEventArgs)OnPreviewStylusSystemGesture(self: TextBox_18$19, e: StylusSystemGestureEventArgs)OnPreviewStylusSystemGesture(self: Button_19$20, e: StylusSystemGestureEventArgs)OnPreviewStylusSystemGesture(self: CheckBox_20$21, e: StylusSystemGestureEventArgs)OnPreviewStylusSystemGesture(self: ComboBox_21$22, e: StylusSystemGestureEventArgs)OnPreviewStylusSystemGesture(self: Separator_22$23, e: StylusSystemGestureEventArgs)
        """
        pass

    def OnPreviewStylusUp(self, *args): #cannot find CLR method
        """
        OnPreviewStylusUp(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnPreviewStylusUp(self: Window_16$17, e: StylusEventArgs)OnPreviewStylusUp(self: Label_17$18, e: StylusEventArgs)OnPreviewStylusUp(self: TextBox_18$19, e: StylusEventArgs)OnPreviewStylusUp(self: Button_19$20, e: StylusEventArgs)OnPreviewStylusUp(self: CheckBox_20$21, e: StylusEventArgs)OnPreviewStylusUp(self: ComboBox_21$22, e: StylusEventArgs)OnPreviewStylusUp(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnPreviewTextInput(self, *args): #cannot find CLR method
        """
        OnPreviewTextInput(self: UIElement, e: TextCompositionEventArgs)
            Invoked when an unhandled 
             System.Windows.Input.TextCompositionManager.PreviewTextInput�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.TextCompositionEventArgs that contains the event data.
        OnPreviewTextInput(self: Window_16$17, e: TextCompositionEventArgs)OnPreviewTextInput(self: Label_17$18, e: TextCompositionEventArgs)OnPreviewTextInput(self: TextBox_18$19, e: TextCompositionEventArgs)OnPreviewTextInput(self: Button_19$20, e: TextCompositionEventArgs)OnPreviewTextInput(self: CheckBox_20$21, e: TextCompositionEventArgs)OnPreviewTextInput(self: ComboBox_21$22, e: TextCompositionEventArgs)OnPreviewTextInput(self: Separator_22$23, e: TextCompositionEventArgs)
        """
        pass

    def OnPreviewTouchDown(self, *args): #cannot find CLR method
        """
        OnPreviewTouchDown(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.PreviewTouchDown 
             routed event that occurs when a touch presses this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnPreviewTouchDown(self: Window_16$17, e: TouchEventArgs)OnPreviewTouchDown(self: Label_17$18, e: TouchEventArgs)OnPreviewTouchDown(self: TextBox_18$19, e: TouchEventArgs)OnPreviewTouchDown(self: Button_19$20, e: TouchEventArgs)OnPreviewTouchDown(self: CheckBox_20$21, e: TouchEventArgs)OnPreviewTouchDown(self: ComboBox_21$22, e: TouchEventArgs)OnPreviewTouchDown(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnPreviewTouchMove(self, *args): #cannot find CLR method
        """
        OnPreviewTouchMove(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.PreviewTouchMove 
             routed event that occurs when a touch moves while inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnPreviewTouchMove(self: Window_16$17, e: TouchEventArgs)OnPreviewTouchMove(self: Label_17$18, e: TouchEventArgs)OnPreviewTouchMove(self: TextBox_18$19, e: TouchEventArgs)OnPreviewTouchMove(self: Button_19$20, e: TouchEventArgs)OnPreviewTouchMove(self: CheckBox_20$21, e: TouchEventArgs)OnPreviewTouchMove(self: ComboBox_21$22, e: TouchEventArgs)OnPreviewTouchMove(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnPreviewTouchUp(self, *args): #cannot find CLR method
        """
        OnPreviewTouchUp(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.PreviewTouchUp routed 
             event that occurs when a touch is released inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnPreviewTouchUp(self: Window_16$17, e: TouchEventArgs)OnPreviewTouchUp(self: Label_17$18, e: TouchEventArgs)OnPreviewTouchUp(self: TextBox_18$19, e: TouchEventArgs)OnPreviewTouchUp(self: Button_19$20, e: TouchEventArgs)OnPreviewTouchUp(self: CheckBox_20$21, e: TouchEventArgs)OnPreviewTouchUp(self: ComboBox_21$22, e: TouchEventArgs)OnPreviewTouchUp(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnPropertyChanged(self, *args): #cannot find CLR method
        """
        OnPropertyChanged(self: DependencyObject, e: DependencyPropertyChangedEventArgs)
            Invoked whenever the effective value of any dependency property on this 
             System.Windows.DependencyObject has been updated. The specific dependency 
             property that changed is reported in the event data.
        
        
            e: Event data that will contain the dependency property identifier of interest, 
             the property metadata for the type, and old and new values.
        
        OnPropertyChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnQueryContinueDrag(self, *args): #cannot find CLR method
        """
        OnQueryContinueDrag(self: UIElement, e: QueryContinueDragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.QueryContinueDrag�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.QueryContinueDragEventArgs that contains the event data.
        OnQueryContinueDrag(self: Window_16$17, e: QueryContinueDragEventArgs)OnQueryContinueDrag(self: Label_17$18, e: QueryContinueDragEventArgs)OnQueryContinueDrag(self: TextBox_18$19, e: QueryContinueDragEventArgs)OnQueryContinueDrag(self: Button_19$20, e: QueryContinueDragEventArgs)OnQueryContinueDrag(self: CheckBox_20$21, e: QueryContinueDragEventArgs)OnQueryContinueDrag(self: ComboBox_21$22, e: QueryContinueDragEventArgs)OnQueryContinueDrag(self: Separator_22$23, e: QueryContinueDragEventArgs)
        """
        pass

    def OnQueryCursor(self, *args): #cannot find CLR method
        """
        OnQueryCursor(self: UIElement, e: QueryCursorEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.QueryCursor�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.QueryCursorEventArgs that contains the event data.
        OnQueryCursor(self: Window_16$17, e: QueryCursorEventArgs)OnQueryCursor(self: Label_17$18, e: QueryCursorEventArgs)OnQueryCursor(self: TextBox_18$19, e: QueryCursorEventArgs)OnQueryCursor(self: Button_19$20, e: QueryCursorEventArgs)OnQueryCursor(self: CheckBox_20$21, e: QueryCursorEventArgs)OnQueryCursor(self: ComboBox_21$22, e: QueryCursorEventArgs)OnQueryCursor(self: Separator_22$23, e: QueryCursorEventArgs)
        """
        pass

    def OnRender(self, *args): #cannot find CLR method
        """
        OnRender(self: UIElement, drawingContext: DrawingContext)
            When overridden in a derived class, participates in rendering operations that 
             are directed by the layout system. The rendering instructions for this element 
             are not used directly when this method is invoked, and are instead preserved 
             for later asynchronous use by layout and drawing.
        
        
            drawingContext: The drawing instructions for a specific element. This context is provided to 
             the layout system.
        
        OnRender(self: Window_16$17, drawingContext: DrawingContext)OnRender(self: Label_17$18, drawingContext: DrawingContext)OnRender(self: TextBox_18$19, drawingContext: DrawingContext)OnRender(self: Button_19$20, drawingContext: DrawingContext)OnRender(self: CheckBox_20$21, drawingContext: DrawingContext)OnRender(self: ComboBox_21$22, drawingContext: DrawingContext)OnRender(self: Separator_22$23, drawingContext: DrawingContext)
        """
        pass

    def OnRenderSizeChanged(self, *args): #cannot find CLR method
        """
        OnRenderSizeChanged(self: UIElement, info: SizeChangedInfo)
            When overridden in a derived class, participates in rendering operations that 
             are directed by the layout system. This method is invoked after layout update, 
             and before rendering, if the element's System.Windows.UIElement.RenderSize has 
             changed as a result of layout update.
        
        
            info: The packaged parameters (System.Windows.SizeChangedInfo), which includes old 
             and new sizes, and which dimension actually changes.
        
        OnRenderSizeChanged(self: Window_16$17, sizeInfo: SizeChangedInfo)OnRenderSizeChanged(self: Label_17$18, sizeInfo: SizeChangedInfo)OnRenderSizeChanged(self: TextBox_18$19, sizeInfo: SizeChangedInfo)OnRenderSizeChanged(self: Button_19$20, sizeInfo: SizeChangedInfo)OnRenderSizeChanged(self: CheckBox_20$21, sizeInfo: SizeChangedInfo)OnRenderSizeChanged(self: ComboBox_21$22, sizeInfo: SizeChangedInfo)OnRenderSizeChanged(self: Separator_22$23, sizeInfo: SizeChangedInfo)
        """
        pass

    def OnStylusButtonDown(self, *args): #cannot find CLR method
        """
        OnStylusButtonDown(self: UIElement, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusButtonDown�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        OnStylusButtonDown(self: Window_16$17, e: StylusButtonEventArgs)OnStylusButtonDown(self: Label_17$18, e: StylusButtonEventArgs)OnStylusButtonDown(self: TextBox_18$19, e: StylusButtonEventArgs)OnStylusButtonDown(self: Button_19$20, e: StylusButtonEventArgs)OnStylusButtonDown(self: CheckBox_20$21, e: StylusButtonEventArgs)OnStylusButtonDown(self: ComboBox_21$22, e: StylusButtonEventArgs)OnStylusButtonDown(self: Separator_22$23, e: StylusButtonEventArgs)
        """
        pass

    def OnStylusButtonUp(self, *args): #cannot find CLR method
        """
        OnStylusButtonUp(self: UIElement, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusButtonUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        OnStylusButtonUp(self: Window_16$17, e: StylusButtonEventArgs)OnStylusButtonUp(self: Label_17$18, e: StylusButtonEventArgs)OnStylusButtonUp(self: TextBox_18$19, e: StylusButtonEventArgs)OnStylusButtonUp(self: Button_19$20, e: StylusButtonEventArgs)OnStylusButtonUp(self: CheckBox_20$21, e: StylusButtonEventArgs)OnStylusButtonUp(self: ComboBox_21$22, e: StylusButtonEventArgs)OnStylusButtonUp(self: Separator_22$23, e: StylusButtonEventArgs)
        """
        pass

    def OnStylusDown(self, *args): #cannot find CLR method
        """
        OnStylusDown(self: UIElement, e: StylusDownEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusDown�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusDownEventArgs that contains the event data.
        OnStylusDown(self: Window_16$17, e: StylusDownEventArgs)OnStylusDown(self: Label_17$18, e: StylusDownEventArgs)OnStylusDown(self: TextBox_18$19, e: StylusDownEventArgs)OnStylusDown(self: Button_19$20, e: StylusDownEventArgs)OnStylusDown(self: CheckBox_20$21, e: StylusDownEventArgs)OnStylusDown(self: ComboBox_21$22, e: StylusDownEventArgs)OnStylusDown(self: Separator_22$23, e: StylusDownEventArgs)
        """
        pass

    def OnStylusEnter(self, *args): #cannot find CLR method
        """
        OnStylusEnter(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusEnter�attached 
             event is raised by this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnStylusEnter(self: Window_16$17, e: StylusEventArgs)OnStylusEnter(self: Label_17$18, e: StylusEventArgs)OnStylusEnter(self: TextBox_18$19, e: StylusEventArgs)OnStylusEnter(self: Button_19$20, e: StylusEventArgs)OnStylusEnter(self: CheckBox_20$21, e: StylusEventArgs)OnStylusEnter(self: ComboBox_21$22, e: StylusEventArgs)OnStylusEnter(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnStylusInAirMove(self, *args): #cannot find CLR method
        """
        OnStylusInAirMove(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusInAirMove�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnStylusInAirMove(self: Window_16$17, e: StylusEventArgs)OnStylusInAirMove(self: Label_17$18, e: StylusEventArgs)OnStylusInAirMove(self: TextBox_18$19, e: StylusEventArgs)OnStylusInAirMove(self: Button_19$20, e: StylusEventArgs)OnStylusInAirMove(self: CheckBox_20$21, e: StylusEventArgs)OnStylusInAirMove(self: ComboBox_21$22, e: StylusEventArgs)OnStylusInAirMove(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnStylusInRange(self, *args): #cannot find CLR method
        """
        OnStylusInRange(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusInRange�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnStylusInRange(self: Window_16$17, e: StylusEventArgs)OnStylusInRange(self: Label_17$18, e: StylusEventArgs)OnStylusInRange(self: TextBox_18$19, e: StylusEventArgs)OnStylusInRange(self: Button_19$20, e: StylusEventArgs)OnStylusInRange(self: CheckBox_20$21, e: StylusEventArgs)OnStylusInRange(self: ComboBox_21$22, e: StylusEventArgs)OnStylusInRange(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnStylusLeave(self, *args): #cannot find CLR method
        """
        OnStylusLeave(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusLeave�attached 
             event is raised by this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnStylusLeave(self: Window_16$17, e: StylusEventArgs)OnStylusLeave(self: Label_17$18, e: StylusEventArgs)OnStylusLeave(self: TextBox_18$19, e: StylusEventArgs)OnStylusLeave(self: Button_19$20, e: StylusEventArgs)OnStylusLeave(self: CheckBox_20$21, e: StylusEventArgs)OnStylusLeave(self: ComboBox_21$22, e: StylusEventArgs)OnStylusLeave(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnStylusMove(self, *args): #cannot find CLR method
        """
        OnStylusMove(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusMove�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnStylusMove(self: Window_16$17, e: StylusEventArgs)OnStylusMove(self: Label_17$18, e: StylusEventArgs)OnStylusMove(self: TextBox_18$19, e: StylusEventArgs)OnStylusMove(self: Button_19$20, e: StylusEventArgs)OnStylusMove(self: CheckBox_20$21, e: StylusEventArgs)OnStylusMove(self: ComboBox_21$22, e: StylusEventArgs)OnStylusMove(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnStylusOutOfRange(self, *args): #cannot find CLR method
        """
        OnStylusOutOfRange(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusOutOfRange�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnStylusOutOfRange(self: Window_16$17, e: StylusEventArgs)OnStylusOutOfRange(self: Label_17$18, e: StylusEventArgs)OnStylusOutOfRange(self: TextBox_18$19, e: StylusEventArgs)OnStylusOutOfRange(self: Button_19$20, e: StylusEventArgs)OnStylusOutOfRange(self: CheckBox_20$21, e: StylusEventArgs)OnStylusOutOfRange(self: ComboBox_21$22, e: StylusEventArgs)OnStylusOutOfRange(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnStylusSystemGesture(self, *args): #cannot find CLR method
        """
        OnStylusSystemGesture(self: UIElement, e: StylusSystemGestureEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusSystemGesture�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusSystemGestureEventArgs that contains the event 
             data.
        
        OnStylusSystemGesture(self: Window_16$17, e: StylusSystemGestureEventArgs)OnStylusSystemGesture(self: Label_17$18, e: StylusSystemGestureEventArgs)OnStylusSystemGesture(self: TextBox_18$19, e: StylusSystemGestureEventArgs)OnStylusSystemGesture(self: Button_19$20, e: StylusSystemGestureEventArgs)OnStylusSystemGesture(self: CheckBox_20$21, e: StylusSystemGestureEventArgs)OnStylusSystemGesture(self: ComboBox_21$22, e: StylusSystemGestureEventArgs)OnStylusSystemGesture(self: Separator_22$23, e: StylusSystemGestureEventArgs)
        """
        pass

    def OnStylusUp(self, *args): #cannot find CLR method
        """
        OnStylusUp(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusUp�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnStylusUp(self: Window_16$17, e: StylusEventArgs)OnStylusUp(self: Label_17$18, e: StylusEventArgs)OnStylusUp(self: TextBox_18$19, e: StylusEventArgs)OnStylusUp(self: Button_19$20, e: StylusEventArgs)OnStylusUp(self: CheckBox_20$21, e: StylusEventArgs)OnStylusUp(self: ComboBox_21$22, e: StylusEventArgs)OnStylusUp(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnTextInput(self, *args): #cannot find CLR method
        """
        OnTextInput(self: UIElement, e: TextCompositionEventArgs)
            Invoked when an unhandled System.Windows.Input.TextCompositionManager.TextInput�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.TextCompositionEventArgs that contains the event data.
        OnTextInput(self: Window_16$17, e: TextCompositionEventArgs)OnTextInput(self: Label_17$18, e: TextCompositionEventArgs)OnTextInput(self: TextBox_18$19, e: TextCompositionEventArgs)OnTextInput(self: Button_19$20, e: TextCompositionEventArgs)OnTextInput(self: CheckBox_20$21, e: TextCompositionEventArgs)OnTextInput(self: ComboBox_21$22, e: TextCompositionEventArgs)OnTextInput(self: Separator_22$23, e: TextCompositionEventArgs)
        """
        pass

    def OnTouchDown(self, *args): #cannot find CLR method
        """
        OnTouchDown(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.TouchDown routed event 
             that occurs when a touch presses inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnTouchDown(self: Window_16$17, e: TouchEventArgs)OnTouchDown(self: Label_17$18, e: TouchEventArgs)OnTouchDown(self: TextBox_18$19, e: TouchEventArgs)OnTouchDown(self: Button_19$20, e: TouchEventArgs)OnTouchDown(self: CheckBox_20$21, e: TouchEventArgs)OnTouchDown(self: ComboBox_21$22, e: TouchEventArgs)OnTouchDown(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnTouchEnter(self, *args): #cannot find CLR method
        """
        OnTouchEnter(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.TouchEnter routed 
             event that occurs when a touch moves from outside to inside the bounds of this 
             element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnTouchEnter(self: Window_16$17, e: TouchEventArgs)OnTouchEnter(self: Label_17$18, e: TouchEventArgs)OnTouchEnter(self: TextBox_18$19, e: TouchEventArgs)OnTouchEnter(self: Button_19$20, e: TouchEventArgs)OnTouchEnter(self: CheckBox_20$21, e: TouchEventArgs)OnTouchEnter(self: ComboBox_21$22, e: TouchEventArgs)OnTouchEnter(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnTouchLeave(self, *args): #cannot find CLR method
        """
        OnTouchLeave(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.TouchLeave routed 
             event that occurs when a touch moves from inside to outside the bounds of this 
             System.Windows.UIElement.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnTouchLeave(self: Window_16$17, e: TouchEventArgs)OnTouchLeave(self: Label_17$18, e: TouchEventArgs)OnTouchLeave(self: TextBox_18$19, e: TouchEventArgs)OnTouchLeave(self: Button_19$20, e: TouchEventArgs)OnTouchLeave(self: CheckBox_20$21, e: TouchEventArgs)OnTouchLeave(self: ComboBox_21$22, e: TouchEventArgs)OnTouchLeave(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnTouchMove(self, *args): #cannot find CLR method
        """
        OnTouchMove(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.TouchMove routed event 
             that occurs when a touch moves while inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnTouchMove(self: Window_16$17, e: TouchEventArgs)OnTouchMove(self: Label_17$18, e: TouchEventArgs)OnTouchMove(self: TextBox_18$19, e: TouchEventArgs)OnTouchMove(self: Button_19$20, e: TouchEventArgs)OnTouchMove(self: CheckBox_20$21, e: TouchEventArgs)OnTouchMove(self: ComboBox_21$22, e: TouchEventArgs)OnTouchMove(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnTouchUp(self, *args): #cannot find CLR method
        """
        OnTouchUp(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.TouchUp routed event 
             that occurs when a touch is released inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnTouchUp(self: Window_16$17, e: TouchEventArgs)OnTouchUp(self: Label_17$18, e: TouchEventArgs)OnTouchUp(self: TextBox_18$19, e: TouchEventArgs)OnTouchUp(self: Button_19$20, e: TouchEventArgs)OnTouchUp(self: CheckBox_20$21, e: TouchEventArgs)OnTouchUp(self: ComboBox_21$22, e: TouchEventArgs)OnTouchUp(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnVisualChildrenChanged(self, *args): #cannot find CLR method
        """
        OnVisualChildrenChanged(self: Visual, visualAdded: DependencyObject, visualRemoved: DependencyObject)
            Called when the System.Windows.Media.VisualCollection of the visual object is 
             modified.
        
        
            visualAdded: The System.Windows.Media.Visual that was added to the collection
            visualRemoved: The System.Windows.Media.Visual that was removed from the collection
        OnVisualChildrenChanged(self: Window_16$17, visualAdded: DependencyObject, visualRemoved: DependencyObject)OnVisualChildrenChanged(self: Label_17$18, visualAdded: DependencyObject, visualRemoved: DependencyObject)OnVisualChildrenChanged(self: TextBox_18$19, visualAdded: DependencyObject, visualRemoved: DependencyObject)OnVisualChildrenChanged(self: Button_19$20, visualAdded: DependencyObject, visualRemoved: DependencyObject)OnVisualChildrenChanged(self: CheckBox_20$21, visualAdded: DependencyObject, visualRemoved: DependencyObject)OnVisualChildrenChanged(self: ComboBox_21$22, visualAdded: DependencyObject, visualRemoved: DependencyObject)OnVisualChildrenChanged(self: Separator_22$23, visualAdded: DependencyObject, visualRemoved: DependencyObject)
        """
        pass

    def OnVisualParentChanged(self, *args): #cannot find CLR method
        """
        OnVisualParentChanged(self: UIElement, oldParent: DependencyObject)
            Invoked when the parent element of this System.Windows.UIElement reports a 
             change to its underlying visual parent.
        
        
            oldParent: The previous parent. This may be provided as null if the 
             System.Windows.DependencyObject did not have a parent element previously.
        
        OnVisualParentChanged(self: Window_16$17, oldParent: DependencyObject)OnVisualParentChanged(self: Label_17$18, oldParent: DependencyObject)OnVisualParentChanged(self: TextBox_18$19, oldParent: DependencyObject)OnVisualParentChanged(self: Button_19$20, oldParent: DependencyObject)OnVisualParentChanged(self: CheckBox_20$21, oldParent: DependencyObject)OnVisualParentChanged(self: ComboBox_21$22, oldParent: DependencyObject)OnVisualParentChanged(self: Separator_22$23, oldParent: DependencyObject)
        """
        pass

    def PredictFocus(self, direction):
        """
        PredictFocus(self: UIElement, direction: FocusNavigationDirection) -> DependencyObject
        
            When overridden in a derived class, returns the element that would receive 
             focus for a specified focus traversal direction, without actually moving focus 
             to that element.
        
        
            direction: The direction of the requested focus traversal.
            Returns: The element that would have received focus if 
             System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest) were 
             actually invoked.
        """
        pass

    def RaiseEvent(self, e):
        """
        RaiseEvent(self: UIElement, e: RoutedEventArgs)
            Raises a specific routed event. The System.Windows.RoutedEvent to be raised is 
             identified within the System.Windows.RoutedEventArgs instance that is provided 
             (as the System.Windows.RoutedEventArgs.RoutedEvent property of that event 
             data).
        
        
            e: A System.Windows.RoutedEventArgs that contains the event data and also 
             identifies the event to raise.
        """
        pass

    def ReleaseAllTouchCaptures(self):
        """
        ReleaseAllTouchCaptures(self: UIElement)
            Releases all captured touch devices from this element.
        """
        pass

    def ReleaseMouseCapture(self):
        """
        ReleaseMouseCapture(self: UIElement)
            Releases the mouse capture, if this element held the capture.
        """
        pass

    def ReleaseStylusCapture(self):
        """
        ReleaseStylusCapture(self: UIElement)
            Releases the stylus device capture, if this element held the capture.
        """
        pass

    def ReleaseTouchCapture(self, touchDevice):
        """
        ReleaseTouchCapture(self: UIElement, touchDevice: TouchDevice) -> bool
        
            Attempts to release the specified touch device from this element.
        
            touchDevice: The device to release.
            Returns: true if the touch device is released; otherwise, false.
        """
        pass

    def RemoveHandler(self, routedEvent, handler):
        """
        RemoveHandler(self: UIElement, routedEvent: RoutedEvent, handler: Delegate)
            Removes the specified routed event handler from this element.
        
            routedEvent: The identifier of the�routed event for which the handler is attached.
            handler: The specific handler implementation to remove from the event handler collection 
             on this element.
        """
        pass

    def RemoveVisualChild(self, *args): #cannot find CLR method
        """
        RemoveVisualChild(self: Visual, child: Visual)
            Removes the parent-child relationship between two visuals.
        
            child: The child visual object to remove from the parent visual.
        RemoveVisualChild(self: Window_16$17, child: Window_16$17)RemoveVisualChild(self: Label_17$18, child: Label_17$18)RemoveVisualChild(self: TextBox_18$19, child: TextBox_18$19)RemoveVisualChild(self: Button_19$20, child: Button_19$20)RemoveVisualChild(self: CheckBox_20$21, child: CheckBox_20$21)RemoveVisualChild(self: ComboBox_21$22, child: ComboBox_21$22)RemoveVisualChild(self: Separator_22$23, child: Separator_22$23)
        """
        pass

    def ShouldSerializeCommandBindings(self):
        """
        ShouldSerializeCommandBindings(self: UIElement) -> bool
        
            Returns whether serialization processes should serialize the contents of the 
             System.Windows.UIElement.CommandBindings property on instances of this class.
        
            Returns: true if the System.Windows.UIElement.CommandBindings property value should be 
             serialized; otherwise, false.
        """
        pass

    def ShouldSerializeInputBindings(self):
        """
        ShouldSerializeInputBindings(self: UIElement) -> bool
        
            Returns whether serialization processes should serialize the contents of the 
             System.Windows.UIElement.InputBindings property on instances of this class.
        
            Returns: true if the System.Windows.UIElement.InputBindings property value should be 
             serialized; otherwise, false.
        """
        pass

    def ShouldSerializeProperty(self, *args): #cannot find CLR method
        """
        ShouldSerializeProperty(self: DependencyObject, dp: DependencyProperty) -> bool
        
            Returns a value that indicates whether serialization processes should serialize 
             the value for the provided dependency property.
        
        
            dp: The identifier for the dependency property that should be serialized.
            Returns: true if the dependency property that is supplied should be value-serialized; 
             otherwise, false.
        
        ShouldSerializeProperty(self: Window_16$17, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Label_17$18, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: TextBox_18$19, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Button_19$20, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: CheckBox_20$21, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: ComboBox_21$22, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Separator_22$23, dp: DependencyProperty) -> bool
        """
        pass

    def TranslatePoint(self, point, relativeTo):
        """
        TranslatePoint(self: UIElement, point: Point, relativeTo: UIElement) -> Point
        
            Translates a point relative to this element to coordinates that are relative to 
             the specified element.
        
        
            point: The point value, as relative to this element.
            relativeTo: The element to translate the given point into.
            Returns: A point value, now relative to the target element rather than this source 
             element.
        """
        pass

    def UpdateLayout(self):
        """
        UpdateLayout(self: UIElement)
            Ensures that all visual child elements of this element are properly updated for 
             layout.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AllowDrop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.  This is a dependency property.

Get: AllowDrop(self: UIElement) -> bool

Set: AllowDrop(self: UIElement) = value
"""

    AreAnyTouchesCaptured = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether at least one touch is captured to this element.

Get: AreAnyTouchesCaptured(self: UIElement) -> bool

"""

    AreAnyTouchesCapturedWithin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.

Get: AreAnyTouchesCapturedWithin(self: UIElement) -> bool

"""

    AreAnyTouchesDirectlyOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether at least one touch is pressed over this element.

Get: AreAnyTouchesDirectlyOver(self: UIElement) -> bool

"""

    AreAnyTouchesOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.

Get: AreAnyTouchesOver(self: UIElement) -> bool

"""

    BitmapEffect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a bitmap effect that applies directly to the rendered content for this element.  This is a dependency property.

Get: BitmapEffect(self: UIElement) -> BitmapEffect

Set: BitmapEffect(self: UIElement) = value
"""

    BitmapEffectInput = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets an input source for the bitmap effect that applies directly to the rendered content for this element.  This is a dependency property.

Get: BitmapEffectInput(self: UIElement) -> BitmapEffectInput

Set: BitmapEffectInput(self: UIElement) = value
"""

    CacheMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a cached representation of the System.Windows.UIElement.

Get: CacheMode(self: UIElement) -> CacheMode

Set: CacheMode(self: UIElement) = value
"""

    Clip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the geometry used to define the outline of the contents of an element.  This is a dependency property.

Get: Clip(self: UIElement) -> Geometry

Set: Clip(self: UIElement) = value
"""

    ClipToBounds = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element) to fit into the size of the containing element.   This is a dependency property.

Get: ClipToBounds(self: UIElement) -> bool

Set: ClipToBounds(self: UIElement) = value
"""

    CommandBindings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of System.Windows.Input.CommandBinding objects associated with this element. A System.Windows.Input.CommandBinding enables command handling for this element, and declares the linkage between a command, its events, and the handlers attached by this element.

Get: CommandBindings(self: UIElement) -> CommandBindingCollection

"""

    DesiredSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the size that this element computed during the measure pass of the layout process.

Get: DesiredSize(self: UIElement) -> Size

"""

    Effect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the bitmap effect to apply to the System.Windows.UIElement. This is a dependency property.

Get: Effect(self: UIElement) -> Effect

Set: Effect(self: UIElement) = value
"""

    Focusable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether the element can receive focus.  This is a dependency property.

Get: Focusable(self: UIElement) -> bool

Set: Focusable(self: UIElement) = value
"""

    HasAnimatedProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether this element has any animated properties.

Get: HasAnimatedProperties(self: UIElement) -> bool

"""

    HasEffectiveKeyboardFocus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    InputBindings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the collection of input bindings associated with this element.

Get: InputBindings(self: UIElement) -> InputBindingCollection

"""

    IsArrangeValid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether the computed size and position of child elements in this element's layout are valid.

Get: IsArrangeValid(self: UIElement) -> bool

"""

    IsEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value indicating whether this element is enabled in the user interface (UI).  This is a dependency property.

Get: IsEnabled(self: UIElement) -> bool

Set: IsEnabled(self: UIElement) = value
"""

    IsEnabledCore = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that becomes the return value of System.Windows.UIElement.IsEnabled in derived classes.

"""

    IsFocused = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that determines whether this element has logical focus.  This is a dependency property.

Get: IsFocused(self: UIElement) -> bool

"""

    IsHitTestVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content. This is a dependency property.

Get: IsHitTestVisible(self: UIElement) -> bool

Set: IsHitTestVisible(self: UIElement) = value
"""

    IsInputMethodEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether an input method system, such as an Input Method Editor (IME),  is enabled for processing the input to this element.

Get: IsInputMethodEnabled(self: UIElement) -> bool

"""

    IsKeyboardFocused = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether this element has keyboard focus.  This is a dependency property.

Get: IsKeyboardFocused(self: UIElement) -> bool

"""

    IsKeyboardFocusWithin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.  This is a dependency property.

Get: IsKeyboardFocusWithin(self: UIElement) -> bool

"""

    IsManipulationEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether manipulation events are enabled on this System.Windows.UIElement.

Get: IsManipulationEnabled(self: UIElement) -> bool

Set: IsManipulationEnabled(self: UIElement) = value
"""

    IsMeasureValid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether the current size returned by layout measure is valid.

Get: IsMeasureValid(self: UIElement) -> bool

"""

    IsMouseCaptured = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether the mouse is captured to this element.  This is a dependency property.

Get: IsMouseCaptured(self: UIElement) -> bool

"""

    IsMouseCaptureWithin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree. This is a dependency property.

Get: IsMouseCaptureWithin(self: UIElement) -> bool

"""

    IsMouseDirectlyOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the position of the mouse pointer corresponds to�hit test results, which take element compositing into account.  This is a dependency property.

Get: IsMouseDirectlyOver(self: UIElement) -> bool

"""

    IsMouseOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).  This is a dependency property.

Get: IsMouseOver(self: UIElement) -> bool

"""

    IsStylusCaptured = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether the stylus is captured by this element.  This is a dependency property.

Get: IsStylusCaptured(self: UIElement) -> bool

"""

    IsStylusCaptureWithin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree. This is a dependency property.

Get: IsStylusCaptureWithin(self: UIElement) -> bool

"""

    IsStylusDirectlyOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the stylus position corresponds to�hit test results, which take element compositing into account.  This is a dependency property.

Get: IsStylusDirectlyOver(self: UIElement) -> bool

"""

    IsStylusOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).  This is a dependency property.

Get: IsStylusOver(self: UIElement) -> bool

"""

    IsVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether this element is visible in the user interface (UI).  This is a dependency property.

Get: IsVisible(self: UIElement) -> bool

"""

    Opacity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the opacity factor applied to the entire System.Windows.UIElement when it is rendered in the user interface (UI).  This is a dependency property.

Get: Opacity(self: UIElement) -> float

Set: Opacity(self: UIElement) = value
"""

    OpacityMask = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets an opacity mask, as a System.Windows.Media.Brush implementation that is applied to any alpha-channel masking for the rendered content of this element.  This is a dependency property.

Get: OpacityMask(self: UIElement) -> Brush

Set: OpacityMask(self: UIElement) = value
"""

    PersistId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that uniquely identifies this element.

Get: PersistId(self: UIElement) -> int

"""

    RenderSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets (or sets, but see Remarks) the final render size of this element.

Get: RenderSize(self: UIElement) -> Size

Set: RenderSize(self: UIElement) = value
"""

    RenderTransform = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets transform information that affects the rendering position of this element.  This is a dependency property.

Get: RenderTransform(self: UIElement) -> Transform

Set: RenderTransform(self: UIElement) = value
"""

    RenderTransformOrigin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the center point of any possible render transform declared by System.Windows.UIElement.RenderTransform, relative to the bounds of the element.  This is a dependency property.

Get: RenderTransformOrigin(self: UIElement) -> Point

Set: RenderTransformOrigin(self: UIElement) = value
"""

    SnapsToDevicePixels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that determines whether rendering for this element should use device-specific pixel settings during rendering.  This is a dependency property.

Get: SnapsToDevicePixels(self: UIElement) -> bool

Set: SnapsToDevicePixels(self: UIElement) = value
"""

    StylusPlugIns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of all stylus plug-in (customization) objects associated with this element.

"""

    TouchesCaptured = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets all touch devices that are captured to this element.

Get: TouchesCaptured(self: UIElement) -> IEnumerable[TouchDevice]

"""

    TouchesCapturedWithin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets all touch devices that are captured to this element or any child elements in its visual tree.

Get: TouchesCapturedWithin(self: UIElement) -> IEnumerable[TouchDevice]

"""

    TouchesDirectlyOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets all touch devices that are over this element.

Get: TouchesDirectlyOver(self: UIElement) -> IEnumerable[TouchDevice]

"""

    TouchesOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets all touch devices that are over this element or any child elements in its visual tree.

Get: TouchesOver(self: UIElement) -> IEnumerable[TouchDevice]

"""

    Uid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the unique identifier (for localization) for this element. This is a dependency property.

Get: Uid(self: UIElement) -> str

Set: Uid(self: UIElement) = value
"""

    Visibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the user interface (UI) visibility of this element.  This is a dependency property.

Get: Visibility(self: UIElement) -> Visibility

Set: Visibility(self: UIElement) = value
"""

    VisualBitmapEffect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.Effects.BitmapEffect value for the System.Windows.Media.Visual.

"""

    VisualBitmapEffectInput = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.Effects.BitmapEffectInput value for the System.Windows.Media.Visual.

"""

    VisualBitmapScalingMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.BitmapScalingMode for the System.Windows.Media.Visual.

"""

    VisualCacheMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a cached representation of the System.Windows.Media.Visual.

"""

    VisualChildrenCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the number of child elements for the System.Windows.Media.Visual.

"""

    VisualClearTypeHint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.ClearTypeHint that determines how ClearType is rendered in the System.Windows.Media.Visual.

"""

    VisualClip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the clip region of the System.Windows.Media.Visual as a System.Windows.Media.Geometry value.

"""

    VisualEdgeMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the edge mode of the System.Windows.Media.Visual as an System.Windows.Media.EdgeMode value.

"""

    VisualEffect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the bitmap effect to apply to the System.Windows.Media.Visual.

"""

    VisualOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the offset value of the visual object.

"""

    VisualOpacity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the opacity of the System.Windows.Media.Visual.

"""

    VisualOpacityMask = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.Brush value that represents the opacity mask of the System.Windows.Media.Visual.

"""

    VisualParent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the visual tree parent of the visual object.

"""

    VisualScrollableAreaClip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a clipped scrollable area for the System.Windows.Media.Visual.

"""

    VisualTextHintingMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.TextHintingMode of the System.Windows.Media.Visual.

"""

    VisualTextRenderingMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.TextRenderingMode of the System.Windows.Media.Visual.

"""

    VisualTransform = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.Transform value for the System.Windows.Media.Visual.

"""

    VisualXSnappingGuidelines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the x-coordinate (vertical) guideline collection.

"""

    VisualYSnappingGuidelines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the y-coordinate (horizontal) guideline collection.

"""


    AllowDropProperty = None
    AreAnyTouchesCapturedProperty = None
    AreAnyTouchesCapturedWithinProperty = None
    AreAnyTouchesDirectlyOverProperty = None
    AreAnyTouchesOverProperty = None
    BitmapEffectInputProperty = None
    BitmapEffectProperty = None
    CacheModeProperty = None
    ClipProperty = None
    ClipToBoundsProperty = None
    DragEnter = None
    DragEnterEvent = None
    DragLeave = None
    DragLeaveEvent = None
    DragOver = None
    DragOverEvent = None
    Drop = None
    DropEvent = None
    EffectProperty = None
    FocusableChanged = None
    FocusableProperty = None
    GiveFeedback = None
    GiveFeedbackEvent = None
    GotFocus = None
    GotFocusEvent = None
    GotKeyboardFocus = None
    GotKeyboardFocusEvent = None
    GotMouseCapture = None
    GotMouseCaptureEvent = None
    GotStylusCapture = None
    GotStylusCaptureEvent = None
    GotTouchCapture = None
    GotTouchCaptureEvent = None
    IsEnabledChanged = None
    IsEnabledProperty = None
    IsFocusedProperty = None
    IsHitTestVisibleChanged = None
    IsHitTestVisibleProperty = None
    IsKeyboardFocusedChanged = None
    IsKeyboardFocusedProperty = None
    IsKeyboardFocusWithinChanged = None
    IsKeyboardFocusWithinProperty = None
    IsManipulationEnabledProperty = None
    IsMouseCapturedChanged = None
    IsMouseCapturedProperty = None
    IsMouseCaptureWithinChanged = None
    IsMouseCaptureWithinProperty = None
    IsMouseDirectlyOverChanged = None
    IsMouseDirectlyOverProperty = None
    IsMouseOverProperty = None
    IsStylusCapturedChanged = None
    IsStylusCapturedProperty = None
    IsStylusCaptureWithinChanged = None
    IsStylusCaptureWithinProperty = None
    IsStylusDirectlyOverChanged = None
    IsStylusDirectlyOverProperty = None
    IsStylusOverProperty = None
    IsVisibleChanged = None
    IsVisibleProperty = None
    KeyDown = None
    KeyDownEvent = None
    KeyUp = None
    KeyUpEvent = None
    LayoutUpdated = None
    LostFocus = None
    LostFocusEvent = None
    LostKeyboardFocus = None
    LostKeyboardFocusEvent = None
    LostMouseCapture = None
    LostMouseCaptureEvent = None
    LostStylusCapture = None
    LostStylusCaptureEvent = None
    LostTouchCapture = None
    LostTouchCaptureEvent = None
    ManipulationBoundaryFeedback = None
    ManipulationBoundaryFeedbackEvent = None
    ManipulationCompleted = None
    ManipulationCompletedEvent = None
    ManipulationDelta = None
    ManipulationDeltaEvent = None
    ManipulationInertiaStarting = None
    ManipulationInertiaStartingEvent = None
    ManipulationStarted = None
    ManipulationStartedEvent = None
    ManipulationStarting = None
    ManipulationStartingEvent = None
    MouseDown = None
    MouseDownEvent = None
    MouseEnter = None
    MouseEnterEvent = None
    MouseLeave = None
    MouseLeaveEvent = None
    MouseLeftButtonDown = None
    MouseLeftButtonDownEvent = None
    MouseLeftButtonUp = None
    MouseLeftButtonUpEvent = None
    MouseMove = None
    MouseMoveEvent = None
    MouseRightButtonDown = None
    MouseRightButtonDownEvent = None
    MouseRightButtonUp = None
    MouseRightButtonUpEvent = None
    MouseUp = None
    MouseUpEvent = None
    MouseWheel = None
    MouseWheelEvent = None
    OpacityMaskProperty = None
    OpacityProperty = None
    PreviewDragEnter = None
    PreviewDragEnterEvent = None
    PreviewDragLeave = None
    PreviewDragLeaveEvent = None
    PreviewDragOver = None
    PreviewDragOverEvent = None
    PreviewDrop = None
    PreviewDropEvent = None
    PreviewGiveFeedback = None
    PreviewGiveFeedbackEvent = None
    PreviewGotKeyboardFocus = None
    PreviewGotKeyboardFocusEvent = None
    PreviewKeyDown = None
    PreviewKeyDownEvent = None
    PreviewKeyUp = None
    PreviewKeyUpEvent = None
    PreviewLostKeyboardFocus = None
    PreviewLostKeyboardFocusEvent = None
    PreviewMouseDown = None
    PreviewMouseDownEvent = None
    PreviewMouseLeftButtonDown = None
    PreviewMouseLeftButtonDownEvent = None
    PreviewMouseLeftButtonUp = None
    PreviewMouseLeftButtonUpEvent = None
    PreviewMouseMove = None
    PreviewMouseMoveEvent = None
    PreviewMouseRightButtonDown = None
    PreviewMouseRightButtonDownEvent = None
    PreviewMouseRightButtonUp = None
    PreviewMouseRightButtonUpEvent = None
    PreviewMouseUp = None
    PreviewMouseUpEvent = None
    PreviewMouseWheel = None
    PreviewMouseWheelEvent = None
    PreviewQueryContinueDrag = None
    PreviewQueryContinueDragEvent = None
    PreviewStylusButtonDown = None
    PreviewStylusButtonDownEvent = None
    PreviewStylusButtonUp = None
    PreviewStylusButtonUpEvent = None
    PreviewStylusDown = None
    PreviewStylusDownEvent = None
    PreviewStylusInAirMove = None
    PreviewStylusInAirMoveEvent = None
    PreviewStylusInRange = None
    PreviewStylusInRangeEvent = None
    PreviewStylusMove = None
    PreviewStylusMoveEvent = None
    PreviewStylusOutOfRange = None
    PreviewStylusOutOfRangeEvent = None
    PreviewStylusSystemGesture = None
    PreviewStylusSystemGestureEvent = None
    PreviewStylusUp = None
    PreviewStylusUpEvent = None
    PreviewTextInput = None
    PreviewTextInputEvent = None
    PreviewTouchDown = None
    PreviewTouchDownEvent = None
    PreviewTouchMove = None
    PreviewTouchMoveEvent = None
    PreviewTouchUp = None
    PreviewTouchUpEvent = None
    QueryContinueDrag = None
    QueryContinueDragEvent = None
    QueryCursor = None
    QueryCursorEvent = None
    RenderTransformOriginProperty = None
    RenderTransformProperty = None
    SnapsToDevicePixelsProperty = None
    StylusButtonDown = None
    StylusButtonDownEvent = None
    StylusButtonUp = None
    StylusButtonUpEvent = None
    StylusDown = None
    StylusDownEvent = None
    StylusEnter = None
    StylusEnterEvent = None
    StylusInAirMove = None
    StylusInAirMoveEvent = None
    StylusInRange = None
    StylusInRangeEvent = None
    StylusLeave = None
    StylusLeaveEvent = None
    StylusMove = None
    StylusMoveEvent = None
    StylusOutOfRange = None
    StylusOutOfRangeEvent = None
    StylusSystemGesture = None
    StylusSystemGestureEvent = None
    StylusUp = None
    StylusUpEvent = None
    TextInput = None
    TextInputEvent = None
    TouchDown = None
    TouchDownEvent = None
    TouchEnter = None
    TouchEnterEvent = None
    TouchLeave = None
    TouchLeaveEvent = None
    TouchMove = None
    TouchMoveEvent = None
    TouchUp = None
    TouchUpEvent = None
    UidProperty = None
    VisibilityProperty = None


class FrameworkElement(UIElement, IResource, IAnimatable, IInputElement, IFrameworkInputElement, ISupportInitialize, IHaveResources, IQueryAmbient):
    """
    Provides a WPF framework-level set of properties, events, and methods for Windows Presentation Foundation (WPF) elements. This class represents the provided WPF framework-level implementation that is built on the WPF core-level�APIs�that are defined by System.Windows.UIElement.
    
    FrameworkElement()
    """
    def AddLogicalChild(self, *args): #cannot find CLR method
        """
        AddLogicalChild(self: FrameworkElement, child: object)
            Adds the provided object to the logical tree of this element.
        
            child: Child element to be added.
        AddLogicalChild(self: Window_16$17, child: object)AddLogicalChild(self: Label_17$18, child: object)AddLogicalChild(self: TextBox_18$19, child: object)AddLogicalChild(self: Button_19$20, child: object)AddLogicalChild(self: CheckBox_20$21, child: object)AddLogicalChild(self: ComboBox_21$22, child: object)AddLogicalChild(self: Separator_22$23, child: object)
        """
        pass

    def AddVisualChild(self, *args): #cannot find CLR method
        """
        AddVisualChild(self: Visual, child: Visual)
            Defines the parent-child relationship between two visuals.
        
            child: The child visual object to add to parent visual.
        AddVisualChild(self: Window_16$17, child: Window_16$17)AddVisualChild(self: Label_17$18, child: Label_17$18)AddVisualChild(self: TextBox_18$19, child: TextBox_18$19)AddVisualChild(self: Button_19$20, child: Button_19$20)AddVisualChild(self: CheckBox_20$21, child: CheckBox_20$21)AddVisualChild(self: ComboBox_21$22, child: ComboBox_21$22)AddVisualChild(self: Separator_22$23, child: Separator_22$23)
        """
        pass

    def ApplyTemplate(self):
        """
        ApplyTemplate(self: FrameworkElement) -> bool
        
            Builds the current template's visual tree if necessary, and returns a value 
             that indicates whether the visual tree was rebuilt by this call.
        
            Returns: true if visuals were added to the tree; returns false otherwise.
        """
        pass

    def ArrangeCore(self, *args): #cannot find CLR method
        """
        ArrangeCore(self: FrameworkElement, finalRect: Rect)
            Implements System.Windows.UIElement.ArrangeCore(System.Windows.Rect) (defined 
             as virtual in System.Windows.UIElement) and seals the implementation.
        
        
            finalRect: The final area within the parent that this element should use to arrange itself 
             and its children.
        
        ArrangeCore(self: Window_16$17, finalRect: Rect)ArrangeCore(self: Label_17$18, finalRect: Rect)ArrangeCore(self: TextBox_18$19, finalRect: Rect)ArrangeCore(self: Button_19$20, finalRect: Rect)ArrangeCore(self: CheckBox_20$21, finalRect: Rect)ArrangeCore(self: ComboBox_21$22, finalRect: Rect)ArrangeCore(self: Separator_22$23, finalRect: Rect)
        """
        pass

    def ArrangeOverride(self, *args): #cannot find CLR method
        """
        ArrangeOverride(self: FrameworkElement, finalSize: Size) -> Size
        
            When overridden in a derived class, positions child elements and determines a 
             size for a System.Windows.FrameworkElement derived class.
        
        
            finalSize: The final area within the parent that this element should use to arrange itself 
             and its children.
        
            Returns: The actual size used.
        ArrangeOverride(self: Window_16$17, arrangeBounds: Size) -> Size
        ArrangeOverride(self: Label_17$18, arrangeBounds: Size) -> Size
        ArrangeOverride(self: TextBox_18$19, arrangeBounds: Size) -> Size
        ArrangeOverride(self: Button_19$20, arrangeBounds: Size) -> Size
        ArrangeOverride(self: CheckBox_20$21, arrangeBounds: Size) -> Size
        ArrangeOverride(self: ComboBox_21$22, arrangeBounds: Size) -> Size
        ArrangeOverride(self: Separator_22$23, arrangeBounds: Size) -> Size
        """
        pass

    def BeginInit(self):
        """
        BeginInit(self: FrameworkElement)
            Starts the initialization process for this element.
        BeginInit(self: Window_16$17)BeginInit(self: Label_17$18)BeginInit(self: TextBox_18$19)BeginInit(self: Button_19$20)BeginInit(self: CheckBox_20$21)BeginInit(self: ComboBox_21$22)BeginInit(self: Separator_22$23)
        """
        pass

    def BeginStoryboard(self, storyboard, handoffBehavior=None, isControllable=None):
        """
        BeginStoryboard(self: FrameworkElement, storyboard: Storyboard, handoffBehavior: HandoffBehavior, isControllable: bool)
            Begins the sequence of actions contained in the provided storyboard, with 
             specified state for control of the animation after it is started.
        
        
            storyboard: The storyboard to begin.
            handoffBehavior: A value of the enumeration that describes behavior to use if a property 
             described in the storyboard is already animated.
        
            isControllable: Declares whether the animation is controllable (can be paused) after it is 
             started.
        
        BeginStoryboard(self: FrameworkElement, storyboard: Storyboard, handoffBehavior: HandoffBehavior)
            Begins the sequence of actions contained in the provided storyboard, with 
             options specified for what should happen if the property is already animated.
        
        
            storyboard: The storyboard to begin.
            handoffBehavior: A value of the enumeration that describes behavior to use if a property 
             described in the storyboard is already animated.
        
        BeginStoryboard(self: FrameworkElement, storyboard: Storyboard)
            Begins the sequence of actions that are contained in the provided storyboard.
        
            storyboard: The storyboard to begin.
        """
        pass

    def BringIntoView(self, targetRectangle=None):
        """
        BringIntoView(self: FrameworkElement, targetRectangle: Rect)
            Attempts to bring the provided region size of this element into view, within 
             any scrollable regions it is contained within.
        
        
            targetRectangle: Specified size of the element that should also be brought into view.
        BringIntoView(self: FrameworkElement)
            Attempts to bring this element into view, within any scrollable regions it is 
             contained within.
        """
        pass

    def EndInit(self):
        """
        EndInit(self: FrameworkElement)
            Indicates that the initialization process for the element is complete.
        EndInit(self: Window_16$17)EndInit(self: Label_17$18)EndInit(self: TextBox_18$19)EndInit(self: Button_19$20)EndInit(self: CheckBox_20$21)EndInit(self: ComboBox_21$22)EndInit(self: Separator_22$23)
        """
        pass

    def FindName(self, name):
        """
        FindName(self: FrameworkElement, name: str) -> object
        
            Finds an element that has the provided identifier name.
        
            name: The name of the requested element.
            Returns: The requested element. This can be null if no matching element was found.
        """
        pass

    def FindResource(self, resourceKey):
        """
        FindResource(self: FrameworkElement, resourceKey: object) -> object
        
            Searches for a resource with the specified key, and throws an exception if the 
             requested resource is not found.
        
        
            resourceKey: The key identifier for the requested resource.
            Returns: The requested resource. If no resource with the provided key was found, an 
             exception is thrown. An System.Windows.DependencyProperty.UnsetValue value 
             might also be returned in the exception case.
        """
        pass

    def GetBindingExpression(self, dp):
        """
        GetBindingExpression(self: FrameworkElement, dp: DependencyProperty) -> BindingExpression
        
            Returns the System.Windows.Data.BindingExpression that represents the binding 
             on the specified property.
        
        
            dp: The target System.Windows.DependencyProperty to get the binding from.
            Returns: A System.Windows.Data.BindingExpression if the target property has an active 
             binding; otherwise, returns null.
        """
        pass

    @staticmethod
    def GetFlowDirection(element):
        """
        GetFlowDirection(element: DependencyObject) -> FlowDirection
        
            Gets the value of the System.Windows.FrameworkElement.FlowDirection�attached 
             property for the specified System.Windows.DependencyObject.
        
        
            element: The element to return a System.Windows.FrameworkElement.FlowDirection for.
            Returns: The requested flow direction, as a value of the enumeration.
        """
        pass

    def GetLayoutClip(self, *args): #cannot find CLR method
        """
        GetLayoutClip(self: FrameworkElement, layoutSlotSize: Size) -> Geometry
        
            Returns a geometry for a clipping mask. The mask applies if the layout system 
             attempts to arrange an element that is larger than the available display space.
        
        
            layoutSlotSize: The size of the part of the element that does visual presentation.
            Returns: The clipping geometry.
        GetLayoutClip(self: Window_16$17, layoutSlotSize: Size) -> Geometry
        GetLayoutClip(self: Label_17$18, layoutSlotSize: Size) -> Geometry
        GetLayoutClip(self: TextBox_18$19, layoutSlotSize: Size) -> Geometry
        GetLayoutClip(self: Button_19$20, layoutSlotSize: Size) -> Geometry
        GetLayoutClip(self: CheckBox_20$21, layoutSlotSize: Size) -> Geometry
        GetLayoutClip(self: ComboBox_21$22, layoutSlotSize: Size) -> Geometry
        GetLayoutClip(self: Separator_22$23, layoutSlotSize: Size) -> Geometry
        """
        pass

    def GetTemplateChild(self, *args): #cannot find CLR method
        """
        GetTemplateChild(self: FrameworkElement, childName: str) -> DependencyObject
        
            Returns the named element in the visual tree of an instantiated 
             System.Windows.Controls.ControlTemplate.
        
        
            childName: Name of the child to find.
            Returns: The requested element. May be null if no element of the requested name exists.
        GetTemplateChild(self: Window_16$17, childName: str) -> DependencyObject
        GetTemplateChild(self: Label_17$18, childName: str) -> DependencyObject
        GetTemplateChild(self: TextBox_18$19, childName: str) -> DependencyObject
        GetTemplateChild(self: Button_19$20, childName: str) -> DependencyObject
        GetTemplateChild(self: CheckBox_20$21, childName: str) -> DependencyObject
        GetTemplateChild(self: ComboBox_21$22, childName: str) -> DependencyObject
        GetTemplateChild(self: Separator_22$23, childName: str) -> DependencyObject
        """
        pass

    def GetUIParentCore(self, *args): #cannot find CLR method
        """
        GetUIParentCore(self: FrameworkElement) -> DependencyObject
        
            Returns an alternative logical parent for this element if there is no visual 
             parent.
        
            Returns: Returns something other than null whenever a WPF framework-level implementation 
             of this method has a non-visual parent connection.
        
        GetUIParentCore(self: Window_16$17) -> DependencyObject
        GetUIParentCore(self: Label_17$18) -> DependencyObject
        GetUIParentCore(self: TextBox_18$19) -> DependencyObject
        GetUIParentCore(self: Button_19$20) -> DependencyObject
        GetUIParentCore(self: CheckBox_20$21) -> DependencyObject
        GetUIParentCore(self: ComboBox_21$22) -> DependencyObject
        GetUIParentCore(self: Separator_22$23) -> DependencyObject
        """
        pass

    def GetVisualChild(self, *args): #cannot find CLR method
        """
        GetVisualChild(self: FrameworkElement, index: int) -> Visual
        
            Overrides System.Windows.Media.Visual.GetVisualChild(System.Int32), and returns 
             a child at the specified index from a collection of child elements.
        
        
            index: The zero-based index of the requested child element in the collection.
            Returns: The requested child element. This should not return null; if the provided index 
             is out of range, an exception is thrown.
        
        GetVisualChild(self: Window_16$17, index: int) -> Visual
        GetVisualChild(self: Label_17$18, index: int) -> Visual
        GetVisualChild(self: TextBox_18$19, index: int) -> Visual
        GetVisualChild(self: Button_19$20, index: int) -> Visual
        GetVisualChild(self: CheckBox_20$21, index: int) -> Visual
        GetVisualChild(self: ComboBox_21$22, index: int) -> Visual
        GetVisualChild(self: Separator_22$23, index: int) -> Visual
        """
        pass

    def HitTestCore(self, *args): #cannot find CLR method
        """
        HitTestCore(self: UIElement, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        
            Implements 
             System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestPara
             meters) to supply base element hit testing behavior (returning 
             System.Windows.Media.GeometryHitTestResult).
        
        
            hitTestParameters: Describes the hit test to perform, including the initial hit point.
            Returns: Results of the test, including the evaluated geometry.
        HitTestCore(self: UIElement, hitTestParameters: PointHitTestParameters) -> HitTestResult
        
            Implements 
             System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParamet
             ers) to supply base element hit testing behavior (returning 
             System.Windows.Media.HitTestResult).
        
        
            hitTestParameters: Describes the hit test to perform, including the initial hit point.
            Returns: Results of the test, including the evaluated point.
        HitTestCore(self: Window_16$17, hitTestParameters: PointHitTestParameters) -> HitTestResult
        HitTestCore(self: Window_16$17, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        HitTestCore(self: Label_17$18, hitTestParameters: PointHitTestParameters) -> HitTestResult
        HitTestCore(self: Label_17$18, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        HitTestCore(self: TextBox_18$19, hitTestParameters: PointHitTestParameters) -> HitTestResult
        HitTestCore(self: TextBox_18$19, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        HitTestCore(self: Button_19$20, hitTestParameters: PointHitTestParameters) -> HitTestResult
        HitTestCore(self: Button_19$20, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        HitTestCore(self: CheckBox_20$21, hitTestParameters: PointHitTestParameters) -> HitTestResult
        HitTestCore(self: CheckBox_20$21, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        HitTestCore(self: ComboBox_21$22, hitTestParameters: PointHitTestParameters) -> HitTestResult
        HitTestCore(self: ComboBox_21$22, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        HitTestCore(self: Separator_22$23, hitTestParameters: PointHitTestParameters) -> HitTestResult
        HitTestCore(self: Separator_22$23, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        """
        pass

    def MeasureCore(self, *args): #cannot find CLR method
        """
        MeasureCore(self: FrameworkElement, availableSize: Size) -> Size
        
            Implements basic measure-pass layout system behavior for 
             System.Windows.FrameworkElement.
        
        
            availableSize: The available size that the parent element can give to the child elements.
            Returns: The desired size of this element in layout.
        MeasureCore(self: Window_16$17, availableSize: Size) -> Size
        MeasureCore(self: Label_17$18, availableSize: Size) -> Size
        MeasureCore(self: TextBox_18$19, availableSize: Size) -> Size
        MeasureCore(self: Button_19$20, availableSize: Size) -> Size
        MeasureCore(self: CheckBox_20$21, availableSize: Size) -> Size
        MeasureCore(self: ComboBox_21$22, availableSize: Size) -> Size
        MeasureCore(self: Separator_22$23, availableSize: Size) -> Size
        """
        pass

    def MeasureOverride(self, *args): #cannot find CLR method
        """
        MeasureOverride(self: FrameworkElement, availableSize: Size) -> Size
        
            When overridden in a derived class, measures the size in layout required for 
             child elements and determines a size for the 
             System.Windows.FrameworkElement-derived class.
        
        
            availableSize: The available size that this element can give to child elements. Infinity can 
             be specified as a value to indicate that the element will size to whatever 
             content is available.
        
            Returns: The size that this element determines it needs during layout, based on its 
             calculations of child element sizes.
        
        MeasureOverride(self: Window_16$17, availableSize: Size) -> Size
        MeasureOverride(self: Label_17$18, constraint: Size) -> Size
        MeasureOverride(self: TextBox_18$19, constraint: Size) -> Size
        MeasureOverride(self: Button_19$20, constraint: Size) -> Size
        MeasureOverride(self: CheckBox_20$21, constraint: Size) -> Size
        MeasureOverride(self: ComboBox_21$22, constraint: Size) -> Size
        MeasureOverride(self: Separator_22$23, constraint: Size) -> Size
        """
        pass

    def MoveFocus(self, request):
        """
        MoveFocus(self: FrameworkElement, request: TraversalRequest) -> bool
        
            Moves the keyboard focus away from this element and to another element in a 
             provided traversal direction.
        
        
            request: The direction that focus is to be moved, as a value of the enumeration.
            Returns: Returns true if focus is moved successfully; false if the target element in 
             direction as specified does not exist or could not be keyboard focused.
        """
        pass

    def OnAccessKey(self, *args): #cannot find CLR method
        """
        OnAccessKey(self: UIElement, e: AccessKeyEventArgs)
            Provides class handling for when an access key that is meaningful for this 
             element is invoked.
        
        
            e: The event data to the access key event. The event data reports which key was 
             invoked, and indicate whether the System.Windows.Input.AccessKeyManager object 
             that controls the sending of these events also sent this access key invocation 
             to other elements.
        
        OnAccessKey(self: Window_16$17, e: AccessKeyEventArgs)OnAccessKey(self: Label_17$18, e: AccessKeyEventArgs)OnAccessKey(self: TextBox_18$19, e: AccessKeyEventArgs)OnAccessKey(self: Button_19$20, e: AccessKeyEventArgs)OnAccessKey(self: CheckBox_20$21, e: AccessKeyEventArgs)OnAccessKey(self: ComboBox_21$22, e: AccessKeyEventArgs)OnAccessKey(self: Separator_22$23, e: AccessKeyEventArgs)
        """
        pass

    def OnApplyTemplate(self):
        """
        OnApplyTemplate(self: FrameworkElement)
            When overridden in a derived class, is invoked whenever application code or 
             internal processes call System.Windows.FrameworkElement.ApplyTemplate.
        
        OnApplyTemplate(self: Window_16$17)OnApplyTemplate(self: Label_17$18)OnApplyTemplate(self: TextBox_18$19)OnApplyTemplate(self: Button_19$20)OnApplyTemplate(self: CheckBox_20$21)OnApplyTemplate(self: ComboBox_21$22)OnApplyTemplate(self: Separator_22$23)
        """
        pass

    def OnChildDesiredSizeChanged(self, *args): #cannot find CLR method
        """
        OnChildDesiredSizeChanged(self: UIElement, child: UIElement)
            Supports layout behavior when a child element is resized.
        
            child: The child element that is being resized.
        OnChildDesiredSizeChanged(self: Window_16$17, child: Window_16$17)OnChildDesiredSizeChanged(self: Label_17$18, child: Label_17$18)OnChildDesiredSizeChanged(self: TextBox_18$19, child: TextBox_18$19)OnChildDesiredSizeChanged(self: Button_19$20, child: Button_19$20)OnChildDesiredSizeChanged(self: CheckBox_20$21, child: CheckBox_20$21)OnChildDesiredSizeChanged(self: ComboBox_21$22, child: ComboBox_21$22)OnChildDesiredSizeChanged(self: Separator_22$23, child: Separator_22$23)
        """
        pass

    def OnContextMenuClosing(self, *args): #cannot find CLR method
        """
        OnContextMenuClosing(self: FrameworkElement, e: ContextMenuEventArgs)
            Invoked whenever an unhandled 
             System.Windows.FrameworkElement.ContextMenuClosing routed event reaches this 
             class in its route. Implement this method to add class handling for this event.
        
        
            e: Provides data about the event.
        OnContextMenuClosing(self: Window_16$17, e: ContextMenuEventArgs)OnContextMenuClosing(self: Label_17$18, e: ContextMenuEventArgs)OnContextMenuClosing(self: TextBox_18$19, e: ContextMenuEventArgs)OnContextMenuClosing(self: Button_19$20, e: ContextMenuEventArgs)OnContextMenuClosing(self: CheckBox_20$21, e: ContextMenuEventArgs)OnContextMenuClosing(self: ComboBox_21$22, e: ContextMenuEventArgs)OnContextMenuClosing(self: Separator_22$23, e: ContextMenuEventArgs)
        """
        pass

    def OnContextMenuOpening(self, *args): #cannot find CLR method
        """
        OnContextMenuOpening(self: FrameworkElement, e: ContextMenuEventArgs)
            Invoked whenever an unhandled 
             System.Windows.FrameworkElement.ContextMenuOpening routed event reaches this 
             class in its route. Implement this method to add class handling for this event.
        
        
            e: The System.Windows.RoutedEventArgs that contains the event data.
        OnContextMenuOpening(self: Window_16$17, e: ContextMenuEventArgs)OnContextMenuOpening(self: Label_17$18, e: ContextMenuEventArgs)OnContextMenuOpening(self: TextBox_18$19, e: ContextMenuEventArgs)OnContextMenuOpening(self: Button_19$20, e: ContextMenuEventArgs)OnContextMenuOpening(self: CheckBox_20$21, e: ContextMenuEventArgs)OnContextMenuOpening(self: ComboBox_21$22, e: ContextMenuEventArgs)OnContextMenuOpening(self: Separator_22$23, e: ContextMenuEventArgs)
        """
        pass

    def OnCreateAutomationPeer(self, *args): #cannot find CLR method
        """
        OnCreateAutomationPeer(self: UIElement) -> AutomationPeer
        
            Returns class-specific System.Windows.Automation.Peers.AutomationPeer 
             implementations for the Windows Presentation Foundation (WPF) infrastructure.
        
            Returns: The type-specific System.Windows.Automation.Peers.AutomationPeer implementation.
        OnCreateAutomationPeer(self: Window_16$17) -> AutomationPeer
        OnCreateAutomationPeer(self: Label_17$18) -> AutomationPeer
        OnCreateAutomationPeer(self: TextBox_18$19) -> AutomationPeer
        OnCreateAutomationPeer(self: Button_19$20) -> AutomationPeer
        OnCreateAutomationPeer(self: CheckBox_20$21) -> AutomationPeer
        OnCreateAutomationPeer(self: ComboBox_21$22) -> AutomationPeer
        OnCreateAutomationPeer(self: Separator_22$23) -> AutomationPeer
        """
        pass

    def OnDpiChanged(self, *args): #cannot find CLR method
        """ OnDpiChanged(self: Visual, oldDpi: DpiScale, newDpi: DpiScale)OnDpiChanged(self: Window_16$17, oldDpi: DpiScale, newDpi: DpiScale)OnDpiChanged(self: Label_17$18, oldDpi: DpiScale, newDpi: DpiScale)OnDpiChanged(self: TextBox_18$19, oldDpi: DpiScale, newDpi: DpiScale)OnDpiChanged(self: Button_19$20, oldDpi: DpiScale, newDpi: DpiScale)OnDpiChanged(self: CheckBox_20$21, oldDpi: DpiScale, newDpi: DpiScale)OnDpiChanged(self: ComboBox_21$22, oldDpi: DpiScale, newDpi: DpiScale)OnDpiChanged(self: Separator_22$23, oldDpi: DpiScale, newDpi: DpiScale) """
        pass

    def OnDragEnter(self, *args): #cannot find CLR method
        """
        OnDragEnter(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.DragEnter�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnDragEnter(self: Window_16$17, e: DragEventArgs)OnDragEnter(self: Label_17$18, e: DragEventArgs)OnDragEnter(self: TextBox_18$19, e: DragEventArgs)OnDragEnter(self: Button_19$20, e: DragEventArgs)OnDragEnter(self: CheckBox_20$21, e: DragEventArgs)OnDragEnter(self: ComboBox_21$22, e: DragEventArgs)OnDragEnter(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnDragLeave(self, *args): #cannot find CLR method
        """
        OnDragLeave(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.DragLeave�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnDragLeave(self: Window_16$17, e: DragEventArgs)OnDragLeave(self: Label_17$18, e: DragEventArgs)OnDragLeave(self: TextBox_18$19, e: DragEventArgs)OnDragLeave(self: Button_19$20, e: DragEventArgs)OnDragLeave(self: CheckBox_20$21, e: DragEventArgs)OnDragLeave(self: ComboBox_21$22, e: DragEventArgs)OnDragLeave(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnDragOver(self, *args): #cannot find CLR method
        """
        OnDragOver(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.DragOver�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnDragOver(self: Window_16$17, e: DragEventArgs)OnDragOver(self: Label_17$18, e: DragEventArgs)OnDragOver(self: TextBox_18$19, e: DragEventArgs)OnDragOver(self: Button_19$20, e: DragEventArgs)OnDragOver(self: CheckBox_20$21, e: DragEventArgs)OnDragOver(self: ComboBox_21$22, e: DragEventArgs)OnDragOver(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnDrop(self, *args): #cannot find CLR method
        """
        OnDrop(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.DragEnter�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnDrop(self: Window_16$17, e: DragEventArgs)OnDrop(self: Label_17$18, e: DragEventArgs)OnDrop(self: TextBox_18$19, e: DragEventArgs)OnDrop(self: Button_19$20, e: DragEventArgs)OnDrop(self: CheckBox_20$21, e: DragEventArgs)OnDrop(self: ComboBox_21$22, e: DragEventArgs)OnDrop(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnGiveFeedback(self, *args): #cannot find CLR method
        """
        OnGiveFeedback(self: UIElement, e: GiveFeedbackEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.GiveFeedback�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.GiveFeedbackEventArgs that contains the event data.
        OnGiveFeedback(self: Window_16$17, e: GiveFeedbackEventArgs)OnGiveFeedback(self: Label_17$18, e: GiveFeedbackEventArgs)OnGiveFeedback(self: TextBox_18$19, e: GiveFeedbackEventArgs)OnGiveFeedback(self: Button_19$20, e: GiveFeedbackEventArgs)OnGiveFeedback(self: CheckBox_20$21, e: GiveFeedbackEventArgs)OnGiveFeedback(self: ComboBox_21$22, e: GiveFeedbackEventArgs)OnGiveFeedback(self: Separator_22$23, e: GiveFeedbackEventArgs)
        """
        pass

    def OnGotFocus(self, *args): #cannot find CLR method
        """
        OnGotFocus(self: FrameworkElement, e: RoutedEventArgs)
            Invoked whenever an unhandled System.Windows.UIElement.GotFocus event reaches 
             this element in its route.
        
        
            e: The System.Windows.RoutedEventArgs that contains the event data.
        OnGotFocus(self: Window_16$17, e: RoutedEventArgs)OnGotFocus(self: Label_17$18, e: RoutedEventArgs)OnGotFocus(self: TextBox_18$19, e: RoutedEventArgs)OnGotFocus(self: Button_19$20, e: RoutedEventArgs)OnGotFocus(self: CheckBox_20$21, e: RoutedEventArgs)OnGotFocus(self: Separator_22$23, e: RoutedEventArgs)
        """
        pass

    def OnGotKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnGotKeyboardFocus(self: UIElement, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.GotKeyboardFocus�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains the event 
             data.
        
        OnGotKeyboardFocus(self: Window_16$17, e: KeyboardFocusChangedEventArgs)OnGotKeyboardFocus(self: Label_17$18, e: KeyboardFocusChangedEventArgs)OnGotKeyboardFocus(self: TextBox_18$19, e: KeyboardFocusChangedEventArgs)OnGotKeyboardFocus(self: Button_19$20, e: KeyboardFocusChangedEventArgs)OnGotKeyboardFocus(self: CheckBox_20$21, e: KeyboardFocusChangedEventArgs)OnGotKeyboardFocus(self: ComboBox_21$22, e: KeyboardFocusChangedEventArgs)OnGotKeyboardFocus(self: Separator_22$23, e: KeyboardFocusChangedEventArgs)
        """
        pass

    def OnGotMouseCapture(self, *args): #cannot find CLR method
        """
        OnGotMouseCapture(self: UIElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.GotMouseCapture�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        OnGotMouseCapture(self: Window_16$17, e: MouseEventArgs)OnGotMouseCapture(self: Label_17$18, e: MouseEventArgs)OnGotMouseCapture(self: TextBox_18$19, e: MouseEventArgs)OnGotMouseCapture(self: Button_19$20, e: MouseEventArgs)OnGotMouseCapture(self: CheckBox_20$21, e: MouseEventArgs)OnGotMouseCapture(self: ComboBox_21$22, e: MouseEventArgs)OnGotMouseCapture(self: Separator_22$23, e: MouseEventArgs)
        """
        pass

    def OnGotStylusCapture(self, *args): #cannot find CLR method
        """
        OnGotStylusCapture(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.GotStylusCapture�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnGotStylusCapture(self: Window_16$17, e: StylusEventArgs)OnGotStylusCapture(self: Label_17$18, e: StylusEventArgs)OnGotStylusCapture(self: TextBox_18$19, e: StylusEventArgs)OnGotStylusCapture(self: Button_19$20, e: StylusEventArgs)OnGotStylusCapture(self: CheckBox_20$21, e: StylusEventArgs)OnGotStylusCapture(self: ComboBox_21$22, e: StylusEventArgs)OnGotStylusCapture(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnGotTouchCapture(self, *args): #cannot find CLR method
        """
        OnGotTouchCapture(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.GotTouchCapture routed 
             event that occurs when a touch is captured to this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnGotTouchCapture(self: Window_16$17, e: TouchEventArgs)OnGotTouchCapture(self: Label_17$18, e: TouchEventArgs)OnGotTouchCapture(self: TextBox_18$19, e: TouchEventArgs)OnGotTouchCapture(self: Button_19$20, e: TouchEventArgs)OnGotTouchCapture(self: CheckBox_20$21, e: TouchEventArgs)OnGotTouchCapture(self: ComboBox_21$22, e: TouchEventArgs)OnGotTouchCapture(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnInitialized(self, *args): #cannot find CLR method
        """
        OnInitialized(self: FrameworkElement, e: EventArgs)
            Raises the System.Windows.FrameworkElement.Initialized event. This method is 
             invoked whenever System.Windows.FrameworkElement.IsInitialized is set to true 
             internally.
        
        
            e: The System.Windows.RoutedEventArgs that contains the event data.
        OnInitialized(self: Window_16$17, e: EventArgs)OnInitialized(self: Label_17$18, e: EventArgs)OnInitialized(self: TextBox_18$19, e: EventArgs)OnInitialized(self: Button_19$20, e: EventArgs)OnInitialized(self: CheckBox_20$21, e: EventArgs)OnInitialized(self: ComboBox_21$22, e: EventArgs)OnInitialized(self: Separator_22$23, e: EventArgs)
        """
        pass

    def OnIsKeyboardFocusedChanged(self, *args): #cannot find CLR method
        """
        OnIsKeyboardFocusedChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement.IsKeyboardFocusedChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsKeyboardFocusedChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusedChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusedChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusedChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusedChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusedChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusedChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnIsKeyboardFocusWithinChanged(self, *args): #cannot find CLR method
        """
        OnIsKeyboardFocusWithinChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked just before the System.Windows.UIElement.IsKeyboardFocusWithinChanged 
             event is raised by this element. Implement this method to add class handling 
             for this event.
        
        
            e: A System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsKeyboardFocusWithinChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusWithinChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusWithinChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusWithinChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusWithinChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusWithinChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusWithinChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnIsMouseCapturedChanged(self, *args): #cannot find CLR method
        """
        OnIsMouseCapturedChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement.IsMouseCapturedChanged event 
             is raised on this element. Implement this method to add class handling for this 
             event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsMouseCapturedChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsMouseCapturedChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsMouseCapturedChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsMouseCapturedChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsMouseCapturedChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsMouseCapturedChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsMouseCapturedChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnIsMouseCaptureWithinChanged(self, *args): #cannot find CLR method
        """
        OnIsMouseCaptureWithinChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement.IsMouseCaptureWithinChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: A System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsMouseCaptureWithinChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsMouseCaptureWithinChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsMouseCaptureWithinChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsMouseCaptureWithinChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsMouseCaptureWithinChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsMouseCaptureWithinChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsMouseCaptureWithinChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnIsMouseDirectlyOverChanged(self, *args): #cannot find CLR method
        """
        OnIsMouseDirectlyOverChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement.IsMouseDirectlyOverChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsMouseDirectlyOverChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsMouseDirectlyOverChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsMouseDirectlyOverChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsMouseDirectlyOverChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsMouseDirectlyOverChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsMouseDirectlyOverChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsMouseDirectlyOverChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnIsStylusCapturedChanged(self, *args): #cannot find CLR method
        """
        OnIsStylusCapturedChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement.IsStylusCapturedChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: A System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsStylusCapturedChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsStylusCapturedChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsStylusCapturedChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsStylusCapturedChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsStylusCapturedChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsStylusCapturedChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsStylusCapturedChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnIsStylusCaptureWithinChanged(self, *args): #cannot find CLR method
        """
        OnIsStylusCaptureWithinChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement.IsStylusCaptureWithinChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsStylusCaptureWithinChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsStylusCaptureWithinChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsStylusCaptureWithinChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsStylusCaptureWithinChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsStylusCaptureWithinChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsStylusCaptureWithinChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsStylusCaptureWithinChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnIsStylusDirectlyOverChanged(self, *args): #cannot find CLR method
        """
        OnIsStylusDirectlyOverChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement.IsStylusDirectlyOverChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsStylusDirectlyOverChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsStylusDirectlyOverChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsStylusDirectlyOverChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsStylusDirectlyOverChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsStylusDirectlyOverChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsStylusDirectlyOverChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsStylusDirectlyOverChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnKeyDown(self, *args): #cannot find CLR method
        """
        OnKeyDown(self: UIElement, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.KeyDown�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        OnKeyDown(self: Window_16$17, e: KeyEventArgs)OnKeyDown(self: Label_17$18, e: KeyEventArgs)OnKeyDown(self: TextBox_18$19, e: KeyEventArgs)OnKeyDown(self: Button_19$20, e: KeyEventArgs)OnKeyDown(self: CheckBox_20$21, e: KeyEventArgs)OnKeyDown(self: ComboBox_21$22, e: KeyEventArgs)OnKeyDown(self: Separator_22$23, e: KeyEventArgs)
        """
        pass

    def OnKeyUp(self, *args): #cannot find CLR method
        """
        OnKeyUp(self: UIElement, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.KeyUp�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        OnKeyUp(self: Window_16$17, e: KeyEventArgs)OnKeyUp(self: Label_17$18, e: KeyEventArgs)OnKeyUp(self: TextBox_18$19, e: KeyEventArgs)OnKeyUp(self: Button_19$20, e: KeyEventArgs)OnKeyUp(self: CheckBox_20$21, e: KeyEventArgs)OnKeyUp(self: ComboBox_21$22, e: KeyEventArgs)OnKeyUp(self: Separator_22$23, e: KeyEventArgs)
        """
        pass

    def OnLostFocus(self, *args): #cannot find CLR method
        """
        OnLostFocus(self: UIElement, e: RoutedEventArgs)
            Raises the System.Windows.UIElement.LostFocus�routed event by using the event 
             data that is provided.
        
        
            e: A System.Windows.RoutedEventArgs that contains event data. This event data must 
             contain the identifier for the System.Windows.UIElement.LostFocus event.
        
        OnLostFocus(self: Window_16$17, e: RoutedEventArgs)OnLostFocus(self: Label_17$18, e: RoutedEventArgs)OnLostFocus(self: TextBox_18$19, e: RoutedEventArgs)OnLostFocus(self: Button_19$20, e: RoutedEventArgs)OnLostFocus(self: CheckBox_20$21, e: RoutedEventArgs)OnLostFocus(self: ComboBox_21$22, e: RoutedEventArgs)OnLostFocus(self: Separator_22$23, e: RoutedEventArgs)
        """
        pass

    def OnLostKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnLostKeyboardFocus(self: UIElement, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.LostKeyboardFocus�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains event data.
        OnLostKeyboardFocus(self: Window_16$17, e: KeyboardFocusChangedEventArgs)OnLostKeyboardFocus(self: Label_17$18, e: KeyboardFocusChangedEventArgs)OnLostKeyboardFocus(self: TextBox_18$19, e: KeyboardFocusChangedEventArgs)OnLostKeyboardFocus(self: Button_19$20, e: KeyboardFocusChangedEventArgs)OnLostKeyboardFocus(self: CheckBox_20$21, e: KeyboardFocusChangedEventArgs)OnLostKeyboardFocus(self: ComboBox_21$22, e: KeyboardFocusChangedEventArgs)OnLostKeyboardFocus(self: Separator_22$23, e: KeyboardFocusChangedEventArgs)
        """
        pass

    def OnLostMouseCapture(self, *args): #cannot find CLR method
        """
        OnLostMouseCapture(self: UIElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.LostMouseCapture�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains event data.
        OnLostMouseCapture(self: Window_16$17, e: MouseEventArgs)OnLostMouseCapture(self: Label_17$18, e: MouseEventArgs)OnLostMouseCapture(self: TextBox_18$19, e: MouseEventArgs)OnLostMouseCapture(self: Button_19$20, e: MouseEventArgs)OnLostMouseCapture(self: CheckBox_20$21, e: MouseEventArgs)OnLostMouseCapture(self: Separator_22$23, e: MouseEventArgs)
        """
        pass

    def OnLostStylusCapture(self, *args): #cannot find CLR method
        """
        OnLostStylusCapture(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.LostStylusCapture�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains event data.
        OnLostStylusCapture(self: Window_16$17, e: StylusEventArgs)OnLostStylusCapture(self: Label_17$18, e: StylusEventArgs)OnLostStylusCapture(self: TextBox_18$19, e: StylusEventArgs)OnLostStylusCapture(self: Button_19$20, e: StylusEventArgs)OnLostStylusCapture(self: CheckBox_20$21, e: StylusEventArgs)OnLostStylusCapture(self: ComboBox_21$22, e: StylusEventArgs)OnLostStylusCapture(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnLostTouchCapture(self, *args): #cannot find CLR method
        """
        OnLostTouchCapture(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.LostTouchCapture 
             routed event that occurs when this element loses a touch capture.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnLostTouchCapture(self: Window_16$17, e: TouchEventArgs)OnLostTouchCapture(self: Label_17$18, e: TouchEventArgs)OnLostTouchCapture(self: TextBox_18$19, e: TouchEventArgs)OnLostTouchCapture(self: Button_19$20, e: TouchEventArgs)OnLostTouchCapture(self: CheckBox_20$21, e: TouchEventArgs)OnLostTouchCapture(self: ComboBox_21$22, e: TouchEventArgs)OnLostTouchCapture(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnManipulationBoundaryFeedback(self, *args): #cannot find CLR method
        """
        OnManipulationBoundaryFeedback(self: UIElement, e: ManipulationBoundaryFeedbackEventArgs)
            Called when the System.Windows.UIElement.ManipulationBoundaryFeedback event 
             occurs.
        
        
            e: The data for the event.
        OnManipulationBoundaryFeedback(self: Window_16$17, e: ManipulationBoundaryFeedbackEventArgs)OnManipulationBoundaryFeedback(self: Label_17$18, e: ManipulationBoundaryFeedbackEventArgs)OnManipulationBoundaryFeedback(self: TextBox_18$19, e: ManipulationBoundaryFeedbackEventArgs)OnManipulationBoundaryFeedback(self: Button_19$20, e: ManipulationBoundaryFeedbackEventArgs)OnManipulationBoundaryFeedback(self: CheckBox_20$21, e: ManipulationBoundaryFeedbackEventArgs)OnManipulationBoundaryFeedback(self: ComboBox_21$22, e: ManipulationBoundaryFeedbackEventArgs)OnManipulationBoundaryFeedback(self: Separator_22$23, e: ManipulationBoundaryFeedbackEventArgs)
        """
        pass

    def OnManipulationCompleted(self, *args): #cannot find CLR method
        """
        OnManipulationCompleted(self: UIElement, e: ManipulationCompletedEventArgs)
            Called when the System.Windows.UIElement.ManipulationCompleted event occurs.
        
            e: The data for the event.
        OnManipulationCompleted(self: Window_16$17, e: ManipulationCompletedEventArgs)OnManipulationCompleted(self: Label_17$18, e: ManipulationCompletedEventArgs)OnManipulationCompleted(self: TextBox_18$19, e: ManipulationCompletedEventArgs)OnManipulationCompleted(self: Button_19$20, e: ManipulationCompletedEventArgs)OnManipulationCompleted(self: CheckBox_20$21, e: ManipulationCompletedEventArgs)OnManipulationCompleted(self: ComboBox_21$22, e: ManipulationCompletedEventArgs)OnManipulationCompleted(self: Separator_22$23, e: ManipulationCompletedEventArgs)
        """
        pass

    def OnManipulationDelta(self, *args): #cannot find CLR method
        """
        OnManipulationDelta(self: UIElement, e: ManipulationDeltaEventArgs)
            Called when the System.Windows.UIElement.ManipulationDelta event occurs.
        
            e: The data for the event.
        OnManipulationDelta(self: Window_16$17, e: ManipulationDeltaEventArgs)OnManipulationDelta(self: Label_17$18, e: ManipulationDeltaEventArgs)OnManipulationDelta(self: TextBox_18$19, e: ManipulationDeltaEventArgs)OnManipulationDelta(self: Button_19$20, e: ManipulationDeltaEventArgs)OnManipulationDelta(self: CheckBox_20$21, e: ManipulationDeltaEventArgs)OnManipulationDelta(self: ComboBox_21$22, e: ManipulationDeltaEventArgs)OnManipulationDelta(self: Separator_22$23, e: ManipulationDeltaEventArgs)
        """
        pass

    def OnManipulationInertiaStarting(self, *args): #cannot find CLR method
        """
        OnManipulationInertiaStarting(self: UIElement, e: ManipulationInertiaStartingEventArgs)
            Called when the System.Windows.UIElement.ManipulationInertiaStarting event 
             occurs.
        
        
            e: The data for the event.
        OnManipulationInertiaStarting(self: Window_16$17, e: ManipulationInertiaStartingEventArgs)OnManipulationInertiaStarting(self: Label_17$18, e: ManipulationInertiaStartingEventArgs)OnManipulationInertiaStarting(self: TextBox_18$19, e: ManipulationInertiaStartingEventArgs)OnManipulationInertiaStarting(self: Button_19$20, e: ManipulationInertiaStartingEventArgs)OnManipulationInertiaStarting(self: CheckBox_20$21, e: ManipulationInertiaStartingEventArgs)OnManipulationInertiaStarting(self: ComboBox_21$22, e: ManipulationInertiaStartingEventArgs)OnManipulationInertiaStarting(self: Separator_22$23, e: ManipulationInertiaStartingEventArgs)
        """
        pass

    def OnManipulationStarted(self, *args): #cannot find CLR method
        """
        OnManipulationStarted(self: UIElement, e: ManipulationStartedEventArgs)
            Called when the System.Windows.UIElement.ManipulationStarted event occurs.
        
            e: The data for the event.
        OnManipulationStarted(self: Window_16$17, e: ManipulationStartedEventArgs)OnManipulationStarted(self: Label_17$18, e: ManipulationStartedEventArgs)OnManipulationStarted(self: TextBox_18$19, e: ManipulationStartedEventArgs)OnManipulationStarted(self: Button_19$20, e: ManipulationStartedEventArgs)OnManipulationStarted(self: CheckBox_20$21, e: ManipulationStartedEventArgs)OnManipulationStarted(self: ComboBox_21$22, e: ManipulationStartedEventArgs)OnManipulationStarted(self: Separator_22$23, e: ManipulationStartedEventArgs)
        """
        pass

    def OnManipulationStarting(self, *args): #cannot find CLR method
        """
        OnManipulationStarting(self: UIElement, e: ManipulationStartingEventArgs)
            Provides class handling for the System.Windows.UIElement.ManipulationStarting 
             routed event that occurs when the manipulation processor is first created.
        
        
            e: A System.Windows.Input.ManipulationStartingEventArgs  that contains the event 
             data.
        
        OnManipulationStarting(self: Window_16$17, e: ManipulationStartingEventArgs)OnManipulationStarting(self: Label_17$18, e: ManipulationStartingEventArgs)OnManipulationStarting(self: TextBox_18$19, e: ManipulationStartingEventArgs)OnManipulationStarting(self: Button_19$20, e: ManipulationStartingEventArgs)OnManipulationStarting(self: CheckBox_20$21, e: ManipulationStartingEventArgs)OnManipulationStarting(self: ComboBox_21$22, e: ManipulationStartingEventArgs)OnManipulationStarting(self: Separator_22$23, e: ManipulationStartingEventArgs)
        """
        pass

    def OnMouseDown(self, *args): #cannot find CLR method
        """
        OnMouseDown(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseDown�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. 
             This event data reports details about the mouse button that was pressed and the 
             handled state.
        
        OnMouseDown(self: Window_16$17, e: MouseButtonEventArgs)OnMouseDown(self: Label_17$18, e: MouseButtonEventArgs)OnMouseDown(self: TextBox_18$19, e: MouseButtonEventArgs)OnMouseDown(self: Button_19$20, e: MouseButtonEventArgs)OnMouseDown(self: CheckBox_20$21, e: MouseButtonEventArgs)OnMouseDown(self: ComboBox_21$22, e: MouseButtonEventArgs)OnMouseDown(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnMouseEnter(self, *args): #cannot find CLR method
        """
        OnMouseEnter(self: UIElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseEnter�attached event 
             is raised on this element. Implement this method to add class handling for this 
             event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        OnMouseEnter(self: Window_16$17, e: MouseEventArgs)OnMouseEnter(self: Label_17$18, e: MouseEventArgs)OnMouseEnter(self: TextBox_18$19, e: MouseEventArgs)OnMouseEnter(self: Button_19$20, e: MouseEventArgs)OnMouseEnter(self: CheckBox_20$21, e: MouseEventArgs)OnMouseEnter(self: ComboBox_21$22, e: MouseEventArgs)OnMouseEnter(self: Separator_22$23, e: MouseEventArgs)
        """
        pass

    def OnMouseLeave(self, *args): #cannot find CLR method
        """
        OnMouseLeave(self: UIElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseLeave�attached event 
             is raised on this element. Implement this method to add class handling for this 
             event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        OnMouseLeave(self: Window_16$17, e: MouseEventArgs)OnMouseLeave(self: Label_17$18, e: MouseEventArgs)OnMouseLeave(self: TextBox_18$19, e: MouseEventArgs)OnMouseLeave(self: Button_19$20, e: MouseEventArgs)OnMouseLeave(self: CheckBox_20$21, e: MouseEventArgs)OnMouseLeave(self: ComboBox_21$22, e: MouseEventArgs)OnMouseLeave(self: Separator_22$23, e: MouseEventArgs)
        """
        pass

    def OnMouseLeftButtonDown(self, *args): #cannot find CLR method
        """
        OnMouseLeftButtonDown(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.MouseLeftButtonDown�routed 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was pressed.
        
        OnMouseLeftButtonDown(self: Window_16$17, e: MouseButtonEventArgs)OnMouseLeftButtonDown(self: Label_17$18, e: MouseButtonEventArgs)OnMouseLeftButtonDown(self: TextBox_18$19, e: MouseButtonEventArgs)OnMouseLeftButtonDown(self: Button_19$20, e: MouseButtonEventArgs)OnMouseLeftButtonDown(self: CheckBox_20$21, e: MouseButtonEventArgs)OnMouseLeftButtonDown(self: ComboBox_21$22, e: MouseButtonEventArgs)OnMouseLeftButtonDown(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnMouseLeftButtonUp(self, *args): #cannot find CLR method
        """
        OnMouseLeftButtonUp(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.MouseLeftButtonUp�routed 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was released.
        
        OnMouseLeftButtonUp(self: Window_16$17, e: MouseButtonEventArgs)OnMouseLeftButtonUp(self: Label_17$18, e: MouseButtonEventArgs)OnMouseLeftButtonUp(self: TextBox_18$19, e: MouseButtonEventArgs)OnMouseLeftButtonUp(self: Button_19$20, e: MouseButtonEventArgs)OnMouseLeftButtonUp(self: CheckBox_20$21, e: MouseButtonEventArgs)OnMouseLeftButtonUp(self: ComboBox_21$22, e: MouseButtonEventArgs)OnMouseLeftButtonUp(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnMouseMove(self, *args): #cannot find CLR method
        """
        OnMouseMove(self: UIElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseMove�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        OnMouseMove(self: Window_16$17, e: MouseEventArgs)OnMouseMove(self: Label_17$18, e: MouseEventArgs)OnMouseMove(self: TextBox_18$19, e: MouseEventArgs)OnMouseMove(self: Button_19$20, e: MouseEventArgs)OnMouseMove(self: CheckBox_20$21, e: MouseEventArgs)OnMouseMove(self: Separator_22$23, e: MouseEventArgs)
        """
        pass

    def OnMouseRightButtonDown(self, *args): #cannot find CLR method
        """
        OnMouseRightButtonDown(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.MouseRightButtonDown�routed 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was pressed.
        
        OnMouseRightButtonDown(self: Window_16$17, e: MouseButtonEventArgs)OnMouseRightButtonDown(self: Label_17$18, e: MouseButtonEventArgs)OnMouseRightButtonDown(self: TextBox_18$19, e: MouseButtonEventArgs)OnMouseRightButtonDown(self: Button_19$20, e: MouseButtonEventArgs)OnMouseRightButtonDown(self: CheckBox_20$21, e: MouseButtonEventArgs)OnMouseRightButtonDown(self: ComboBox_21$22, e: MouseButtonEventArgs)OnMouseRightButtonDown(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnMouseRightButtonUp(self, *args): #cannot find CLR method
        """
        OnMouseRightButtonUp(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.MouseRightButtonUp�routed 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was released.
        
        OnMouseRightButtonUp(self: Window_16$17, e: MouseButtonEventArgs)OnMouseRightButtonUp(self: Label_17$18, e: MouseButtonEventArgs)OnMouseRightButtonUp(self: TextBox_18$19, e: MouseButtonEventArgs)OnMouseRightButtonUp(self: Button_19$20, e: MouseButtonEventArgs)OnMouseRightButtonUp(self: CheckBox_20$21, e: MouseButtonEventArgs)OnMouseRightButtonUp(self: ComboBox_21$22, e: MouseButtonEventArgs)OnMouseRightButtonUp(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnMouseUp(self, *args): #cannot find CLR method
        """
        OnMouseUp(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseUp�routed event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the mouse button was released.
        
        OnMouseUp(self: Window_16$17, e: MouseButtonEventArgs)OnMouseUp(self: Label_17$18, e: MouseButtonEventArgs)OnMouseUp(self: TextBox_18$19, e: MouseButtonEventArgs)OnMouseUp(self: Button_19$20, e: MouseButtonEventArgs)OnMouseUp(self: CheckBox_20$21, e: MouseButtonEventArgs)OnMouseUp(self: ComboBox_21$22, e: MouseButtonEventArgs)OnMouseUp(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnMouseWheel(self, *args): #cannot find CLR method
        """
        OnMouseWheel(self: UIElement, e: MouseWheelEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseWheel�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseWheelEventArgs that contains the event data.
        OnMouseWheel(self: Window_16$17, e: MouseWheelEventArgs)OnMouseWheel(self: Label_17$18, e: MouseWheelEventArgs)OnMouseWheel(self: TextBox_18$19, e: MouseWheelEventArgs)OnMouseWheel(self: Button_19$20, e: MouseWheelEventArgs)OnMouseWheel(self: CheckBox_20$21, e: MouseWheelEventArgs)OnMouseWheel(self: Separator_22$23, e: MouseWheelEventArgs)
        """
        pass

    def OnPreviewDragEnter(self, *args): #cannot find CLR method
        """
        OnPreviewDragEnter(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDragEnter�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnPreviewDragEnter(self: Window_16$17, e: DragEventArgs)OnPreviewDragEnter(self: Label_17$18, e: DragEventArgs)OnPreviewDragEnter(self: TextBox_18$19, e: DragEventArgs)OnPreviewDragEnter(self: Button_19$20, e: DragEventArgs)OnPreviewDragEnter(self: CheckBox_20$21, e: DragEventArgs)OnPreviewDragEnter(self: ComboBox_21$22, e: DragEventArgs)OnPreviewDragEnter(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnPreviewDragLeave(self, *args): #cannot find CLR method
        """
        OnPreviewDragLeave(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDragLeave�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnPreviewDragLeave(self: Window_16$17, e: DragEventArgs)OnPreviewDragLeave(self: Label_17$18, e: DragEventArgs)OnPreviewDragLeave(self: TextBox_18$19, e: DragEventArgs)OnPreviewDragLeave(self: Button_19$20, e: DragEventArgs)OnPreviewDragLeave(self: CheckBox_20$21, e: DragEventArgs)OnPreviewDragLeave(self: ComboBox_21$22, e: DragEventArgs)OnPreviewDragLeave(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnPreviewDragOver(self, *args): #cannot find CLR method
        """
        OnPreviewDragOver(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDragOver�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnPreviewDragOver(self: Window_16$17, e: DragEventArgs)OnPreviewDragOver(self: Label_17$18, e: DragEventArgs)OnPreviewDragOver(self: TextBox_18$19, e: DragEventArgs)OnPreviewDragOver(self: Button_19$20, e: DragEventArgs)OnPreviewDragOver(self: CheckBox_20$21, e: DragEventArgs)OnPreviewDragOver(self: ComboBox_21$22, e: DragEventArgs)OnPreviewDragOver(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnPreviewDrop(self, *args): #cannot find CLR method
        """
        OnPreviewDrop(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDrop�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnPreviewDrop(self: Window_16$17, e: DragEventArgs)OnPreviewDrop(self: Label_17$18, e: DragEventArgs)OnPreviewDrop(self: TextBox_18$19, e: DragEventArgs)OnPreviewDrop(self: Button_19$20, e: DragEventArgs)OnPreviewDrop(self: CheckBox_20$21, e: DragEventArgs)OnPreviewDrop(self: ComboBox_21$22, e: DragEventArgs)OnPreviewDrop(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnPreviewGiveFeedback(self, *args): #cannot find CLR method
        """
        OnPreviewGiveFeedback(self: UIElement, e: GiveFeedbackEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewGiveFeedback�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.GiveFeedbackEventArgs that contains the event data.
        OnPreviewGiveFeedback(self: Window_16$17, e: GiveFeedbackEventArgs)OnPreviewGiveFeedback(self: Label_17$18, e: GiveFeedbackEventArgs)OnPreviewGiveFeedback(self: TextBox_18$19, e: GiveFeedbackEventArgs)OnPreviewGiveFeedback(self: Button_19$20, e: GiveFeedbackEventArgs)OnPreviewGiveFeedback(self: CheckBox_20$21, e: GiveFeedbackEventArgs)OnPreviewGiveFeedback(self: ComboBox_21$22, e: GiveFeedbackEventArgs)OnPreviewGiveFeedback(self: Separator_22$23, e: GiveFeedbackEventArgs)
        """
        pass

    def OnPreviewGotKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnPreviewGotKeyboardFocus(self: UIElement, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewGotKeyboardFocus�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains the event 
             data.
        
        OnPreviewGotKeyboardFocus(self: Window_16$17, e: KeyboardFocusChangedEventArgs)OnPreviewGotKeyboardFocus(self: Label_17$18, e: KeyboardFocusChangedEventArgs)OnPreviewGotKeyboardFocus(self: TextBox_18$19, e: KeyboardFocusChangedEventArgs)OnPreviewGotKeyboardFocus(self: Button_19$20, e: KeyboardFocusChangedEventArgs)OnPreviewGotKeyboardFocus(self: CheckBox_20$21, e: KeyboardFocusChangedEventArgs)OnPreviewGotKeyboardFocus(self: ComboBox_21$22, e: KeyboardFocusChangedEventArgs)OnPreviewGotKeyboardFocus(self: Separator_22$23, e: KeyboardFocusChangedEventArgs)
        """
        pass

    def OnPreviewKeyDown(self, *args): #cannot find CLR method
        """
        OnPreviewKeyDown(self: UIElement, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewKeyDown�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        OnPreviewKeyDown(self: Window_16$17, e: KeyEventArgs)OnPreviewKeyDown(self: Label_17$18, e: KeyEventArgs)OnPreviewKeyDown(self: TextBox_18$19, e: KeyEventArgs)OnPreviewKeyDown(self: Button_19$20, e: KeyEventArgs)OnPreviewKeyDown(self: CheckBox_20$21, e: KeyEventArgs)OnPreviewKeyDown(self: ComboBox_21$22, e: KeyEventArgs)OnPreviewKeyDown(self: Separator_22$23, e: KeyEventArgs)
        """
        pass

    def OnPreviewKeyUp(self, *args): #cannot find CLR method
        """
        OnPreviewKeyUp(self: UIElement, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewKeyUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        OnPreviewKeyUp(self: Window_16$17, e: KeyEventArgs)OnPreviewKeyUp(self: Label_17$18, e: KeyEventArgs)OnPreviewKeyUp(self: TextBox_18$19, e: KeyEventArgs)OnPreviewKeyUp(self: Button_19$20, e: KeyEventArgs)OnPreviewKeyUp(self: CheckBox_20$21, e: KeyEventArgs)OnPreviewKeyUp(self: ComboBox_21$22, e: KeyEventArgs)OnPreviewKeyUp(self: Separator_22$23, e: KeyEventArgs)
        """
        pass

    def OnPreviewLostKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnPreviewLostKeyboardFocus(self: UIElement, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewKeyDown�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains the event 
             data.
        
        OnPreviewLostKeyboardFocus(self: Window_16$17, e: KeyboardFocusChangedEventArgs)OnPreviewLostKeyboardFocus(self: Label_17$18, e: KeyboardFocusChangedEventArgs)OnPreviewLostKeyboardFocus(self: TextBox_18$19, e: KeyboardFocusChangedEventArgs)OnPreviewLostKeyboardFocus(self: Button_19$20, e: KeyboardFocusChangedEventArgs)OnPreviewLostKeyboardFocus(self: CheckBox_20$21, e: KeyboardFocusChangedEventArgs)OnPreviewLostKeyboardFocus(self: ComboBox_21$22, e: KeyboardFocusChangedEventArgs)OnPreviewLostKeyboardFocus(self: Separator_22$23, e: KeyboardFocusChangedEventArgs)
        """
        pass

    def OnPreviewMouseDown(self, *args): #cannot find CLR method
        """
        OnPreviewMouseDown(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseDown attached�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that one or more mouse buttons were pressed.
        
        OnPreviewMouseDown(self: Window_16$17, e: MouseButtonEventArgs)OnPreviewMouseDown(self: Label_17$18, e: MouseButtonEventArgs)OnPreviewMouseDown(self: TextBox_18$19, e: MouseButtonEventArgs)OnPreviewMouseDown(self: Button_19$20, e: MouseButtonEventArgs)OnPreviewMouseDown(self: CheckBox_20$21, e: MouseButtonEventArgs)OnPreviewMouseDown(self: ComboBox_21$22, e: MouseButtonEventArgs)OnPreviewMouseDown(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnPreviewMouseLeftButtonDown(self, *args): #cannot find CLR method
        """
        OnPreviewMouseLeftButtonDown(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.PreviewMouseLeftButtonDown�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was pressed.
        
        OnPreviewMouseLeftButtonDown(self: Window_16$17, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonDown(self: Label_17$18, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonDown(self: TextBox_18$19, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonDown(self: Button_19$20, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonDown(self: CheckBox_20$21, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonDown(self: ComboBox_21$22, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonDown(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnPreviewMouseLeftButtonUp(self, *args): #cannot find CLR method
        """
        OnPreviewMouseLeftButtonUp(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.PreviewMouseLeftButtonUp�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was released.
        
        OnPreviewMouseLeftButtonUp(self: Window_16$17, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonUp(self: Label_17$18, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonUp(self: TextBox_18$19, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonUp(self: Button_19$20, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonUp(self: CheckBox_20$21, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonUp(self: ComboBox_21$22, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonUp(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnPreviewMouseMove(self, *args): #cannot find CLR method
        """
        OnPreviewMouseMove(self: UIElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseMove�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        OnPreviewMouseMove(self: Window_16$17, e: MouseEventArgs)OnPreviewMouseMove(self: Label_17$18, e: MouseEventArgs)OnPreviewMouseMove(self: TextBox_18$19, e: MouseEventArgs)OnPreviewMouseMove(self: Button_19$20, e: MouseEventArgs)OnPreviewMouseMove(self: CheckBox_20$21, e: MouseEventArgs)OnPreviewMouseMove(self: ComboBox_21$22, e: MouseEventArgs)OnPreviewMouseMove(self: Separator_22$23, e: MouseEventArgs)
        """
        pass

    def OnPreviewMouseRightButtonDown(self, *args): #cannot find CLR method
        """
        OnPreviewMouseRightButtonDown(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.PreviewMouseRightButtonDown�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was pressed.
        
        OnPreviewMouseRightButtonDown(self: Window_16$17, e: MouseButtonEventArgs)OnPreviewMouseRightButtonDown(self: Label_17$18, e: MouseButtonEventArgs)OnPreviewMouseRightButtonDown(self: TextBox_18$19, e: MouseButtonEventArgs)OnPreviewMouseRightButtonDown(self: Button_19$20, e: MouseButtonEventArgs)OnPreviewMouseRightButtonDown(self: CheckBox_20$21, e: MouseButtonEventArgs)OnPreviewMouseRightButtonDown(self: ComboBox_21$22, e: MouseButtonEventArgs)OnPreviewMouseRightButtonDown(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnPreviewMouseRightButtonUp(self, *args): #cannot find CLR method
        """
        OnPreviewMouseRightButtonUp(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.PreviewMouseRightButtonUp�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was released.
        
        OnPreviewMouseRightButtonUp(self: Window_16$17, e: MouseButtonEventArgs)OnPreviewMouseRightButtonUp(self: Label_17$18, e: MouseButtonEventArgs)OnPreviewMouseRightButtonUp(self: TextBox_18$19, e: MouseButtonEventArgs)OnPreviewMouseRightButtonUp(self: Button_19$20, e: MouseButtonEventArgs)OnPreviewMouseRightButtonUp(self: CheckBox_20$21, e: MouseButtonEventArgs)OnPreviewMouseRightButtonUp(self: ComboBox_21$22, e: MouseButtonEventArgs)OnPreviewMouseRightButtonUp(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnPreviewMouseUp(self, *args): #cannot find CLR method
        """
        OnPreviewMouseUp(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that one or more mouse buttons were released.
        
        OnPreviewMouseUp(self: Window_16$17, e: MouseButtonEventArgs)OnPreviewMouseUp(self: Label_17$18, e: MouseButtonEventArgs)OnPreviewMouseUp(self: TextBox_18$19, e: MouseButtonEventArgs)OnPreviewMouseUp(self: Button_19$20, e: MouseButtonEventArgs)OnPreviewMouseUp(self: CheckBox_20$21, e: MouseButtonEventArgs)OnPreviewMouseUp(self: ComboBox_21$22, e: MouseButtonEventArgs)OnPreviewMouseUp(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnPreviewMouseWheel(self, *args): #cannot find CLR method
        """
        OnPreviewMouseWheel(self: UIElement, e: MouseWheelEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseWheel�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseWheelEventArgs that contains the event data.
        OnPreviewMouseWheel(self: Window_16$17, e: MouseWheelEventArgs)OnPreviewMouseWheel(self: Label_17$18, e: MouseWheelEventArgs)OnPreviewMouseWheel(self: TextBox_18$19, e: MouseWheelEventArgs)OnPreviewMouseWheel(self: Button_19$20, e: MouseWheelEventArgs)OnPreviewMouseWheel(self: CheckBox_20$21, e: MouseWheelEventArgs)OnPreviewMouseWheel(self: ComboBox_21$22, e: MouseWheelEventArgs)OnPreviewMouseWheel(self: Separator_22$23, e: MouseWheelEventArgs)
        """
        pass

    def OnPreviewQueryContinueDrag(self, *args): #cannot find CLR method
        """
        OnPreviewQueryContinueDrag(self: UIElement, e: QueryContinueDragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewQueryContinueDrag�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.QueryContinueDragEventArgs that contains the event data.
        OnPreviewQueryContinueDrag(self: Window_16$17, e: QueryContinueDragEventArgs)OnPreviewQueryContinueDrag(self: Label_17$18, e: QueryContinueDragEventArgs)OnPreviewQueryContinueDrag(self: TextBox_18$19, e: QueryContinueDragEventArgs)OnPreviewQueryContinueDrag(self: Button_19$20, e: QueryContinueDragEventArgs)OnPreviewQueryContinueDrag(self: CheckBox_20$21, e: QueryContinueDragEventArgs)OnPreviewQueryContinueDrag(self: ComboBox_21$22, e: QueryContinueDragEventArgs)OnPreviewQueryContinueDrag(self: Separator_22$23, e: QueryContinueDragEventArgs)
        """
        pass

    def OnPreviewStylusButtonDown(self, *args): #cannot find CLR method
        """
        OnPreviewStylusButtonDown(self: UIElement, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusButtonDown�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        OnPreviewStylusButtonDown(self: Window_16$17, e: StylusButtonEventArgs)OnPreviewStylusButtonDown(self: Label_17$18, e: StylusButtonEventArgs)OnPreviewStylusButtonDown(self: TextBox_18$19, e: StylusButtonEventArgs)OnPreviewStylusButtonDown(self: Button_19$20, e: StylusButtonEventArgs)OnPreviewStylusButtonDown(self: CheckBox_20$21, e: StylusButtonEventArgs)OnPreviewStylusButtonDown(self: ComboBox_21$22, e: StylusButtonEventArgs)OnPreviewStylusButtonDown(self: Separator_22$23, e: StylusButtonEventArgs)
        """
        pass

    def OnPreviewStylusButtonUp(self, *args): #cannot find CLR method
        """
        OnPreviewStylusButtonUp(self: UIElement, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusButtonUp�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        OnPreviewStylusButtonUp(self: Window_16$17, e: StylusButtonEventArgs)OnPreviewStylusButtonUp(self: Label_17$18, e: StylusButtonEventArgs)OnPreviewStylusButtonUp(self: TextBox_18$19, e: StylusButtonEventArgs)OnPreviewStylusButtonUp(self: Button_19$20, e: StylusButtonEventArgs)OnPreviewStylusButtonUp(self: CheckBox_20$21, e: StylusButtonEventArgs)OnPreviewStylusButtonUp(self: ComboBox_21$22, e: StylusButtonEventArgs)OnPreviewStylusButtonUp(self: Separator_22$23, e: StylusButtonEventArgs)
        """
        pass

    def OnPreviewStylusDown(self, *args): #cannot find CLR method
        """
        OnPreviewStylusDown(self: UIElement, e: StylusDownEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusDown�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusDownEventArgs that contains the event data.
        OnPreviewStylusDown(self: Window_16$17, e: StylusDownEventArgs)OnPreviewStylusDown(self: Label_17$18, e: StylusDownEventArgs)OnPreviewStylusDown(self: TextBox_18$19, e: StylusDownEventArgs)OnPreviewStylusDown(self: Button_19$20, e: StylusDownEventArgs)OnPreviewStylusDown(self: CheckBox_20$21, e: StylusDownEventArgs)OnPreviewStylusDown(self: ComboBox_21$22, e: StylusDownEventArgs)OnPreviewStylusDown(self: Separator_22$23, e: StylusDownEventArgs)
        """
        pass

    def OnPreviewStylusInAirMove(self, *args): #cannot find CLR method
        """
        OnPreviewStylusInAirMove(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusInAirMove�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnPreviewStylusInAirMove(self: Window_16$17, e: StylusEventArgs)OnPreviewStylusInAirMove(self: Label_17$18, e: StylusEventArgs)OnPreviewStylusInAirMove(self: TextBox_18$19, e: StylusEventArgs)OnPreviewStylusInAirMove(self: Button_19$20, e: StylusEventArgs)OnPreviewStylusInAirMove(self: CheckBox_20$21, e: StylusEventArgs)OnPreviewStylusInAirMove(self: ComboBox_21$22, e: StylusEventArgs)OnPreviewStylusInAirMove(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnPreviewStylusInRange(self, *args): #cannot find CLR method
        """
        OnPreviewStylusInRange(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusInRange�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnPreviewStylusInRange(self: Window_16$17, e: StylusEventArgs)OnPreviewStylusInRange(self: Label_17$18, e: StylusEventArgs)OnPreviewStylusInRange(self: TextBox_18$19, e: StylusEventArgs)OnPreviewStylusInRange(self: Button_19$20, e: StylusEventArgs)OnPreviewStylusInRange(self: CheckBox_20$21, e: StylusEventArgs)OnPreviewStylusInRange(self: ComboBox_21$22, e: StylusEventArgs)OnPreviewStylusInRange(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnPreviewStylusMove(self, *args): #cannot find CLR method
        """
        OnPreviewStylusMove(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusMove�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnPreviewStylusMove(self: Window_16$17, e: StylusEventArgs)OnPreviewStylusMove(self: Label_17$18, e: StylusEventArgs)OnPreviewStylusMove(self: TextBox_18$19, e: StylusEventArgs)OnPreviewStylusMove(self: Button_19$20, e: StylusEventArgs)OnPreviewStylusMove(self: CheckBox_20$21, e: StylusEventArgs)OnPreviewStylusMove(self: ComboBox_21$22, e: StylusEventArgs)OnPreviewStylusMove(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnPreviewStylusOutOfRange(self, *args): #cannot find CLR method
        """
        OnPreviewStylusOutOfRange(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusOutOfRange�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnPreviewStylusOutOfRange(self: Window_16$17, e: StylusEventArgs)OnPreviewStylusOutOfRange(self: Label_17$18, e: StylusEventArgs)OnPreviewStylusOutOfRange(self: TextBox_18$19, e: StylusEventArgs)OnPreviewStylusOutOfRange(self: Button_19$20, e: StylusEventArgs)OnPreviewStylusOutOfRange(self: CheckBox_20$21, e: StylusEventArgs)OnPreviewStylusOutOfRange(self: ComboBox_21$22, e: StylusEventArgs)OnPreviewStylusOutOfRange(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnPreviewStylusSystemGesture(self, *args): #cannot find CLR method
        """
        OnPreviewStylusSystemGesture(self: UIElement, e: StylusSystemGestureEventArgs)
            Invoked when an unhandled 
             System.Windows.Input.Stylus.PreviewStylusSystemGesture�attached event reaches 
             an element in its route that is derived from this class. Implement this method 
             to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusSystemGestureEventArgs that contains the event 
             data.
        
        OnPreviewStylusSystemGesture(self: Window_16$17, e: StylusSystemGestureEventArgs)OnPreviewStylusSystemGesture(self: Label_17$18, e: StylusSystemGestureEventArgs)OnPreviewStylusSystemGesture(self: TextBox_18$19, e: StylusSystemGestureEventArgs)OnPreviewStylusSystemGesture(self: Button_19$20, e: StylusSystemGestureEventArgs)OnPreviewStylusSystemGesture(self: CheckBox_20$21, e: StylusSystemGestureEventArgs)OnPreviewStylusSystemGesture(self: ComboBox_21$22, e: StylusSystemGestureEventArgs)OnPreviewStylusSystemGesture(self: Separator_22$23, e: StylusSystemGestureEventArgs)
        """
        pass

    def OnPreviewStylusUp(self, *args): #cannot find CLR method
        """
        OnPreviewStylusUp(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnPreviewStylusUp(self: Window_16$17, e: StylusEventArgs)OnPreviewStylusUp(self: Label_17$18, e: StylusEventArgs)OnPreviewStylusUp(self: TextBox_18$19, e: StylusEventArgs)OnPreviewStylusUp(self: Button_19$20, e: StylusEventArgs)OnPreviewStylusUp(self: CheckBox_20$21, e: StylusEventArgs)OnPreviewStylusUp(self: ComboBox_21$22, e: StylusEventArgs)OnPreviewStylusUp(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnPreviewTextInput(self, *args): #cannot find CLR method
        """
        OnPreviewTextInput(self: UIElement, e: TextCompositionEventArgs)
            Invoked when an unhandled 
             System.Windows.Input.TextCompositionManager.PreviewTextInput�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.TextCompositionEventArgs that contains the event data.
        OnPreviewTextInput(self: Window_16$17, e: TextCompositionEventArgs)OnPreviewTextInput(self: Label_17$18, e: TextCompositionEventArgs)OnPreviewTextInput(self: TextBox_18$19, e: TextCompositionEventArgs)OnPreviewTextInput(self: Button_19$20, e: TextCompositionEventArgs)OnPreviewTextInput(self: CheckBox_20$21, e: TextCompositionEventArgs)OnPreviewTextInput(self: ComboBox_21$22, e: TextCompositionEventArgs)OnPreviewTextInput(self: Separator_22$23, e: TextCompositionEventArgs)
        """
        pass

    def OnPreviewTouchDown(self, *args): #cannot find CLR method
        """
        OnPreviewTouchDown(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.PreviewTouchDown 
             routed event that occurs when a touch presses this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnPreviewTouchDown(self: Window_16$17, e: TouchEventArgs)OnPreviewTouchDown(self: Label_17$18, e: TouchEventArgs)OnPreviewTouchDown(self: TextBox_18$19, e: TouchEventArgs)OnPreviewTouchDown(self: Button_19$20, e: TouchEventArgs)OnPreviewTouchDown(self: CheckBox_20$21, e: TouchEventArgs)OnPreviewTouchDown(self: ComboBox_21$22, e: TouchEventArgs)OnPreviewTouchDown(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnPreviewTouchMove(self, *args): #cannot find CLR method
        """
        OnPreviewTouchMove(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.PreviewTouchMove 
             routed event that occurs when a touch moves while inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnPreviewTouchMove(self: Window_16$17, e: TouchEventArgs)OnPreviewTouchMove(self: Label_17$18, e: TouchEventArgs)OnPreviewTouchMove(self: TextBox_18$19, e: TouchEventArgs)OnPreviewTouchMove(self: Button_19$20, e: TouchEventArgs)OnPreviewTouchMove(self: CheckBox_20$21, e: TouchEventArgs)OnPreviewTouchMove(self: ComboBox_21$22, e: TouchEventArgs)OnPreviewTouchMove(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnPreviewTouchUp(self, *args): #cannot find CLR method
        """
        OnPreviewTouchUp(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.PreviewTouchUp routed 
             event that occurs when a touch is released inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnPreviewTouchUp(self: Window_16$17, e: TouchEventArgs)OnPreviewTouchUp(self: Label_17$18, e: TouchEventArgs)OnPreviewTouchUp(self: TextBox_18$19, e: TouchEventArgs)OnPreviewTouchUp(self: Button_19$20, e: TouchEventArgs)OnPreviewTouchUp(self: CheckBox_20$21, e: TouchEventArgs)OnPreviewTouchUp(self: ComboBox_21$22, e: TouchEventArgs)OnPreviewTouchUp(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnPropertyChanged(self, *args): #cannot find CLR method
        """
        OnPropertyChanged(self: FrameworkElement, e: DependencyPropertyChangedEventArgs)
            Invoked whenever the effective value of any dependency property on this 
             System.Windows.FrameworkElement has been updated. The specific dependency 
             property that changed is reported in the arguments parameter. Overrides 
             System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPrope
             rtyChangedEventArgs).
        
        
            e: The event data that describes the property that changed, as well as old and new 
             values.
        
        OnPropertyChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnQueryContinueDrag(self, *args): #cannot find CLR method
        """
        OnQueryContinueDrag(self: UIElement, e: QueryContinueDragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.QueryContinueDrag�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.QueryContinueDragEventArgs that contains the event data.
        OnQueryContinueDrag(self: Window_16$17, e: QueryContinueDragEventArgs)OnQueryContinueDrag(self: Label_17$18, e: QueryContinueDragEventArgs)OnQueryContinueDrag(self: TextBox_18$19, e: QueryContinueDragEventArgs)OnQueryContinueDrag(self: Button_19$20, e: QueryContinueDragEventArgs)OnQueryContinueDrag(self: CheckBox_20$21, e: QueryContinueDragEventArgs)OnQueryContinueDrag(self: ComboBox_21$22, e: QueryContinueDragEventArgs)OnQueryContinueDrag(self: Separator_22$23, e: QueryContinueDragEventArgs)
        """
        pass

    def OnQueryCursor(self, *args): #cannot find CLR method
        """
        OnQueryCursor(self: UIElement, e: QueryCursorEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.QueryCursor�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.QueryCursorEventArgs that contains the event data.
        OnQueryCursor(self: Window_16$17, e: QueryCursorEventArgs)OnQueryCursor(self: Label_17$18, e: QueryCursorEventArgs)OnQueryCursor(self: TextBox_18$19, e: QueryCursorEventArgs)OnQueryCursor(self: Button_19$20, e: QueryCursorEventArgs)OnQueryCursor(self: CheckBox_20$21, e: QueryCursorEventArgs)OnQueryCursor(self: ComboBox_21$22, e: QueryCursorEventArgs)OnQueryCursor(self: Separator_22$23, e: QueryCursorEventArgs)
        """
        pass

    def OnRender(self, *args): #cannot find CLR method
        """
        OnRender(self: UIElement, drawingContext: DrawingContext)
            When overridden in a derived class, participates in rendering operations that 
             are directed by the layout system. The rendering instructions for this element 
             are not used directly when this method is invoked, and are instead preserved 
             for later asynchronous use by layout and drawing.
        
        
            drawingContext: The drawing instructions for a specific element. This context is provided to 
             the layout system.
        
        OnRender(self: Window_16$17, drawingContext: DrawingContext)OnRender(self: Label_17$18, drawingContext: DrawingContext)OnRender(self: TextBox_18$19, drawingContext: DrawingContext)OnRender(self: Button_19$20, drawingContext: DrawingContext)OnRender(self: CheckBox_20$21, drawingContext: DrawingContext)OnRender(self: ComboBox_21$22, drawingContext: DrawingContext)OnRender(self: Separator_22$23, drawingContext: DrawingContext)
        """
        pass

    def OnRenderSizeChanged(self, *args): #cannot find CLR method
        """
        OnRenderSizeChanged(self: FrameworkElement, sizeInfo: SizeChangedInfo)
            Raises the System.Windows.FrameworkElement.SizeChanged event, using the 
             specified information as part of the eventual event data.
        
        
            sizeInfo: Details of the old and new size involved in the change.
        OnRenderSizeChanged(self: Window_16$17, sizeInfo: SizeChangedInfo)OnRenderSizeChanged(self: Label_17$18, sizeInfo: SizeChangedInfo)OnRenderSizeChanged(self: TextBox_18$19, sizeInfo: SizeChangedInfo)OnRenderSizeChanged(self: Button_19$20, sizeInfo: SizeChangedInfo)OnRenderSizeChanged(self: CheckBox_20$21, sizeInfo: SizeChangedInfo)OnRenderSizeChanged(self: ComboBox_21$22, sizeInfo: SizeChangedInfo)OnRenderSizeChanged(self: Separator_22$23, sizeInfo: SizeChangedInfo)
        """
        pass

    def OnStyleChanged(self, *args): #cannot find CLR method
        """
        OnStyleChanged(self: FrameworkElement, oldStyle: Style, newStyle: Style)
            Invoked when the style in use on this element changes, which will invalidate 
             the layout.
        
        
            oldStyle: The old style.
            newStyle: The new style.
        OnStyleChanged(self: Window_16$17, oldStyle: Style, newStyle: Style)OnStyleChanged(self: Label_17$18, oldStyle: Style, newStyle: Style)OnStyleChanged(self: TextBox_18$19, oldStyle: Style, newStyle: Style)OnStyleChanged(self: Button_19$20, oldStyle: Style, newStyle: Style)OnStyleChanged(self: CheckBox_20$21, oldStyle: Style, newStyle: Style)OnStyleChanged(self: ComboBox_21$22, oldStyle: Style, newStyle: Style)OnStyleChanged(self: Separator_22$23, oldStyle: Style, newStyle: Style)
        """
        pass

    def OnStylusButtonDown(self, *args): #cannot find CLR method
        """
        OnStylusButtonDown(self: UIElement, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusButtonDown�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        OnStylusButtonDown(self: Window_16$17, e: StylusButtonEventArgs)OnStylusButtonDown(self: Label_17$18, e: StylusButtonEventArgs)OnStylusButtonDown(self: TextBox_18$19, e: StylusButtonEventArgs)OnStylusButtonDown(self: Button_19$20, e: StylusButtonEventArgs)OnStylusButtonDown(self: CheckBox_20$21, e: StylusButtonEventArgs)OnStylusButtonDown(self: ComboBox_21$22, e: StylusButtonEventArgs)OnStylusButtonDown(self: Separator_22$23, e: StylusButtonEventArgs)
        """
        pass

    def OnStylusButtonUp(self, *args): #cannot find CLR method
        """
        OnStylusButtonUp(self: UIElement, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusButtonUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        OnStylusButtonUp(self: Window_16$17, e: StylusButtonEventArgs)OnStylusButtonUp(self: Label_17$18, e: StylusButtonEventArgs)OnStylusButtonUp(self: TextBox_18$19, e: StylusButtonEventArgs)OnStylusButtonUp(self: Button_19$20, e: StylusButtonEventArgs)OnStylusButtonUp(self: CheckBox_20$21, e: StylusButtonEventArgs)OnStylusButtonUp(self: ComboBox_21$22, e: StylusButtonEventArgs)OnStylusButtonUp(self: Separator_22$23, e: StylusButtonEventArgs)
        """
        pass

    def OnStylusDown(self, *args): #cannot find CLR method
        """
        OnStylusDown(self: UIElement, e: StylusDownEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusDown�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusDownEventArgs that contains the event data.
        OnStylusDown(self: Window_16$17, e: StylusDownEventArgs)OnStylusDown(self: Label_17$18, e: StylusDownEventArgs)OnStylusDown(self: TextBox_18$19, e: StylusDownEventArgs)OnStylusDown(self: Button_19$20, e: StylusDownEventArgs)OnStylusDown(self: CheckBox_20$21, e: StylusDownEventArgs)OnStylusDown(self: ComboBox_21$22, e: StylusDownEventArgs)OnStylusDown(self: Separator_22$23, e: StylusDownEventArgs)
        """
        pass

    def OnStylusEnter(self, *args): #cannot find CLR method
        """
        OnStylusEnter(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusEnter�attached 
             event is raised by this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnStylusEnter(self: Window_16$17, e: StylusEventArgs)OnStylusEnter(self: Label_17$18, e: StylusEventArgs)OnStylusEnter(self: TextBox_18$19, e: StylusEventArgs)OnStylusEnter(self: Button_19$20, e: StylusEventArgs)OnStylusEnter(self: CheckBox_20$21, e: StylusEventArgs)OnStylusEnter(self: ComboBox_21$22, e: StylusEventArgs)OnStylusEnter(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnStylusInAirMove(self, *args): #cannot find CLR method
        """
        OnStylusInAirMove(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusInAirMove�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnStylusInAirMove(self: Window_16$17, e: StylusEventArgs)OnStylusInAirMove(self: Label_17$18, e: StylusEventArgs)OnStylusInAirMove(self: TextBox_18$19, e: StylusEventArgs)OnStylusInAirMove(self: Button_19$20, e: StylusEventArgs)OnStylusInAirMove(self: CheckBox_20$21, e: StylusEventArgs)OnStylusInAirMove(self: ComboBox_21$22, e: StylusEventArgs)OnStylusInAirMove(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnStylusInRange(self, *args): #cannot find CLR method
        """
        OnStylusInRange(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusInRange�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnStylusInRange(self: Window_16$17, e: StylusEventArgs)OnStylusInRange(self: Label_17$18, e: StylusEventArgs)OnStylusInRange(self: TextBox_18$19, e: StylusEventArgs)OnStylusInRange(self: Button_19$20, e: StylusEventArgs)OnStylusInRange(self: CheckBox_20$21, e: StylusEventArgs)OnStylusInRange(self: ComboBox_21$22, e: StylusEventArgs)OnStylusInRange(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnStylusLeave(self, *args): #cannot find CLR method
        """
        OnStylusLeave(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusLeave�attached 
             event is raised by this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnStylusLeave(self: Window_16$17, e: StylusEventArgs)OnStylusLeave(self: Label_17$18, e: StylusEventArgs)OnStylusLeave(self: TextBox_18$19, e: StylusEventArgs)OnStylusLeave(self: Button_19$20, e: StylusEventArgs)OnStylusLeave(self: CheckBox_20$21, e: StylusEventArgs)OnStylusLeave(self: ComboBox_21$22, e: StylusEventArgs)OnStylusLeave(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnStylusMove(self, *args): #cannot find CLR method
        """
        OnStylusMove(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusMove�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnStylusMove(self: Window_16$17, e: StylusEventArgs)OnStylusMove(self: Label_17$18, e: StylusEventArgs)OnStylusMove(self: TextBox_18$19, e: StylusEventArgs)OnStylusMove(self: Button_19$20, e: StylusEventArgs)OnStylusMove(self: CheckBox_20$21, e: StylusEventArgs)OnStylusMove(self: ComboBox_21$22, e: StylusEventArgs)OnStylusMove(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnStylusOutOfRange(self, *args): #cannot find CLR method
        """
        OnStylusOutOfRange(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusOutOfRange�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnStylusOutOfRange(self: Window_16$17, e: StylusEventArgs)OnStylusOutOfRange(self: Label_17$18, e: StylusEventArgs)OnStylusOutOfRange(self: TextBox_18$19, e: StylusEventArgs)OnStylusOutOfRange(self: Button_19$20, e: StylusEventArgs)OnStylusOutOfRange(self: CheckBox_20$21, e: StylusEventArgs)OnStylusOutOfRange(self: ComboBox_21$22, e: StylusEventArgs)OnStylusOutOfRange(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnStylusSystemGesture(self, *args): #cannot find CLR method
        """
        OnStylusSystemGesture(self: UIElement, e: StylusSystemGestureEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusSystemGesture�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusSystemGestureEventArgs that contains the event 
             data.
        
        OnStylusSystemGesture(self: Window_16$17, e: StylusSystemGestureEventArgs)OnStylusSystemGesture(self: Label_17$18, e: StylusSystemGestureEventArgs)OnStylusSystemGesture(self: TextBox_18$19, e: StylusSystemGestureEventArgs)OnStylusSystemGesture(self: Button_19$20, e: StylusSystemGestureEventArgs)OnStylusSystemGesture(self: CheckBox_20$21, e: StylusSystemGestureEventArgs)OnStylusSystemGesture(self: ComboBox_21$22, e: StylusSystemGestureEventArgs)OnStylusSystemGesture(self: Separator_22$23, e: StylusSystemGestureEventArgs)
        """
        pass

    def OnStylusUp(self, *args): #cannot find CLR method
        """
        OnStylusUp(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusUp�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnStylusUp(self: Window_16$17, e: StylusEventArgs)OnStylusUp(self: Label_17$18, e: StylusEventArgs)OnStylusUp(self: TextBox_18$19, e: StylusEventArgs)OnStylusUp(self: Button_19$20, e: StylusEventArgs)OnStylusUp(self: CheckBox_20$21, e: StylusEventArgs)OnStylusUp(self: ComboBox_21$22, e: StylusEventArgs)OnStylusUp(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnTextInput(self, *args): #cannot find CLR method
        """
        OnTextInput(self: UIElement, e: TextCompositionEventArgs)
            Invoked when an unhandled System.Windows.Input.TextCompositionManager.TextInput�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.TextCompositionEventArgs that contains the event data.
        OnTextInput(self: Window_16$17, e: TextCompositionEventArgs)OnTextInput(self: Label_17$18, e: TextCompositionEventArgs)OnTextInput(self: TextBox_18$19, e: TextCompositionEventArgs)OnTextInput(self: Button_19$20, e: TextCompositionEventArgs)OnTextInput(self: CheckBox_20$21, e: TextCompositionEventArgs)OnTextInput(self: ComboBox_21$22, e: TextCompositionEventArgs)OnTextInput(self: Separator_22$23, e: TextCompositionEventArgs)
        """
        pass

    def OnToolTipClosing(self, *args): #cannot find CLR method
        """
        OnToolTipClosing(self: FrameworkElement, e: ToolTipEventArgs)
            Invoked whenever an unhandled System.Windows.FrameworkElement.ToolTipClosing 
             routed event reaches this class in its route. Implement this method to add 
             class handling for this event.
        
        
            e: Provides data about the event.
        OnToolTipClosing(self: Window_16$17, e: ToolTipEventArgs)OnToolTipClosing(self: Label_17$18, e: ToolTipEventArgs)OnToolTipClosing(self: TextBox_18$19, e: ToolTipEventArgs)OnToolTipClosing(self: Button_19$20, e: ToolTipEventArgs)OnToolTipClosing(self: CheckBox_20$21, e: ToolTipEventArgs)OnToolTipClosing(self: ComboBox_21$22, e: ToolTipEventArgs)OnToolTipClosing(self: Separator_22$23, e: ToolTipEventArgs)
        """
        pass

    def OnToolTipOpening(self, *args): #cannot find CLR method
        """
        OnToolTipOpening(self: FrameworkElement, e: ToolTipEventArgs)
            Invoked whenever the System.Windows.FrameworkElement.ToolTipOpening routed 
             event reaches this class in its route. Implement this method to add class 
             handling for this event.
        
        
            e: Provides data about the event.
        OnToolTipOpening(self: Window_16$17, e: ToolTipEventArgs)OnToolTipOpening(self: Label_17$18, e: ToolTipEventArgs)OnToolTipOpening(self: TextBox_18$19, e: ToolTipEventArgs)OnToolTipOpening(self: Button_19$20, e: ToolTipEventArgs)OnToolTipOpening(self: CheckBox_20$21, e: ToolTipEventArgs)OnToolTipOpening(self: ComboBox_21$22, e: ToolTipEventArgs)OnToolTipOpening(self: Separator_22$23, e: ToolTipEventArgs)
        """
        pass

    def OnTouchDown(self, *args): #cannot find CLR method
        """
        OnTouchDown(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.TouchDown routed event 
             that occurs when a touch presses inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnTouchDown(self: Window_16$17, e: TouchEventArgs)OnTouchDown(self: Label_17$18, e: TouchEventArgs)OnTouchDown(self: TextBox_18$19, e: TouchEventArgs)OnTouchDown(self: Button_19$20, e: TouchEventArgs)OnTouchDown(self: CheckBox_20$21, e: TouchEventArgs)OnTouchDown(self: ComboBox_21$22, e: TouchEventArgs)OnTouchDown(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnTouchEnter(self, *args): #cannot find CLR method
        """
        OnTouchEnter(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.TouchEnter routed 
             event that occurs when a touch moves from outside to inside the bounds of this 
             element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnTouchEnter(self: Window_16$17, e: TouchEventArgs)OnTouchEnter(self: Label_17$18, e: TouchEventArgs)OnTouchEnter(self: TextBox_18$19, e: TouchEventArgs)OnTouchEnter(self: Button_19$20, e: TouchEventArgs)OnTouchEnter(self: CheckBox_20$21, e: TouchEventArgs)OnTouchEnter(self: ComboBox_21$22, e: TouchEventArgs)OnTouchEnter(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnTouchLeave(self, *args): #cannot find CLR method
        """
        OnTouchLeave(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.TouchLeave routed 
             event that occurs when a touch moves from inside to outside the bounds of this 
             System.Windows.UIElement.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnTouchLeave(self: Window_16$17, e: TouchEventArgs)OnTouchLeave(self: Label_17$18, e: TouchEventArgs)OnTouchLeave(self: TextBox_18$19, e: TouchEventArgs)OnTouchLeave(self: Button_19$20, e: TouchEventArgs)OnTouchLeave(self: CheckBox_20$21, e: TouchEventArgs)OnTouchLeave(self: ComboBox_21$22, e: TouchEventArgs)OnTouchLeave(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnTouchMove(self, *args): #cannot find CLR method
        """
        OnTouchMove(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.TouchMove routed event 
             that occurs when a touch moves while inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnTouchMove(self: Window_16$17, e: TouchEventArgs)OnTouchMove(self: Label_17$18, e: TouchEventArgs)OnTouchMove(self: TextBox_18$19, e: TouchEventArgs)OnTouchMove(self: Button_19$20, e: TouchEventArgs)OnTouchMove(self: CheckBox_20$21, e: TouchEventArgs)OnTouchMove(self: ComboBox_21$22, e: TouchEventArgs)OnTouchMove(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnTouchUp(self, *args): #cannot find CLR method
        """
        OnTouchUp(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.TouchUp routed event 
             that occurs when a touch is released inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnTouchUp(self: Window_16$17, e: TouchEventArgs)OnTouchUp(self: Label_17$18, e: TouchEventArgs)OnTouchUp(self: TextBox_18$19, e: TouchEventArgs)OnTouchUp(self: Button_19$20, e: TouchEventArgs)OnTouchUp(self: CheckBox_20$21, e: TouchEventArgs)OnTouchUp(self: ComboBox_21$22, e: TouchEventArgs)OnTouchUp(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnVisualChildrenChanged(self, *args): #cannot find CLR method
        """
        OnVisualChildrenChanged(self: Visual, visualAdded: DependencyObject, visualRemoved: DependencyObject)
            Called when the System.Windows.Media.VisualCollection of the visual object is 
             modified.
        
        
            visualAdded: The System.Windows.Media.Visual that was added to the collection
            visualRemoved: The System.Windows.Media.Visual that was removed from the collection
        OnVisualChildrenChanged(self: Window_16$17, visualAdded: DependencyObject, visualRemoved: DependencyObject)OnVisualChildrenChanged(self: Label_17$18, visualAdded: DependencyObject, visualRemoved: DependencyObject)OnVisualChildrenChanged(self: TextBox_18$19, visualAdded: DependencyObject, visualRemoved: DependencyObject)OnVisualChildrenChanged(self: Button_19$20, visualAdded: DependencyObject, visualRemoved: DependencyObject)OnVisualChildrenChanged(self: CheckBox_20$21, visualAdded: DependencyObject, visualRemoved: DependencyObject)OnVisualChildrenChanged(self: ComboBox_21$22, visualAdded: DependencyObject, visualRemoved: DependencyObject)OnVisualChildrenChanged(self: Separator_22$23, visualAdded: DependencyObject, visualRemoved: DependencyObject)
        """
        pass

    def OnVisualParentChanged(self, *args): #cannot find CLR method
        """
        OnVisualParentChanged(self: FrameworkElement, oldParent: DependencyObject)
            Invoked when the parent of this element in the visual tree is changed. 
             Overrides 
             System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject).
        
        
            oldParent: The old parent element. May be null to indicate that the element did not have a 
             visual parent previously.
        
        OnVisualParentChanged(self: Window_16$17, oldParent: DependencyObject)OnVisualParentChanged(self: Label_17$18, oldParent: DependencyObject)OnVisualParentChanged(self: TextBox_18$19, oldParent: DependencyObject)OnVisualParentChanged(self: Button_19$20, oldParent: DependencyObject)OnVisualParentChanged(self: CheckBox_20$21, oldParent: DependencyObject)OnVisualParentChanged(self: ComboBox_21$22, oldParent: DependencyObject)OnVisualParentChanged(self: Separator_22$23, oldParent: DependencyObject)
        """
        pass

    def ParentLayoutInvalidated(self, *args): #cannot find CLR method
        """
        ParentLayoutInvalidated(self: FrameworkElement, child: UIElement)
            Supports incremental layout implementations in specialized subclasses of 
             System.Windows.FrameworkElement. 
             System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement
             )  is invoked when a child element has invalidated a property that is marked in 
             metadata as affecting the parent's measure or arrange passes during layout.
        
        
            child: The child element reporting the change.
        ParentLayoutInvalidated(self: Window_16$17, child: UIElement)ParentLayoutInvalidated(self: Label_17$18, child: UIElement)ParentLayoutInvalidated(self: TextBox_18$19, child: UIElement)ParentLayoutInvalidated(self: Button_19$20, child: UIElement)ParentLayoutInvalidated(self: CheckBox_20$21, child: UIElement)ParentLayoutInvalidated(self: ComboBox_21$22, child: UIElement)ParentLayoutInvalidated(self: Separator_22$23, child: UIElement)
        """
        pass

    def PredictFocus(self, direction):
        """
        PredictFocus(self: FrameworkElement, direction: FocusNavigationDirection) -> DependencyObject
        
            Determines the next element that would receive focus relative to this element 
             for a provided focus movement direction, but does not actually move the focus.
        
        
            direction: The direction for which a prospective focus change should be determined.
            Returns: The next element that focus would move to if focus were actually traversed. May 
             return null if focus cannot be moved relative to this element for the provided 
             direction.
        """
        pass

    def RegisterName(self, name, scopedElement):
        """
        RegisterName(self: FrameworkElement, name: str, scopedElement: object)
            Provides an accessor that simplifies access to the System.Windows.NameScope 
             registration method.
        
        
            name: Name to use for the specified name-object mapping.
            scopedElement: Object for the mapping.
        """
        pass

    def RemoveLogicalChild(self, *args): #cannot find CLR method
        """
        RemoveLogicalChild(self: FrameworkElement, child: object)
            Removes the provided object from this element's logical tree. 
             System.Windows.FrameworkElement updates the affected logical tree parent 
             pointers to keep in sync with this deletion.
        
        
            child: The element to remove.
        RemoveLogicalChild(self: Window_16$17, child: object)RemoveLogicalChild(self: Label_17$18, child: object)RemoveLogicalChild(self: TextBox_18$19, child: object)RemoveLogicalChild(self: Button_19$20, child: object)RemoveLogicalChild(self: CheckBox_20$21, child: object)RemoveLogicalChild(self: ComboBox_21$22, child: object)RemoveLogicalChild(self: Separator_22$23, child: object)
        """
        pass

    def RemoveVisualChild(self, *args): #cannot find CLR method
        """
        RemoveVisualChild(self: Visual, child: Visual)
            Removes the parent-child relationship between two visuals.
        
            child: The child visual object to remove from the parent visual.
        RemoveVisualChild(self: Window_16$17, child: Window_16$17)RemoveVisualChild(self: Label_17$18, child: Label_17$18)RemoveVisualChild(self: TextBox_18$19, child: TextBox_18$19)RemoveVisualChild(self: Button_19$20, child: Button_19$20)RemoveVisualChild(self: CheckBox_20$21, child: CheckBox_20$21)RemoveVisualChild(self: ComboBox_21$22, child: ComboBox_21$22)RemoveVisualChild(self: Separator_22$23, child: Separator_22$23)
        """
        pass

    def SetBinding(self, dp, *__args):
        """
        SetBinding(self: FrameworkElement, dp: DependencyProperty, path: str) -> BindingExpression
        
            Attaches a binding to this element, based on the provided source property name 
             as a path qualification to the data source.
        
        
            dp: Identifies the destination property where the binding should be established.
            path: The source property name or the path to the property used for the binding.
            Returns: Records the conditions of the binding. This return value can be useful for 
             error checking.
        
        SetBinding(self: FrameworkElement, dp: DependencyProperty, binding: BindingBase) -> BindingExpressionBase
        
            Attaches a binding to this element, based on the provided binding object.
        
            dp: Identifies the property where the binding should be established.
            binding: Represents the specifics of the data binding.
            Returns: Records the conditions of the binding. This return value can be useful for 
             error checking.
        """
        pass

    @staticmethod
    def SetFlowDirection(element, value):
        """
        SetFlowDirection(element: DependencyObject, value: FlowDirection)
            Sets the value of the System.Windows.FrameworkElement.FlowDirection�attached 
             property for the provided element.
        
        
            element: The element that specifies a flow direction.
            value: A value of the enumeration, specifying the direction.
        """
        pass

    def SetResourceReference(self, dp, name):
        """
        SetResourceReference(self: FrameworkElement, dp: DependencyProperty, name: object)
            Searches for a resource with the specified name and sets up a resource 
             reference to it for the specified property.
        
        
            dp: The property to which the resource is bound.
            name: The name of the resource.
        """
        pass

    def ShouldSerializeProperty(self, *args): #cannot find CLR method
        """
        ShouldSerializeProperty(self: DependencyObject, dp: DependencyProperty) -> bool
        
            Returns a value that indicates whether serialization processes should serialize 
             the value for the provided dependency property.
        
        
            dp: The identifier for the dependency property that should be serialized.
            Returns: true if the dependency property that is supplied should be value-serialized; 
             otherwise, false.
        
        ShouldSerializeProperty(self: Window_16$17, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Label_17$18, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: TextBox_18$19, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Button_19$20, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: CheckBox_20$21, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: ComboBox_21$22, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Separator_22$23, dp: DependencyProperty) -> bool
        """
        pass

    def ShouldSerializeResources(self):
        """
        ShouldSerializeResources(self: FrameworkElement) -> bool
        
            Returns whether serialization processes should serialize the contents of the 
             System.Windows.FrameworkElement.Resources property.
        
            Returns: true if the System.Windows.FrameworkElement.Resources property value should be 
             serialized; otherwise, false.
        """
        pass

    def ShouldSerializeStyle(self):
        """
        ShouldSerializeStyle(self: FrameworkElement) -> bool
        
            Returns whether serialization processes should serialize the contents of the 
             System.Windows.FrameworkElement.Style property.
        
            Returns: true if the System.Windows.FrameworkElement.Style property value should be 
             serialized; otherwise, false.
        """
        pass

    def ShouldSerializeTriggers(self):
        """
        ShouldSerializeTriggers(self: FrameworkElement) -> bool
        
            Returns whether serialization processes should serialize the contents of the 
             System.Windows.FrameworkElement.Triggers property.
        
            Returns: true if the System.Windows.FrameworkElement.Triggers property value should be 
             serialized; otherwise, false.
        """
        pass

    def TryFindResource(self, resourceKey):
        """
        TryFindResource(self: FrameworkElement, resourceKey: object) -> object
        
            Searches for a resource with the specified key, and returns that resource if 
             found.
        
        
            resourceKey: The key identifier of the resource to be found.
            Returns: The found resource, or null if no resource with the provided key is found.
        """
        pass

    def UnregisterName(self, name):
        """
        UnregisterName(self: FrameworkElement, name: str)
            Simplifies access to the System.Windows.NameScope de-registration method.
        
            name: Name of the name-object pair to remove from the current scope.
        """
        pass

    def UpdateDefaultStyle(self):
        """ UpdateDefaultStyle(self: FrameworkElement) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ActualHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the rendered height of this element.

Get: ActualHeight(self: FrameworkElement) -> float

"""

    ActualWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the rendered width of this element.

Get: ActualWidth(self: FrameworkElement) -> float

"""

    BindingGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Data.BindingGroup that is used for the element.

Get: BindingGroup(self: FrameworkElement) -> BindingGroup

Set: BindingGroup(self: FrameworkElement) = value
"""

    ContextMenu = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the context menu element that should appear whenever the context menu is requested through user interface (UI) from within this element.

Get: ContextMenu(self: FrameworkElement) -> ContextMenu

Set: ContextMenu(self: FrameworkElement) = value
"""

    Cursor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the cursor that displays when the mouse pointer is over this element.

Get: Cursor(self: FrameworkElement) -> Cursor

Set: Cursor(self: FrameworkElement) = value
"""

    DataContext = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the data context for an element when it participates in data binding.

Get: DataContext(self: FrameworkElement) -> object

Set: DataContext(self: FrameworkElement) = value
"""

    DefaultStyleKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the key to use to reference the style for this control, when theme styles are used or defined.

"""

    FlowDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the direction that text and other user interface (UI) elements flow within any parent element that controls their layout.

Get: FlowDirection(self: FrameworkElement) -> FlowDirection

Set: FlowDirection(self: FrameworkElement) = value
"""

    FocusVisualStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a property that enables customization of appearance, effects, or other style characteristics that will apply to this element when it captures keyboard focus.

Get: FocusVisualStyle(self: FrameworkElement) -> Style

Set: FocusVisualStyle(self: FrameworkElement) = value
"""

    ForceCursor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether this System.Windows.FrameworkElement should force the user interface (UI) to render the cursor as declared by the System.Windows.FrameworkElement.Cursor property.

Get: ForceCursor(self: FrameworkElement) -> bool

Set: ForceCursor(self: FrameworkElement) = value
"""

    HasEffectiveKeyboardFocus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the suggested height of the element.

Get: Height(self: FrameworkElement) -> float

Set: Height(self: FrameworkElement) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the horizontal alignment characteristics applied to this element when it is composed within a parent element, such as a panel or items control.

Get: HorizontalAlignment(self: FrameworkElement) -> HorizontalAlignment

Set: HorizontalAlignment(self: FrameworkElement) = value
"""

    InheritanceBehavior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the scope limits for property value inheritance, resource key lookup, and RelativeSource FindAncestor lookup.

"""

    InputScope = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the context for input used by this System.Windows.FrameworkElement.

Get: InputScope(self: FrameworkElement) -> InputScope

Set: InputScope(self: FrameworkElement) = value
"""

    IsEnabledCore = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that becomes the return value of System.Windows.UIElement.IsEnabled in derived classes.

"""

    IsInitialized = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether this element has been initialized, either during processing by a XAML processor, or by explicitly having its System.Windows.FrameworkElement.EndInit method called.

Get: IsInitialized(self: FrameworkElement) -> bool

"""

    IsLoaded = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether this element has been loaded for presentation.

Get: IsLoaded(self: FrameworkElement) -> bool

"""

    Language = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets localization/globalization language information that applies to an element.

Get: Language(self: FrameworkElement) -> XmlLanguage

Set: Language(self: FrameworkElement) = value
"""

    LayoutTransform = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a graphics transformation that should apply to this element when  layout is performed.

Get: LayoutTransform(self: FrameworkElement) -> Transform

Set: LayoutTransform(self: FrameworkElement) = value
"""

    LogicalChildren = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets an enumerator for logical child elements of this element.

"""

    Margin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the outer margin of an element.

Get: Margin(self: FrameworkElement) -> Thickness

Set: Margin(self: FrameworkElement) = value
"""

    MaxHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the maximum height constraint of the element.

Get: MaxHeight(self: FrameworkElement) -> float

Set: MaxHeight(self: FrameworkElement) = value
"""

    MaxWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the maximum width constraint of the element.

Get: MaxWidth(self: FrameworkElement) -> float

Set: MaxWidth(self: FrameworkElement) = value
"""

    MinHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the minimum height constraint of the element.

Get: MinHeight(self: FrameworkElement) -> float

Set: MinHeight(self: FrameworkElement) = value
"""

    MinWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the minimum width constraint of the element.

Get: MinWidth(self: FrameworkElement) -> float

Set: MinWidth(self: FrameworkElement) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the identifying name of the element. The name provides a reference so that code-behind, such as event handler code, can refer to a markup element after it is constructed during processing by a XAML processor.

Get: Name(self: FrameworkElement) -> str

Set: Name(self: FrameworkElement) = value
"""

    OverridesDefaultStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether this element incorporates style properties from theme styles.

Get: OverridesDefaultStyle(self: FrameworkElement) -> bool

Set: OverridesDefaultStyle(self: FrameworkElement) = value
"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the logical parent  element of this element.

Get: Parent(self: FrameworkElement) -> DependencyObject

"""

    Resources = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the locally-defined resource dictionary.

Get: Resources(self: FrameworkElement) -> ResourceDictionary

Set: Resources(self: FrameworkElement) = value
"""

    Style = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the style used by this element when it is rendered.

Get: Style(self: FrameworkElement) -> Style

Set: Style(self: FrameworkElement) = value
"""

    StylusPlugIns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of all stylus plug-in (customization) objects associated with this element.

"""

    Tag = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets an arbitrary object value that can be used to store custom information about this element.

Get: Tag(self: FrameworkElement) -> object

Set: Tag(self: FrameworkElement) = value
"""

    TemplatedParent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a reference to the template parent of this element. This property is not relevant if the element was not created through a template.

Get: TemplatedParent(self: FrameworkElement) -> DependencyObject

"""

    ToolTip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the tool-tip object that is displayed for this element in the user interface (UI).

Get: ToolTip(self: FrameworkElement) -> object

Set: ToolTip(self: FrameworkElement) = value
"""

    Triggers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the collection of triggers established directly on this element, or in child elements.

Get: Triggers(self: FrameworkElement) -> TriggerCollection

"""

    UseLayoutRounding = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether layout rounding should be applied to this element's size and position during layout.

Get: UseLayoutRounding(self: FrameworkElement) -> bool

Set: UseLayoutRounding(self: FrameworkElement) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the vertical alignment characteristics applied to this element when it is composed within a parent element such as a panel or items control.

Get: VerticalAlignment(self: FrameworkElement) -> VerticalAlignment

Set: VerticalAlignment(self: FrameworkElement) = value
"""

    VisualBitmapEffect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.Effects.BitmapEffect value for the System.Windows.Media.Visual.

"""

    VisualBitmapEffectInput = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.Effects.BitmapEffectInput value for the System.Windows.Media.Visual.

"""

    VisualBitmapScalingMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.BitmapScalingMode for the System.Windows.Media.Visual.

"""

    VisualCacheMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a cached representation of the System.Windows.Media.Visual.

"""

    VisualChildrenCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the number of visual child elements within this element.

"""

    VisualClearTypeHint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.ClearTypeHint that determines how ClearType is rendered in the System.Windows.Media.Visual.

"""

    VisualClip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the clip region of the System.Windows.Media.Visual as a System.Windows.Media.Geometry value.

"""

    VisualEdgeMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the edge mode of the System.Windows.Media.Visual as an System.Windows.Media.EdgeMode value.

"""

    VisualEffect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the bitmap effect to apply to the System.Windows.Media.Visual.

"""

    VisualOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the offset value of the visual object.

"""

    VisualOpacity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the opacity of the System.Windows.Media.Visual.

"""

    VisualOpacityMask = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.Brush value that represents the opacity mask of the System.Windows.Media.Visual.

"""

    VisualParent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the visual tree parent of the visual object.

"""

    VisualScrollableAreaClip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a clipped scrollable area for the System.Windows.Media.Visual.

"""

    VisualTextHintingMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.TextHintingMode of the System.Windows.Media.Visual.

"""

    VisualTextRenderingMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.TextRenderingMode of the System.Windows.Media.Visual.

"""

    VisualTransform = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.Transform value for the System.Windows.Media.Visual.

"""

    VisualXSnappingGuidelines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the x-coordinate (vertical) guideline collection.

"""

    VisualYSnappingGuidelines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the y-coordinate (horizontal) guideline collection.

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the width of the element.

Get: Width(self: FrameworkElement) -> float

Set: Width(self: FrameworkElement) = value
"""


    ActualHeightProperty = None
    ActualWidthProperty = None
    BindingGroupProperty = None
    ContextMenuClosing = None
    ContextMenuClosingEvent = None
    ContextMenuOpening = None
    ContextMenuOpeningEvent = None
    ContextMenuProperty = None
    CursorProperty = None
    DataContextChanged = None
    DataContextProperty = None
    DefaultStyleKeyProperty = None
    FlowDirectionProperty = None
    FocusVisualStyleProperty = None
    ForceCursorProperty = None
    HeightProperty = None
    HorizontalAlignmentProperty = None
    Initialized = None
    InputScopeProperty = None
    LanguageProperty = None
    LayoutTransformProperty = None
    Loaded = None
    LoadedEvent = None
    MarginProperty = None
    MaxHeightProperty = None
    MaxWidthProperty = None
    MinHeightProperty = None
    MinWidthProperty = None
    NameProperty = None
    OverridesDefaultStyleProperty = None
    RequestBringIntoView = None
    RequestBringIntoViewEvent = None
    SizeChanged = None
    SizeChangedEvent = None
    SourceUpdated = None
    StyleProperty = None
    TagProperty = None
    TargetUpdated = None
    ToolTipClosing = None
    ToolTipClosingEvent = None
    ToolTipOpening = None
    ToolTipOpeningEvent = None
    ToolTipProperty = None
    Unloaded = None
    UnloadedEvent = None
    UseLayoutRoundingProperty = None
    VerticalAlignmentProperty = None
    WidthProperty = None


class FrameworkElementFactory(object):
    """
    Supports the creation of templates.
    
    FrameworkElementFactory()
    FrameworkElementFactory(type: Type)
    FrameworkElementFactory(text: str)
    FrameworkElementFactory(type: Type, name: str)
    """
    def AddHandler(self, routedEvent, handler, handledEventsToo=None):
        """
        AddHandler(self: FrameworkElementFactory, routedEvent: RoutedEvent, handler: Delegate, handledEventsToo: bool)
            Adds an event handler for the given routed event to the instances created by 
             this factory, with the option of having the provided handler be invoked even in 
             cases of routed events that had already been marked as handled by another 
             element along the route.
        
        
            routedEvent: Identifier object for the routed event being handled.
            handler: A reference to the handler implementation.
            handledEventsToo: Whether to invoke the handler in cases where the routed event has already been 
             marked as handled in its arguments object. true to invoke the handler even when 
             the routed event is marked handled; otherwise, false. The default is false. 
             Asking to handle already-handled routed events is not common.
        
        AddHandler(self: FrameworkElementFactory, routedEvent: RoutedEvent, handler: Delegate)
            Adds an event handler for the given routed event to the instances created by 
             this factory.
        
        
            routedEvent: Identifier object for the routed event being handled.
            handler: A reference to the handler implementation.
        """
        pass

    def AppendChild(self, child):
        """
        AppendChild(self: FrameworkElementFactory, child: FrameworkElementFactory)
            Adds a child factory to this factory.
        
            child: The System.Windows.FrameworkElementFactory object to add as a child.
        """
        pass

    def RemoveHandler(self, routedEvent, handler):
        """
        RemoveHandler(self: FrameworkElementFactory, routedEvent: RoutedEvent, handler: Delegate)
            Removes an event handler from the given routed event. This applies to the 
             instances created by this factory.
        
        
            routedEvent: Identifier object for the routed event.
            handler: The handler to remove.
        """
        pass

    def SetBinding(self, dp, binding):
        """
        SetBinding(self: FrameworkElementFactory, dp: DependencyProperty, binding: BindingBase)
            Sets up data binding on a property.
        
            dp: Identifies the property where the binding should be established.
            binding: Description of the binding.
        """
        pass

    def SetResourceReference(self, dp, name):
        """
        SetResourceReference(self: FrameworkElementFactory, dp: DependencyProperty, name: object)
            Set up a dynamic resource reference on a child property.
        
            dp: The property to which the resource is bound.
            name: The name of the resource.
        """
        pass

    def SetValue(self, dp, value):
        """
        SetValue(self: FrameworkElementFactory, dp: DependencyProperty, value: object)
            Sets the value of a dependency property.
        
            dp: The dependency property identifier of the property to set.
            value: The new value.
        """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type)
        __new__(cls: type, type: Type)
        __new__(cls: type, text: str)
        __new__(cls: type, type: Type, name: str)
        """
        pass

    FirstChild = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the first child factory.

Get: FirstChild(self: FrameworkElementFactory) -> FrameworkElementFactory

"""

    IsSealed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether this object is in an immutable state.

Get: IsSealed(self: FrameworkElementFactory) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the name of a template item.

Get: Name(self: FrameworkElementFactory) -> str

Set: Name(self: FrameworkElementFactory) = value
"""

    NextSibling = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the next sibling factory.

Get: NextSibling(self: FrameworkElementFactory) -> FrameworkElementFactory

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the parent System.Windows.FrameworkElementFactory.

Get: Parent(self: FrameworkElementFactory) -> FrameworkElementFactory

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the text string to produce.

Get: Text(self: FrameworkElementFactory) -> str

Set: Text(self: FrameworkElementFactory) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the type of the objects this factory produces.

Get: Type(self: FrameworkElementFactory) -> Type

Set: Type(self: FrameworkElementFactory) = value
"""



class PropertyMetadata(object):
    """
    Defines certain behavior aspects of a dependency property as it is applied to a specific type, including conditions it was registered with.
    
    PropertyMetadata()
    PropertyMetadata(defaultValue: object)
    PropertyMetadata(propertyChangedCallback: PropertyChangedCallback)
    PropertyMetadata(defaultValue: object, propertyChangedCallback: PropertyChangedCallback)
    PropertyMetadata(defaultValue: object, propertyChangedCallback: PropertyChangedCallback, coerceValueCallback: CoerceValueCallback)
    """
    def Merge(self, *args): #cannot find CLR method
        """
        Merge(self: PropertyMetadata, baseMetadata: PropertyMetadata, dp: DependencyProperty)
            Merges this metadata with the base metadata.
        
            baseMetadata: The base metadata to merge with this instance's values.
            dp: The dependency property to which this metadata is being applied.
        """
        pass

    def OnApply(self, *args): #cannot find CLR method
        """
        OnApply(self: PropertyMetadata, dp: DependencyProperty, targetType: Type)
            Called when this metadata has been applied to a property, which indicates that 
             the metadata is being sealed.
        
        
            dp: The dependency property to which the metadata has been applied.
            targetType: The type associated with this metadata if this is type-specific metadata. If 
             this is default metadata, this value is a null reference.
        """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type)
        __new__(cls: type, defaultValue: object)
        __new__(cls: type, propertyChangedCallback: PropertyChangedCallback)
        __new__(cls: type, defaultValue: object, propertyChangedCallback: PropertyChangedCallback)
        __new__(cls: type, defaultValue: object, propertyChangedCallback: PropertyChangedCallback, coerceValueCallback: CoerceValueCallback)
        """
        pass

    CoerceValueCallback = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a reference to a System.Windows.CoerceValueCallback implementation specified in this metadata.

Get: CoerceValueCallback(self: PropertyMetadata) -> CoerceValueCallback

Set: CoerceValueCallback(self: PropertyMetadata) = value
"""

    DefaultValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the default value of the dependency property.

Get: DefaultValue(self: PropertyMetadata) -> object

Set: DefaultValue(self: PropertyMetadata) = value
"""

    IsSealed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that determines whether the metadata has been applied to a property in some way, resulting in the immutable state of that metadata instance.

"""

    PropertyChangedCallback = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a reference to a System.Windows.PropertyChangedCallback implementation specified in this metadata.

Get: PropertyChangedCallback(self: PropertyMetadata) -> PropertyChangedCallback

Set: PropertyChangedCallback(self: PropertyMetadata) = value
"""



class UIPropertyMetadata(PropertyMetadata):
    """
    Provides property metadata for non-framework properties that do have rendering/user interface impact at the core level.
    
    UIPropertyMetadata()
    UIPropertyMetadata(defaultValue: object)
    UIPropertyMetadata(propertyChangedCallback: PropertyChangedCallback)
    UIPropertyMetadata(defaultValue: object, propertyChangedCallback: PropertyChangedCallback)
    UIPropertyMetadata(defaultValue: object, propertyChangedCallback: PropertyChangedCallback, coerceValueCallback: CoerceValueCallback)
    UIPropertyMetadata(defaultValue: object, propertyChangedCallback: PropertyChangedCallback, coerceValueCallback: CoerceValueCallback, isAnimationProhibited: bool)
    """
    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type)
        __new__(cls: type, defaultValue: object)
        __new__(cls: type, propertyChangedCallback: PropertyChangedCallback)
        __new__(cls: type, defaultValue: object, propertyChangedCallback: PropertyChangedCallback)
        __new__(cls: type, defaultValue: object, propertyChangedCallback: PropertyChangedCallback, coerceValueCallback: CoerceValueCallback)
        __new__(cls: type, defaultValue: object, propertyChangedCallback: PropertyChangedCallback, coerceValueCallback: CoerceValueCallback, isAnimationProhibited: bool)
        """
        pass

    IsAnimationProhibited = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value declaring whether animations should be disabled on the dependency property where the containing metadata instance is applied.

Get: IsAnimationProhibited(self: UIPropertyMetadata) -> bool

Set: IsAnimationProhibited(self: UIPropertyMetadata) = value
"""

    IsSealed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that determines whether the metadata has been applied to a property in some way, resulting in the immutable state of that metadata instance.

"""



class FrameworkPropertyMetadata(UIPropertyMetadata):
    """
    Reports or applies metadata for a dependency property, specifically adding framework-specific property system characteristics.
    
    FrameworkPropertyMetadata()
    FrameworkPropertyMetadata(defaultValue: object)
    FrameworkPropertyMetadata(propertyChangedCallback: PropertyChangedCallback)
    FrameworkPropertyMetadata(propertyChangedCallback: PropertyChangedCallback, coerceValueCallback: CoerceValueCallback)
    FrameworkPropertyMetadata(defaultValue: object, propertyChangedCallback: PropertyChangedCallback)
    FrameworkPropertyMetadata(defaultValue: object, propertyChangedCallback: PropertyChangedCallback, coerceValueCallback: CoerceValueCallback)
    FrameworkPropertyMetadata(defaultValue: object, flags: FrameworkPropertyMetadataOptions)
    FrameworkPropertyMetadata(defaultValue: object, flags: FrameworkPropertyMetadataOptions, propertyChangedCallback: PropertyChangedCallback)
    FrameworkPropertyMetadata(defaultValue: object, flags: FrameworkPropertyMetadataOptions, propertyChangedCallback: PropertyChangedCallback, coerceValueCallback: CoerceValueCallback)
    FrameworkPropertyMetadata(defaultValue: object, flags: FrameworkPropertyMetadataOptions, propertyChangedCallback: PropertyChangedCallback, coerceValueCallback: CoerceValueCallback, isAnimationProhibited: bool)
    FrameworkPropertyMetadata(defaultValue: object, flags: FrameworkPropertyMetadataOptions, propertyChangedCallback: PropertyChangedCallback, coerceValueCallback: CoerceValueCallback, isAnimationProhibited: bool, defaultUpdateSourceTrigger: UpdateSourceTrigger)
    """
    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type)
        __new__(cls: type, defaultValue: object)
        __new__(cls: type, propertyChangedCallback: PropertyChangedCallback)
        __new__(cls: type, propertyChangedCallback: PropertyChangedCallback, coerceValueCallback: CoerceValueCallback)
        __new__(cls: type, defaultValue: object, propertyChangedCallback: PropertyChangedCallback)
        __new__(cls: type, defaultValue: object, propertyChangedCallback: PropertyChangedCallback, coerceValueCallback: CoerceValueCallback)
        __new__(cls: type, defaultValue: object, flags: FrameworkPropertyMetadataOptions)
        __new__(cls: type, defaultValue: object, flags: FrameworkPropertyMetadataOptions, propertyChangedCallback: PropertyChangedCallback)
        __new__(cls: type, defaultValue: object, flags: FrameworkPropertyMetadataOptions, propertyChangedCallback: PropertyChangedCallback, coerceValueCallback: CoerceValueCallback)
        __new__(cls: type, defaultValue: object, flags: FrameworkPropertyMetadataOptions, propertyChangedCallback: PropertyChangedCallback, coerceValueCallback: CoerceValueCallback, isAnimationProhibited: bool)
        __new__(cls: type, defaultValue: object, flags: FrameworkPropertyMetadataOptions, propertyChangedCallback: PropertyChangedCallback, coerceValueCallback: CoerceValueCallback, isAnimationProhibited: bool, defaultUpdateSourceTrigger: UpdateSourceTrigger)
        """
        pass

    AffectsArrange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass during layout engine operations.

Get: AffectsArrange(self: FrameworkPropertyMetadata) -> bool

Set: AffectsArrange(self: FrameworkPropertyMetadata) = value
"""

    AffectsMeasure = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether a dependency property potentially affects the measure pass during layout engine operations.

Get: AffectsMeasure(self: FrameworkPropertyMetadata) -> bool

Set: AffectsMeasure(self: FrameworkPropertyMetadata) = value
"""

    AffectsParentArrange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass of its parent element's layout during layout engine operations.

Get: AffectsParentArrange(self: FrameworkPropertyMetadata) -> bool

Set: AffectsParentArrange(self: FrameworkPropertyMetadata) = value
"""

    AffectsParentMeasure = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether a dependency property potentially affects the measure pass of its parent element's layout during layout engine operations.

Get: AffectsParentMeasure(self: FrameworkPropertyMetadata) -> bool

Set: AffectsParentMeasure(self: FrameworkPropertyMetadata) = value
"""

    AffectsRender = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether a dependency property potentially affects the general layout in some way that does not specifically influence arrangement or measurement, but would require a redraw.

Get: AffectsRender(self: FrameworkPropertyMetadata) -> bool

Set: AffectsRender(self: FrameworkPropertyMetadata) = value
"""

    BindsTwoWayByDefault = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether the property binds two-way by default.

Get: BindsTwoWayByDefault(self: FrameworkPropertyMetadata) -> bool

Set: BindsTwoWayByDefault(self: FrameworkPropertyMetadata) = value
"""

    DefaultUpdateSourceTrigger = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the default for System.Windows.Data.UpdateSourceTrigger to use when bindings for the property with this metadata are applied, which have their System.Windows.Data.UpdateSourceTrigger set to System.Windows.Data.UpdateSourceTrigger.Default.

Get: DefaultUpdateSourceTrigger(self: FrameworkPropertyMetadata) -> UpdateSourceTrigger

Set: DefaultUpdateSourceTrigger(self: FrameworkPropertyMetadata) = value
"""

    Inherits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether the value of the dependency property is inheritable.

Get: Inherits(self: FrameworkPropertyMetadata) -> bool

Set: Inherits(self: FrameworkPropertyMetadata) = value
"""

    IsDataBindingAllowed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether data binding is supported for the dependency property.

Get: IsDataBindingAllowed(self: FrameworkPropertyMetadata) -> bool

"""

    IsNotDataBindable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether the dependency property supports data binding.

Get: IsNotDataBindable(self: FrameworkPropertyMetadata) -> bool

Set: IsNotDataBindable(self: FrameworkPropertyMetadata) = value
"""

    IsSealed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that determines whether the metadata has been applied to a property in some way, resulting in the immutable state of that metadata instance.

"""

    Journal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether this property contains journaling information that applications can or should store as part of a journaling implementation.

Get: Journal(self: FrameworkPropertyMetadata) -> bool

Set: Journal(self: FrameworkPropertyMetadata) = value
"""

    OverridesInheritanceBehavior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether the property value inheritance evaluation should span across certain content boundaries in the logical tree of elements.

Get: OverridesInheritanceBehavior(self: FrameworkPropertyMetadata) -> bool

Set: OverridesInheritanceBehavior(self: FrameworkPropertyMetadata) = value
"""

    SubPropertiesDoNotAffectRender = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether sub-properties of the dependency property do not affect the rendering of the containing object.

Get: SubPropertiesDoNotAffectRender(self: FrameworkPropertyMetadata) -> bool

Set: SubPropertiesDoNotAffectRender(self: FrameworkPropertyMetadata) = value
"""



class FrameworkPropertyMetadataOptions(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies the types of framework-level property behavior that pertain to a particular dependency property in the Windows Presentation Foundation (WPF) property system.
    
    enum (flags) FrameworkPropertyMetadataOptions, values: AffectsArrange (2), AffectsMeasure (1), AffectsParentArrange (8), AffectsParentMeasure (4), AffectsRender (16), BindsTwoWayByDefault (256), Inherits (32), Journal (1024), None (0), NotDataBindable (128), OverridesInheritanceBehavior (64), SubPropertiesDoNotAffectRender (2048)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AffectsArrange = None
    AffectsMeasure = None
    AffectsParentArrange = None
    AffectsParentMeasure = None
    AffectsRender = None
    BindsTwoWayByDefault = None
    Inherits = None
    Journal = None
    None = None
    NotDataBindable = None
    OverridesInheritanceBehavior = None
    SubPropertiesDoNotAffectRender = None
    value__ = None


class Freezable(DependencyObject, ISealable):
    """ Defines an object that has a modifiable state and a read-only (frozen) state. Classes that derive from System.Windows.Freezable provide detailed change notification, can be made immutable, and can clone themselves. """
    def Clone(self):
        """
        Clone(self: Freezable) -> Freezable
        
            Creates a modifiable clone of the System.Windows.Freezable, making deep copies 
             of the object's values. When copying the object's dependency properties, this 
             method copies expressions (which might no longer resolve) but not animations or 
             their current values.
        
            Returns: A modifiable clone of the current object. The cloned object's 
             System.Windows.Freezable.IsFrozen property is false even if the source's 
             System.Windows.Freezable.IsFrozen property is true.
        """
        pass

    def CloneCore(self, *args): #cannot find CLR method
        """
        CloneCore(self: Freezable, sourceFreezable: Freezable)
            Makes the instance a clone (deep copy) of the specified 
             System.Windows.Freezable using base (non-animated) property values.
        
        
            sourceFreezable: The object to clone.
        """
        pass

    def CloneCurrentValue(self):
        """
        CloneCurrentValue(self: Freezable) -> Freezable
        
            Creates a modifiable clone (deep copy) of the System.Windows.Freezable using 
             its current values.
        
            Returns: A modifiable clone of the current object. The cloned object's 
             System.Windows.Freezable.IsFrozen property is false even if the source's 
             System.Windows.Freezable.IsFrozen property is true.
        """
        pass

    def CloneCurrentValueCore(self, *args): #cannot find CLR method
        """
        CloneCurrentValueCore(self: Freezable, sourceFreezable: Freezable)
            Makes the instance a modifiable clone (deep copy) of the specified 
             System.Windows.Freezable using current property values.
        
        
            sourceFreezable: The System.Windows.Freezable to be cloned.
        """
        pass

    def CreateInstance(self, *args): #cannot find CLR method
        """
        CreateInstance(self: Freezable) -> Freezable
        
            Initializes a new instance of the System.Windows.Freezable class.
            Returns: The new instance.
        """
        pass

    def CreateInstanceCore(self, *args): #cannot find CLR method
        """
        CreateInstanceCore(self: Freezable) -> Freezable
        
            When implemented in a derived class, creates a new instance of the 
             System.Windows.Freezable derived class.
        
            Returns: The new instance.
        """
        pass

    def Freeze(self):
        """
        Freeze(self: Freezable)
            Makes the current object unmodifiable and sets its 
             System.Windows.Freezable.IsFrozen property to true.
        """
        pass

    def FreezeCore(self, *args): #cannot find CLR method
        """
        FreezeCore(self: Freezable, isChecking: bool) -> bool
        
            Makes the System.Windows.Freezable object unmodifiable or tests whether it can 
             be made unmodifiable.
        
        
            isChecking: true to return an indication of whether the object can be frozen (without 
             actually freezing it); false to actually freeze the object.
        
            Returns: If isChecking is true, this method returns true if the System.Windows.Freezable 
             can be made unmodifiable, or false if it cannot be made unmodifiable. If 
             isChecking is false, this method returns true if the if the specified 
             System.Windows.Freezable is now unmodifiable, or false if it cannot be made 
             unmodifiable.
        """
        pass

    def GetAsFrozen(self):
        """
        GetAsFrozen(self: Freezable) -> Freezable
        
            Creates a frozen copy of the System.Windows.Freezable, using base 
             (non-animated) property values. Because the copy is frozen, any frozen 
             sub-objects are copied by reference.
        
            Returns: A frozen copy of the System.Windows.Freezable. The copy's 
             System.Windows.Freezable.IsFrozen property is set to true.
        """
        pass

    def GetAsFrozenCore(self, *args): #cannot find CLR method
        """
        GetAsFrozenCore(self: Freezable, sourceFreezable: Freezable)
            Makes the instance a frozen clone of the specified System.Windows.Freezable 
             using base (non-animated) property values.
        
        
            sourceFreezable: The instance to copy.
        """
        pass

    def GetCurrentValueAsFrozen(self):
        """
        GetCurrentValueAsFrozen(self: Freezable) -> Freezable
        
            Creates a frozen copy of the System.Windows.Freezable using current property 
             values. Because the copy is frozen, any frozen sub-objects are copied by 
             reference.
        
            Returns: A frozen copy of the System.Windows.Freezable. The copy's 
             System.Windows.Freezable.IsFrozen property is set to true.
        """
        pass

    def GetCurrentValueAsFrozenCore(self, *args): #cannot find CLR method
        """
        GetCurrentValueAsFrozenCore(self: Freezable, sourceFreezable: Freezable)
            Makes the current instance a frozen clone of the specified 
             System.Windows.Freezable. If the object has animated dependency properties, 
             their current animated values are copied.
        
        
            sourceFreezable: The System.Windows.Freezable to copy and freeze.
        """
        pass

    def OnChanged(self, *args): #cannot find CLR method
        """
        OnChanged(self: Freezable)
            Called when the current System.Windows.Freezable object is modified.
        """
        pass

    def OnFreezablePropertyChanged(self, *args): #cannot find CLR method
        """
        OnFreezablePropertyChanged(self: Freezable, oldValue: DependencyObject, newValue: DependencyObject, property: DependencyProperty)
            This member supports the Windows Presentation Foundation (WPF) infrastructure 
             and is not intended to be used directly from your code.
        
        
            oldValue: The previous value of the data member.
            newValue: The current value of the data member.
            property: The property that changed.
        OnFreezablePropertyChanged(self: Freezable, oldValue: DependencyObject, newValue: DependencyObject)
            Ensures that appropriate context pointers are established for a 
             System.Windows.DependencyObjectType data member that has just been set.
        
        
            oldValue: The previous value of the data member.
            newValue: The current value of the data member.
        """
        pass

    def OnPropertyChanged(self, *args): #cannot find CLR method
        """
        OnPropertyChanged(self: Freezable, e: DependencyPropertyChangedEventArgs)
            Overrides the System.Windows.DependencyObject implementation of 
             System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPrope
             rtyChangedEventArgs) to also invoke any System.Windows.Freezable.Changed 
             handlers in response to a changing dependency property of type 
             System.Windows.Freezable.
        
        
            e: Event data that contains information about which property changed, and its old 
             and new values.
        """
        pass

    def ReadPreamble(self, *args): #cannot find CLR method
        """
        ReadPreamble(self: Freezable)
            Ensures that the System.Windows.Freezable is being accessed from a valid 
             thread. Inheritors of System.Windows.Freezable must call this method at the 
             beginning of any API that reads data members that are not dependency 
             properties.
        """
        pass

    def ShouldSerializeProperty(self, *args): #cannot find CLR method
        """
        ShouldSerializeProperty(self: DependencyObject, dp: DependencyProperty) -> bool
        
            Returns a value that indicates whether serialization processes should serialize 
             the value for the provided dependency property.
        
        
            dp: The identifier for the dependency property that should be serialized.
            Returns: true if the dependency property that is supplied should be value-serialized; 
             otherwise, false.
        
        ShouldSerializeProperty(self: Window_16$17, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Label_17$18, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: TextBox_18$19, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Button_19$20, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: CheckBox_20$21, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: ComboBox_21$22, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Separator_22$23, dp: DependencyProperty) -> bool
        """
        pass

    def WritePostscript(self, *args): #cannot find CLR method
        """
        WritePostscript(self: Freezable)
            Raises the System.Windows.Freezable.Changed event for the 
             System.Windows.Freezable and invokes its System.Windows.Freezable.OnChanged 
             method. Classes that derive from System.Windows.Freezable should call this 
             method at the end of any API that modifies class members that are not stored as 
             dependency properties.
        """
        pass

    def WritePreamble(self, *args): #cannot find CLR method
        """
        WritePreamble(self: Freezable)
            Verifies that the System.Windows.Freezable is not frozen and that it is being 
             accessed from a valid threading context. System.Windows.Freezable inheritors 
             should call this method at the beginning of any API that writes to data members 
             that are not dependency properties.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    CanFreeze = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the object can be made unmodifiable.

Get: CanFreeze(self: Freezable) -> bool

"""

    IsFrozen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the object is currently modifiable.

Get: IsFrozen(self: Freezable) -> bool

"""


    Changed = None


class FreezableCollection(Animatable, ISealable, IAnimatable, IResource, IList, ICollection, IEnumerable, IList[T], ICollection[T], IEnumerable[T], INotifyCollectionChanged, INotifyPropertyChanged):
    """
    FreezableCollection[T]()
    FreezableCollection[T](capacity: int)
    FreezableCollection[T](collection: IEnumerable[T])
    """
    def Add(self, value):
        """
        Add(self: FreezableCollection[T], value: T)
            Adds the specified object to the end of the System.Windows.FreezableCollection.
        
            value: The object to be added to the end of the System.Windows.FreezableCollection. 
             This value cannot be null.
        """
        pass

    def Clear(self):
        """
        Clear(self: FreezableCollection[T])
            Removes all elements from the collection.
        """
        pass

    def Clone(self):
        """
        Clone(self: FreezableCollection[T]) -> FreezableCollection[T]
        
            Creates a modifiable clone of this System.Windows.FreezableCollection and its 
             contents, making deep copies. If this collection (or its contents) has animated 
                     animated value.
        
            Returns: A modifiable copy of this collection and its contents. The copy's 
             System.Windows.Freezable.IsFrozen value is false.
        """
        pass

    def CloneCore(self, *args): #cannot find CLR method
        """
        CloneCore(self: FreezableCollection[T], source: Freezable)
            Makes this instance a clone (deep copy) of the specified 
             System.Windows.FreezableCollection using base (non-animated) property values.
        
        
            source: The System.Windows.FreezableCollection to copy.
        """
        pass

    def CloneCurrentValue(self):
        """
        CloneCurrentValue(self: FreezableCollection[T]) -> FreezableCollection[T]
        
            Creates a modifiable copy of this System.Windows.FreezableCollection and its 
             contents, making deep copies of this object's current values. If this object 
             (or the objects it contains) contains animated dependency properties, their 
             current animated values are copied.
        
            Returns: A modifiable clone of the collection and its contents. The cloned object's 
             System.Windows.Freezable.IsFrozen property will be false even if the source's 
             System.Windows.Freezable.IsFrozen property was true.
        """
        pass

    def CloneCurrentValueCore(self, *args): #cannot find CLR method
        """
        CloneCurrentValueCore(self: FreezableCollection[T], source: Freezable)
            Makes this instance a modifiable clone (deep copy) of the specified 
             System.Windows.FreezableCollection using current property values.
        
        
            source: The System.Windows.FreezableCollection to clone.
        """
        pass

    def Contains(self, value):
        """
        Contains(self: FreezableCollection[T], value: T) -> bool
        
            Determines whether this System.Windows.FreezableCollection contains the 
             specified value.
        
        
            value: The object to locate in this collection. This object may be null.
            Returns: true if value is found in the System.Windows.FreezableCollection; otherwise, 
             false.
        """
        pass

    def CopyTo(self, array, index):
        """ CopyTo(self: FreezableCollection[T], array: Array[T], index: int) """
        pass

    def CreateInstance(self, *args): #cannot find CLR method
        """
        CreateInstance(self: Freezable) -> Freezable
        
            Initializes a new instance of the System.Windows.Freezable class.
            Returns: The new instance.
        """
        pass

    def CreateInstanceCore(self, *args): #cannot find CLR method
        """
        CreateInstanceCore(self: FreezableCollection[T]) -> Freezable
        
            Creates a new instance of the System.Windows.FreezableCollection.
            Returns: The new instance.
        """
        pass

    def FreezeCore(self, *args): #cannot find CLR method
        """
        FreezeCore(self: FreezableCollection[T], isChecking: bool) -> bool
        
            Makes this System.Windows.FreezableCollection object unmodifiable or determines 
             whether it can be made unmodifiable.
        
        
            isChecking: true if the System.Windows.FreezableCollection should simply return whether it 
             can be frozen. false if the System.Windows.FreezableCollection instance should 
             actually freeze itself when this method is called.
        
            Returns: If isChecking is true, this method returns true if this 
             System.Windows.FreezableCollection can be made unmodifiable, or false if it 
             cannot be made unmodifiable. If isChecking is false, this method returns true 
             if the if the specified System.Windows.FreezableCollection is now unmodifiable, 
             or false if it cannot be made unmodifiable, with the side effect of having 
             begun to change the frozen status of this object.
        """
        pass

    def GetAsFrozenCore(self, *args): #cannot find CLR method
        """
        GetAsFrozenCore(self: FreezableCollection[T], source: Freezable)
            Makes this instance a frozen clone of the specified 
             System.Windows.FreezableCollection using base (non-animated) property values.
        
        
            source: The System.Windows.FreezableCollection to copy.
        """
        pass

    def GetCurrentValueAsFrozenCore(self, *args): #cannot find CLR method
        """
        GetCurrentValueAsFrozenCore(self: FreezableCollection[T], source: Freezable)
            Makes this instance a frozen clone of the specified System.Windows.Freezable. 
             If this object has animated dependency properties, their current animated 
             values are copied.
        
        
            source: The System.Windows.FreezableCollection to copy.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: FreezableCollection[T]) -> Enumerator
        
            Returns an enumerator for the entire System.Windows.FreezableCollection.
            Returns: An enumerator for the entire System.Windows.FreezableCollection.
        """
        pass

    def IndexOf(self, value):
        """
        IndexOf(self: FreezableCollection[T], value: T) -> int
        
            Searches for the specified object and returns the zero-based index of the first 
             occurrence within the entire System.Windows.FreezableCollection.
        
        
            value: The object to locate in the System.Windows.FreezableCollection.
            Returns: The zero-based index of the first occurrence of value within the entire 
             System.Windows.FreezableCollection, if found; otherwise, -1.
        """
        pass

    def Insert(self, index, value):
        """
        Insert(self: FreezableCollection[T], index: int, value: T)
            Inserts the specified object into the System.Windows.FreezableCollection at the 
             specified index.
        
        
            index: The zero-based index at which value should be inserted.
            value: The object to insert.
        """
        pass

    def OnChanged(self, *args): #cannot find CLR method
        """
        OnChanged(self: Freezable)
            Called when the current System.Windows.Freezable object is modified.
        """
        pass

    def OnFreezablePropertyChanged(self, *args): #cannot find CLR method
        """
        OnFreezablePropertyChanged(self: Freezable, oldValue: DependencyObject, newValue: DependencyObject, property: DependencyProperty)
            This member supports the Windows Presentation Foundation (WPF) infrastructure 
             and is not intended to be used directly from your code.
        
        
            oldValue: The previous value of the data member.
            newValue: The current value of the data member.
            property: The property that changed.
        OnFreezablePropertyChanged(self: Freezable, oldValue: DependencyObject, newValue: DependencyObject)
            Ensures that appropriate context pointers are established for a 
             System.Windows.DependencyObjectType data member that has just been set.
        
        
            oldValue: The previous value of the data member.
            newValue: The current value of the data member.
        """
        pass

    def OnPropertyChanged(self, *args): #cannot find CLR method
        """
        OnPropertyChanged(self: Freezable, e: DependencyPropertyChangedEventArgs)
            Overrides the System.Windows.DependencyObject implementation of 
             System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPrope
             rtyChangedEventArgs) to also invoke any System.Windows.Freezable.Changed 
             handlers in response to a changing dependency property of type 
             System.Windows.Freezable.
        
        
            e: Event data that contains information about which property changed, and its old 
             and new values.
        """
        pass

    def ReadPreamble(self, *args): #cannot find CLR method
        """
        ReadPreamble(self: Freezable)
            Ensures that the System.Windows.Freezable is being accessed from a valid 
             thread. Inheritors of System.Windows.Freezable must call this method at the 
             beginning of any API that reads data members that are not dependency 
             properties.
        """
        pass

    def Remove(self, value):
        """
        Remove(self: FreezableCollection[T], value: T) -> bool
        
            Removes the first occurrence of the specified object from the 
             System.Windows.FreezableCollection.
        
        
            value: The object to remove.
            Returns: true if an occurrence of value was found in the collection and removed; false 
             if value could not be found in the collection.
        """
        pass

    def RemoveAt(self, index):
        """
        RemoveAt(self: FreezableCollection[T], index: int)
            Removes the object at the specified zero-based index of the 
             System.Windows.FreezableCollection.
        
        
            index: The zero-based index of the object to remove.
        """
        pass

    def ShouldSerializeProperty(self, *args): #cannot find CLR method
        """
        ShouldSerializeProperty(self: DependencyObject, dp: DependencyProperty) -> bool
        
            Returns a value that indicates whether serialization processes should serialize 
             the value for the provided dependency property.
        
        
            dp: The identifier for the dependency property that should be serialized.
            Returns: true if the dependency property that is supplied should be value-serialized; 
             otherwise, false.
        
        ShouldSerializeProperty(self: Window_16$17, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Label_17$18, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: TextBox_18$19, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Button_19$20, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: CheckBox_20$21, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: ComboBox_21$22, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Separator_22$23, dp: DependencyProperty) -> bool
        """
        pass

    def WritePostscript(self, *args): #cannot find CLR method
        """
        WritePostscript(self: Freezable)
            Raises the System.Windows.Freezable.Changed event for the 
             System.Windows.Freezable and invokes its System.Windows.Freezable.OnChanged 
             method. Classes that derive from System.Windows.Freezable should call this 
             method at the end of any API that modifies class members that are not stored as 
             dependency properties.
        """
        pass

    def WritePreamble(self, *args): #cannot find CLR method
        """
        WritePreamble(self: Freezable)
            Verifies that the System.Windows.Freezable is not frozen and that it is being 
             accessed from a valid threading context. System.Windows.Freezable inheritors 
             should call this method at the beginning of any API that writes to data members 
             that are not dependency properties.
        """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """
        __contains__(self: ICollection[T], item: T) -> bool
        
            Determines whether the System.Collections.Generic.ICollection contains a 
             specific value.
        
        
            item: The object to locate in the System.Collections.Generic.ICollection.
            Returns: true if item is found in the System.Collections.Generic.ICollection; otherwise, 
             false.
        
        __contains__(self: IList, value: object) -> bool
        
            Determines whether the System.Collections.IList contains a specific value.
        
            value: The object to locate in the System.Collections.IList.
            Returns: true if the System.Object is found in the System.Collections.IList; otherwise, 
             false.
        """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __len__(self, *args): #cannot find CLR method
        """ x.__len__() <==> len(x) """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type)
        __new__(cls: type, capacity: int)
        __new__(cls: type, collection: IEnumerable[T])
        """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the number of elements contained by this System.Windows.FreezableCollection.

Get: Count(self: FreezableCollection[T]) -> int

"""


    Enumerator = None


class GiveFeedbackEventArgs(RoutedEventArgs):
    """ Contains arguments for the System.Windows.DragDrop.GiveFeedback event. """
    Effects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates the effects of drag-and-drop operation.

Get: Effects(self: GiveFeedbackEventArgs) -> DragDropEffects

"""

    UseDefaultCursors = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a Boolean value indicating whether default cursor feedback behavior should be used for the associated drag-and-drop operation.

Get: UseDefaultCursors(self: GiveFeedbackEventArgs) -> bool

Set: UseDefaultCursors(self: GiveFeedbackEventArgs) = value
"""



class GiveFeedbackEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """
    Represents a method that will handle the feedback routed event from in-process drag-and-drop operations, for instance System.Windows.UIElement.GiveFeedback.
    
    GiveFeedbackEventHandler(object: object, method: IntPtr)
    """
    def BeginInvoke(self, sender, e, callback, object):
        """ BeginInvoke(self: GiveFeedbackEventHandler, sender: object, e: GiveFeedbackEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        pass

    def CombineImpl(self, *args): #cannot find CLR method
        """
        CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate
        
            Combines this System.Delegate with the specified System.Delegate to form a new 
             delegate.
        
        
            follow: The delegate to combine with this delegate.
            Returns: A delegate that is the new root of the System.MulticastDelegate invocation list.
        """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """
        DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object
        
            Dynamically invokes (late-bound) the method represented by the current delegate.
        
            args: An array of objects that are the arguments to pass to the method represented by 
             the current delegate.-or- null, if the method represented by the current 
             delegate does not require arguments.
        
            Returns: The object returned by the method represented by the delegate.
        """
        pass

    def EndInvoke(self, result):
        """ EndInvoke(self: GiveFeedbackEventHandler, result: IAsyncResult) """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """
        GetMethodImpl(self: MulticastDelegate) -> MethodInfo
        
            Returns a static method represented by the current System.MulticastDelegate.
            Returns: A static method represented by the current System.MulticastDelegate.
        """
        pass

    def Invoke(self, sender, e):
        """ Invoke(self: GiveFeedbackEventHandler, sender: object, e: GiveFeedbackEventArgs) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """
        RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate
        
            Removes an element from the invocation list of this System.MulticastDelegate 
             that is equal to the specified delegate.
        
        
            value: The delegate to search for in the invocation list.
            Returns: If value is found in the invocation list for this instance, then a new 
             System.Delegate without value in its invocation list; otherwise, this instance 
             with its original invocation list.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, object, method):
        """ __new__(cls: type, object: object, method: IntPtr) """
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class GridLength(object, IEquatable[GridLength]):
    """
    Represents the length of elements that explicitly support System.Windows.GridUnitType.Star unit types.
    
    GridLength(pixels: float)
    GridLength(value: float, type: GridUnitType)
    """
    def Equals(self, *__args):
        """
        Equals(self: GridLength, gridLength: GridLength) -> bool
        
            Determines whether the specified System.Windows.GridLength is equal to the 
             current System.Windows.GridLength.
        
        
            gridLength: The System.Windows.GridLength structure to compare with the current instance.
            Returns: true if the specified System.Windows.GridLength has the same value and 
             System.Windows.GridLength.GridUnitType as the current instance; otherwise, 
             false.
        
        Equals(self: GridLength, oCompare: object) -> bool
        
            Determines whether the specified object is equal to the current 
             System.Windows.GridLength instance.
        
        
            oCompare: The object to compare with the current instance.
            Returns: true if the specified object has the same value and System.Windows.GridUnitType 
             as the current instance; otherwise, false.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: GridLength) -> int
        
            Gets a hash code for the System.Windows.GridLength.
            Returns: A hash code for the current System.Windows.GridLength structure.
        """
        pass

    def ToString(self):
        """
        ToString(self: GridLength) -> str
        
            Returns a System.String representation of the System.Windows.GridLength.
            Returns: A System.String representation of the current System.Windows.GridLength 
             structure.
        """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__[GridLength]() -> GridLength
        
        __new__(cls: type, pixels: float)
        __new__(cls: type, value: float, type: GridUnitType)
        """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    GridUnitType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the associated System.Windows.GridUnitType for the System.Windows.GridLength.

Get: GridUnitType(self: GridLength) -> GridUnitType

"""

    IsAbsolute = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the System.Windows.GridLength holds a value that is expressed in pixels.

Get: IsAbsolute(self: GridLength) -> bool

"""

    IsAuto = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the System.Windows.GridLength holds a value whose size is determined by the size properties of the content object.

Get: IsAuto(self: GridLength) -> bool

"""

    IsStar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the System.Windows.GridLength holds a value that is expressed as a weighted proportion of available space.

Get: IsStar(self: GridLength) -> bool

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a System.Double that represents the value of the System.Windows.GridLength.

Get: Value(self: GridLength) -> float

"""


    Auto = None


class GridLengthConverter(TypeConverter):
    """
    Converts instances of other types to and from System.Windows.GridLength instances.
    
    GridLengthConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: GridLengthConverter, typeDescriptorContext: ITypeDescriptorContext, sourceType: Type) -> bool
        
            Determines whether a class can be converted from a given type to an instance of 
             System.Windows.GridLength.
        
        
            typeDescriptorContext: Describes the context information of a type.
            sourceType: The type of the source that is being evaluated for conversion.
            Returns: true if the converter can convert from the specified type to an instance of 
             System.Windows.GridLength; otherwise, false.
        """
        pass

    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: GridLengthConverter, typeDescriptorContext: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Determines whether an instance of System.Windows.GridLength can be converted to 
             a different type.
        
        
            typeDescriptorContext: Describes the context information of a type.
            destinationType: The desired type that this instance of System.Windows.GridLength is being 
             evaluated for conversion.
        
            Returns: true if the converter can convert this instance of System.Windows.GridLength to 
             the specified type; otherwise, false.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: GridLengthConverter, typeDescriptorContext: ITypeDescriptorContext, cultureInfo: CultureInfo, source: object) -> object
        
            Attempts to convert a specified object to an instance of 
             System.Windows.GridLength.
        
        
            typeDescriptorContext: Describes the context information of a type.
            cultureInfo: Cultural specific information that should be respected during conversion.
            source: The object being converted.
            Returns: The instance of System.Windows.GridLength that is created from the converted 
             source.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: GridLengthConverter, typeDescriptorContext: ITypeDescriptorContext, cultureInfo: CultureInfo, value: object, destinationType: Type) -> object
        
            Attempts to convert an instance of System.Windows.GridLength to a specified 
             type.
        
        
            typeDescriptorContext: Describes the context information of a type.
            cultureInfo: Cultural specific information that should be respected during conversion.
            value: The instance of System.Windows.GridLength to convert.
            destinationType: The type that this instance of System.Windows.GridLength is converted to.
            Returns: The object that is created from the converted instance of 
             System.Windows.GridLength.
        """
        pass


class GridUnitType(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes the kind of value that a System.Windows.GridLength object is holding.
    
    enum GridUnitType, values: Auto (0), Pixel (1), Star (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Auto = None
    Pixel = None
    Star = None
    value__ = None


class HierarchicalDataTemplate(DataTemplate, INameScope, ISealable, IHaveResources, IQueryAmbient):
    """
    Represents a System.Windows.DataTemplate that supports System.Windows.Controls.HeaderedItemsControl, such as System.Windows.Controls.TreeViewItem or System.Windows.Controls.MenuItem.
    
    HierarchicalDataTemplate()
    HierarchicalDataTemplate(dataType: object)
    """
    def ValidateTemplatedParent(self, *args): #cannot find CLR method
        """
        ValidateTemplatedParent(self: DataTemplate, templatedParent: FrameworkElement)
            Checks the templated parent against a set of rules.
        
            templatedParent: The element this template is applied to.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, dataType=None):
        """
        __new__(cls: type)
        __new__(cls: type, dataType: object)
        """
        pass

    AlternationCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the number of alternating item containers for the child items.

Get: AlternationCount(self: HierarchicalDataTemplate) -> int

Set: AlternationCount(self: HierarchicalDataTemplate) = value
"""

    ItemBindingGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Data.BindingGroup that is copied to each child item.

Get: ItemBindingGroup(self: HierarchicalDataTemplate) -> BindingGroup

Set: ItemBindingGroup(self: HierarchicalDataTemplate) = value
"""

    ItemContainerStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Style that is applied to the item container for each child item.

Get: ItemContainerStyle(self: HierarchicalDataTemplate) -> Style

Set: ItemContainerStyle(self: HierarchicalDataTemplate) = value
"""

    ItemContainerStyleSelector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets custom style-selection logic for a style that can be applied to each item container.

Get: ItemContainerStyleSelector(self: HierarchicalDataTemplate) -> StyleSelector

Set: ItemContainerStyleSelector(self: HierarchicalDataTemplate) = value
"""

    ItemsSource = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the binding for this data template, which indicates where to find the collection that represents the next level in the data hierarchy.

Get: ItemsSource(self: HierarchicalDataTemplate) -> BindingBase

Set: ItemsSource(self: HierarchicalDataTemplate) = value
"""

    ItemStringFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a composite string that specifies how to format the items in the next level in the data hierarchy if they are displayed as strings.

Get: ItemStringFormat(self: HierarchicalDataTemplate) -> str

Set: ItemStringFormat(self: HierarchicalDataTemplate) = value
"""

    ItemTemplate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.DataTemplate to apply to the System.Windows.Controls.ItemsControl.ItemTemplate property on a generated System.Windows.Controls.HeaderedItemsControl (such as a System.Windows.Controls.MenuItem or a System.Windows.Controls.TreeViewItem), to indicate how to display items from the next level in the data hierarchy.

Get: ItemTemplate(self: HierarchicalDataTemplate) -> DataTemplate

Set: ItemTemplate(self: HierarchicalDataTemplate) = value
"""

    ItemTemplateSelector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Controls.DataTemplateSelector to apply to the System.Windows.Controls.ItemsControl.ItemTemplateSelector property on a generated System.Windows.Controls.HeaderedItemsControl (such as a System.Windows.Controls.MenuItem or a System.Windows.Controls.TreeViewItem), to indicate how to select a template to display items from the next level in the data hierarchy.

Get: ItemTemplateSelector(self: HierarchicalDataTemplate) -> DataTemplateSelector

Set: ItemTemplateSelector(self: HierarchicalDataTemplate) = value
"""



class HorizontalAlignment(Enum, IComparable, IFormattable, IConvertible):
    """
    Indicates where an element should be displayed on the horizontal axis relative to the allocated layout slot of the parent element.
    
    enum HorizontalAlignment, values: Center (1), Left (0), Right (2), Stretch (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Center = None
    Left = None
    Right = None
    Stretch = None
    value__ = None


class HwndDpiChangedEventArgs(HandledEventArgs):
    # no doc
    NewDpi = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NewDpi(self: HwndDpiChangedEventArgs) -> DpiScale

"""

    OldDpi = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OldDpi(self: HwndDpiChangedEventArgs) -> DpiScale

"""

    SuggestedRect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuggestedRect(self: HwndDpiChangedEventArgs) -> Rect

"""



class HwndDpiChangedEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ HwndDpiChangedEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender, e, callback, object):
        """ BeginInvoke(self: HwndDpiChangedEventHandler, sender: object, e: HwndDpiChangedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        pass

    def CombineImpl(self, *args): #cannot find CLR method
        """
        CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate
        
            Combines this System.Delegate with the specified System.Delegate to form a new 
             delegate.
        
        
            follow: The delegate to combine with this delegate.
            Returns: A delegate that is the new root of the System.MulticastDelegate invocation list.
        """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """
        DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object
        
            Dynamically invokes (late-bound) the method represented by the current delegate.
        
            args: An array of objects that are the arguments to pass to the method represented by 
             the current delegate.-or- null, if the method represented by the current 
             delegate does not require arguments.
        
            Returns: The object returned by the method represented by the delegate.
        """
        pass

    def EndInvoke(self, result):
        """ EndInvoke(self: HwndDpiChangedEventHandler, result: IAsyncResult) """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """
        GetMethodImpl(self: MulticastDelegate) -> MethodInfo
        
            Returns a static method represented by the current System.MulticastDelegate.
            Returns: A static method represented by the current System.MulticastDelegate.
        """
        pass

    def Invoke(self, sender, e):
        """ Invoke(self: HwndDpiChangedEventHandler, sender: object, e: HwndDpiChangedEventArgs) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """
        RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate
        
            Removes an element from the invocation list of this System.MulticastDelegate 
             that is equal to the specified delegate.
        
        
            value: The delegate to search for in the invocation list.
            Returns: If value is found in the invocation list for this instance, then a new 
             System.Delegate without value in its invocation list; otherwise, this instance 
             with its original invocation list.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, object, method):
        """ __new__(cls: type, object: object, method: IntPtr) """
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class IContentHost:
    """ This interface is implemented by layouts which host System.Windows.ContentElement. """
    def GetRectangles(self, child):
        """
        GetRectangles(self: IContentHost, child: ContentElement) -> ReadOnlyCollection[Rect]
        
            Returns a collection of bounding rectangles for a child element.
        
            child: The child element that the bounding rectangles are returned for.
            Returns: A collection of bounding rectangles for a child element.
        """
        pass

    def InputHitTest(self, point):
        """
        InputHitTest(self: IContentHost, point: Point) -> IInputElement
        
            Performs hit-testing for child elements.
        
            point: Mouse coordinates relative to the ContentHost.
            Returns: A descendant of System.Windows.IInputElement, or NULL if no such element exists.
        """
        pass

    def OnChildDesiredSizeChanged(self, child):
        """
        OnChildDesiredSizeChanged(self: IContentHost, child: UIElement)
            Called when a System.Windows.UIElement-derived class which is hosted by a 
             System.Windows.IContentHost changes its System.Windows.UIElement.DesiredSize.
        
        
            child: Child element whose System.Windows.UIElement.DesiredSize has changed
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    HostedElements = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets an enumeration containing all descendant System.Windows.ContentElement-derived classes, as well as all System.Windows.UIElement-derived classes that are a direct descendant of the System.Windows.IContentHost or one of its descendant System.Windows.ContentElement classes.

Get: HostedElements(self: IContentHost) -> IEnumerator[IInputElement]

"""



class InheritanceBehavior(Enum, IComparable, IFormattable, IConvertible):
    """
    Indicates the current mode of lookup for both property value inheritance, a resource lookup, and a RelativeSource FindAncestor lookup.
    
    enum InheritanceBehavior, values: Default (0), SkipAllNext (6), SkipAllNow (5), SkipToAppNext (2), SkipToAppNow (1), SkipToThemeNext (4), SkipToThemeNow (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Default = None
    SkipAllNext = None
    SkipAllNow = None
    SkipToAppNext = None
    SkipToAppNow = None
    SkipToThemeNext = None
    SkipToThemeNow = None
    value__ = None


class Int32Rect(object, IFormattable):
    """
    Describes the width, height, and location of an integer rectangle.
    
    Int32Rect(x: int, y: int, width: int, height: int)
    """
    @staticmethod
    def Equals(*__args):
        """
        Equals(self: Int32Rect, value: Int32Rect) -> bool
        
            Determines whether the specified rectangle is equal to this rectangle.
        
            value: The rectangle to compare to the current rectangle.
            Returns: true if both rectangles have the same System.Windows.Int32Rect.X, 
             System.Windows.Int32Rect.Y, System.Windows.Int32Rect.Width, and 
             System.Windows.Int32Rect.Height as this rectangle; otherwise, false.
        
        Equals(self: Int32Rect, o: object) -> bool
        
            Determines whether the specified rectangle is equal to this rectangle.
        
            o: The object to compare to the current rectangle.
            Returns: true if o is an System.Windows.Int32Rect and the same 
             System.Windows.Int32Rect.X, System.Windows.Int32Rect.Y, 
             System.Windows.Int32Rect.Width, and System.Windows.Int32Rect.Height as this 
             rectangle; otherwise, false.
        
        Equals(int32Rect1: Int32Rect, int32Rect2: Int32Rect) -> bool
        
            Determines whether the specified rectangles are equal.
        
            int32Rect1: The first rectangle to compare.
            int32Rect2: The second rectangle to compare.
            Returns: true if int32Rect1 and int32Rect2 have the same System.Windows.Int32Rect.X, 
             System.Windows.Int32Rect.Y, System.Windows.Int32Rect.Width, and 
             System.Windows.Int32Rect.Height; otherwise, false.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: Int32Rect) -> int
        
            Creates a hash code from this rectangle's System.Windows.Int32Rect.X, 
             System.Windows.Int32Rect.Y, System.Windows.Int32Rect.Width, and 
             System.Windows.Int32Rect.Height values.
        
            Returns: This rectangle's hash code.
        """
        pass

    @staticmethod
    def Parse(source):
        """
        Parse(source: str) -> Int32Rect
        
            Creates an System.Windows.Int32Rect structure from the specified System.String 
             representation.
        
        
            source: A string representation of an System.Windows.Int32Rect.
            Returns: The equivalent System.Windows.Int32Rect structure.
        """
        pass

    def ToString(self, provider=None):
        """
        ToString(self: Int32Rect, provider: IFormatProvider) -> str
        
            Creates a string representation of this System.Windows.Int32Rect based on the 
             supplied System.IFormatProvider.
        
        
            provider: The format provider to use. If provider is null, the current culture is used.
            Returns: A string representation of this instance of System.Windows.Int32Rect.
        ToString(self: Int32Rect) -> str
        
            Creates a string representation of this System.Windows.Int32Rect.
            Returns: A string containing the same System.Windows.Int32Rect.X, 
             System.Windows.Int32Rect.Y, System.Windows.Int32Rect.Width, and 
             System.Windows.Int32Rect.Height values of this System.Windows.Int32Rect 
             structure.
        """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, x, y, width, height):
        """
        __new__(cls: type, x: int, y: int, width: int, height: int)
        __new__[Int32Rect]() -> Int32Rect
        """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    HasArea = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasArea(self: Int32Rect) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the height of the rectangle.

Get: Height(self: Int32Rect) -> int

Set: Height(self: Int32Rect) = value
"""

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether the rectangle is empty.

Get: IsEmpty(self: Int32Rect) -> bool

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the width of the rectangle.

Get: Width(self: Int32Rect) -> int

Set: Width(self: Int32Rect) = value
"""

    X = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the x-coordinate of the top-left corner of the rectangle.

Get: X(self: Int32Rect) -> int

Set: X(self: Int32Rect) = value
"""

    Y = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the y-coordinate of the top-left corner of the rectangle.

Get: Y(self: Int32Rect) -> int

Set: Y(self: Int32Rect) = value
"""


    Empty = None


class Int32RectConverter(TypeConverter):
    """
    Converts instances of other types to and from an System.Windows.Int32Rect.
    
    Int32RectConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: Int32RectConverter, context: ITypeDescriptorContext, sourceType: Type) -> bool
        
            Determines whether an object can be converted from a given type to an instance 
             of an System.Windows.Int32Rect.
        
        
            context: Describes the context information of a type.
            sourceType: The type of the source that is being evaluated for conversion.
            Returns: true if the type can be converted to an System.Windows.Int32Rect; otherwise, 
             false.
        """
        pass

    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: Int32RectConverter, context: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Determines whether an instance of an System.Windows.Int32Rect can be converted 
             to a different type.
        
        
            context: Describes the context information of a type.
            destinationType: The desired type this System.Windows.Int32Rect is being evaluated for 
             conversion.
        
            Returns: true if this System.Windows.Int32Rect can be converted to destinationType; 
             otherwise, false.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: Int32RectConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object) -> object
        
            Attempts to convert the specified type to an System.Windows.Int32Rect.
        
            context: Provides contextual information required for conversion.
            culture: Cultural information to respect during conversion.
            value: The object being converted.
            Returns: The System.Windows.Int32Rect created from converting value.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: Int32RectConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object, destinationType: Type) -> object
        
            Attempts to convert an System.Windows.Int32Rect to a specified type.
        
            context: Provides contextual information required for conversion.
            culture: Cultural information to respect during conversion.
            value: The System.Windows.Int32Rect to convert.
            destinationType: The type to convert this System.Windows.Int32Rect to.
            Returns: The object created from converting this System.Windows.Int32Rect.
        """
        pass


class IWeakEventListener:
    """ Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a System.Windows.WeakEventManager. """
    def ReceiveWeakEvent(self, managerType, sender, e):
        """
        ReceiveWeakEvent(self: IWeakEventListener, managerType: Type, sender: object, e: EventArgs) -> bool
        
            Receives events from the centralized event manager.
        
            managerType: The type of the System.Windows.WeakEventManager calling this method.
            sender: Object that originated the event.
            e: Event data.
            Returns: true if the listener handled the event. It is considered an error by the 
             System.Windows.WeakEventManager handling in WPF�to register a listener for an 
             event that the listener does not handle. Regardless, the method should return 
             false if it receives an event that it does not recognize or handle.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class KeySplineConverter(TypeConverter):
    """
    Converts instances of other types to and from a System.Windows.Media.Animation.KeySpline.
    
    KeySplineConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: KeySplineConverter, typeDescriptor: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Determines whether an object can be converted from a given type to an instance 
             of a System.Windows.Media.Animation.KeySpline.
        
        
            typeDescriptor: Describes the context information of a type.
            destinationType: The type of the source that is being evaluated for conversion.
            Returns: true if the type can be converted to a 
             System.Windows.Media.Animation.KeySpline; otherwise, false.
        """
        pass

    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: KeySplineConverter, context: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Determines whether an instance of a System.Windows.Media.Animation.KeySpline 
             can be converted to a different type.
        
        
            context: Describes the context information of a type.
            destinationType: The desired type this System.Windows.Media.Animation.KeySpline is being 
             evaluated for conversion.
        
            Returns: true if this System.Windows.Media.Animation.KeySpline can be converted to 
             destinationType; otherwise, false.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: KeySplineConverter, context: ITypeDescriptorContext, cultureInfo: CultureInfo, value: object) -> object
        
            Attempts to convert the specified object to a 
             System.Windows.Media.Animation.KeySpline.
        
        
            context: Provides contextual information required for conversion.
            cultureInfo: Cultural information to respect during conversion.
            value: The object being converted.
            Returns: The System.Windows.Media.Animation.KeySpline created from converting value.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: KeySplineConverter, context: ITypeDescriptorContext, cultureInfo: CultureInfo, value: object, destinationType: Type) -> object
        
            Attempts to convert a System.Windows.Media.Animation.KeySpline to a specified 
             type.
        
        
            context: Provides contextual information required for conversion.
            cultureInfo: Cultural information to respect during conversion.
            value: The System.Windows.Media.Animation.KeySpline to convert.
            destinationType: The type to convert this System.Windows.Media.Animation.KeySpline to.
            Returns: The object created from converting this 
             System.Windows.Media.Animation.KeySpline.
        """
        pass


class KeyTimeConverter(TypeConverter):
    """
    Converts instances of System.Windows.Media.Animation.KeyTime to and from other types.
    
    KeyTimeConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: KeyTimeConverter, typeDescriptorContext: ITypeDescriptorContext, type: Type) -> bool
        
            Determines whether an object can be converted from a given type to an instance 
             of a System.Windows.Media.Animation.KeyTime.
        
        
            typeDescriptorContext: Contextual information required for conversion.
            type: Type being evaluated for conversion.
            Returns: true if this type can be converted; otherwise, false.
        """
        pass

    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: KeyTimeConverter, typeDescriptorContext: ITypeDescriptorContext, type: Type) -> bool
        
            Determines if a given type can be converted to an instance of 
             System.Windows.Media.Animation.KeyTime.
        
        
            typeDescriptorContext: Contextual information required for conversion.
            type: Type being evaluated for conversion.
            Returns: true if this type can be converted; otherwise, false.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: KeyTimeConverter, typeDescriptorContext: ITypeDescriptorContext, cultureInfo: CultureInfo, value: object) -> object
        
            Attempts to convert a given object to an instance of 
             System.Windows.Media.Animation.KeyTime.
        
        
            typeDescriptorContext: Context information required for conversion.
            cultureInfo: Cultural information that is respected during conversion.
            value: The object being converted to an instance of 
             System.Windows.Media.Animation.KeyTime.
        
            Returns: A new instance of System.Windows.Media.Animation.KeyTime, based on the supplied 
             value.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: KeyTimeConverter, typeDescriptorContext: ITypeDescriptorContext, cultureInfo: CultureInfo, value: object, destinationType: Type) -> object
        
            Attempts to convert an instance of System.Windows.Media.Animation.KeyTime to 
             another type.
        
        
            typeDescriptorContext: Context information required for conversion.
            cultureInfo: Cultural information that is respected during conversion.
            value: System.Windows.Media.Animation.KeyTime value to convert from.
            destinationType: Type being evaluated for conversion.
            Returns: A new object, based on value.
        """
        pass


class LengthConverter(TypeConverter):
    """
    Converts instances of other types to and from instances of a System.Double that represent an object's length.
    
    LengthConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: LengthConverter, typeDescriptorContext: ITypeDescriptorContext, sourceType: Type) -> bool
        
            Determines whether conversion is possible from a specified type to a 
             System.Double that represents an object's length.
        
        
            typeDescriptorContext: Provides contextual information about a component.
            sourceType: Identifies the data type to evaluate for conversion.
            Returns: true if conversion is possible; otherwise, false.
        """
        pass

    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: LengthConverter, typeDescriptorContext: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Determines whether conversion is possible to a specified type from a 
             System.Double that represents an object's length.
        
        
            typeDescriptorContext: Provides contextual information about a component.
            destinationType: Identifies the data type to evaluate for conversion.
            Returns: true if conversion to the destinationType is possible; otherwise, false.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: LengthConverter, typeDescriptorContext: ITypeDescriptorContext, cultureInfo: CultureInfo, source: object) -> object
        
            Converts instances of other data types into instances of System.Double that 
             represent an object's length.
        
        
            typeDescriptorContext: Provides contextual information about a component.
            cultureInfo: Represents culture-specific information that is maintained during a conversion.
            source: Identifies the object that is being converted to System.Double.
            Returns: An instance of System.Double that is the value of the conversion.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: LengthConverter, typeDescriptorContext: ITypeDescriptorContext, cultureInfo: CultureInfo, value: object, destinationType: Type) -> object
        
            Converts other types into instances of System.Double that represent an object's 
             length.
        
        
            typeDescriptorContext: Describes context information of a component, such as its container and 
             System.ComponentModel.PropertyDescriptor.
        
            cultureInfo: Identifies culture-specific information, including the writing system and the 
             calendar that is used.
        
            value: Identifies the System.Object that is being converted.
            destinationType: The data type that this instance of System.Double is being converted to.
            Returns: A new System.Object that is the value of the conversion.
        """
        pass


class LineBreakCondition(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes the breaking condition around an inline object.
    
    enum LineBreakCondition, values: BreakAlways (3), BreakDesired (0), BreakPossible (1), BreakRestrained (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    BreakAlways = None
    BreakDesired = None
    BreakPossible = None
    BreakRestrained = None
    value__ = None


class LineStackingStrategy(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes a mechanism by which a line box is determined for each line.
    
    enum LineStackingStrategy, values: BlockLineHeight (0), MaxHeight (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    BlockLineHeight = None
    MaxHeight = None
    value__ = None


class LocalizabilityAttribute(Attribute, _Attribute):
    """
    Specifies the localization attributes for a binary XAML (BAML) class or class member.
    
    LocalizabilityAttribute(category: LocalizationCategory)
    """
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, category):
        """ __new__(cls: type, category: LocalizationCategory) """
        pass

    Category = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the category setting of the localization attribute's targeted value.

Get: Category(self: LocalizabilityAttribute) -> LocalizationCategory

"""

    Modifiability = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the modifiability setting of the localization attribute's targeted value.

Get: Modifiability(self: LocalizabilityAttribute) -> Modifiability

Set: Modifiability(self: LocalizabilityAttribute) = value
"""

    Readability = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the readability setting of the localization attribute's targeted value.

Get: Readability(self: LocalizabilityAttribute) -> Readability

Set: Readability(self: LocalizabilityAttribute) = value
"""



class Localization(object):
    """ The System.Windows.Localization class defines attached properties for localization attributes and comments. """
    @staticmethod
    def GetAttributes(element):
        """
        GetAttributes(element: object) -> str
        
            Gets the value of the System.Windows.Localization.AttributesProperty attached 
             property from a specified element.
        
        
            element: A System.Object that represents the element whose attached property you want to 
             retrieve.
        
            Returns: A System.String value that represents the localization attribute.
        """
        pass

    @staticmethod
    def GetComments(element):
        """
        GetComments(element: object) -> str
        
            Gets the value of the System.Windows.Localization.CommentsProperty attached 
             property from a specified element.
        
        
            element: A System.Object that represents the element whose attached property you want to 
             retrieve.
        
            Returns: A System.String value that represents the localization comment.
        """
        pass

    @staticmethod
    def SetAttributes(element, attributes):
        """
        SetAttributes(element: object, attributes: str)
            Sets the System.Windows.Localization.AttributesProperty attached property for 
             the specified element.
        
        
            element: A System.Object that represents the element whose attached property you want to 
             set.
        
            attributes: A System.String that specifies the localization attributes.
        """
        pass

    @staticmethod
    def SetComments(element, comments):
        """
        SetComments(element: object, comments: str)
            Sets the System.Windows.Localization.CommentsProperty attached property to the 
             specified element.
        
        
            element: A System.Object that represents the element whose attached property you want to 
             set.
        
            comments: A System.String that specifies the localization comments.
        """
        pass

    AttributesProperty = None
    CommentsProperty = None
    __all__ = [
        'AttributesProperty',
        'CommentsProperty',
        'GetAttributes',
        'GetComments',
        'SetAttributes',
        'SetComments',
    ]


class LocalizationCategory(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies the category value of a System.Windows.LocalizabilityAttribute for a binary XAML (BAML) class or class member.
    
    enum LocalizationCategory, values: Button (4), CheckBox (5), ComboBox (6), Font (14), Hyperlink (11), Ignore (16), Inherit (15), Label (3), ListBox (7), Menu (8), NeverLocalize (17), None (0), RadioButton (9), Text (1), TextFlow (12), Title (2), ToolTip (10), XmlData (13)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Button = None
    CheckBox = None
    ComboBox = None
    Font = None
    Hyperlink = None
    Ignore = None
    Inherit = None
    Label = None
    ListBox = None
    Menu = None
    NeverLocalize = None
    None = None
    RadioButton = None
    Text = None
    TextFlow = None
    Title = None
    ToolTip = None
    value__ = None
    XmlData = None


class LocalValueEntry(object):
    """ Represents a property identifier and the property value for a locally set dependency property. """
    def Equals(self, obj):
        """
        Equals(self: LocalValueEntry, obj: object) -> bool
        
            Determines whether two System.Windows.LocalValueEntry instances are equal.
        
            obj: The System.Windows.LocalValueEntry to compare with the current 
             System.Windows.LocalValueEntry.
        
            Returns: This 
             System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System
             .Windows.LocalValueEntry) implementation compares the values of the 
             System.Windows.LocalValueEntry.Property, and potentially compares the values of 
             System.Windows.LocalValueEntry.Value. The 
             System.Windows.LocalValueEntry.Property component of a 
             System.Windows.LocalValueEntry is a value type, so will always be a bitwise 
             comparison. For the System.Windows.LocalValueEntry.Value component, this 
             implementation employs a bitwise comparison if it is a value type. For locally 
             set properties that have reference types, the behavior is deferred to that 
             type's equality determination mechanisms, because it just uses the == operator 
             on the two values internally. By default, this would be a reference equality of 
             the values and thus the equality of the entire System.Windows.LocalValueEntry 
             would become a reference equality.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: LocalValueEntry) -> int
        
            Returns the hash code for this System.Windows.LocalValueEntry.
            Returns: A signed 32-bit integer value.
        """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    Property = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the identifier for the locally set dependency property that is represented by this entry.

Get: Property(self: LocalValueEntry) -> DependencyProperty

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the value of the locally set dependency property.

Get: Value(self: LocalValueEntry) -> object

"""



class LocalValueEnumerator(object, IEnumerator):
    """ Provides enumeration support for the local values of any dependency properties that exist on a System.Windows.DependencyObject. """
    def Equals(self, obj):
        """
        Equals(self: LocalValueEnumerator, obj: object) -> bool
        
            Determines whether the provided System.Windows.LocalValueEnumerator is 
             equivalent to this System.Windows.LocalValueEnumerator.
        
        
            obj: The System.Windows.LocalValueEnumerator to compare with the current 
             System.Windows.LocalValueEnumerator.
        
            Returns: true if the specified System.Windows.LocalValueEnumerator is equal to the 
             current System.Windows.LocalValueEnumerator; otherwise, false.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: LocalValueEnumerator) -> int
        
            Returns a hash code for the current System.Windows.LocalValueEnumerator.
            Returns: A 32-bit integer hash code.
        """
        pass

    def MoveNext(self):
        """
        MoveNext(self: LocalValueEnumerator) -> bool
        
            Advances the enumerator to the next element of the collection.
            Returns: true if the enumerator was successfully advanced to the next element; false if 
             the enumerator has passed the end of the collection.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def Reset(self):
        """
        Reset(self: LocalValueEnumerator)
            Sets the enumerator to its initial position, which is before the first element 
             in the collection.
        """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the number of items that are represented in the collection.

Get: Count(self: LocalValueEnumerator) -> int

"""

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the current element in the collection.

Get: Current(self: LocalValueEnumerator) -> LocalValueEntry

"""



class LogicalTreeHelper(object):
    """ Provides static helper methods for querying objects in the logical tree. """
    @staticmethod
    def BringIntoView(current):
        """
        BringIntoView(current: DependencyObject)
            Attempts to bring the requested UI element into view and raises the 
             System.Windows.FrameworkElement.RequestBringIntoView event on the target in 
             order to report the results.
        
        
            current: The UI element to bring into view.
        """
        pass

    @staticmethod
    def FindLogicalNode(logicalTreeNode, elementName):
        """
        FindLogicalNode(logicalTreeNode: DependencyObject, elementName: str) -> DependencyObject
        
            Attempts to find and return an object that has the specified name. The search 
             starts from the specified object and continues into subnodes of the logical 
             tree.
        
        
            logicalTreeNode: The object to start searching from. This object must be either a 
             System.Windows.FrameworkElement or a System.Windows.FrameworkContentElement.
        
            elementName: The name of the object to find.
            Returns: The object with the matching name, if one is found; returns null if no matching 
             name was found in the logical tree.
        """
        pass

    @staticmethod
    def GetChildren(current):
        """
        GetChildren(current: FrameworkContentElement) -> IEnumerable
        
            Returns the collection of immediate child objects of the specified 
             System.Windows.FrameworkContentElement by processing the logical tree.
        
        
            current: The object from which to start processing the logical tree.
            Returns: The enumerable collection of immediate child objects starting from current in 
             the logical tree.
        
        GetChildren(current: FrameworkElement) -> IEnumerable
        
            Returns the collection of immediate child objects of the specified 
             System.Windows.FrameworkElement by processing the logical tree.
        
        
            current: The object from which to start processing the logical tree.
            Returns: The enumerable collection of immediate child objects starting from current in 
             the logical tree.
        
        GetChildren(current: DependencyObject) -> IEnumerable
        
            Returns the collection of immediate child objects of the specified object, by 
             processing the logical tree.
        
        
            current: The object from which to start processing the logical tree. This is expected to 
             be either a System.Windows.FrameworkElement or 
             System.Windows.FrameworkContentElement.
        
            Returns: The enumerable collection of immediate child objects from the logical tree of 
             the specified object.
        """
        pass

    @staticmethod
    def GetParent(current):
        """
        GetParent(current: DependencyObject) -> DependencyObject
        
            Returns the parent object of the specified object by processing the logical 
             tree.
        
        
            current: The object to find the parent object for. This is expected to be either a 
             System.Windows.FrameworkElement or a System.Windows.FrameworkContentElement.
        
            Returns: The requested parent object.
        """
        pass

    __all__ = [
        'BringIntoView',
        'FindLogicalNode',
        'GetChildren',
        'GetParent',
    ]


class LostFocusEventManager(WeakEventManager):
    """ Provides a System.Windows.WeakEventManager implementation so that you can use the "weak event listener" pattern to attach listeners for the System.Windows.UIElement.LostFocus or System.Windows.ContentElement.LostFocus events. """
    @staticmethod
    def AddHandler(source, handler):
        """ AddHandler(source: DependencyObject, handler: EventHandler[RoutedEventArgs]) """
        pass

    @staticmethod
    def AddListener(source, listener):
        """
        AddListener(source: DependencyObject, listener: IWeakEventListener)
            Adds the provided listener to the list of listeners on the provided source.
        
            source: The object with the event.
            listener: The object to add as a listener.
        """
        pass

    @staticmethod
    def RemoveHandler(source, handler):
        """ RemoveHandler(source: DependencyObject, handler: EventHandler[RoutedEventArgs]) """
        pass

    @staticmethod
    def RemoveListener(source, listener):
        """
        RemoveListener(source: DependencyObject, listener: IWeakEventListener)
            Removes the specified listener from the list of listeners on the provided 
             source.
        
        
            source: The object to remove the listener from.
            listener: The listener to remove.
        """
        pass

    ReadLock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Establishes a read-lock on the underlying data table, and returns an System.IDisposable.

"""

    WriteLock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Establishes a write-lock on the underlying data table, and returns an System.IDisposable.

"""



class MediaScriptCommandRoutedEventArgs(RoutedEventArgs):
    """ Provides data for the System.Windows.Controls.MediaElement.ScriptCommand and System.Windows.Media.MediaPlayer.ScriptCommand events. """
    ParameterType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the type of script command that was raised.

Get: ParameterType(self: MediaScriptCommandRoutedEventArgs) -> str

"""

    ParameterValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the arguments associated with the script command type.

Get: ParameterValue(self: MediaScriptCommandRoutedEventArgs) -> str

"""



class MessageBox(object):
    """ Displays a message box. """
    @staticmethod
    def Show(*__args):
        """
        Show(owner: Window, messageBoxText: str, caption: str, button: MessageBoxButton, icon: MessageBoxImage) -> MessageBoxResult
        
            Displays a message box in front of the specified window. The message box 
             displays a message, title bar caption, button, and icon; and it also returns a 
             result.
        
        
            owner: A System.Windows.Window that represents the owner window of the message box.
            messageBoxText: A System.String that specifies the text to display.
            caption: A System.String that specifies the title bar caption to display.
            button: A System.Windows.MessageBoxButton value that specifies which button or buttons 
             to display.
        
            icon: A System.Windows.MessageBoxImage value that specifies the icon to display.
            Returns: A System.Windows.MessageBoxResult value that specifies which message box button 
             is clicked by the user.
        
        Show(owner: Window, messageBoxText: str, caption: str, button: MessageBoxButton, icon: MessageBoxImage, defaultResult: MessageBoxResult) -> MessageBoxResult
        
            Displays a message box in front of the specified window. The message box 
             displays a message, title bar caption, button, and icon; and accepts a default 
             message box result and returns a result.
        
        
            owner: A System.Windows.Window that represents the owner window of the message box.
            messageBoxText: A System.String that specifies the text to display.
            caption: A System.String that specifies the title bar caption to display.
            button: A System.Windows.MessageBoxButton value that specifies which button or buttons 
             to display.
        
            icon: A System.Windows.MessageBoxImage value that specifies the icon to display.
            defaultResult: A System.Windows.MessageBoxResult value that specifies the default result of 
             the message box.
        
            Returns: A System.Windows.MessageBoxResult value that specifies which message box button 
             is clicked by the user.
        
        Show(owner: Window, messageBoxText: str, caption: str, button: MessageBoxButton, icon: MessageBoxImage, defaultResult: MessageBoxResult, options: MessageBoxOptions) -> MessageBoxResult
        
            Displays a message box in front of the specified window. The message box 
             displays a message, title bar caption, button, and icon; and accepts a default 
             message box result, complies with the specified options, and returns a result.
        
        
            owner: A System.Windows.Window that represents the owner window of the message box.
            messageBoxText: A System.String that specifies the text to display.
            caption: A System.String that specifies the title bar caption to display.
            button: A System.Windows.MessageBoxButton value that specifies which button or buttons 
             to display.
        
            icon: A System.Windows.MessageBoxImage value that specifies the icon to display.
            defaultResult: A System.Windows.MessageBoxResult value that specifies the default result of 
             the message box.
        
            options: A System.Windows.MessageBoxOptions value object that specifies the options.
            Returns: A System.Windows.MessageBoxResult value that specifies which message box button 
             is clicked by the user.
        
        Show(owner: Window, messageBoxText: str) -> MessageBoxResult
        
            Displays a message box in front of the specified window. The message box 
             displays a message and returns a result.
        
        
            owner: A System.Windows.Window that represents the owner window of the message box.
            messageBoxText: A System.String that specifies the text to display.
            Returns: A System.Windows.MessageBoxResult value that specifies which message box button 
             is clicked by the user.
        
        Show(owner: Window, messageBoxText: str, caption: str) -> MessageBoxResult
        
            Displays a message box in front of the specified window. The message box 
             displays a message and title bar caption; and it returns a result.
        
        
            owner: A System.Windows.Window that represents the owner window of the message box.
            messageBoxText: A System.String that specifies the text to display.
            caption: A System.String that specifies the title bar caption to display.
            Returns: A System.Windows.MessageBoxResult value that specifies which message box button 
             is clicked by the user.
        
        Show(owner: Window, messageBoxText: str, caption: str, button: MessageBoxButton) -> MessageBoxResult
        
            Displays a message box in front of the specified window. The message box 
             displays a message, title bar caption, and button; and it also returns a 
             result.
        
        
            owner: A System.Windows.Window that represents the owner window of the message box.
            messageBoxText: A System.String that specifies the text to display.
            caption: A System.String that specifies the title bar caption to display.
            button: A System.Windows.MessageBoxButton value that specifies which button or buttons 
             to display.
        
            Returns: A System.Windows.MessageBoxResult value that specifies which message box button 
             is clicked by the user.
        
        Show(messageBoxText: str, caption: str, button: MessageBoxButton, icon: MessageBoxImage) -> MessageBoxResult
        
            Displays a message box that has a message, title bar caption, button, and icon; 
             and that returns a result.
        
        
            messageBoxText: A System.String that specifies the text to display.
            caption: A System.String that specifies the title bar caption to display.
            button: A System.Windows.MessageBoxButton value that specifies which button or buttons 
             to display.
        
            icon: A System.Windows.MessageBoxImage value that specifies the icon to display.
            Returns: A System.Windows.MessageBoxResult value that specifies which message box button 
             is clicked by the user.
        
        Show(messageBoxText: str, caption: str, button: MessageBoxButton, icon: MessageBoxImage, defaultResult: MessageBoxResult) -> MessageBoxResult
        
            Displays a message box that has a message, title bar caption, button, and icon; 
             and that accepts a default message box result and returns a result.
        
        
            messageBoxText: A System.String that specifies the text to display.
            caption: A System.String that specifies the title bar caption to display.
            button: A System.Windows.MessageBoxButton value that specifies which button or buttons 
             to display.
        
            icon: A System.Windows.MessageBoxImage value that specifies the icon to display.
            defaultResult: A System.Windows.MessageBoxResult value that specifies the default result of 
             the message box.
        
            Returns: A System.Windows.MessageBoxResult value that specifies which message box button 
             is clicked by the user.
        
        Show(messageBoxText: str, caption: str, button: MessageBoxButton, icon: MessageBoxImage, defaultResult: MessageBoxResult, options: MessageBoxOptions) -> MessageBoxResult
        
            Displays a message box that has a message, title bar caption, button, and icon; 
             and that accepts a default message box result, complies with the specified 
             options, and returns a result.
        
        
            messageBoxText: A System.String that specifies the text to display.
            caption: A System.String that specifies the title bar caption to display.
            button: A System.Windows.MessageBoxButton value that specifies which button or buttons 
             to display.
        
            icon: A System.Windows.MessageBoxImage value that specifies the icon to display.
            defaultResult: A System.Windows.MessageBoxResult value that specifies the default result of 
             the message box.
        
            options: A System.Windows.MessageBoxOptions value object that specifies the options.
            Returns: A System.Windows.MessageBoxResult value that specifies which message box button 
             is clicked by the user.
        
        Show(messageBoxText: str) -> MessageBoxResult
        
            Displays a message box that has a message and that returns a result.
        
            messageBoxText: A System.String that specifies the text to display.
            Returns: A System.Windows.MessageBoxResult value that specifies which message box button 
             is clicked by the user.
        
        Show(messageBoxText: str, caption: str) -> MessageBoxResult
        
            Displays a message box that has a message and title bar caption; and that 
             returns a result.
        
        
            messageBoxText: A System.String that specifies the text to display.
            caption: A System.String that specifies the title bar caption to display.
            Returns: A System.Windows.MessageBoxResult value that specifies which message box button 
             is clicked by the user.
        
        Show(messageBoxText: str, caption: str, button: MessageBoxButton) -> MessageBoxResult
        
            Displays a message box that has a message, title bar caption, and button; and 
             that returns a result.
        
        
            messageBoxText: A System.String that specifies the text to display.
            caption: A System.String that specifies the title bar caption to display.
            button: A System.Windows.MessageBoxButton value that specifies which button or buttons 
             to display.
        
            Returns: A System.Windows.MessageBoxResult value that specifies which message box button 
             is clicked by the user.
        """
        pass


class MessageBoxButton(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies the buttons that are displayed on a message box. Used as an argument of the erload:System.Windows.MessageBox.Show method.
    
    enum MessageBoxButton, values: OK (0), OKCancel (1), YesNo (4), YesNoCancel (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    OK = None
    OKCancel = None
    value__ = None
    YesNo = None
    YesNoCancel = None


class MessageBoxImage(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies the icon that is displayed by a message box.
    
    enum MessageBoxImage, values: Asterisk (64), Error (16), Exclamation (48), Hand (16), Information (64), None (0), Question (32), Stop (16), Warning (48)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Asterisk = None
    Error = None
    Exclamation = None
    Hand = None
    Information = None
    None = None
    Question = None
    Stop = None
    value__ = None
    Warning = None


class MessageBoxOptions(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies special display options for a message box.
    
    enum (flags) MessageBoxOptions, values: DefaultDesktopOnly (131072), None (0), RightAlign (524288), RtlReading (1048576), ServiceNotification (2097152)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    DefaultDesktopOnly = None
    None = None
    RightAlign = None
    RtlReading = None
    ServiceNotification = None
    value__ = None


class MessageBoxResult(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies which message box button that a user clicks. System.Windows.MessageBoxResult is returned by the erload:System.Windows.MessageBox.Show method.
    
    enum MessageBoxResult, values: Cancel (2), No (7), None (0), OK (1), Yes (6)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Cancel = None
    No = None
    None = None
    OK = None
    value__ = None
    Yes = None


class Modifiability(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies the modifiability value of a System.Windows.LocalizabilityAttribute for a binary XAML (BAML) class or class member.
    
    enum Modifiability, values: Inherit (2), Modifiable (1), Unmodifiable (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Inherit = None
    Modifiable = None
    Unmodifiable = None
    value__ = None


class MultiDataTrigger(TriggerBase, IAddChild):
    """
    Represents a trigger that applies property values or performs actions when the bound data meet a set of conditions.
    
    MultiDataTrigger()
    """
    def OnPropertyChanged(self, *args): #cannot find CLR method
        """
        OnPropertyChanged(self: DependencyObject, e: DependencyPropertyChangedEventArgs)
            Invoked whenever the effective value of any dependency property on this 
             System.Windows.DependencyObject has been updated. The specific dependency 
             property that changed is reported in the event data.
        
        
            e: Event data that will contain the dependency property identifier of interest, 
             the property metadata for the type, and old and new values.
        
        OnPropertyChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def ShouldSerializeProperty(self, *args): #cannot find CLR method
        """
        ShouldSerializeProperty(self: DependencyObject, dp: DependencyProperty) -> bool
        
            Returns a value that indicates whether serialization processes should serialize 
             the value for the provided dependency property.
        
        
            dp: The identifier for the dependency property that should be serialized.
            Returns: true if the dependency property that is supplied should be value-serialized; 
             otherwise, false.
        
        ShouldSerializeProperty(self: Window_16$17, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Label_17$18, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: TextBox_18$19, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Button_19$20, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: CheckBox_20$21, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: ComboBox_21$22, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Separator_22$23, dp: DependencyProperty) -> bool
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Conditions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of System.Windows.Condition objects. Changes to property values are applied when all the conditions in the collection are met.

Get: Conditions(self: MultiDataTrigger) -> ConditionCollection

"""

    Setters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of System.Windows.Setter objects that describe the property values to apply when all the conditions of the System.Windows.MultiDataTrigger are met.

Get: Setters(self: MultiDataTrigger) -> SetterBaseCollection

"""



class MultiTrigger(TriggerBase, IAddChild):
    """
    Represents a trigger that applies property values or performs actions when a set of conditions are satisfied.
    
    MultiTrigger()
    """
    def OnPropertyChanged(self, *args): #cannot find CLR method
        """
        OnPropertyChanged(self: DependencyObject, e: DependencyPropertyChangedEventArgs)
            Invoked whenever the effective value of any dependency property on this 
             System.Windows.DependencyObject has been updated. The specific dependency 
             property that changed is reported in the event data.
        
        
            e: Event data that will contain the dependency property identifier of interest, 
             the property metadata for the type, and old and new values.
        
        OnPropertyChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def ShouldSerializeProperty(self, *args): #cannot find CLR method
        """
        ShouldSerializeProperty(self: DependencyObject, dp: DependencyProperty) -> bool
        
            Returns a value that indicates whether serialization processes should serialize 
             the value for the provided dependency property.
        
        
            dp: The identifier for the dependency property that should be serialized.
            Returns: true if the dependency property that is supplied should be value-serialized; 
             otherwise, false.
        
        ShouldSerializeProperty(self: Window_16$17, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Label_17$18, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: TextBox_18$19, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Button_19$20, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: CheckBox_20$21, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: ComboBox_21$22, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Separator_22$23, dp: DependencyProperty) -> bool
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Conditions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of System.Windows.Condition objects. Changes to property values are applied when all of the conditions in the collection are met.

Get: Conditions(self: MultiTrigger) -> ConditionCollection

"""

    Setters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of System.Windows.Setter objects, which describe the property values to apply when all of the conditions of the System.Windows.MultiTrigger are met.

Get: Setters(self: MultiTrigger) -> SetterBaseCollection

"""



class NameScope(object, INameScopeDictionary, INameScope, IDictionary[str, object], ICollection[KeyValuePair[str, object]], IEnumerable[KeyValuePair[str, object]], IEnumerable):
    """
    Implements base WPF support for the System.Windows.Markup.INameScope methods that store or retrieve name-object mappings into a particular XAML namescope. Adds attached property support to make it simpler to get or set XAML namescope names dynamically at the element level..
    
    NameScope()
    """
    def Add(self, *__args):
        """
        Add(self: NameScope, key: str, value: object)
            Adds an item to the collection.
        
            key: The string key, which is the name of the XAML namescope mapping to add.
            value: The object value, which is the object reference of the XAML namescope mapping 
             to add.
        
        Add(self: NameScope, item: KeyValuePair[str, object])
        """
        pass

    def Clear(self):
        """
        Clear(self: NameScope)
            Removes all items from the collection.
        """
        pass

    def Contains(self, item):
        """ Contains(self: NameScope, item: KeyValuePair[str, object]) -> bool """
        pass

    def ContainsKey(self, key):
        """
        ContainsKey(self: NameScope, key: str) -> bool
        
            Returns whether a provided name already exists in this System.Windows.NameScope.
        
            key: The string key to find.
            Returns: true if the specified key identifies a name for an existing mapping in this 
             System.Windows.NameScope. false if the specified key does not exist in the 
             current System.Windows.NameScope.
        """
        pass

    def CopyTo(self, array, arrayIndex):
        """ CopyTo(self: NameScope, array: Array[KeyValuePair[str, object]], arrayIndex: int) """
        pass

    def FindName(self, name):
        """
        FindName(self: NameScope, name: str) -> object
        
            Returns the corresponding object in the XAML namescope maintained by this 
             System.Windows.NameScope, based on a provided name string.
        
        
            name: Name portion of an existing mapping to retrieve the object portion for.
            Returns: The requested object that is mapped with name. Can return null if name was 
             provided as null or empty string, or if no matching object was found.
        """
        pass

    @staticmethod
    def GetNameScope(dependencyObject):
        """
        GetNameScope(dependencyObject: DependencyObject) -> INameScope
        
            Provides the attached property get accessor for the 
             System.Windows.NameScope.NameScope attached property.
        
        
            dependencyObject: The object to get the XAML namescope from.
            Returns: A XAML namescope, as an System.Windows.Markup.INameScope instance.
        """
        pass

    def RegisterName(self, name, scopedElement):
        """
        RegisterName(self: NameScope, name: str, scopedElement: object)
            Registers a new name-object pair into the current XAML namescope.
        
            name: The name to use for mapping the given object.
            scopedElement: The object to be mapped to the provided name.
        """
        pass

    def Remove(self, *__args):
        """
        Remove(self: NameScope, key: str) -> bool
        
            Removes a mapping for a specified name from the collection.
        
            key: The string key, which is the name of the XAML namescope mapping to remove.
            Returns: true if item was successfully removed from the collection, otherwise false. 
             Also returns false if the item was not found in the collection.
        
        Remove(self: NameScope, item: KeyValuePair[str, object]) -> bool
        """
        pass

    @staticmethod
    def SetNameScope(dependencyObject, value):
        """
        SetNameScope(dependencyObject: DependencyObject, value: INameScope)
            Provides the attached property set accessor for the 
             System.Windows.NameScope.NameScope attached property.
        
        
            dependencyObject: Object to change XAML namescope for.
            value: The new XAML namescope, using an interface cast.
        """
        pass

    def TryGetValue(self, key, value):
        """
        TryGetValue(self: NameScope, key: str) -> (bool, object)
        
            Gets the value associated with the specified key.
        
            key: The key of the value to get.
            Returns: true if the System.Windows.NameScope contains a mapping for the name provided 
             as key. Otherwise, false.
        """
        pass

    def UnregisterName(self, name):
        """
        UnregisterName(self: NameScope, name: str)
            Removes a name-object mapping from the XAML namescope.
        
            name: The name of the mapping to remove.
        """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+yx.__add__(y) <==> x+y """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__(self: IDictionary[str, object], key: str) -> bool """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __len__(self, *args): #cannot find CLR method
        """ x.__len__() <==> len(x) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of items in the collection of mapped names in this System.Windows.NameScope.

Get: Count(self: NameScope) -> int

"""

    IsReadOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether the collection is read-only.

Get: IsReadOnly(self: NameScope) -> bool

"""

    Keys = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of the keys in the System.Windows.NameScope dictionary.

Get: Keys(self: NameScope) -> ICollection[str]

"""

    Values = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of the values in the System.Windows.NameScope dictionary.

Get: Values(self: NameScope) -> ICollection[object]

"""


    NameScopeProperty = None


class NullableBoolConverter(NullableConverter):
    """
    Converts to and from the System.Nullable type (using the System.Boolean type constraint on the generic).
    
    NullableBoolConverter()
    """
    def GetStandardValues(self, context=None):
        """
        GetStandardValues(self: NullableBoolConverter, context: ITypeDescriptorContext) -> StandardValuesCollection
        
            Returns a collection of standard values for the data type that this type 
             converter is designed for.
        
        
            context: Provides contextual information about a component, such as its container and 
             property descriptor.
        
            Returns: A collection that holds a standard set of valid values. For this 
             implementation, those values are true, false, and null.
        """
        pass

    def GetStandardValuesExclusive(self, context=None):
        """
        GetStandardValuesExclusive(self: NullableBoolConverter, context: ITypeDescriptorContext) -> bool
        
            Returns whether the collection of standard values returned from 
             System.Windows.NullableBoolConverter.GetStandardValues(System.ComponentModel.ITy
             peDescriptorContext) is an exclusive list.
        
        
            context: Provides contextual information about a component, such as its container and 
             property descriptor.
        
            Returns: This implementation always returns true.
        """
        pass

    def GetStandardValuesSupported(self, context=None):
        """
        GetStandardValuesSupported(self: NullableBoolConverter, context: ITypeDescriptorContext) -> bool
        
            Returns whether this object supports a standard set of values that can be 
             picked from a list.
        
        
            context: Provides contextual information about a component, such as its container and 
             property descriptor.
        
            Returns: This implementation always returns true.
        """
        pass


class Point(object, IFormattable):
    """
    Represents an x- and y-coordinate pair in two-dimensional space.
    
    Point(x: float, y: float)
    """
    @staticmethod
    def Add(point, vector):
        """
        Add(point: Point, vector: Vector) -> Point
        
            Adds a System.Windows.Vector to a System.Windows.Point and returns the result 
             as a System.Windows.Point structure.
        
        
            point: The System.Windows.Point structure to add.
            vector: The System.Windows.Vector structure to add.
            Returns: Returns the sum of point and vector.
        """
        pass

    @staticmethod
    def Equals(*__args):
        """
        Equals(self: Point, value: Point) -> bool
        
            Compares two System.Windows.Point structures for equality.
        
            value: The point to compare to this instance.
            Returns: true if both System.Windows.Point structures contain the same 
             System.Windows.Point.X and System.Windows.Point.Y values; otherwise, false.
        
        Equals(self: Point, o: object) -> bool
        
            Determines whether the specified System.Object is a System.Windows.Point and 
             whether it contains the same coordinates as this System.Windows.Point.
        
        
            o: The System.Object to compare.
            Returns: true if o is a System.Windows.Point and contains the same 
             System.Windows.Point.X and System.Windows.Point.Y values as this 
             System.Windows.Point; otherwise, false.
        
        Equals(point1: Point, point2: Point) -> bool
        
            Compares two System.Windows.Point structures for equality.
        
            point1: The first point to compare.
            point2: The second point to compare.
            Returns: true if point1 and point2 contain the same System.Windows.Point.X and 
             System.Windows.Point.Y values; otherwise, false.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: Point) -> int
        
            Returns the hash code for this System.Windows.Point.
            Returns: The hash code for this System.Windows.Point structure.
        """
        pass

    @staticmethod
    def Multiply(point, matrix):
        """
        Multiply(point: Point, matrix: Matrix) -> Point
        
            Transforms the specified System.Windows.Point structure by the specified 
             System.Windows.Media.Matrix structure.
        
        
            point: The point to transform.
            matrix: The transformation matrix.
            Returns: The transformed point.
        """
        pass

    def Offset(self, offsetX, offsetY):
        """
        Offset(self: Point, offsetX: float, offsetY: float)
            Offsets a point's System.Windows.Point.X and System.Windows.Point.Y coordinates 
             by the specified amounts.
        
        
            offsetX: The amount to offset the point'sSystem.Windows.Point.X coordinate.
            offsetY: The amount to offset thepoint's System.Windows.Point.Y coordinate.
        """
        pass

    @staticmethod
    def Parse(source):
        """
        Parse(source: str) -> Point
        
            Constructs a System.Windows.Point from the specified System.String.
        
            source: A string representation of a point.
            Returns: The equivalent System.Windows.Point structure.
        """
        pass

    @staticmethod
    def Subtract(*__args):
        """
        Subtract(point1: Point, point2: Point) -> Vector
        
            Subtracts the specified System.Windows.Point from another specified 
             System.Windows.Point and returns the difference as a System.Windows.Vector.
        
        
            point1: The point from which point2 is subtracted.
            point2: The point to subtract from point1.
            Returns: The difference between point1 and point2.
        Subtract(point: Point, vector: Vector) -> Point
        
            Subtracts the specified System.Windows.Vector from the specified 
             System.Windows.Point and returns the resulting System.Windows.Point.
        
        
            point: The point from which vector is subtracted.
            vector: The vector to subtract from point.
            Returns: The difference between point and vector.
        """
        pass

    def ToString(self, provider=None):
        """
        ToString(self: Point, provider: IFormatProvider) -> str
        
            Creates a System.String representation of this System.Windows.Point.
        
            provider: Culture-specific formatting information.
            Returns: A System.String containing the System.Windows.Point.X and 
             System.Windows.Point.Y values of this System.Windows.Point structure.
        
        ToString(self: Point) -> str
        
            Creates a System.String representation of this System.Windows.Point.
            Returns: A System.String containing the System.Windows.Point.X and 
             System.Windows.Point.Y values of this System.Windows.Point structure.
        """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __mul__(self, *args): #cannot find CLR method
        """ x.__mul__(y) <==> x*y """
        pass

    @staticmethod # known case of __new__
    def __new__(self, x, y):
        """
        __new__(cls: type, x: float, y: float)
        __new__[Point]() -> Point
        """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    def __rsub__(self, *args): #cannot find CLR method
        """
        __rsub__(point1: Point, point2: Point) -> Vector
        
            Subtracts the specified System.Windows.Point from another specified 
             System.Windows.Point and returns the difference as a System.Windows.Vector.
        
        
            point1: The point from which point2 is subtracted.
            point2: The point to subtract from point1.
            Returns: The difference between point1 and point2.
        """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    def __sub__(self, *args): #cannot find CLR method
        """ x.__sub__(y) <==> x-yx.__sub__(y) <==> x-y """
        pass

    X = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Point.X-coordinate value of this System.Windows.Point structure.

Get: X(self: Point) -> float

Set: X(self: Point) = value
"""

    Y = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Point.Y-coordinate value of this System.Windows.Point.

Get: Y(self: Point) -> float

Set: Y(self: Point) = value
"""



class PointConverter(TypeConverter):
    """
    Converts instances of other types to and from a System.Windows.Point.
    
    PointConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: PointConverter, context: ITypeDescriptorContext, sourceType: Type) -> bool
        
            Determines whether an object can be converted from a given type to an instance 
             of a System.Windows.Point.
        
        
            context: Describes the context information of a type.
            sourceType: The type of the source that is being evaluated for conversion.
            Returns: true if the type can be converted to a System.Windows.Point; otherwise, false.
        """
        pass

    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: PointConverter, context: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Determines whether an instance of a System.Windows.Point can be converted to a 
             different type.
        
        
            context: Describes the context information of a type.
            destinationType: The desired type this System.Windows.Point is being evaluated for conversion.
            Returns: true if this System.Windows.Point can be converted to destinationType; 
             otherwise, false.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: PointConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object) -> object
        
            Attempts to convert the specified object to a System.Windows.Point.
        
            context: Provides contextual information required for conversion.
            culture: Cultural information to respect during conversion.
            value: The object being converted.
            Returns: The System.Windows.Point created from converting value.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: PointConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object, destinationType: Type) -> object
        
            Attempts to convert a System.Windows.Point to a specified type.
        
            context: Provides contextual information required for conversion.
            culture: Cultural information to respect during conversion.
            value: The System.Windows.Point to convert.
            destinationType: The type to convert this System.Windows.Point to.
            Returns: The object created from converting this System.Windows.Point.
        """
        pass


class PowerLineStatus(Enum, IComparable, IFormattable, IConvertible):
    """
    Indicates whether the system power is online, or that the system power status is unknown.
    
    enum PowerLineStatus, values: Offline (0), Online (1), Unknown (255)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Offline = None
    Online = None
    Unknown = None
    value__ = None


class PresentationSource(DispatcherObject):
    """ Provides an abstract base for classes that present content from another technology as part of an interoperation scenario. In addition, this class provides static methods for working with these sources, as well as the basic visual-layer presentation architecture. """
    def AddSource(self, *args): #cannot find CLR method
        """
        AddSource(self: PresentationSource)
            Adds a System.Windows.PresentationSource derived class instance to the list of 
             known presentation sources.
        """
        pass

    @staticmethod
    def AddSourceChangedHandler(element, handler):
        """
        AddSourceChangedHandler(element: IInputElement, handler: SourceChangedEventHandler)
            Adds a handler for the SourceChanged event to the provided element.
        
            element: The element to add the handler to.
            handler: The hander implementation to add.
        """
        pass

    def ClearContentRenderedListeners(self, *args): #cannot find CLR method
        """
        ClearContentRenderedListeners(self: PresentationSource)
            Sets the list of listeners for the 
             System.Windows.PresentationSource.ContentRendered event to null.
        """
        pass

    @staticmethod
    def FromDependencyObject(dependencyObject):
        """
        FromDependencyObject(dependencyObject: DependencyObject) -> PresentationSource
        
            Returns the source in which a provided System.Windows.DependencyObject is 
             presented.
        
        
            dependencyObject: The System.Windows.DependencyObject to find the source for.
            Returns: The System.Windows.PresentationSource in which the dependency object is being 
             presented.
        """
        pass

    @staticmethod
    def FromVisual(visual):
        """
        FromVisual(visual: Visual) -> PresentationSource
        
            Returns the source in which a provided System.Windows.Media.Visual is presented.
        
            visual: The System.Windows.Media.Visual to find the source for.
            Returns: The System.Windows.PresentationSource in which the visual is being presented, 
             or null if visual is disposed.
        """
        pass

    def GetCompositionTargetCore(self, *args): #cannot find CLR method
        """
        GetCompositionTargetCore(self: PresentationSource) -> CompositionTarget
        
            When overridden in a derived class, returns a visual target for the given 
             source.
        
            Returns: Returns a System.Windows.Media.CompositionTarget that is target for rendering 
             the visual.
        """
        pass

    def RemoveSource(self, *args): #cannot find CLR method
        """
        RemoveSource(self: PresentationSource)
            Removes a System.Windows.PresentationSource derived class instance from the 
             list of known presentation sources.
        """
        pass

    @staticmethod
    def RemoveSourceChangedHandler(e, handler):
        """
        RemoveSourceChangedHandler(e: IInputElement, handler: SourceChangedEventHandler)
            Removes a handler for the SourceChanged event from the provided element.
        
            e: The element to remove the handler from.
            handler: The handler implementation to remove.
        """
        pass

    def RootChanged(self, *args): #cannot find CLR method
        """
        RootChanged(self: PresentationSource, oldRoot: Visual, newRoot: Visual)
            Provides notification that the root System.Windows.Media.Visual has changed.
        
            oldRoot: The old root System.Windows.Media.Visual.
            newRoot: The new root System.Windows.Media.Visual.
        """
        pass

    CompositionTarget = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the visual target for the visuals being presented in the source.

Get: CompositionTarget(self: PresentationSource) -> CompositionTarget

"""

    IsDisposed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """When overridden in a derived class, gets a value that declares whether the object is disposed.

Get: IsDisposed(self: PresentationSource) -> bool

"""

    RootVisual = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """When overridden in a derived class, gets or sets the root visual being presented in the source.

Get: RootVisual(self: PresentationSource) -> Visual

Set: RootVisual(self: PresentationSource) = value
"""


    ContentRendered = None
    CurrentSources = None


class PropertyChangedCallback(MulticastDelegate, ICloneable, ISerializable):
    """
    Represents the callback that is invoked when the effective property value of a dependency property changes.
    
    PropertyChangedCallback(object: object, method: IntPtr)
    """
    def BeginInvoke(self, d, e, callback, object):
        """ BeginInvoke(self: PropertyChangedCallback, d: DependencyObject, e: DependencyPropertyChangedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        pass

    def CombineImpl(self, *args): #cannot find CLR method
        """
        CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate
        
            Combines this System.Delegate with the specified System.Delegate to form a new 
             delegate.
        
        
            follow: The delegate to combine with this delegate.
            Returns: A delegate that is the new root of the System.MulticastDelegate invocation list.
        """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """
        DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object
        
            Dynamically invokes (late-bound) the method represented by the current delegate.
        
            args: An array of objects that are the arguments to pass to the method represented by 
             the current delegate.-or- null, if the method represented by the current 
             delegate does not require arguments.
        
            Returns: The object returned by the method represented by the delegate.
        """
        pass

    def EndInvoke(self, result):
        """ EndInvoke(self: PropertyChangedCallback, result: IAsyncResult) """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """
        GetMethodImpl(self: MulticastDelegate) -> MethodInfo
        
            Returns a static method represented by the current System.MulticastDelegate.
            Returns: A static method represented by the current System.MulticastDelegate.
        """
        pass

    def Invoke(self, d, e):
        """ Invoke(self: PropertyChangedCallback, d: DependencyObject, e: DependencyPropertyChangedEventArgs) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """
        RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate
        
            Removes an element from the invocation list of this System.MulticastDelegate 
             that is equal to the specified delegate.
        
        
            value: The delegate to search for in the invocation list.
            Returns: If value is found in the invocation list for this instance, then a new 
             System.Delegate without value in its invocation list; otherwise, this instance 
             with its original invocation list.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, object, method):
        """ __new__(cls: type, object: object, method: IntPtr) """
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class PropertyPath(object):
    """
    Implements a data structure for describing a property as a path below another property, or below an owning type. Property paths are used in data binding to objects, and in storyboards and timelines for animations.
    
    PropertyPath(path: str, *pathParameters: Array[object])
    PropertyPath(parameter: object)
    """
    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, path: str, *pathParameters: Array[object])
        __new__(cls: type, parameter: object)
        """
        pass

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the string that describes the path.

Get: Path(self: PropertyPath) -> str

Set: Path(self: PropertyPath) = value
"""

    PathParameters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the list of parameters to use when the path refers to indexed parameters.

Get: PathParameters(self: PropertyPath) -> Collection[object]

"""



class PropertyPathConverter(TypeConverter):
    """
    Provides a type converter for System.Windows.PropertyPath objects.
    
    PropertyPathConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: PropertyPathConverter, typeDescriptorContext: ITypeDescriptorContext, sourceType: Type) -> bool
        
            Returns whether this converter can convert an object of one type to the 
             System.Windows.PropertyPath type.
        
        
            typeDescriptorContext: An System.ComponentModel.ITypeDescriptorContext that provides a format context.
            sourceType: A System.Type that represents the type you want to convert from.
            Returns: true if sourceType is type System.String; otherwise, false.
        """
        pass

    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: PropertyPathConverter, typeDescriptorContext: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Returns whether this converter can convert the object to the 
             System.Windows.PropertyPath type.
        
        
            typeDescriptorContext: An System.ComponentModel.ITypeDescriptorContext that provides a format context.
            destinationType: A System.Type that represents the type you want to convert to.
            Returns: true if destinationType is type System.String; otherwise, false.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: PropertyPathConverter, typeDescriptorContext: ITypeDescriptorContext, cultureInfo: CultureInfo, source: object) -> object
        
            Converts the specified value to the System.Windows.PropertyPath type.
        
            typeDescriptorContext: An System.ComponentModel.ITypeDescriptorContext that provides a format context.
            cultureInfo: The System.Globalization.CultureInfo to use as the current culture.
            source: The object to convert to a System.Windows.PropertyPath. This is expected to be 
             a string.
        
            Returns: The converted System.Windows.PropertyPath.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: PropertyPathConverter, typeDescriptorContext: ITypeDescriptorContext, cultureInfo: CultureInfo, value: object, destinationType: Type) -> object
        
            Converts the specified value object to the System.Windows.PropertyPath type.
        
            typeDescriptorContext: An System.ComponentModel.ITypeDescriptorContext that provides a format context.
            cultureInfo: The System.Globalization.CultureInfo to use as the current culture.
            value: The System.Windows.PropertyPath to convert.
            destinationType: The destination type. This is expected to be the System.String type.
            Returns: The converted destination System.String.
        """
        pass


class QueryContinueDragEventArgs(RoutedEventArgs):
    """ Contains arguments for the System.Windows.DragDrop.QueryContinueDrag event. """
    Action = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the current status of the associated drag-and-drop operation.

Get: Action(self: QueryContinueDragEventArgs) -> DragAction

Set: Action(self: QueryContinueDragEventArgs) = value
"""

    EscapePressed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a Boolean value indicating whether the ESC key has been pressed.

Get: EscapePressed(self: QueryContinueDragEventArgs) -> bool

"""

    KeyStates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a flag enumeration indicating the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.

Get: KeyStates(self: QueryContinueDragEventArgs) -> DragDropKeyStates

"""



class QueryContinueDragEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """
    Represents a method that will handle the routed events that enables a drag-and-drop operation to be canceled by the drag source, for example System.Windows.UIElement.QueryContinueDrag.
    
    QueryContinueDragEventHandler(object: object, method: IntPtr)
    """
    def BeginInvoke(self, sender, e, callback, object):
        """ BeginInvoke(self: QueryContinueDragEventHandler, sender: object, e: QueryContinueDragEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        pass

    def CombineImpl(self, *args): #cannot find CLR method
        """
        CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate
        
            Combines this System.Delegate with the specified System.Delegate to form a new 
             delegate.
        
        
            follow: The delegate to combine with this delegate.
            Returns: A delegate that is the new root of the System.MulticastDelegate invocation list.
        """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """
        DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object
        
            Dynamically invokes (late-bound) the method represented by the current delegate.
        
            args: An array of objects that are the arguments to pass to the method represented by 
             the current delegate.-or- null, if the method represented by the current 
             delegate does not require arguments.
        
            Returns: The object returned by the method represented by the delegate.
        """
        pass

    def EndInvoke(self, result):
        """ EndInvoke(self: QueryContinueDragEventHandler, result: IAsyncResult) """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """
        GetMethodImpl(self: MulticastDelegate) -> MethodInfo
        
            Returns a static method represented by the current System.MulticastDelegate.
            Returns: A static method represented by the current System.MulticastDelegate.
        """
        pass

    def Invoke(self, sender, e):
        """ Invoke(self: QueryContinueDragEventHandler, sender: object, e: QueryContinueDragEventArgs) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """
        RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate
        
            Removes an element from the invocation list of this System.MulticastDelegate 
             that is equal to the specified delegate.
        
        
            value: The delegate to search for in the invocation list.
            Returns: If value is found in the invocation list for this instance, then a new 
             System.Delegate without value in its invocation list; otherwise, this instance 
             with its original invocation list.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, object, method):
        """ __new__(cls: type, object: object, method: IntPtr) """
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class Readability(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies the readability value of a System.Windows.LocalizabilityAttribute for a binary XAML (BAML) class or class member.
    
    enum Readability, values: Inherit (2), Readable (1), Unreadable (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Inherit = None
    Readable = None
    Unreadable = None
    value__ = None


class ReasonSessionEnding(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies the reason for which the user's session is ending. Used by the System.Windows.SessionEndingCancelEventArgs.ReasonSessionEnding property.
    
    enum ReasonSessionEnding, values: Logoff (0), Shutdown (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Logoff = None
    Shutdown = None
    value__ = None


class Rect(object, IFormattable):
    """
    Describes the width, height, and location of a rectangle.
    
    Rect(location: Point, size: Size)
    Rect(x: float, y: float, width: float, height: float)
    Rect(point1: Point, point2: Point)
    Rect(point: Point, vector: Vector)
    Rect(size: Size)
    """
    def Contains(self, *__args):
        """
        Contains(self: Rect, rect: Rect) -> bool
        
            Indicates whether the rectangle contains the specified rectangle.
        
            rect: The rectangle to check.
            Returns: true if rect is entirely contained by the rectangle; otherwise, false.
        Contains(self: Rect, x: float, y: float) -> bool
        
            Indicates whether the rectangle contains the specified x-coordinate and 
             y-coordinate.
        
        
            x: The x-coordinate of the point to check.
            y: The y-coordinate of the point to check.
            Returns: true if (x, y) is contained by the rectangle; otherwise, false.
        Contains(self: Rect, point: Point) -> bool
        
            Indicates whether the rectangle contains the specified point.
        
            point: The point to check.
            Returns: true if the rectangle contains the specified point; otherwise, false.
        """
        pass

    @staticmethod
    def Equals(*__args):
        """
        Equals(self: Rect, value: Rect) -> bool
        
            Indicates whether the specified rectangle is equal to the current rectangle.
        
            value: The rectangle to compare to the current rectangle.
            Returns: true if the specified rectangle has the same System.Windows.Rect.Location and 
             System.Windows.Rect.Size values as the current rectangle; otherwise, false.
        
        Equals(self: Rect, o: object) -> bool
        
            Indicates whether the specified object is equal to the current rectangle.
        
            o: The object to compare to the current rectangle.
            Returns: true if o is a System.Windows.Rect and has the same 
             System.Windows.Rect.Location and System.Windows.Rect.Size values as the current 
             rectangle; otherwise, false.
        
        Equals(rect1: Rect, rect2: Rect) -> bool
        
            Indicates whether the specified rectangles are equal.
        
            rect1: The first rectangle to compare.
            rect2: The second rectangle to compare.
            Returns: true if the rectangles have the same System.Windows.Rect.Location and 
             System.Windows.Rect.Size values; otherwise, false.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: Rect) -> int
        
            Creates a hash code for the rectangle.
            Returns: A hash code for the current System.Windows.Rect structure.
        """
        pass

    def Inflate(self, *__args):
        """
        Inflate(rect: Rect, size: Size) -> Rect
        
            Returns the rectangle that results from expanding the specified rectangle by 
             the specified System.Windows.Size, in all directions.
        
        
            rect: The System.Windows.Rect structure to modify.
            size: Specifies the amount to expand the rectangle. The System.Windows.Size 
             structure's System.Windows.Size.Width property specifies the amount to increase 
             the rectangle's System.Windows.Rect.Left and System.Windows.Rect.Right 
             properties. The System.Windows.Size structure's System.Windows.Size.Height 
             property specifies the amount to increase the rectangle's 
             System.Windows.Rect.Top and System.Windows.Rect.Bottom properties.
        
            Returns: The resulting rectangle.
        Inflate(rect: Rect, width: float, height: float) -> Rect
        
            Creates a rectangle that results from expanding or shrinking the specified 
             rectangle by the specified width and height amounts, in all directions.
        
        
            rect: The System.Windows.Rect structure to modify.
            width: The amount by which to expand or shrink the left and right sides of the 
             rectangle.
        
            height: The amount by which to expand or shrink the top and bottom sides of the 
             rectangle.
        
            Returns: The resulting rectangle.
        Inflate(self: Rect, size: Size)
            Expands the rectangle by using the specified System.Windows.Size, in all 
             directions.
        
        
            size: Specifies the amount to expand the rectangle. The System.Windows.Size 
             structure's System.Windows.Size.Width property specifies the amount to increase 
             the rectangle's System.Windows.Rect.Left and System.Windows.Rect.Right 
             properties. The System.Windows.Size structure's System.Windows.Size.Height 
             property specifies the amount to increase the rectangle's 
             System.Windows.Rect.Top and System.Windows.Rect.Bottom properties.
        
        Inflate(self: Rect, width: float, height: float)
            Expands or shrinks the rectangle by using the specified width and height 
             amounts, in all directions.
        
        
            width: The amount by which to expand or shrink the left and right sides of the 
             rectangle.
        
            height: The amount by which to expand or shrink the top and bottom sides of the 
             rectangle.
        """
        pass

    def Intersect(self, *__args):
        """
        Intersect(rect1: Rect, rect2: Rect) -> Rect
        
            Returns the intersection of the specified rectangles.
        
            rect1: The first rectangle to compare.
            rect2: The second rectangle to compare.
            Returns: The intersection of the two rectangles, or System.Windows.Rect.Empty if no 
             intersection exists.
        
        Intersect(self: Rect, rect: Rect)
            Finds the intersection of the current rectangle and the specified rectangle, 
             and stores the result as the current rectangle.
        
        
            rect: The rectangle to intersect with the current rectangle.
        """
        pass

    def IntersectsWith(self, rect):
        """
        IntersectsWith(self: Rect, rect: Rect) -> bool
        
            Indicates whether the specified rectangle intersects with the current rectangle.
        
            rect: The rectangle to check.
            Returns: true if the specified rectangle intersects with the current rectangle; 
             otherwise, false.
        """
        pass

    def Offset(self, *__args):
        """
        Offset(rect: Rect, offsetVector: Vector) -> Rect
        
            Returns a rectangle that is offset from the specified rectangle by using the 
             specified vector.
        
        
            rect: The original rectangle.
            offsetVector: A vector that specifies the horizontal and vertical offsets for the new 
             rectangle.
        
            Returns: The resulting rectangle.
        Offset(rect: Rect, offsetX: float, offsetY: float) -> Rect
        
            Returns a rectangle that is offset from the specified rectangle by using the 
             specified horizontal and vertical amounts.
        
        
            rect: The rectangle to move.
            offsetX: The horizontal offset for the new rectangle.
            offsetY: The vertical offset for the new rectangle.
            Returns: The resulting rectangle.
        Offset(self: Rect, offsetVector: Vector)
            Moves the rectangle by the specified vector.
        
            offsetVector: A vector that specifies the horizontal and vertical amounts to move the 
             rectangle.
        
        Offset(self: Rect, offsetX: float, offsetY: float)
            Moves the rectangle by the specified horizontal and vertical amounts.
        
            offsetX: The amount to move the rectangle horizontally.
            offsetY: The amount to move the rectangle vertically.
        """
        pass

    @staticmethod
    def Parse(source):
        """
        Parse(source: str) -> Rect
        
            Creates a new rectangle from the specified string representation.
        
            source: The string representation of the rectangle, in the form "x, y, width, height".
            Returns: The resulting rectangle.
        """
        pass

    def Scale(self, scaleX, scaleY):
        """
        Scale(self: Rect, scaleX: float, scaleY: float)
            Multiplies the size of the current rectangle by the specified x and y values.
        
            scaleX: The scale factor in the x-direction.
            scaleY: The scale factor in the y-direction.
        """
        pass

    def ToString(self, provider=None):
        """
        ToString(self: Rect, provider: IFormatProvider) -> str
        
            Returns a string representation of the rectangle by using the specified format 
             provider.
        
        
            provider: Culture-specific formatting information.
            Returns: A string representation of the current rectangle that is determined by the 
             specified format provider.
        
        ToString(self: Rect) -> str
        
            Returns a string representation of the rectangle.
            Returns: A string representation of the current rectangle. The string has the following 
             form: 
             "System.Windows.Rect.X,System.Windows.Rect.Y,System.Windows.Rect.Width,System.Wi
             ndows.Rect.Height".
        """
        pass

    @staticmethod
    def Transform(*__args):
        """
        Transform(self: Rect, matrix: Matrix)
            Transforms the rectangle by applying the specified matrix.
        
            matrix: A matrix that specifies the transformation to apply.
        Transform(rect: Rect, matrix: Matrix) -> Rect
        
            Returns the rectangle that results from applying the specified matrix to the 
             specified rectangle.
        
        
            rect: A rectangle that is the basis for the transformation.
            matrix: A matrix that specifies the transformation to apply.
            Returns: The rectangle that results from the operation.
        """
        pass

    def Union(self, *__args):
        """
        Union(self: Rect, point: Point)
            Expands the current rectangle exactly enough to contain the specified point.
        
            point: The point to include.
        Union(rect: Rect, point: Point) -> Rect
        
            Creates a rectangle that is exactly large enough to include the specified 
             rectangle and the specified point.
        
        
            rect: The rectangle to include.
            point: The point to include.
            Returns: A rectangle that is exactly large enough to contain the specified rectangle and 
             the specified point.
        
        Union(self: Rect, rect: Rect)
            Expands the current rectangle exactly enough to contain the specified rectangle.
        
            rect: The rectangle to include.
        Union(rect1: Rect, rect2: Rect) -> Rect
        
            Creates a rectangle that is exactly large enough to contain the two specified 
             rectangles.
        
        
            rect1: The first rectangle to include.
            rect2: The second rectangle to include.
            Returns: The resulting rectangle.
        """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, location: Point, size: Size)
        __new__(cls: type, x: float, y: float, width: float, height: float)
        __new__(cls: type, point1: Point, point2: Point)
        __new__(cls: type, point: Point, vector: Vector)
        __new__(cls: type, size: Size)
        __new__[Rect]() -> Rect
        """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Bottom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the y-axis value of the bottom of the rectangle.

Get: Bottom(self: Rect) -> float

"""

    BottomLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the position of the bottom-left corner of the rectangle

Get: BottomLeft(self: Rect) -> Point

"""

    BottomRight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the position of the bottom-right corner of the rectangle.

Get: BottomRight(self: Rect) -> Point

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the height of the rectangle.

Get: Height(self: Rect) -> float

Set: Height(self: Rect) = value
"""

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the rectangle is the System.Windows.Rect.Empty rectangle.

Get: IsEmpty(self: Rect) -> bool

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the x-axis value of the left side of the rectangle.

Get: Left(self: Rect) -> float

"""

    Location = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the position of the top-left corner of the rectangle.

Get: Location(self: Rect) -> Point

Set: Location(self: Rect) = value
"""

    Right = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the x-axis value of the right side of the rectangle.

Get: Right(self: Rect) -> float

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the width and height of the rectangle.

Get: Size(self: Rect) -> Size

Set: Size(self: Rect) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the y-axis position of the top of the rectangle.

Get: Top(self: Rect) -> float

"""

    TopLeft = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the position of the top-left corner of the rectangle.

Get: TopLeft(self: Rect) -> Point

"""

    TopRight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the position of the top-right corner of the rectangle.

Get: TopRight(self: Rect) -> Point

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the width of the rectangle.

Get: Width(self: Rect) -> float

Set: Width(self: Rect) = value
"""

    X = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the x-axis value of the left side of the rectangle.

Get: X(self: Rect) -> float

Set: X(self: Rect) = value
"""

    Y = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the y-axis value of the top side of the rectangle.

Get: Y(self: Rect) -> float

Set: Y(self: Rect) = value
"""


    Empty = None


class RectConverter(TypeConverter):
    """
    Converts instances of other types to and from instances of System.Windows.Rect.
    
    RectConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: RectConverter, context: ITypeDescriptorContext, sourceType: Type) -> bool
        
            Determines whether an object can be converted from a given type to an instance 
             of System.Windows.Rect.
        
        
            context: Provides contextual information required for conversion.
            sourceType: The type of the source that is being evaluated for conversion.
            Returns: true if the type can be converted to a System.Windows.Rect; otherwise, false.
        """
        pass

    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: RectConverter, context: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Determines whether a System.Windows.Rect can be converted to the specified type.
        
            context: Provides contextual information required for conversion.
            destinationType: The desired type this System.Windows.Rect is being evaluated for conversion.
            Returns: true if a System.Windows.Rect can be converted to destinationType; otherwise, 
             false.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: RectConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object) -> object
        
            Attempts to convert the specified object to a System.Windows.Rect.
        
            context: Provides contextual information required for conversion.
            culture: Cultural information which is respected when converting.
            value: The object being converted.
            Returns: The System.Windows.Rect created from converting value.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: RectConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object, destinationType: Type) -> object
        
            Attempts to convert a System.Windows.Rect to the specified type.
        
            context: Provides contextual information required for conversion.
            culture: Cultural information which is respected during conversion.
            value: The System.Windows.Rect to convert.
            destinationType: The type to convert this System.Windows.Rect to.
            Returns: The object created from converting this System.Windows.Rect.
        """
        pass


class RequestBringIntoViewEventArgs(RoutedEventArgs):
    """ Provides data for the System.Windows.FrameworkElement.RequestBringIntoView�routed event. """
    TargetObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the object that should be made visible in response to the event.

Get: TargetObject(self: RequestBringIntoViewEventArgs) -> DependencyObject

"""

    TargetRect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the rectangular region in the object's coordinate space which should be made visible.

Get: TargetRect(self: RequestBringIntoViewEventArgs) -> Rect

"""



class RequestBringIntoViewEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """
    Represents the method that will handle the System.Windows.FrameworkElement.RequestBringIntoView�routed event.
    
    RequestBringIntoViewEventHandler(object: object, method: IntPtr)
    """
    def BeginInvoke(self, sender, e, callback, object):
        """ BeginInvoke(self: RequestBringIntoViewEventHandler, sender: object, e: RequestBringIntoViewEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        pass

    def CombineImpl(self, *args): #cannot find CLR method
        """
        CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate
        
            Combines this System.Delegate with the specified System.Delegate to form a new 
             delegate.
        
        
            follow: The delegate to combine with this delegate.
            Returns: A delegate that is the new root of the System.MulticastDelegate invocation list.
        """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """
        DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object
        
            Dynamically invokes (late-bound) the method represented by the current delegate.
        
            args: An array of objects that are the arguments to pass to the method represented by 
             the current delegate.-or- null, if the method represented by the current 
             delegate does not require arguments.
        
            Returns: The object returned by the method represented by the delegate.
        """
        pass

    def EndInvoke(self, result):
        """ EndInvoke(self: RequestBringIntoViewEventHandler, result: IAsyncResult) """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """
        GetMethodImpl(self: MulticastDelegate) -> MethodInfo
        
            Returns a static method represented by the current System.MulticastDelegate.
            Returns: A static method represented by the current System.MulticastDelegate.
        """
        pass

    def Invoke(self, sender, e):
        """ Invoke(self: RequestBringIntoViewEventHandler, sender: object, e: RequestBringIntoViewEventArgs) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """
        RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate
        
            Removes an element from the invocation list of this System.MulticastDelegate 
             that is equal to the specified delegate.
        
        
            value: The delegate to search for in the invocation list.
            Returns: If value is found in the invocation list for this instance, then a new 
             System.Delegate without value in its invocation list; otherwise, this instance 
             with its original invocation list.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, object, method):
        """ __new__(cls: type, object: object, method: IntPtr) """
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class ResizeMode(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies whether a window can be resized and, if so, how it can be resized. Used by the System.Windows.Window.ResizeMode property.
    
    enum ResizeMode, values: CanMinimize (1), CanResize (2), CanResizeWithGrip (3), NoResize (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CanMinimize = None
    CanResize = None
    CanResizeWithGrip = None
    NoResize = None
    value__ = None


class ResourceDictionary(object, IDictionary, ICollection, IEnumerable, ISupportInitialize, IUriContext, INameScope):
    """
    Provides a hash table / dictionary implementation that contains WPF resources used by components and other elements of a WPF�application.
    
    ResourceDictionary()
    """
    def Add(self, key, value):
        """
        Add(self: ResourceDictionary, key: object, value: object)
            Adds a resource by key to this System.Windows.ResourceDictionary.
        
            key: The name of the key to add.
            value: The value of the resource to add.
        """
        pass

    def BeginInit(self):
        """
        BeginInit(self: ResourceDictionary)
            Begins the initialization phase for this System.Windows.ResourceDictionary.
        """
        pass

    def Clear(self):
        """
        Clear(self: ResourceDictionary)
            Clears all keys (and values) in the base System.Windows.ResourceDictionary. 
             This does not clear any merged dictionary items.
        """
        pass

    def Contains(self, key):
        """
        Contains(self: ResourceDictionary, key: object) -> bool
        
            Determines whether the System.Windows.ResourceDictionary contains an element 
             with the specified key.
        
        
            key: The key to locate in the System.Windows.ResourceDictionary.
            Returns: true if System.Windows.ResourceDictionary contains a key-value pair with the 
             specified key; otherwise, false.
        """
        pass

    def CopyTo(self, array, arrayIndex):
        """
        CopyTo(self: ResourceDictionary, array: Array[DictionaryEntry], arrayIndex: int)
            Copies the System.Windows.ResourceDictionary elements to a one-dimensional 
             System.Collections.DictionaryEntry at the specified index.
        
        
            array: The one-dimensional array that is the destination of the 
             System.Collections.DictionaryEntry objects copied from the 
             System.Windows.ResourceDictionary instance. The array must have zero-based 
             indexing.
        
            arrayIndex: The zero-based index of array where copying begins.
        """
        pass

    def EndInit(self):
        """
        EndInit(self: ResourceDictionary)
            Ends the initialization phase, and invalidates the previous tree such that all 
             changes made to keys during the initialization phase can be accounted for.
        """
        pass

    def FindName(self, name):
        """
        FindName(self: ResourceDictionary, name: str) -> object
        
            Not supported by this Dictionary implementation.
        
            name: The name identifier for the object being requested.
            Returns: Always returns null.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: ResourceDictionary) -> IDictionaryEnumerator
        
            Returns an System.Collections.IDictionaryEnumerator that can be used to iterate 
             through the System.Windows.ResourceDictionary.
        
            Returns: A specialized enumerator for the System.Windows.ResourceDictionary.
        """
        pass

    def OnGettingValue(self, *args): #cannot find CLR method
        """ OnGettingValue(self: ResourceDictionary, key: object, value: object) -> (object, bool) """
        pass

    def RegisterName(self, name, scopedElement):
        """
        RegisterName(self: ResourceDictionary, name: str, scopedElement: object)
            Not supported by this Dictionary implementation.
        
            name: See Remarks.
            scopedElement: See Remarks.
        """
        pass

    def Remove(self, key):
        """
        Remove(self: ResourceDictionary, key: object)
            Removes the entry with the specified key from the base dictionary.
        
            key: Key of the entry to remove.
        """
        pass

    def UnregisterName(self, name):
        """
        UnregisterName(self: ResourceDictionary, name: str)
            Not supported by this Dictionary implementation.
        
            name: See Remarks
        """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """
        Contains(self: IDictionary, key: object) -> bool
        
            Determines whether the System.Collections.IDictionary object contains an 
             element with the specified key.
        
        
            key: The key to locate in the System.Collections.IDictionary object.
            Returns: true if the System.Collections.IDictionary contains an element with the key; 
             otherwise, false.
        """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __len__(self, *args): #cannot find CLR method
        """ x.__len__() <==> len(x) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the number of entries in the base System.Windows.ResourceDictionary.

Get: Count(self: ResourceDictionary) -> int

"""

    DeferrableContent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the deferrable content for this resource dictionary.

Get: DeferrableContent(self: ResourceDictionary) -> DeferrableContent

Set: DeferrableContent(self: ResourceDictionary) = value
"""

    IsFixedSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets whether this System.Windows.ResourceDictionary is fixed-size.

Get: IsFixedSize(self: ResourceDictionary) -> bool

"""

    IsReadOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets whether this System.Windows.ResourceDictionary is read-only.

Get: IsReadOnly(self: ResourceDictionary) -> bool

"""

    Keys = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of all keys contained in this System.Windows.ResourceDictionary.

Get: Keys(self: ResourceDictionary) -> ICollection

"""

    MergedDictionaries = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of the System.Windows.ResourceDictionary dictionaries that constitute the various resource dictionaries in the merged dictionaries.

Get: MergedDictionaries(self: ResourceDictionary) -> Collection[ResourceDictionary]

"""

    Source = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the uniform resource identifier (URI) to load resources from.

Get: Source(self: ResourceDictionary) -> Uri

Set: Source(self: ResourceDictionary) = value
"""

    Values = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of all values associated with keys contained in this System.Windows.ResourceDictionary.

Get: Values(self: ResourceDictionary) -> ICollection

"""



class ResourceDictionaryLocation(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies the locations where theme resource dictionaries are located.
    
    enum ResourceDictionaryLocation, values: ExternalAssembly (2), None (0), SourceAssembly (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    ExternalAssembly = None
    None = None
    SourceAssembly = None
    value__ = None


class ResourceReferenceKeyNotFoundException(InvalidOperationException, ISerializable, _Exception):
    """
    The exception that is thrown when a resource reference key cannot be found during parsing or serialization of markup extension resources.
    
    ResourceReferenceKeyNotFoundException()
    ResourceReferenceKeyNotFoundException(message: str, resourceKey: object)
    """
    def add_SerializeObjectState(self, *args): #cannot find CLR method
        """ add_SerializeObjectState(self: Exception, value: EventHandler[SafeSerializationEventArgs]) """
        pass

    def GetObjectData(self, info, context):
        """
        GetObjectData(self: ResourceReferenceKeyNotFoundException, info: SerializationInfo, context: StreamingContext)
            Reports specifics of the exception to debuggers or dialogs.
        
            info: Specific information from the serialization process.
            context: The context at the time the exception was thrown.
        """
        pass

    def remove_SerializeObjectState(self, *args): #cannot find CLR method
        """ remove_SerializeObjectState(self: Exception, value: EventHandler[SafeSerializationEventArgs]) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, message=None, resourceKey=None):
        """
        __new__(cls: type)
        __new__(cls: type, message: str, resourceKey: object)
        __new__(cls: type, info: SerializationInfo, context: StreamingContext)
        """
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Key = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the key that was not found and caused the exception to be thrown.

Get: Key(self: ResourceReferenceKeyNotFoundException) -> object

"""



class RoutedEvent(object):
    """ Represents and identifies a routed event and declares its characteristics. """
    def AddOwner(self, ownerType):
        """
        AddOwner(self: RoutedEvent, ownerType: Type) -> RoutedEvent
        
            Associates another owner type with the routed event represented by a 
             System.Windows.RoutedEvent instance, and enables routing of the event and its 
             handling.
        
        
            ownerType: The type where the routed event is added.
            Returns: The identifier field for the event. This return value should be used to set a 
             public static read-only field that will store the identifier for the 
             representation of the routed event on the owning type. This field is typically 
             defined with public access, because user code must reference the field in order 
             to attach any instance handlers for the routed event when using the 
             System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,S
             ystem.Boolean) utility method.
        """
        pass

    def ToString(self):
        """
        ToString(self: RoutedEvent) -> str
        
            Returns the string representation of this System.Windows.RoutedEvent.
            Returns: A string representation for this object, which is identical to the value 
             returned by System.Windows.RoutedEvent.Name.
        """
        pass

    HandlerType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the handler type of the routed event.

Get: HandlerType(self: RoutedEvent) -> Type

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the identifying name of the routed event.

Get: Name(self: RoutedEvent) -> str

"""

    OwnerType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the registered owner type of the routed event.

Get: OwnerType(self: RoutedEvent) -> Type

"""

    RoutingStrategy = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the routing strategy of the routed event.

Get: RoutingStrategy(self: RoutedEvent) -> RoutingStrategy

"""



class RoutedEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """
    Represents the method that will handle various routed events that do not have specific event data beyond the data that is common for all routed events.
    
    RoutedEventHandler(object: object, method: IntPtr)
    """
    def BeginInvoke(self, sender, e, callback, object):
        """ BeginInvoke(self: RoutedEventHandler, sender: object, e: RoutedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        pass

    def CombineImpl(self, *args): #cannot find CLR method
        """
        CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate
        
            Combines this System.Delegate with the specified System.Delegate to form a new 
             delegate.
        
        
            follow: The delegate to combine with this delegate.
            Returns: A delegate that is the new root of the System.MulticastDelegate invocation list.
        """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """
        DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object
        
            Dynamically invokes (late-bound) the method represented by the current delegate.
        
            args: An array of objects that are the arguments to pass to the method represented by 
             the current delegate.-or- null, if the method represented by the current 
             delegate does not require arguments.
        
            Returns: The object returned by the method represented by the delegate.
        """
        pass

    def EndInvoke(self, result):
        """ EndInvoke(self: RoutedEventHandler, result: IAsyncResult) """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """
        GetMethodImpl(self: MulticastDelegate) -> MethodInfo
        
            Returns a static method represented by the current System.MulticastDelegate.
            Returns: A static method represented by the current System.MulticastDelegate.
        """
        pass

    def Invoke(self, sender, e):
        """ Invoke(self: RoutedEventHandler, sender: object, e: RoutedEventArgs) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """
        RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate
        
            Removes an element from the invocation list of this System.MulticastDelegate 
             that is equal to the specified delegate.
        
        
            value: The delegate to search for in the invocation list.
            Returns: If value is found in the invocation list for this instance, then a new 
             System.Delegate without value in its invocation list; otherwise, this instance 
             with its original invocation list.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, object, method):
        """ __new__(cls: type, object: object, method: IntPtr) """
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class RoutedEventHandlerInfo(object):
    """ Provides special handling information to inform event listeners whether specific handlers should be invoked. """
    def Equals(self, *__args):
        """
        Equals(self: RoutedEventHandlerInfo, handlerInfo: RoutedEventHandlerInfo) -> bool
        
            Determines whether the specified System.Windows.RoutedEventHandlerInfo is 
             equivalent to the current System.Windows.RoutedEventHandlerInfo.
        
        
            handlerInfo: The System.Windows.RoutedEventHandlerInfo to compare to the current 
             System.Windows.RoutedEventHandlerInfo.
        
            Returns: true if the specified System.Windows.RoutedEventHandlerInfo is equivalent to 
             the current System.Windows.RoutedEventHandlerInfo; otherwise, false.
        
        Equals(self: RoutedEventHandlerInfo, obj: object) -> bool
        
            Determines whether the specified object is equivalent to the current 
             System.Windows.RoutedEventHandlerInfo.
        
        
            obj: The object to compare to the current System.Windows.RoutedEventHandlerInfo.
            Returns: true if the specified object is equivalent to the current 
             System.Windows.RoutedEventHandlerInfo; otherwise, false.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: RoutedEventHandlerInfo) -> int
        
            Returns a hash code for the current System.Windows.RoutedEventHandlerInfo.
            Returns: A hash code for the current System.Windows.RoutedEventHandlerInfo.
        """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    Handler = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the event handler.

Get: Handler(self: RoutedEventHandlerInfo) -> Delegate

"""

    InvokeHandledEventsToo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the event handler is invoked when the routed event is marked handled.

Get: InvokeHandledEventsToo(self: RoutedEventHandlerInfo) -> bool

"""



class RoutedPropertyChangedEventArgs(RoutedEventArgs):
    """
    RoutedPropertyChangedEventArgs[T](oldValue: T, newValue: T)
    RoutedPropertyChangedEventArgs[T](oldValue: T, newValue: T, routedEvent: RoutedEvent)
    """
    @staticmethod # known case of __new__
    def __new__(self, oldValue, newValue, routedEvent=None):
        """
        __new__(cls: type, oldValue: T, newValue: T)
        __new__(cls: type, oldValue: T, newValue: T, routedEvent: RoutedEvent)
        """
        pass

    NewValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the new value of a property as reported by a property changed event.

Get: NewValue(self: RoutedPropertyChangedEventArgs[T]) -> T

"""

    OldValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the previous value of the property as reported by a property changed event.

Get: OldValue(self: RoutedPropertyChangedEventArgs[T]) -> T

"""



class RoutedPropertyChangedEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """ RoutedPropertyChangedEventHandler[T](object: object, method: IntPtr) """
    def BeginInvoke(self, sender, e, callback, object):
        """ BeginInvoke(self: RoutedPropertyChangedEventHandler[T], sender: object, e: RoutedPropertyChangedEventArgs[T], callback: AsyncCallback, object: object) -> IAsyncResult """
        pass

    def CombineImpl(self, *args): #cannot find CLR method
        """
        CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate
        
            Combines this System.Delegate with the specified System.Delegate to form a new 
             delegate.
        
        
            follow: The delegate to combine with this delegate.
            Returns: A delegate that is the new root of the System.MulticastDelegate invocation list.
        """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """
        DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object
        
            Dynamically invokes (late-bound) the method represented by the current delegate.
        
            args: An array of objects that are the arguments to pass to the method represented by 
             the current delegate.-or- null, if the method represented by the current 
             delegate does not require arguments.
        
            Returns: The object returned by the method represented by the delegate.
        """
        pass

    def EndInvoke(self, result):
        """ EndInvoke(self: RoutedPropertyChangedEventHandler[T], result: IAsyncResult) """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """
        GetMethodImpl(self: MulticastDelegate) -> MethodInfo
        
            Returns a static method represented by the current System.MulticastDelegate.
            Returns: A static method represented by the current System.MulticastDelegate.
        """
        pass

    def Invoke(self, sender, e):
        """ Invoke(self: RoutedPropertyChangedEventHandler[T], sender: object, e: RoutedPropertyChangedEventArgs[T]) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """
        RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate
        
            Removes an element from the invocation list of this System.MulticastDelegate 
             that is equal to the specified delegate.
        
        
            value: The delegate to search for in the invocation list.
            Returns: If value is found in the invocation list for this instance, then a new 
             System.Delegate without value in its invocation list; otherwise, this instance 
             with its original invocation list.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, object, method):
        """ __new__(cls: type, object: object, method: IntPtr) """
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class RoutingStrategy(Enum, IComparable, IFormattable, IConvertible):
    """
    Indicates the routing strategy of a routed event.
    
    enum RoutingStrategy, values: Bubble (1), Direct (2), Tunnel (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Bubble = None
    Direct = None
    Tunnel = None
    value__ = None


class SessionEndingCancelEventArgs(CancelEventArgs):
    """ Contains the event arguments for the System.Windows.Application.SessionEnding event. """
    ReasonSessionEnding = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates why the session is ending.

Get: ReasonSessionEnding(self: SessionEndingCancelEventArgs) -> ReasonSessionEnding

"""



class SessionEndingCancelEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """
    Represents the method that handles the System.Windows.Application.SessionEnding event.
    
    SessionEndingCancelEventHandler(object: object, method: IntPtr)
    """
    def BeginInvoke(self, sender, e, callback, object):
        """ BeginInvoke(self: SessionEndingCancelEventHandler, sender: object, e: SessionEndingCancelEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        pass

    def CombineImpl(self, *args): #cannot find CLR method
        """
        CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate
        
            Combines this System.Delegate with the specified System.Delegate to form a new 
             delegate.
        
        
            follow: The delegate to combine with this delegate.
            Returns: A delegate that is the new root of the System.MulticastDelegate invocation list.
        """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """
        DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object
        
            Dynamically invokes (late-bound) the method represented by the current delegate.
        
            args: An array of objects that are the arguments to pass to the method represented by 
             the current delegate.-or- null, if the method represented by the current 
             delegate does not require arguments.
        
            Returns: The object returned by the method represented by the delegate.
        """
        pass

    def EndInvoke(self, result):
        """ EndInvoke(self: SessionEndingCancelEventHandler, result: IAsyncResult) """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """
        GetMethodImpl(self: MulticastDelegate) -> MethodInfo
        
            Returns a static method represented by the current System.MulticastDelegate.
            Returns: A static method represented by the current System.MulticastDelegate.
        """
        pass

    def Invoke(self, sender, e):
        """ Invoke(self: SessionEndingCancelEventHandler, sender: object, e: SessionEndingCancelEventArgs) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """
        RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate
        
            Removes an element from the invocation list of this System.MulticastDelegate 
             that is equal to the specified delegate.
        
        
            value: The delegate to search for in the invocation list.
            Returns: If value is found in the invocation list for this instance, then a new 
             System.Delegate without value in its invocation list; otherwise, this instance 
             with its original invocation list.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, object, method):
        """ __new__(cls: type, object: object, method: IntPtr) """
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class Setter(SetterBase, ISupportInitialize):
    """
    Represents a setter that applies a property value.
    
    Setter()
    Setter(property: DependencyProperty, value: object)
    Setter(property: DependencyProperty, value: object, targetName: str)
    """
    def CheckSealed(self, *args): #cannot find CLR method
        """
        CheckSealed(self: SetterBase)
            Checks whether this object is read-only and cannot be changed.
        """
        pass

    @staticmethod
    def ReceiveMarkupExtension(targetObject, eventArgs):
        """
        ReceiveMarkupExtension(targetObject: object, eventArgs: XamlSetMarkupExtensionEventArgs)
            Handles cases where a markup extension provides a value for a property of 
             System.Windows.Setter object.
        
        
            targetObject: The object where the markup extension sets the value.
            eventArgs: Data that is relevant for markup extension processing.
        """
        pass

    @staticmethod
    def ReceiveTypeConverter(targetObject, eventArgs):
        """
        ReceiveTypeConverter(targetObject: object, eventArgs: XamlSetTypeConverterEventArgs)
            Handles cases where a type converter provides a value for a property of a 
             System.Windows.Setter object.
        
        
            targetObject: The object where the type converter sets the value.
            eventArgs: Data that is relevant for type converter processing.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, property=None, value=None, targetName=None):
        """
        __new__(cls: type)
        __new__(cls: type, property: DependencyProperty, value: object)
        __new__(cls: type, property: DependencyProperty, value: object, targetName: str)
        """
        pass

    Property = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the property to which the System.Windows.Setter.Value will be applied.

Get: Property(self: Setter) -> DependencyProperty

Set: Property(self: Setter) = value
"""

    TargetName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the name of the object this System.Windows.Setter is intended for.

Get: TargetName(self: Setter) -> str

Set: TargetName(self: Setter) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the value to apply to the property that is specified by this System.Windows.Setter.

Get: Value(self: Setter) -> object

Set: Value(self: Setter) = value
"""



class SetterBaseCollection(Collection[SetterBase], IList[SetterBase], ICollection[SetterBase], IEnumerable[SetterBase], IEnumerable, IList, ICollection, IReadOnlyList[SetterBase], IReadOnlyCollection[SetterBase]):
    """
    Represents a collection of System.Windows.SetterBase objects.
    
    SetterBaseCollection()
    """
    def ClearItems(self, *args): #cannot find CLR method
        """ ClearItems(self: SetterBaseCollection) """
        pass

    def InsertItem(self, *args): #cannot find CLR method
        """ InsertItem(self: SetterBaseCollection, index: int, item: SetterBase) """
        pass

    def RemoveItem(self, *args): #cannot find CLR method
        """ RemoveItem(self: SetterBaseCollection, index: int) """
        pass

    def SetItem(self, *args): #cannot find CLR method
        """ SetItem(self: SetterBaseCollection, index: int, item: SetterBase) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsSealed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether this object is in a read-only state.

Get: IsSealed(self: SetterBaseCollection) -> bool

"""

    Items = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a System.Collections.Generic.IList wrapper around the System.Collections.ObjectModel.Collection.

"""



class ShutdownMode(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies how an application will shutdown. Used by the System.Windows.Application.ShutdownMode property.
    
    enum ShutdownMode, values: OnExplicitShutdown (2), OnLastWindowClose (0), OnMainWindowClose (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    OnExplicitShutdown = None
    OnLastWindowClose = None
    OnMainWindowClose = None
    value__ = None


class Size(object, IFormattable):
    """
    Implements a structure that is used to describe the System.Windows.Size of an object.
    
    Size(width: float, height: float)
    """
    @staticmethod
    def Equals(*__args):
        """
        Equals(self: Size, value: Size) -> bool
        
            Compares a value to an instance of System.Windows.Size for equality.
        
            value: The size to compare to this current instance of System.Windows.Size.
            Returns: true if the instances of System.Windows.Size are equal; otherwise, false.
        Equals(self: Size, o: object) -> bool
        
            Compares an object to an instance of System.Windows.Size for equality.
        
            o: The System.Object to compare.
            Returns: true if the sizes are equal; otherwise, false.
        Equals(size1: Size, size2: Size) -> bool
        
            Compares two instances of System.Windows.Size for equality.
        
            size1: The first instance of System.Windows.Size to compare.
            size2: The second instance of System.Windows.Size to compare.
            Returns: true if the instances of System.Windows.Size are equal; otherwise, false.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: Size) -> int
        
            Gets the hash code for this instance of System.Windows.Size.
            Returns: The hash code for this instance of System.Windows.Size.
        """
        pass

    @staticmethod
    def Parse(source):
        """
        Parse(source: str) -> Size
        
            Returns an instance of System.Windows.Size from a converted System.String.
        
            source: A System.String value to parse to a System.Windows.Size value.
            Returns: An instance of System.Windows.Size.
        """
        pass

    def ToString(self, provider=None):
        """
        ToString(self: Size, provider: IFormatProvider) -> str
        
            Returns a System.String that represents this instance of System.Windows.Size.
        
            provider: An object that provides a way to control formatting.
            Returns: A System.String that represents this System.Windows.Size object.
        ToString(self: Size) -> str
        
            Returns a System.String that represents this System.Windows.Size object.
            Returns: A System.String that specifies the width followed by the height.
        """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, width, height):
        """
        __new__(cls: type, width: float, height: float)
        __new__[Size]() -> Size
        """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Size.Height of this instance of System.Windows.Size.

Get: Height(self: Size) -> float

Set: Height(self: Size) = value
"""

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether this instance of System.Windows.Size is System.Windows.Size.Empty.

Get: IsEmpty(self: Size) -> bool

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Size.Width of this instance of System.Windows.Size.

Get: Width(self: Size) -> float

Set: Width(self: Size) = value
"""


    Empty = None


class SizeChangedEventArgs(RoutedEventArgs):
    """ Provides data related to the System.Windows.FrameworkElement.SizeChanged event. """
    HeightChanged = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the System.Windows.FrameworkElement.Height component of the size changed.

Get: HeightChanged(self: SizeChangedEventArgs) -> bool

"""

    NewSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the new System.Windows.Size of the object.

Get: NewSize(self: SizeChangedEventArgs) -> Size

"""

    PreviousSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the previous System.Windows.Size of the object.

Get: PreviousSize(self: SizeChangedEventArgs) -> Size

"""

    WidthChanged = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the System.Windows.FrameworkElement.Width component of the size changed.

Get: WidthChanged(self: SizeChangedEventArgs) -> bool

"""



class SizeChangedEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """
    Represents the method that will handle the System.Windows.FrameworkElement.SizeChanged�routed event.
    
    SizeChangedEventHandler(object: object, method: IntPtr)
    """
    def BeginInvoke(self, sender, e, callback, object):
        """ BeginInvoke(self: SizeChangedEventHandler, sender: object, e: SizeChangedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        pass

    def CombineImpl(self, *args): #cannot find CLR method
        """
        CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate
        
            Combines this System.Delegate with the specified System.Delegate to form a new 
             delegate.
        
        
            follow: The delegate to combine with this delegate.
            Returns: A delegate that is the new root of the System.MulticastDelegate invocation list.
        """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """
        DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object
        
            Dynamically invokes (late-bound) the method represented by the current delegate.
        
            args: An array of objects that are the arguments to pass to the method represented by 
             the current delegate.-or- null, if the method represented by the current 
             delegate does not require arguments.
        
            Returns: The object returned by the method represented by the delegate.
        """
        pass

    def EndInvoke(self, result):
        """ EndInvoke(self: SizeChangedEventHandler, result: IAsyncResult) """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """
        GetMethodImpl(self: MulticastDelegate) -> MethodInfo
        
            Returns a static method represented by the current System.MulticastDelegate.
            Returns: A static method represented by the current System.MulticastDelegate.
        """
        pass

    def Invoke(self, sender, e):
        """ Invoke(self: SizeChangedEventHandler, sender: object, e: SizeChangedEventArgs) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """
        RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate
        
            Removes an element from the invocation list of this System.MulticastDelegate 
             that is equal to the specified delegate.
        
        
            value: The delegate to search for in the invocation list.
            Returns: If value is found in the invocation list for this instance, then a new 
             System.Delegate without value in its invocation list; otherwise, this instance 
             with its original invocation list.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, object, method):
        """ __new__(cls: type, object: object, method: IntPtr) """
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class SizeChangedInfo(object):
    """
    Report the specifics of a value change involving a System.Windows.Size. This is used as a parameter in System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo) overrides.
    
    SizeChangedInfo(element: UIElement, previousSize: Size, widthChanged: bool, heightChanged: bool)
    """
    @staticmethod # known case of __new__
    def __new__(self, element, previousSize, widthChanged, heightChanged):
        """ __new__(cls: type, element: UIElement, previousSize: Size, widthChanged: bool, heightChanged: bool) """
        pass

    HeightChanged = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether this System.Windows.SizeChangedInfo  reports a size change that includes a significant change to the Height component.

Get: HeightChanged(self: SizeChangedInfo) -> bool

"""

    NewSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the new size being reported.

Get: NewSize(self: SizeChangedInfo) -> Size

"""

    PreviousSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the previous size of the size-related value being reported as changed.

Get: PreviousSize(self: SizeChangedInfo) -> Size

"""

    WidthChanged = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that declares whether the Width component of the size changed.

Get: WidthChanged(self: SizeChangedInfo) -> bool

"""



class SizeConverter(TypeConverter):
    """
    Converts instances of other types to and from instances of the System.Windows.Size class.
    
    SizeConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: SizeConverter, context: ITypeDescriptorContext, sourceType: Type) -> bool
        
            Determines whether a class can be converted from a given type to an instance of 
             System.Windows.Size.
        
        
            context: Provides contextual information about a component.
            sourceType: Identifies the data type to evaluate for conversion.
            Returns: true if the sourceType can be converted to an instance of System.Windows.Size; 
             otherwise, false.
        """
        pass

    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: SizeConverter, context: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Determines whether an instance of System.Windows.Size can be converted to a 
             different type.
        
        
            context: Provides contextual information about a component.
            destinationType: Identifies the data type to evaluate for conversion.
            Returns: true if this instance of System.Windows.Size can be converted to the 
             destinationType; otherwise, false.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: SizeConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object) -> object
        
            Attempts to convert a specified object to an instance of System.Windows.Size.
        
            context: Provides contextual information about a component.
            culture: Culture-specific information that should be respected during conversion.
            value: The source object that is being converted.
            Returns: The instance of System.Windows.Size that is created from the converted source.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: SizeConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object, destinationType: Type) -> object
        
            Attempts to convert an instance of System.Windows.Size to a specified type.
        
            context: Provides contextual information about a component.
            culture: Culture-specific information that should be respected during conversion.
            value: The instance of System.Windows.Size to convert.
            destinationType: The type that this instance of System.Windows.Size is converted to.
            Returns: The object that is created from the converted instance of System.Windows.Size.
        """
        pass


class SizeToContent(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies how a window will automatically size itself to fit the size of its content. Used by the System.Windows.Window.SizeToContent property.
    
    enum SizeToContent, values: Height (2), Manual (0), Width (1), WidthAndHeight (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Height = None
    Manual = None
    value__ = None
    Width = None
    WidthAndHeight = None


class SourceChangedEventArgs(RoutedEventArgs):
    """
    Provides data for the SourceChanged event, used for interoperation. This class cannot be inherited.
    
    SourceChangedEventArgs(oldSource: PresentationSource, newSource: PresentationSource)
    SourceChangedEventArgs(oldSource: PresentationSource, newSource: PresentationSource, element: IInputElement, oldParent: IInputElement)
    """
    @staticmethod # known case of __new__
    def __new__(self, oldSource, newSource, element=None, oldParent=None):
        """
        __new__(cls: type, oldSource: PresentationSource, newSource: PresentationSource)
        __new__(cls: type, oldSource: PresentationSource, newSource: PresentationSource, element: IInputElement, oldParent: IInputElement)
        """
        pass

    Element = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the element whose parent change causing the presentation source information to change.

Get: Element(self: SourceChangedEventArgs) -> IInputElement

"""

    NewSource = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the new source involved in this source change.

Get: NewSource(self: SourceChangedEventArgs) -> PresentationSource

"""

    OldParent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the previous parent of the element whose parent change causing the presentation source information to change.

Get: OldParent(self: SourceChangedEventArgs) -> IInputElement

"""

    OldSource = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the old source involved in this source change.

Get: OldSource(self: SourceChangedEventArgs) -> PresentationSource

"""



class SourceChangedEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """
    Represents the method that will handle the "SourceChanged" event on specific listener elements.
    
    SourceChangedEventHandler(object: object, method: IntPtr)
    """
    def BeginInvoke(self, sender, e, callback, object):
        """ BeginInvoke(self: SourceChangedEventHandler, sender: object, e: SourceChangedEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        pass

    def CombineImpl(self, *args): #cannot find CLR method
        """
        CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate
        
            Combines this System.Delegate with the specified System.Delegate to form a new 
             delegate.
        
        
            follow: The delegate to combine with this delegate.
            Returns: A delegate that is the new root of the System.MulticastDelegate invocation list.
        """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """
        DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object
        
            Dynamically invokes (late-bound) the method represented by the current delegate.
        
            args: An array of objects that are the arguments to pass to the method represented by 
             the current delegate.-or- null, if the method represented by the current 
             delegate does not require arguments.
        
            Returns: The object returned by the method represented by the delegate.
        """
        pass

    def EndInvoke(self, result):
        """ EndInvoke(self: SourceChangedEventHandler, result: IAsyncResult) """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """
        GetMethodImpl(self: MulticastDelegate) -> MethodInfo
        
            Returns a static method represented by the current System.MulticastDelegate.
            Returns: A static method represented by the current System.MulticastDelegate.
        """
        pass

    def Invoke(self, sender, e):
        """ Invoke(self: SourceChangedEventHandler, sender: object, e: SourceChangedEventArgs) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """
        RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate
        
            Removes an element from the invocation list of this System.MulticastDelegate 
             that is equal to the specified delegate.
        
        
            value: The delegate to search for in the invocation list.
            Returns: If value is found in the invocation list for this instance, then a new 
             System.Delegate without value in its invocation list; otherwise, this instance 
             with its original invocation list.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, object, method):
        """ __new__(cls: type, object: object, method: IntPtr) """
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class SplashScreen(object):
    """
    Provides a startup screen for a Windows Presentation Foundation (WPF) application.
    
    SplashScreen(resourceName: str)
    SplashScreen(resourceAssembly: Assembly, resourceName: str)
    """
    def Close(self, fadeoutDuration):
        """
        Close(self: SplashScreen, fadeoutDuration: TimeSpan)
            Closes the splash screen.
        
            fadeoutDuration: A System.TimeSpan that specifies how long it will take for the splash screen to 
             fade after the close operation has been initiated.
        """
        pass

    def Show(self, autoClose, topMost=None):
        """
        Show(self: SplashScreen, autoClose: bool, topMost: bool)
            Displays the splash screen.
        
            autoClose: true to automatically close the splash screen; false to close the splash screen 
             manually.
        
            topMost: true if the splash screen window should use the WS_EX_TOPMOST style; otherwise 
             false.
        
        Show(self: SplashScreen, autoClose: bool)
            Displays the splash screen.
        
            autoClose: true to automatically close the splash screen; false to close the splash screen 
             manually.
        """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, resourceName: str)
        __new__(cls: type, resourceAssembly: Assembly, resourceName: str)
        """
        pass


class StartupEventArgs(EventArgs):
    """ Contains the arguments for the System.Windows.Application.Startup event. """
    Args = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets command line arguments that were passed to the application from either the command prompt or the desktop.

Get: Args(self: StartupEventArgs) -> Array[str]

"""



class StartupEventHandler(MulticastDelegate, ICloneable, ISerializable):
    """
    Represents the method that handles the System.Windows.Application.Startup event.
    
    StartupEventHandler(object: object, method: IntPtr)
    """
    def BeginInvoke(self, sender, e, callback, object):
        """ BeginInvoke(self: StartupEventHandler, sender: object, e: StartupEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        pass

    def CombineImpl(self, *args): #cannot find CLR method
        """
        CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate
        
            Combines this System.Delegate with the specified System.Delegate to form a new 
             delegate.
        
        
            follow: The delegate to combine with this delegate.
            Returns: A delegate that is the new root of the System.MulticastDelegate invocation list.
        """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """
        DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object
        
            Dynamically invokes (late-bound) the method represented by the current delegate.
        
            args: An array of objects that are the arguments to pass to the method represented by 
             the current delegate.-or- null, if the method represented by the current 
             delegate does not require arguments.
        
            Returns: The object returned by the method represented by the delegate.
        """
        pass

    def EndInvoke(self, result):
        """ EndInvoke(self: StartupEventHandler, result: IAsyncResult) """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """
        GetMethodImpl(self: MulticastDelegate) -> MethodInfo
        
            Returns a static method represented by the current System.MulticastDelegate.
            Returns: A static method represented by the current System.MulticastDelegate.
        """
        pass

    def Invoke(self, sender, e):
        """ Invoke(self: StartupEventHandler, sender: object, e: StartupEventArgs) """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """
        RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate
        
            Removes an element from the invocation list of this System.MulticastDelegate 
             that is equal to the specified delegate.
        
        
            value: The delegate to search for in the invocation list.
            Returns: If value is found in the invocation list for this instance, then a new 
             System.Delegate without value in its invocation list; otherwise, this instance 
             with its original invocation list.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, object, method):
        """ __new__(cls: type, object: object, method: IntPtr) """
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class StaticResourceExtension(MarkupExtension):
    """
    Implements a markup extension that supports static (XAML load time) resource references made from XAML.
    
    StaticResourceExtension(resourceKey: object)
    StaticResourceExtension()
    """
    def ProvideValue(self, serviceProvider):
        """
        ProvideValue(self: StaticResourceExtension, serviceProvider: IServiceProvider) -> object
        
            Returns an object that should be set on the property where this extension is 
             applied. For System.Windows.StaticResourceExtension, this is the object found 
             in a resource dictionary, where the object to find is identified by the 
             System.Windows.StaticResourceExtension.ResourceKey.
        
        
            serviceProvider: Object that can provide services for the markup extension.
            Returns: The object value to set on the property where the markup extension provided 
             value is evaluated.
        """
        pass

    @staticmethod # known case of __new__
    def __new__(self, resourceKey=None):
        """
        __new__(cls: type)
        __new__(cls: type, resourceKey: object)
        """
        pass

    ResourceKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the key value passed by this static resource reference. They key is used  to return the object matching that key in resource dictionaries.

Get: ResourceKey(self: StaticResourceExtension) -> object

Set: ResourceKey(self: StaticResourceExtension) = value
"""



class StrokeCollectionConverter(TypeConverter):
    """
    Converts a System.Windows.Ink.StrokeCollection to a string.
    
    StrokeCollectionConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: StrokeCollectionConverter, context: ITypeDescriptorContext, sourceType: Type) -> bool
        
            Returns a value that indicates whether the 
             System.Windows.StrokeCollectionConverter can convert an object of a specified 
             type to a System.Windows.Ink.StrokeCollection.
        
        
            context: An System.ComponentModel.ITypeDescriptorContext that provides the format 
             context.
        
            sourceType: The System.Type to convert from.
            Returns: true if the System.Windows.StrokeCollectionConverter can convert an object of 
             type sourceType to a System.Windows.Ink.StrokeCollection; otherwise, false.
        """
        pass

    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: StrokeCollectionConverter, context: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Returns a value that indicates whether the 
             System.Windows.StrokeCollectionConverter can convert a 
             System.Windows.Ink.StrokeCollection to the specified type.
        
        
            context: An System.ComponentModel.ITypeDescriptorContext that provides the format 
             context.
        
            destinationType: The System.Type to convert to.
            Returns: true if the System.Windows.StrokeCollectionConverter can convert a 
             System.Windows.Ink.StrokeCollection to the sourceType; otherwise, false.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: StrokeCollectionConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object) -> object
        
            Converts the specified object to a System.Windows.Ink.StrokeCollection.
        
            context: An System.ComponentModel.ITypeDescriptorContext that provides a format context.
            culture: The System.Globalization.CultureInfo to use as the current culture.
            value: The System.Object to convert.
            Returns: A System.Windows.Ink.StrokeCollection converted from value.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: StrokeCollectionConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object, destinationType: Type) -> object
        
            Converts a System.Windows.Ink.StrokeCollection to a string.
        
            context: An System.ComponentModel.ITypeDescriptorContext that provides a format context.
            culture: The System.Globalization.CultureInfo to use as the current culture.
            value: The System.Object to convert.
            destinationType: The System.Type to convert to.
            Returns: An object that represents the specified System.Windows.Ink.StrokeCollection.
        """
        pass

    def GetStandardValuesSupported(self, context=None):
        """
        GetStandardValuesSupported(self: StrokeCollectionConverter, context: ITypeDescriptorContext) -> bool
        
            Returns whether this object supports a standard set of values that can be 
             picked from a list, using the specified context.
        
        
            context: An System.ComponentModel.ITypeDescriptorContext that provides a format context.
            Returns: false in all cases.
        """
        pass


class Style(DispatcherObject, INameScope, IAddChild, ISealable, IHaveResources, IQueryAmbient):
    """
    Enables the sharing of properties, resources, and event handlers between instances of a type.
    
    Style()
    Style(targetType: Type)
    Style(targetType: Type, basedOn: Style)
    """
    def GetHashCode(self):
        """
        GetHashCode(self: Style) -> int
        
            Returns the hash code for this System.Windows.Style.
            Returns: The hash code for this System.Windows.Style.
        """
        pass

    def RegisterName(self, name, scopedElement):
        """
        RegisterName(self: Style, name: str, scopedElement: object)
            Registers a new name-object pair in the current namescope.
        
            name: The name to register.
            scopedElement: The object to map to the specified name.
        """
        pass

    def Seal(self):
        """
        Seal(self: Style)
            Locks this style and all factories and triggers so they cannot be changed.
        """
        pass

    def UnregisterName(self, name):
        """
        UnregisterName(self: Style, name: str)
            Removes a name-object mapping from the namescope.
        
            name: The name of the mapping to remove.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, targetType=None, basedOn=None):
        """
        __new__(cls: type)
        __new__(cls: type, targetType: Type)
        __new__(cls: type, targetType: Type, basedOn: Style)
        """
        pass

    BasedOn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a defined style that is the basis of the current style.

Get: BasedOn(self: Style) -> Style

Set: BasedOn(self: Style) = value
"""

    IsSealed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the style is read-only and cannot be changed.

Get: IsSealed(self: Style) -> bool

"""

    Resources = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the collection of resources that can be used within the scope of this style.

Get: Resources(self: Style) -> ResourceDictionary

Set: Resources(self: Style) = value
"""

    Setters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of System.Windows.Setter and System.Windows.EventSetter objects.

Get: Setters(self: Style) -> SetterBaseCollection

"""

    TargetType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the type for which this style is intended.

Get: TargetType(self: Style) -> Type

Set: TargetType(self: Style) = value
"""

    Triggers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of System.Windows.TriggerBase objects that apply property values based on specified conditions.

Get: Triggers(self: Style) -> TriggerCollection

"""



class StyleTypedPropertyAttribute(Attribute, _Attribute):
    """
    Represents an attribute that is applied to the class definition and determines the System.Windows.Style.TargetTypes of the properties that are of type System.Windows.Style.
    
    StyleTypedPropertyAttribute()
    """
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Property = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the name of the property that is of type System.Windows.Style.

Get: Property(self: StyleTypedPropertyAttribute) -> str

Set: Property(self: StyleTypedPropertyAttribute) = value
"""

    StyleTargetType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Style.TargetType of the System.Windows.StyleTypedPropertyAttribute.Property this attribute is specifying.

Get: StyleTargetType(self: StyleTypedPropertyAttribute) -> Type

Set: StyleTargetType(self: StyleTypedPropertyAttribute) = value
"""



class SystemColors(object):
    """ Contains system colors, system brushes, and system resource keys that correspond to system display elements. """
    ActiveBorderBrush = None
    ActiveBorderBrushKey = None
    ActiveBorderColor = None
    ActiveBorderColorKey = None
    ActiveCaptionBrush = None
    ActiveCaptionBrushKey = None
    ActiveCaptionColor = None
    ActiveCaptionColorKey = None
    ActiveCaptionTextBrush = None
    ActiveCaptionTextBrushKey = None
    ActiveCaptionTextColor = None
    ActiveCaptionTextColorKey = None
    AppWorkspaceBrush = None
    AppWorkspaceBrushKey = None
    AppWorkspaceColor = None
    AppWorkspaceColorKey = None
    ControlBrush = None
    ControlBrushKey = None
    ControlColor = None
    ControlColorKey = None
    ControlDarkBrush = None
    ControlDarkBrushKey = None
    ControlDarkColor = None
    ControlDarkColorKey = None
    ControlDarkDarkBrush = None
    ControlDarkDarkBrushKey = None
    ControlDarkDarkColor = None
    ControlDarkDarkColorKey = None
    ControlLightBrush = None
    ControlLightBrushKey = None
    ControlLightColor = None
    ControlLightColorKey = None
    ControlLightLightBrush = None
    ControlLightLightBrushKey = None
    ControlLightLightColor = None
    ControlLightLightColorKey = None
    ControlTextBrush = None
    ControlTextBrushKey = None
    ControlTextColor = None
    ControlTextColorKey = None
    DesktopBrush = None
    DesktopBrushKey = None
    DesktopColor = None
    DesktopColorKey = None
    GradientActiveCaptionBrush = None
    GradientActiveCaptionBrushKey = None
    GradientActiveCaptionColor = None
    GradientActiveCaptionColorKey = None
    GradientInactiveCaptionBrush = None
    GradientInactiveCaptionBrushKey = None
    GradientInactiveCaptionColor = None
    GradientInactiveCaptionColorKey = None
    GrayTextBrush = None
    GrayTextBrushKey = None
    GrayTextColor = None
    GrayTextColorKey = None
    HighlightBrush = None
    HighlightBrushKey = None
    HighlightColor = None
    HighlightColorKey = None
    HighlightTextBrush = None
    HighlightTextBrushKey = None
    HighlightTextColor = None
    HighlightTextColorKey = None
    HotTrackBrush = None
    HotTrackBrushKey = None
    HotTrackColor = None
    HotTrackColorKey = None
    InactiveBorderBrush = None
    InactiveBorderBrushKey = None
    InactiveBorderColor = None
    InactiveBorderColorKey = None
    InactiveCaptionBrush = None
    InactiveCaptionBrushKey = None
    InactiveCaptionColor = None
    InactiveCaptionColorKey = None
    InactiveCaptionTextBrush = None
    InactiveCaptionTextBrushKey = None
    InactiveCaptionTextColor = None
    InactiveCaptionTextColorKey = None
    InactiveSelectionHighlightBrush = None
    InactiveSelectionHighlightBrushKey = None
    InactiveSelectionHighlightTextBrush = None
    InactiveSelectionHighlightTextBrushKey = None
    InfoBrush = None
    InfoBrushKey = None
    InfoColor = None
    InfoColorKey = None
    InfoTextBrush = None
    InfoTextBrushKey = None
    InfoTextColor = None
    InfoTextColorKey = None
    MenuBarBrush = None
    MenuBarBrushKey = None
    MenuBarColor = None
    MenuBarColorKey = None
    MenuBrush = None
    MenuBrushKey = None
    MenuColor = None
    MenuColorKey = None
    MenuHighlightBrush = None
    MenuHighlightBrushKey = None
    MenuHighlightColor = None
    MenuHighlightColorKey = None
    MenuTextBrush = None
    MenuTextBrushKey = None
    MenuTextColor = None
    MenuTextColorKey = None
    ScrollBarBrush = None
    ScrollBarBrushKey = None
    ScrollBarColor = None
    ScrollBarColorKey = None
    WindowBrush = None
    WindowBrushKey = None
    WindowColor = None
    WindowColorKey = None
    WindowFrameBrush = None
    WindowFrameBrushKey = None
    WindowFrameColor = None
    WindowFrameColorKey = None
    WindowTextBrush = None
    WindowTextBrushKey = None
    WindowTextColor = None
    WindowTextColorKey = None
    __all__ = []


class SystemCommands(object):
    # no doc
    @staticmethod
    def CloseWindow(window):
        """ CloseWindow(window: Window) """
        pass

    @staticmethod
    def MaximizeWindow(window):
        """ MaximizeWindow(window: Window) """
        pass

    @staticmethod
    def MinimizeWindow(window):
        """ MinimizeWindow(window: Window) """
        pass

    @staticmethod
    def RestoreWindow(window):
        """ RestoreWindow(window: Window) """
        pass

    @staticmethod
    def ShowSystemMenu(window, screenLocation):
        """ ShowSystemMenu(window: Window, screenLocation: Point) """
        pass

    CloseWindowCommand = None
    MaximizeWindowCommand = None
    MinimizeWindowCommand = None
    RestoreWindowCommand = None
    ShowSystemMenuCommand = None
    __all__ = [
        'CloseWindow',
        'MaximizeWindow',
        'MinimizeWindow',
        'RestoreWindow',
        'ShowSystemMenu',
    ]


class SystemFonts(object):
    """ Contains properties that expose the system resources that concern fonts. """
    CaptionFontFamily = None
    CaptionFontFamilyKey = None
    CaptionFontSize = 12.0
    CaptionFontSizeKey = None
    CaptionFontStyle = None
    CaptionFontStyleKey = None
    CaptionFontTextDecorations = None
    CaptionFontTextDecorationsKey = None
    CaptionFontWeight = None
    CaptionFontWeightKey = None
    IconFontFamily = None
    IconFontFamilyKey = None
    IconFontSize = 12.0
    IconFontSizeKey = None
    IconFontStyle = None
    IconFontStyleKey = None
    IconFontTextDecorations = None
    IconFontTextDecorationsKey = None
    IconFontWeight = None
    IconFontWeightKey = None
    MenuFontFamily = None
    MenuFontFamilyKey = None
    MenuFontSize = 12.0
    MenuFontSizeKey = None
    MenuFontStyle = None
    MenuFontStyleKey = None
    MenuFontTextDecorations = None
    MenuFontTextDecorationsKey = None
    MenuFontWeight = None
    MenuFontWeightKey = None
    MessageFontFamily = None
    MessageFontFamilyKey = None
    MessageFontSize = 12.0
    MessageFontSizeKey = None
    MessageFontStyle = None
    MessageFontStyleKey = None
    MessageFontTextDecorations = None
    MessageFontTextDecorationsKey = None
    MessageFontWeight = None
    MessageFontWeightKey = None
    SmallCaptionFontFamily = None
    SmallCaptionFontFamilyKey = None
    SmallCaptionFontSize = 12.0
    SmallCaptionFontSizeKey = None
    SmallCaptionFontStyle = None
    SmallCaptionFontStyleKey = None
    SmallCaptionFontTextDecorations = None
    SmallCaptionFontTextDecorationsKey = None
    SmallCaptionFontWeight = None
    SmallCaptionFontWeightKey = None
    StatusFontFamily = None
    StatusFontFamilyKey = None
    StatusFontSize = 12.0
    StatusFontSizeKey = None
    StatusFontStyle = None
    StatusFontStyleKey = None
    StatusFontTextDecorations = None
    StatusFontTextDecorationsKey = None
    StatusFontWeight = None
    StatusFontWeightKey = None
    __all__ = []


class SystemParameters(object):
    """ Contains properties that you can use to query system settings. """
    Border = 1
    BorderKey = None
    BorderWidth = 1.0
    BorderWidthKey = None
    CaptionHeight = 22.0
    CaptionHeightKey = None
    CaptionWidth = 36.0
    CaptionWidthKey = None
    CaretWidth = 1.0
    CaretWidthKey = None
    ClientAreaAnimation = True
    ClientAreaAnimationKey = None
    ComboBoxAnimation = True
    ComboBoxAnimationKey = None
    ComboBoxPopupAnimation = None
    ComboBoxPopupAnimationKey = None
    CursorHeight = 32.0
    CursorHeightKey = None
    CursorShadow = False
    CursorShadowKey = None
    CursorWidth = 32.0
    CursorWidthKey = None
    DragFullWindows = True
    DragFullWindowsKey = None
    DropShadow = True
    DropShadowKey = None
    FixedFrameHorizontalBorderHeight = 3.0
    FixedFrameHorizontalBorderHeightKey = None
    FixedFrameVerticalBorderWidth = 3.0
    FixedFrameVerticalBorderWidthKey = None
    FlatMenu = True
    FlatMenuKey = None
    FocusBorderHeight = 1.0
    FocusBorderHeightKey = None
    FocusBorderWidth = 1.0
    FocusBorderWidthKey = None
    FocusHorizontalBorderHeight = 1.0
    FocusHorizontalBorderHeightKey = None
    FocusVerticalBorderWidth = 1.0
    FocusVerticalBorderWidthKey = None
    FocusVisualStyleKey = None
    ForegroundFlashCount = 7
    ForegroundFlashCountKey = None
    FullPrimaryScreenHeight = 1017.0
    FullPrimaryScreenHeightKey = None
    FullPrimaryScreenWidth = 1920.0
    FullPrimaryScreenWidthKey = None
    GradientCaptions = True
    GradientCaptionsKey = None
    HighContrast = False
    HighContrastKey = None
    HorizontalScrollBarButtonWidth = 17.0
    HorizontalScrollBarButtonWidthKey = None
    HorizontalScrollBarHeight = 17.0
    HorizontalScrollBarHeightKey = None
    HorizontalScrollBarThumbWidth = 17.0
    HorizontalScrollBarThumbWidthKey = None
    HotTracking = True
    HotTrackingKey = None
    IconGridHeight = 75.0
    IconGridHeightKey = None
    IconGridWidth = 75.0
    IconGridWidthKey = None
    IconHeight = 32.0
    IconHeightKey = None
    IconHorizontalSpacing = 75.0
    IconHorizontalSpacingKey = None
    IconTitleWrap = True
    IconTitleWrapKey = None
    IconVerticalSpacing = 75.0
    IconVerticalSpacingKey = None
    IconWidth = 32.0
    IconWidthKey = None
    IsGlassEnabled = True
    IsImmEnabled = True
    IsImmEnabledKey = None
    IsMediaCenter = False
    IsMediaCenterKey = None
    IsMenuDropRightAligned = False
    IsMenuDropRightAlignedKey = None
    IsMiddleEastEnabled = False
    IsMiddleEastEnabledKey = None
    IsMousePresent = True
    IsMousePresentKey = None
    IsMouseWheelPresent = True
    IsMouseWheelPresentKey = None
    IsPenWindows = False
    IsPenWindowsKey = None
    IsRemotelyControlled = False
    IsRemotelyControlledKey = None
    IsRemoteSession = False
    IsRemoteSessionKey = None
    IsSlowMachine = False
    IsSlowMachineKey = None
    IsTabletPC = False
    IsTabletPCKey = None
    KanjiWindowHeight = 0.0
    KanjiWindowHeightKey = None
    KeyboardCues = False
    KeyboardCuesKey = None
    KeyboardDelay = 1
    KeyboardDelayKey = None
    KeyboardPreference = False
    KeyboardPreferenceKey = None
    KeyboardSpeed = 31
    KeyboardSpeedKey = None
    ListBoxSmoothScrolling = True
    ListBoxSmoothScrollingKey = None
    MaximizedPrimaryScreenHeight = 1056.0
    MaximizedPrimaryScreenHeightKey = None
    MaximizedPrimaryScreenWidth = 1936.0
    MaximizedPrimaryScreenWidthKey = None
    MaximumWindowTrackHeight = 1204.0
    MaximumWindowTrackHeightKey = None
    MaximumWindowTrackWidth = 3844.0
    MaximumWindowTrackWidthKey = None
    MenuAnimation = True
    MenuAnimationKey = None
    MenuBarHeight = 20.0
    MenuBarHeightKey = None
    MenuButtonHeight = 19.0
    MenuButtonHeightKey = None
    MenuButtonWidth = 19.0
    MenuButtonWidthKey = None
    MenuCheckmarkHeight = 15.0
    MenuCheckmarkHeightKey = None
    MenuCheckmarkWidth = 15.0
    MenuCheckmarkWidthKey = None
    MenuDropAlignment = False
    MenuDropAlignmentKey = None
    MenuFade = True
    MenuFadeKey = None
    MenuHeight = 19.0
    MenuHeightKey = None
    MenuPopupAnimation = None
    MenuPopupAnimationKey = None
    MenuShowDelay = 400
    MenuShowDelayKey = None
    MenuWidth = 19.0
    MenuWidthKey = None
    MinimizeAnimation = True
    MinimizeAnimationKey = None
    MinimizedGridHeight = 28.0
    MinimizedGridHeightKey = None
    MinimizedGridWidth = 160.0
    MinimizedGridWidthKey = None
    MinimizedWindowHeight = 28.0
    MinimizedWindowHeightKey = None
    MinimizedWindowWidth = 160.0
    MinimizedWindowWidthKey = None
    MinimumHorizontalDragDistance = 4.0
    MinimumVerticalDragDistance = 4.0
    MinimumWindowHeight = 39.0
    MinimumWindowHeightKey = None
    MinimumWindowTrackHeight = 39.0
    MinimumWindowTrackHeightKey = None
    MinimumWindowTrackWidth = 136.0
    MinimumWindowTrackWidthKey = None
    MinimumWindowWidth = 136.0
    MinimumWindowWidthKey = None
    MouseHoverHeight = 4.0
    MouseHoverHeightKey = None
    MouseHoverTime = None
    MouseHoverTimeKey = None
    MouseHoverWidth = 4.0
    MouseHoverWidthKey = None
    NavigationChromeDownLevelStyleKey = None
    NavigationChromeStyleKey = None
    PowerLineStatus = None
    PowerLineStatusKey = None
    PrimaryScreenHeight = 1080.0
    PrimaryScreenHeightKey = None
    PrimaryScreenWidth = 1920.0
    PrimaryScreenWidthKey = None
    ResizeFrameHorizontalBorderHeight = 4.0
    ResizeFrameHorizontalBorderHeightKey = None
    ResizeFrameVerticalBorderWidth = 4.0
    ResizeFrameVerticalBorderWidthKey = None
    ScrollHeight = 17.0
    ScrollHeightKey = None
    ScrollWidth = 17.0
    ScrollWidthKey = None
    SelectionFade = True
    SelectionFadeKey = None
    ShowSounds = False
    ShowSoundsKey = None
    SmallCaptionHeight = 22.0
    SmallCaptionHeightKey = None
    SmallCaptionWidth = 22.0
    SmallCaptionWidthKey = None
    SmallIconHeight = 16.0
    SmallIconHeightKey = None
    SmallIconWidth = 16.0
    SmallIconWidthKey = None
    SmallWindowCaptionButtonHeight = 22.0
    SmallWindowCaptionButtonHeightKey = None
    SmallWindowCaptionButtonWidth = 22.0
    SmallWindowCaptionButtonWidthKey = None
    SnapToDefaultButton = False
    SnapToDefaultButtonKey = None
    StaticPropertyChanged = None
    StylusHotTracking = False
    StylusHotTrackingKey = None
    SwapButtons = False
    SwapButtonsKey = None
    ThickHorizontalBorderHeight = 2.0
    ThickHorizontalBorderHeightKey = None
    ThickVerticalBorderWidth = 2.0
    ThickVerticalBorderWidthKey = None
    ThinHorizontalBorderHeight = 1.0
    ThinHorizontalBorderHeightKey = None
    ThinVerticalBorderWidth = 1.0
    ThinVerticalBorderWidthKey = None
    ToolTipAnimation = True
    ToolTipAnimationKey = None
    ToolTipFade = True
    ToolTipFadeKey = None
    ToolTipPopupAnimation = None
    ToolTipPopupAnimationKey = None
    UIEffects = True
    UIEffectsKey = None
    UxThemeColor = 'NormalColor'
    UxThemeName = 'Aero'
    VerticalScrollBarButtonHeight = 17.0
    VerticalScrollBarButtonHeightKey = None
    VerticalScrollBarThumbHeight = 17.0
    VerticalScrollBarThumbHeightKey = None
    VerticalScrollBarWidth = 17.0
    VerticalScrollBarWidthKey = None
    VirtualScreenHeight = 1200.0
    VirtualScreenHeightKey = None
    VirtualScreenLeft = 0.0
    VirtualScreenLeftKey = None
    VirtualScreenTop = 0.0
    VirtualScreenTopKey = None
    VirtualScreenWidth = 3840.0
    VirtualScreenWidthKey = None
    WheelScrollLines = 3
    WheelScrollLinesKey = None
    WindowCaptionButtonHeight = 22.0
    WindowCaptionButtonHeightKey = None
    WindowCaptionButtonWidth = 36.0
    WindowCaptionButtonWidthKey = None
    WindowCaptionHeight = 23.0
    WindowCaptionHeightKey = None
    WindowCornerRadius = None
    WindowGlassBrush = None
    WindowGlassColor = None
    WindowNonClientFrameThickness = None
    WindowResizeBorderThickness = None
    WorkArea = None
    WorkAreaKey = None
    __all__ = [
        'StaticPropertyChanged',
    ]


class TemplateBindingExpression(Expression):
    """ Describes a run-time instance of a System.Windows.TemplateBindingExtension. """
    TemplateBindingExtension = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the System.Windows.TemplateBindingExtension object of this expression instance.

Get: TemplateBindingExtension(self: TemplateBindingExpression) -> TemplateBindingExtension

"""



class TemplateBindingExpressionConverter(TypeConverter):
    """
    A type converter that is used to construct a markup extension from a System.Windows.TemplateBindingExpression instance during serialization.
    
    TemplateBindingExpressionConverter()
    """
    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: TemplateBindingExpressionConverter, context: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Returns whether this converter can convert the object to the specified type, 
             using the specified context.
        
        
            context: An System.ComponentModel.ITypeDescriptorContext implementation that provides a 
             format context.
        
            destinationType: The desired type of the conversion's output.
            Returns: true if this converter can perform the requested conversion; otherwise, false. 
             Only a destinationType of System.Windows.Markup.MarkupExtension returns true.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: TemplateBindingExpressionConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object, destinationType: Type) -> object
        
            Converts the given value object to a System.Windows.Markup.MarkupExtension type.
        
            context: An System.ComponentModel.ITypeDescriptorContext implementation that provides a 
             format context.
        
            culture: A System.Globalization.CultureInfo object. If a null reference is passed, the 
             current culture is assumed.
        
            value: The value to convert.
            destinationType: The desired type to convert to.
            Returns: The converted value.
        """
        pass


class TemplateBindingExtension(MarkupExtension):
    """
    Implements a markup extension that supports the binding between the value of a property in a template and the value of some other exposed property on the templated control.
    
    TemplateBindingExtension()
    TemplateBindingExtension(property: DependencyProperty)
    """
    def ProvideValue(self, serviceProvider):
        """
        ProvideValue(self: TemplateBindingExtension, serviceProvider: IServiceProvider) -> object
        
            Returns an object that should be set as the value on the target object's 
             property for this markup extension. For 
             System.Windows.TemplateBindingExtension, this is an expression 
             (System.Windows.TemplateBindingExpression) that supports the binding.
        
        
            serviceProvider: An object that can provide services for the markup extension. May be null in 
             this implementation.
        
            Returns: The expression that supports the binding.
        """
        pass

    @staticmethod # known case of __new__
    def __new__(self, property=None):
        """
        __new__(cls: type)
        __new__(cls: type, property: DependencyProperty)
        """
        pass

    Converter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the converter that interprets between source and target of a binding.

Get: Converter(self: TemplateBindingExtension) -> IValueConverter

Set: Converter(self: TemplateBindingExtension) = value
"""

    ConverterParameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the parameter to pass to the converter.

Get: ConverterParameter(self: TemplateBindingExtension) -> object

Set: ConverterParameter(self: TemplateBindingExtension) = value
"""

    Property = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the property being bound to.

Get: Property(self: TemplateBindingExtension) -> DependencyProperty

Set: Property(self: TemplateBindingExtension) = value
"""



class TemplateBindingExtensionConverter(TypeConverter):
    """
    A type converter that is used to construct a System.Windows.TemplateBindingExtension from an instance during serialization.
    
    TemplateBindingExtensionConverter()
    """
    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: TemplateBindingExtensionConverter, context: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Returns whether this converter can convert the object to the specified type, 
             using the specified context.
        
        
            context: An System.ComponentModel.ITypeDescriptorContext implementation that provides a 
             format context.
        
            destinationType: The desired type of the conversion's output.
            Returns: true if this converter can perform the requested conversion; otherwise, false. 
             Only a destinationType of 
             System.ComponentModel.Design.Serialization.InstanceDescriptor will return true.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: TemplateBindingExtensionConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object, destinationType: Type) -> object
        
            Converts the given value object to the specified type.
        
            context: An System.ComponentModel.ITypeDescriptorContext implementation that provides a 
             format context.
        
            culture: A System.Globalization.CultureInfo object. If a null reference is passed, the 
             current culture is assumed.
        
            value: The value to convert.
            destinationType: The desired type to convert to.
            Returns: The converted value.
        """
        pass


class TemplateContent(object):
    """ Implements the record and playback logic that templates use for deferring content when they interact with XAML readers and writers. """

class TemplateContentLoader(XamlDeferringLoader):
    """
    Implements System.Xaml.XamlDeferringLoader in order to defer loading of the XAML content that is defined for a template in WPF XAML.
    
    TemplateContentLoader()
    """
    def Load(self, xamlReader, serviceProvider):
        """
        Load(self: TemplateContentLoader, xamlReader: XamlReader, serviceProvider: IServiceProvider) -> object
        
            Loads XAML content in a deferred mode, based on a System.Xaml.XamlReader and 
             certain required services from a service provider.
        
        
            xamlReader: The initiating reader that is then returned on calls to 
             System.Windows.TemplateContentLoader.Save(System.Object,System.IServiceProvider)
             .
        
            serviceProvider: Service provider for required services.
            Returns: The root object for the node stream of the input System.Xaml.XamlReader. 
             Specifically, this is a System.Windows.TemplateContent instance.
        """
        pass

    def Save(self, value, serviceProvider):
        """
        Save(self: TemplateContentLoader, value: object, serviceProvider: IServiceProvider) -> XamlReader
        
            Do not use; always throws an exception. See Remarks.
        
            value: The input value to commit for deferred loading.
            serviceProvider: Service provider for required services.
            Returns: Always throws an exception. See Remarks.
        """
        pass


class TemplatePartAttribute(Attribute, _Attribute):
    """
    Represents an attribute that is applied to the class definition to identify the types of the named parts that are used for templating.
    
    TemplatePartAttribute()
    """
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the pre-defined name of the part.

Get: Name(self: TemplatePartAttribute) -> str

Set: Name(self: TemplatePartAttribute) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the type of the named part this attribute is identifying.

Get: Type(self: TemplatePartAttribute) -> Type

Set: Type(self: TemplatePartAttribute) = value
"""



class TemplateVisualStateAttribute(Attribute, _Attribute):
    """
    Specifies that a control can be in a certain state and that a System.Windows.VisualState is expected in the control's System.Windows.Controls.ControlTemplate.
    
    TemplateVisualStateAttribute()
    """
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    GroupName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the name of the group that the state belongs to.

Get: GroupName(self: TemplateVisualStateAttribute) -> str

Set: GroupName(self: TemplateVisualStateAttribute) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the name of the state that the control can be in.

Get: Name(self: TemplateVisualStateAttribute) -> str

Set: Name(self: TemplateVisualStateAttribute) = value
"""



class TextAlignment(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies whether the text in the object is left-aligned, right-aligned, centered, or justified.
    
    enum TextAlignment, values: Center (2), Justify (3), Left (0), Right (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Center = None
    Justify = None
    Left = None
    Right = None
    value__ = None


class TextDataFormat(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies the data format of the text data.
    
    enum TextDataFormat, values: CommaSeparatedValue (4), Html (3), Rtf (2), Text (0), UnicodeText (1), Xaml (5)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CommaSeparatedValue = None
    Html = None
    Rtf = None
    Text = None
    UnicodeText = None
    value__ = None
    Xaml = None


class TextDecoration(Animatable, ISealable, IAnimatable, IResource):
    """
    Represents a text decoration, which a visual ornamentation that is added to text (such as an underline).
    
    TextDecoration()
    TextDecoration(location: TextDecorationLocation, pen: Pen, penOffset: float, penOffsetUnit: TextDecorationUnit, penThicknessUnit: TextDecorationUnit)
    """
    def Clone(self):
        """
        Clone(self: TextDecoration) -> TextDecoration
        
            Creates a modifiable clone of this System.Windows.TextDecoration, making deep 
             copies of this object's values.
        
            Returns: A modifiable clone of the current object. The cloned object's 
             System.Windows.Freezable.IsFrozen property is false even if the source's 
             System.Windows.Freezable.IsFrozen property is true.
        """
        pass

    def CloneCore(self, *args): #cannot find CLR method
        """
        CloneCore(self: Freezable, sourceFreezable: Freezable)
            Makes the instance a clone (deep copy) of the specified 
             System.Windows.Freezable using base (non-animated) property values.
        
        
            sourceFreezable: The object to clone.
        """
        pass

    def CloneCurrentValue(self):
        """
        CloneCurrentValue(self: TextDecoration) -> TextDecoration
        
            Creates a modifiable clone of this System.Windows.TextDecoration object, making 
             deep copies of this object's current values.
        
            Returns: A modifiable clone of the current object. The cloned object's 
             System.Windows.Freezable.IsFrozen property value is false even if the source's 
             System.Windows.Freezable.IsFrozen property value is true.
        """
        pass

    def CloneCurrentValueCore(self, *args): #cannot find CLR method
        """
        CloneCurrentValueCore(self: Freezable, sourceFreezable: Freezable)
            Makes the instance a modifiable clone (deep copy) of the specified 
             System.Windows.Freezable using current property values.
        
        
            sourceFreezable: The System.Windows.Freezable to be cloned.
        """
        pass

    def CreateInstance(self, *args): #cannot find CLR method
        """
        CreateInstance(self: Freezable) -> Freezable
        
            Initializes a new instance of the System.Windows.Freezable class.
            Returns: The new instance.
        """
        pass

    def CreateInstanceCore(self, *args): #cannot find CLR method
        """ CreateInstanceCore(self: TextDecoration) -> Freezable """
        pass

    def FreezeCore(self, *args): #cannot find CLR method
        """
        FreezeCore(self: Animatable, isChecking: bool) -> bool
        
            Makes this System.Windows.Media.Animation.Animatable object unmodifiable or 
             determines whether it can be made unmodifiable.
        
        
            isChecking: true if this method should simply determine whether this instance can be 
             frozen. false if this instance should actually freeze itself when this method 
             is called.
        
            Returns: If isChecking is true, this method returns true if this 
             System.Windows.Media.Animation.Animatable can be made unmodifiable, or false if 
             it cannot be made unmodifiable. If isChecking is false, this method returns 
             true if the if this System.Windows.Media.Animation.Animatable is now 
             unmodifiable, or false if it cannot be made unmodifiable, with the side effect 
             of having begun to change the frozen status of this object.
        """
        pass

    def GetAsFrozenCore(self, *args): #cannot find CLR method
        """
        GetAsFrozenCore(self: Freezable, sourceFreezable: Freezable)
            Makes the instance a frozen clone of the specified System.Windows.Freezable 
             using base (non-animated) property values.
        
        
            sourceFreezable: The instance to copy.
        """
        pass

    def GetCurrentValueAsFrozenCore(self, *args): #cannot find CLR method
        """
        GetCurrentValueAsFrozenCore(self: Freezable, sourceFreezable: Freezable)
            Makes the current instance a frozen clone of the specified 
             System.Windows.Freezable. If the object has animated dependency properties, 
             their current animated values are copied.
        
        
            sourceFreezable: The System.Windows.Freezable to copy and freeze.
        """
        pass

    def OnChanged(self, *args): #cannot find CLR method
        """
        OnChanged(self: Freezable)
            Called when the current System.Windows.Freezable object is modified.
        """
        pass

    def OnFreezablePropertyChanged(self, *args): #cannot find CLR method
        """
        OnFreezablePropertyChanged(self: Freezable, oldValue: DependencyObject, newValue: DependencyObject, property: DependencyProperty)
            This member supports the Windows Presentation Foundation (WPF) infrastructure 
             and is not intended to be used directly from your code.
        
        
            oldValue: The previous value of the data member.
            newValue: The current value of the data member.
            property: The property that changed.
        OnFreezablePropertyChanged(self: Freezable, oldValue: DependencyObject, newValue: DependencyObject)
            Ensures that appropriate context pointers are established for a 
             System.Windows.DependencyObjectType data member that has just been set.
        
        
            oldValue: The previous value of the data member.
            newValue: The current value of the data member.
        """
        pass

    def OnPropertyChanged(self, *args): #cannot find CLR method
        """
        OnPropertyChanged(self: Freezable, e: DependencyPropertyChangedEventArgs)
            Overrides the System.Windows.DependencyObject implementation of 
             System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPrope
             rtyChangedEventArgs) to also invoke any System.Windows.Freezable.Changed 
             handlers in response to a changing dependency property of type 
             System.Windows.Freezable.
        
        
            e: Event data that contains information about which property changed, and its old 
             and new values.
        """
        pass

    def ReadPreamble(self, *args): #cannot find CLR method
        """
        ReadPreamble(self: Freezable)
            Ensures that the System.Windows.Freezable is being accessed from a valid 
             thread. Inheritors of System.Windows.Freezable must call this method at the 
             beginning of any API that reads data members that are not dependency 
             properties.
        """
        pass

    def ShouldSerializeProperty(self, *args): #cannot find CLR method
        """
        ShouldSerializeProperty(self: DependencyObject, dp: DependencyProperty) -> bool
        
            Returns a value that indicates whether serialization processes should serialize 
             the value for the provided dependency property.
        
        
            dp: The identifier for the dependency property that should be serialized.
            Returns: true if the dependency property that is supplied should be value-serialized; 
             otherwise, false.
        
        ShouldSerializeProperty(self: Window_16$17, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Label_17$18, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: TextBox_18$19, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Button_19$20, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: CheckBox_20$21, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: ComboBox_21$22, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Separator_22$23, dp: DependencyProperty) -> bool
        """
        pass

    def WritePostscript(self, *args): #cannot find CLR method
        """
        WritePostscript(self: Freezable)
            Raises the System.Windows.Freezable.Changed event for the 
             System.Windows.Freezable and invokes its System.Windows.Freezable.OnChanged 
             method. Classes that derive from System.Windows.Freezable should call this 
             method at the end of any API that modifies class members that are not stored as 
             dependency properties.
        """
        pass

    def WritePreamble(self, *args): #cannot find CLR method
        """
        WritePreamble(self: Freezable)
            Verifies that the System.Windows.Freezable is not frozen and that it is being 
             accessed from a valid threading context. System.Windows.Freezable inheritors 
             should call this method at the beginning of any API that writes to data members 
             that are not dependency properties.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, location=None, pen=None, penOffset=None, penOffsetUnit=None, penThicknessUnit=None):
        """
        __new__(cls: type)
        __new__(cls: type, location: TextDecorationLocation, pen: Pen, penOffset: float, penOffsetUnit: TextDecorationUnit, penThicknessUnit: TextDecorationUnit)
        """
        pass

    Location = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the vertical location at which the text decoration is drawn.

Get: Location(self: TextDecoration) -> TextDecorationLocation

Set: Location(self: TextDecoration) = value
"""

    Pen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.Pen used to draw the text decoration.

Get: Pen(self: TextDecoration) -> Pen

Set: Pen(self: TextDecoration) = value
"""

    PenOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the text decoration's offset from its System.Windows.TextDecoration.Location.

Get: PenOffset(self: TextDecoration) -> float

Set: PenOffset(self: TextDecoration) = value
"""

    PenOffsetUnit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the units in which the System.Windows.TextDecoration.PenOffset value is expressed.

Get: PenOffsetUnit(self: TextDecoration) -> TextDecorationUnit

Set: PenOffsetUnit(self: TextDecoration) = value
"""

    PenThicknessUnit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the units in which the System.Windows.Media.Pen.Thickness of the text decoration's System.Windows.TextDecoration.Pen is expressed.

Get: PenThicknessUnit(self: TextDecoration) -> TextDecorationUnit

Set: PenThicknessUnit(self: TextDecoration) = value
"""


    LocationProperty = None
    PenOffsetProperty = None
    PenOffsetUnitProperty = None
    PenProperty = None
    PenThicknessUnitProperty = None


class TextDecorationCollection(Animatable, ISealable, IAnimatable, IResource, IList, ICollection, IEnumerable, IList[TextDecoration], ICollection[TextDecoration], IEnumerable[TextDecoration]):
    """
    Represents a collection of System.Windows.TextDecoration instances.
    
    TextDecorationCollection()
    TextDecorationCollection(capacity: int)
    TextDecorationCollection(collection: IEnumerable[TextDecoration])
    """
    def Add(self, *__args):
        """
        Add(self: TextDecorationCollection, value: TextDecoration)
            Inserts the specified System.Windows.TextDecoration object into the collection.
        
            value: The System.Windows.TextDecoration object to insert.
        Add(self: TextDecorationCollection, textDecorations: IEnumerable[TextDecoration])
        """
        pass

    def Clear(self):
        """
        Clear(self: TextDecorationCollection)
            Removes all System.Windows.TextDecoration objects from the 
             System.Windows.TextDecorationCollection.
        """
        pass

    def Clone(self):
        """
        Clone(self: TextDecorationCollection) -> TextDecorationCollection
        
            Creates a modifiable clone of this System.Windows.TextDecorationCollection, 
             making deep copies of this object's values. When copying dependency properties, 
             this method copies resource references and data bindings (but they might no 
             longer resolve) but not animations or their current values.
        
            Returns: A modifiable clone of the current object. The cloned object's 
             System.Windows.Freezable.IsFrozen property will be false even if the source's 
             System.Windows.Freezable.IsFrozen property was true.
        """
        pass

    def CloneCore(self, *args): #cannot find CLR method
        """ CloneCore(self: TextDecorationCollection, source: Freezable) """
        pass

    def CloneCurrentValue(self):
        """
        CloneCurrentValue(self: TextDecorationCollection) -> TextDecorationCollection
        
            Creates a modifiable clone of this System.Windows.TextDecorationCollection 
             object, making deep copies of this object's current values. Resource 
             references, data bindings, and animations are not copied, but their current 
             values are.
        
            Returns: A modifiable clone of the current object. The cloned object's 
             System.Windows.Freezable.IsFrozen property will be false even if the source's 
             System.Windows.Freezable.IsFrozen property was true.
        """
        pass

    def CloneCurrentValueCore(self, *args): #cannot find CLR method
        """ CloneCurrentValueCore(self: TextDecorationCollection, source: Freezable) """
        pass

    def Contains(self, value):
        """
        Contains(self: TextDecorationCollection, value: TextDecoration) -> bool
        
            Determines if the System.Windows.TextDecorationCollection contains the 
             specified System.Windows.TextDecoration.
        
        
            value: The System.Windows.TextDecoration object to locate.
            Returns: true if value is in the collection; otherwise, false.
        """
        pass

    def CopyTo(self, array, index):
        """
        CopyTo(self: TextDecorationCollection, array: Array[TextDecoration], index: int)
            Copies the System.Windows.TextDecoration objects in the collection into an 
             array of System.Windows.TextDecorationCollection, starting at the specified 
             index position.
        
        
            array: The destination array.
            index: The zero-based index position where copying begins.
        """
        pass

    def CreateInstance(self, *args): #cannot find CLR method
        """
        CreateInstance(self: Freezable) -> Freezable
        
            Initializes a new instance of the System.Windows.Freezable class.
            Returns: The new instance.
        """
        pass

    def CreateInstanceCore(self, *args): #cannot find CLR method
        """ CreateInstanceCore(self: TextDecorationCollection) -> Freezable """
        pass

    def FreezeCore(self, *args): #cannot find CLR method
        """ FreezeCore(self: TextDecorationCollection, isChecking: bool) -> bool """
        pass

    def GetAsFrozenCore(self, *args): #cannot find CLR method
        """ GetAsFrozenCore(self: TextDecorationCollection, source: Freezable) """
        pass

    def GetCurrentValueAsFrozenCore(self, *args): #cannot find CLR method
        """ GetCurrentValueAsFrozenCore(self: TextDecorationCollection, source: Freezable) """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: TextDecorationCollection) -> Enumerator
        
            Returns an enumerator that can iterate through the collection.
            Returns: An enumerator that can iterate through the collection.
        """
        pass

    def IndexOf(self, value):
        """
        IndexOf(self: TextDecorationCollection, value: TextDecoration) -> int
        
            Returns the index of the specified System.Windows.TextDecoration object within 
             the collection.
        
        
            value: The System.Windows.TextDecoration object to locate.
            Returns: The zero-based index of value, if found; otherwise -1;
        """
        pass

    def Insert(self, index, value):
        """
        Insert(self: TextDecorationCollection, index: int, value: TextDecoration)
            Inserts the specified System.Windows.TextDecoration object at the specified 
             index position in the collection.
        
        
            index: The zero-based index position to insert the object.
            value: The System.Windows.TextDecoration object to insert.
        """
        pass

    def OnChanged(self, *args): #cannot find CLR method
        """
        OnChanged(self: Freezable)
            Called when the current System.Windows.Freezable object is modified.
        """
        pass

    def OnFreezablePropertyChanged(self, *args): #cannot find CLR method
        """
        OnFreezablePropertyChanged(self: Freezable, oldValue: DependencyObject, newValue: DependencyObject, property: DependencyProperty)
            This member supports the Windows Presentation Foundation (WPF) infrastructure 
             and is not intended to be used directly from your code.
        
        
            oldValue: The previous value of the data member.
            newValue: The current value of the data member.
            property: The property that changed.
        OnFreezablePropertyChanged(self: Freezable, oldValue: DependencyObject, newValue: DependencyObject)
            Ensures that appropriate context pointers are established for a 
             System.Windows.DependencyObjectType data member that has just been set.
        
        
            oldValue: The previous value of the data member.
            newValue: The current value of the data member.
        """
        pass

    def OnPropertyChanged(self, *args): #cannot find CLR method
        """
        OnPropertyChanged(self: Freezable, e: DependencyPropertyChangedEventArgs)
            Overrides the System.Windows.DependencyObject implementation of 
             System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPrope
             rtyChangedEventArgs) to also invoke any System.Windows.Freezable.Changed 
             handlers in response to a changing dependency property of type 
             System.Windows.Freezable.
        
        
            e: Event data that contains information about which property changed, and its old 
             and new values.
        """
        pass

    def ReadPreamble(self, *args): #cannot find CLR method
        """
        ReadPreamble(self: Freezable)
            Ensures that the System.Windows.Freezable is being accessed from a valid 
             thread. Inheritors of System.Windows.Freezable must call this method at the 
             beginning of any API that reads data members that are not dependency 
             properties.
        """
        pass

    def Remove(self, value):
        """
        Remove(self: TextDecorationCollection, value: TextDecoration) -> bool
        
            Removes the specified System.Windows.TextDecoration object from the collection.
        
            value: The System.Windows.TextDecoration object to remove.
            Returns: true if value was successfully deleted; otherwise false.
        """
        pass

    def RemoveAt(self, index):
        """
        RemoveAt(self: TextDecorationCollection, index: int)
            Removes the specified System.Windows.TextDecoration object from the collection 
             at the specified index.
        
        
            index: The zero-based index position from where to delete the object.
        """
        pass

    def ShouldSerializeProperty(self, *args): #cannot find CLR method
        """
        ShouldSerializeProperty(self: DependencyObject, dp: DependencyProperty) -> bool
        
            Returns a value that indicates whether serialization processes should serialize 
             the value for the provided dependency property.
        
        
            dp: The identifier for the dependency property that should be serialized.
            Returns: true if the dependency property that is supplied should be value-serialized; 
             otherwise, false.
        
        ShouldSerializeProperty(self: Window_16$17, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Label_17$18, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: TextBox_18$19, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Button_19$20, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: CheckBox_20$21, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: ComboBox_21$22, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Separator_22$23, dp: DependencyProperty) -> bool
        """
        pass

    def TryRemove(self, textDecorations, result):
        """ TryRemove(self: TextDecorationCollection, textDecorations: IEnumerable[TextDecoration]) -> (bool, TextDecorationCollection) """
        pass

    def WritePostscript(self, *args): #cannot find CLR method
        """
        WritePostscript(self: Freezable)
            Raises the System.Windows.Freezable.Changed event for the 
             System.Windows.Freezable and invokes its System.Windows.Freezable.OnChanged 
             method. Classes that derive from System.Windows.Freezable should call this 
             method at the end of any API that modifies class members that are not stored as 
             dependency properties.
        """
        pass

    def WritePreamble(self, *args): #cannot find CLR method
        """
        WritePreamble(self: Freezable)
            Verifies that the System.Windows.Freezable is not frozen and that it is being 
             accessed from a valid threading context. System.Windows.Freezable inheritors 
             should call this method at the beginning of any API that writes to data members 
             that are not dependency properties.
        """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+yx.__add__(y) <==> x+y """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """
        __contains__(self: ICollection[TextDecoration], item: TextDecoration) -> bool
        __contains__(self: IList, value: object) -> bool
        
            Determines whether the System.Collections.IList contains a specific value.
        
            value: The object to locate in the System.Collections.IList.
            Returns: true if the System.Object is found in the System.Collections.IList; otherwise, 
             false.
        """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __len__(self, *args): #cannot find CLR method
        """ x.__len__() <==> len(x) """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type)
        __new__(cls: type, capacity: int)
        __new__(cls: type, collection: IEnumerable[TextDecoration])
        """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the number of System.Windows.TextDecoration objects in the System.Windows.TextDecorationCollection.

Get: Count(self: TextDecorationCollection) -> int

"""


    Enumerator = None


class TextDecorationCollectionConverter(TypeConverter):
    """
    Converts instances of System.Windows.TextDecorationCollection from other data types.
    
    TextDecorationCollectionConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: TextDecorationCollectionConverter, context: ITypeDescriptorContext, sourceType: Type) -> bool
        
            Returns a value that indicates whether this converter can convert an object of 
             the given type to an instance of System.Windows.TextDecorationCollection.
        
        
            context: Describes the context information of a type.
            sourceType: The type of the source that is being evaluated for conversion.
            Returns: true if the converter can convert the provided type to an instance of 
             System.Windows.TextDecorationCollection; otherwise, false.
        """
        pass

    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: TextDecorationCollectionConverter, context: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Determines whether an instance of System.Windows.TextDecorationCollection can 
             be converted to a different type.
        
        
            context: Describes the context information of a type.
            destinationType: The type of the source that is being evaluated for conversion.
            Returns: false is always returned because the System.Windows.TextDecorationCollection 
             cannot be converted to another type.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: TextDecorationCollectionConverter, context: ITypeDescriptorContext, culture: CultureInfo, input: object) -> object
        
            Attempts to convert a specified object to an instance of 
             System.Windows.TextDecorationCollection.
        
        
            context: Describes the context information of a type.
            culture: Describes the System.Globalization.CultureInfo of the type being converted.
            input: The object being converted.
            Returns: The instance of System.Windows.FontWeight created from the converted input.
        """
        pass

    @staticmethod
    def ConvertFromString(*__args):
        """
        ConvertFromString(text: str) -> TextDecorationCollection
        
            Attempts to convert a specified string to an instance of 
             System.Windows.TextDecorationCollection.
        
        
            text: The System.String to be converted into the 
             System.Windows.TextDecorationCollection object.
        
            Returns: The instance of System.Windows.TextDecorationCollection created from the 
             converted text.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: TextDecorationCollectionConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object, destinationType: Type) -> object
        
            Attempts to convert an instance of System.Windows.TextDecorationCollection to a 
             specified type.
        
        
            context: Describes the context information of a type.
            culture: Describes the System.Globalization.CultureInfo of the type being converted.
            value: The instance of System.Windows.TextDecorationCollection to convert.
            destinationType: The type this instance of System.Windows.TextDecorationCollection is converted 
             to.
        
            Returns: null is always returned because System.Windows.TextDecorationCollection cannot 
             be converted to any other type.
        """
        pass


class TextDecorationLocation(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies the vertical position of a System.Windows.TextDecoration object.
    
    enum TextDecorationLocation, values: Baseline (3), OverLine (1), Strikethrough (2), Underline (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Baseline = None
    OverLine = None
    Strikethrough = None
    Underline = None
    value__ = None


class TextDecorations(object):
    """ Provides a set of static predefined text decorations. """
    Baseline = None
    OverLine = None
    Strikethrough = None
    Underline = None
    __all__ = []


class TextDecorationUnit(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies the unit type of either a System.Windows.TextDecoration�System.Windows.TextDecoration.PenOffset or a System.Windows.TextDecoration.Pen thickness value.
    
    enum TextDecorationUnit, values: FontRecommended (0), FontRenderingEmSize (1), Pixel (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    FontRecommended = None
    FontRenderingEmSize = None
    Pixel = None
    value__ = None


class TextMarkerStyle(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes the appearance of a list item's bullet style.
    
    enum TextMarkerStyle, values: Box (4), Circle (2), Decimal (9), Disc (1), LowerLatin (7), LowerRoman (5), None (0), Square (3), UpperLatin (8), UpperRoman (6)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Box = None
    Circle = None
    Decimal = None
    Disc = None
    LowerLatin = None
    LowerRoman = None
    None = None
    Square = None
    UpperLatin = None
    UpperRoman = None
    value__ = None


class TextTrimming(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes how text is trimmed when it overflows the edge of its containing box.
    
    enum TextTrimming, values: CharacterEllipsis (1), None (0), WordEllipsis (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CharacterEllipsis = None
    None = None
    value__ = None
    WordEllipsis = None


class TextWrapping(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies whether text wraps when it reaches the edge of the containing box
    
    enum TextWrapping, values: NoWrap (1), Wrap (2), WrapWithOverflow (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    NoWrap = None
    value__ = None
    Wrap = None
    WrapWithOverflow = None


class ThemeDictionaryExtension(MarkupExtension):
    """
    Implements a markup extension that enables application authors to customize control styles based on the current system theme.
    
    ThemeDictionaryExtension()
    ThemeDictionaryExtension(assemblyName: str)
    """
    def ProvideValue(self, serviceProvider):
        """
        ProvideValue(self: ThemeDictionaryExtension, serviceProvider: IServiceProvider) -> object
        
            Returns an object that should be set on the property where this extension is 
             applied. For System.Windows.ThemeDictionaryExtension, this is the URI value for 
             a particular theme dictionary extension.
        
        
            serviceProvider: An object that can provide services for the markup extension. This service is 
             expected to provide results for System.Windows.Markup.IXamlTypeResolver.
        
            Returns: The object value to set on the property where the extension is applied.
        """
        pass

    @staticmethod # known case of __new__
    def __new__(self, assemblyName=None):
        """
        __new__(cls: type)
        __new__(cls: type, assemblyName: str)
        """
        pass

    AssemblyName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a string setting a particular naming convention to identify which dictionary applies for a particular theme.

Get: AssemblyName(self: ThemeDictionaryExtension) -> str

Set: AssemblyName(self: ThemeDictionaryExtension) = value
"""



class ThemeInfoAttribute(Attribute, _Attribute):
    """
    Specifies the location in which theme dictionaries are stored for an assembly.
    
    ThemeInfoAttribute(themeDictionaryLocation: ResourceDictionaryLocation, genericDictionaryLocation: ResourceDictionaryLocation)
    """
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, themeDictionaryLocation, genericDictionaryLocation):
        """ __new__(cls: type, themeDictionaryLocation: ResourceDictionaryLocation, genericDictionaryLocation: ResourceDictionaryLocation) """
        pass

    GenericDictionaryLocation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The location of generic, not theme specific, resources.

Get: GenericDictionaryLocation(self: ThemeInfoAttribute) -> ResourceDictionaryLocation

"""

    ThemeDictionaryLocation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The location of theme specific resources.

Get: ThemeDictionaryLocation(self: ThemeInfoAttribute) -> ResourceDictionaryLocation

"""



class Thickness(object, IEquatable[Thickness]):
    """
    Describes the thickness of a frame around a rectangle. Four System.Double values describe the System.Windows.Thickness.Left, System.Windows.Thickness.Top, System.Windows.Thickness.Right, and System.Windows.Thickness.Bottom sides of the rectangle, respectively.
    
    Thickness(uniformLength: float)
    Thickness(left: float, top: float, right: float, bottom: float)
    """
    def Equals(self, *__args):
        """
        Equals(self: Thickness, thickness: Thickness) -> bool
        
            Compares this System.Windows.Thickness structure to another 
             System.Windows.Thickness structure for equality.
        
        
            thickness: An instance of System.Windows.Thickness to compare for equality.
            Returns: true if the two instances of System.Windows.Thickness are equal; otherwise, 
             false.
        
        Equals(self: Thickness, obj: object) -> bool
        
            Compares this System.Windows.Thickness structure to another System.Object for 
             equality.
        
        
            obj: The object to compare.
            Returns: true if the two objects are equal; otherwise, false.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: Thickness) -> int
        
            Returns the hash code of the structure.
            Returns: A hash code for this instance of System.Windows.Thickness.
        """
        pass

    def ToString(self):
        """
        ToString(self: Thickness) -> str
        
            Returns the string representation of the System.Windows.Thickness structure.
            Returns: A System.String that represents the System.Windows.Thickness value.
        """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__[Thickness]() -> Thickness
        
        __new__(cls: type, uniformLength: float)
        __new__(cls: type, left: float, top: float, right: float, bottom: float)
        """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Bottom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the width, in pixels, of the lower side of the bounding rectangle.

Get: Bottom(self: Thickness) -> float

Set: Bottom(self: Thickness) = value
"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the width, in pixels, of the left side of the bounding rectangle.

Get: Left(self: Thickness) -> float

Set: Left(self: Thickness) = value
"""

    Right = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the width, in pixels, of the right side of the bounding rectangle.

Get: Right(self: Thickness) -> float

Set: Right(self: Thickness) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the width, in pixels, of the upper side of the bounding rectangle.

Get: Top(self: Thickness) -> float

Set: Top(self: Thickness) = value
"""



class ThicknessConverter(TypeConverter):
    """
    Converts instances of other types to and from instances of System.Windows.Thickness.
    
    ThicknessConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: ThicknessConverter, typeDescriptorContext: ITypeDescriptorContext, sourceType: Type) -> bool
        
            Determines whether the type converter can create an instance of 
             System.Windows.Thickness from a specified type.
        
        
            typeDescriptorContext: The context information of a type.
            sourceType: The source type that the type converter is evaluating for conversion.
            Returns: true if the type converter can create an instance of System.Windows.Thickness 
             from the specified type; otherwise, false.
        """
        pass

    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: ThicknessConverter, typeDescriptorContext: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Determines whether the type converter can convert an instance of 
             System.Windows.Thickness to a different type.
        
        
            typeDescriptorContext: The context information of a type.
            destinationType: The type for which the type converter is evaluating this instance of 
             System.Windows.Thickness for conversion.
        
            Returns: true if the type converter can convert this instance of 
             System.Windows.Thickness to the destinationType; otherwise, false.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: ThicknessConverter, typeDescriptorContext: ITypeDescriptorContext, cultureInfo: CultureInfo, source: object) -> object
        
            Attempts to create an instance of System.Windows.Thickness from a specified 
             object.
        
        
            typeDescriptorContext: The context information for a type.
            cultureInfo: The System.Globalization.CultureInfo of the type being converted.
            source: The sourceSystem.Object being converted.
            Returns: An instance of System.Windows.Thickness created from the converted source.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: ThicknessConverter, typeDescriptorContext: ITypeDescriptorContext, cultureInfo: CultureInfo, value: object, destinationType: Type) -> object
        
            Attempts to convert an instance of System.Windows.Thickness to a specified type.
        
            typeDescriptorContext: The context information of a type.
            cultureInfo: The System.Globalization.CultureInfo of the type being converted.
            value: The instance of System.Windows.Thickness to convert.
            destinationType: The type that this instance of System.Windows.Thickness is converted to.
            Returns: The type that is created when the type converter converts an instance of 
             System.Windows.Thickness.
        """
        pass


class Trigger(TriggerBase, IAddChild, ISupportInitialize):
    """
    Represents a trigger that applies property values or performs actions conditionally.
    
    Trigger()
    """
    def OnPropertyChanged(self, *args): #cannot find CLR method
        """
        OnPropertyChanged(self: DependencyObject, e: DependencyPropertyChangedEventArgs)
            Invoked whenever the effective value of any dependency property on this 
             System.Windows.DependencyObject has been updated. The specific dependency 
             property that changed is reported in the event data.
        
        
            e: Event data that will contain the dependency property identifier of interest, 
             the property metadata for the type, and old and new values.
        
        OnPropertyChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    @staticmethod
    def ReceiveTypeConverter(targetObject, eventArgs):
        """
        ReceiveTypeConverter(targetObject: object, eventArgs: XamlSetTypeConverterEventArgs)
            Handles cases where a type converter provides a value for a property of a 
             System.Windows.Trigger object.
        
        
            targetObject: The object where the type converter sets the value.
            eventArgs: Data that is relevant for type converter processing.
        """
        pass

    def ShouldSerializeProperty(self, *args): #cannot find CLR method
        """
        ShouldSerializeProperty(self: DependencyObject, dp: DependencyProperty) -> bool
        
            Returns a value that indicates whether serialization processes should serialize 
             the value for the provided dependency property.
        
        
            dp: The identifier for the dependency property that should be serialized.
            Returns: true if the dependency property that is supplied should be value-serialized; 
             otherwise, false.
        
        ShouldSerializeProperty(self: Window_16$17, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Label_17$18, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: TextBox_18$19, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Button_19$20, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: CheckBox_20$21, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: ComboBox_21$22, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Separator_22$23, dp: DependencyProperty) -> bool
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Property = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the property that returns the value that is compared with the System.Windows.Trigger.Value property of the trigger. The comparison is a reference equality check.

Get: Property(self: Trigger) -> DependencyProperty

Set: Property(self: Trigger) = value
"""

    Setters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of System.Windows.Setter objects, which describe the property values to apply when the specified condition has been met.

Get: Setters(self: Trigger) -> SetterBaseCollection

"""

    SourceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the name of the object with the property that causes the associated setters to be applied.

Get: SourceName(self: Trigger) -> str

Set: SourceName(self: Trigger) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the value to be compared with the property value of the element. The comparison is a reference equality check.

Get: Value(self: Trigger) -> object

Set: Value(self: Trigger) = value
"""



class TriggerAction(DependencyObject):
    """ Describes an action to perform for a trigger. """

class TriggerActionCollection(object, IList, ICollection, IEnumerable, IList[TriggerAction], ICollection[TriggerAction], IEnumerable[TriggerAction]):
    """
    Represents a collection of System.Windows.TriggerAction objects.
    
    TriggerActionCollection()
    TriggerActionCollection(initialSize: int)
    """
    def Add(self, value):
        """
        Add(self: TriggerActionCollection, value: TriggerAction)
            Adds an item to the collection.
        
            value: The System.Windows.TriggerAction object to add.
        """
        pass

    def Clear(self):
        """
        Clear(self: TriggerActionCollection)
            Removes all items from the collection.
        """
        pass

    def Contains(self, value):
        """
        Contains(self: TriggerActionCollection, value: TriggerAction) -> bool
        
            Returns a value that indicates whether the collection contains the specified 
             System.Windows.TriggerAction object.
        
        
            value: The System.Windows.TriggerAction object to locate in the collection.
            Returns: true if the System.Windows.TriggerAction object is found in the collection; 
             otherwise, false.
        """
        pass

    def CopyTo(self, array, index):
        """
        CopyTo(self: TriggerActionCollection, array: Array[TriggerAction], index: int)
            Begins at the specified index and copies the collection items to the specified 
             array.
        
        
            array: The one-dimensional array that is the destination of the items that are copied 
             from the collection. The array must use zero-based indexing.
        
            index: The zero-based index in the array where copying starts.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: TriggerActionCollection) -> IEnumerator[TriggerAction]
        
            Returns an enumerator that iterates through the collection.
            Returns: An System.Collections.IEnumerator object that can be used to iterate through 
             the collection.
        """
        pass

    def IndexOf(self, value):
        """
        IndexOf(self: TriggerActionCollection, value: TriggerAction) -> int
        
            Returns the index of the specified item in the collection.
        
            value: The System.Windows.TriggerAction object to locate in the collection.
            Returns: The index of value if the System.Windows.TriggerAction object is found in the 
             collection; otherwise, -1.
        """
        pass

    def Insert(self, index, value):
        """
        Insert(self: TriggerActionCollection, index: int, value: TriggerAction)
            Inserts the specified item into the collection at the specified index.
        
            index: The zero-based index where the value must be inserted.
            value: The System.Windows.TriggerAction object to insert into the collection.
        """
        pass

    def Remove(self, value):
        """
        Remove(self: TriggerActionCollection, value: TriggerAction) -> bool
        
            Removes the first occurrence of the specified object from the collection.
        
            value: The System.Windows.TriggerAction object to remove from the collection.
            Returns: true if item is successfully removed; otherwise, false. This method also 
             returns false if item was not found in the 
             System.Windows.TriggerActionCollection.
        """
        pass

    def RemoveAt(self, index):
        """
        RemoveAt(self: TriggerActionCollection, index: int)
            Removes from the collection the item that is located at the specified index.
        
            index: The zero-based index of the item to remove.
        """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """
        __contains__(self: ICollection[TriggerAction], item: TriggerAction) -> bool
        __contains__(self: IList, value: object) -> bool
        
            Determines whether the System.Collections.IList contains a specific value.
        
            value: The object to locate in the System.Collections.IList.
            Returns: true if the System.Object is found in the System.Collections.IList; otherwise, 
             false.
        """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __len__(self, *args): #cannot find CLR method
        """ x.__len__() <==> len(x) """
        pass

    @staticmethod # known case of __new__
    def __new__(self, initialSize=None):
        """
        __new__(cls: type)
        __new__(cls: type, initialSize: int)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the number of items in the collection.

Get: Count(self: TriggerActionCollection) -> int

"""

    IsReadOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the collection is read-only.

Get: IsReadOnly(self: TriggerActionCollection) -> bool

"""



class TriggerCollection(Collection[TriggerBase], IList[TriggerBase], ICollection[TriggerBase], IEnumerable[TriggerBase], IEnumerable, IList, ICollection, IReadOnlyList[TriggerBase], IReadOnlyCollection[TriggerBase]):
    """ Represents a collection of System.Windows.TriggerBase objects. """
    def ClearItems(self, *args): #cannot find CLR method
        """ ClearItems(self: TriggerCollection) """
        pass

    def InsertItem(self, *args): #cannot find CLR method
        """ InsertItem(self: TriggerCollection, index: int, item: TriggerBase) """
        pass

    def RemoveItem(self, *args): #cannot find CLR method
        """ RemoveItem(self: TriggerCollection, index: int) """
        pass

    def SetItem(self, *args): #cannot find CLR method
        """ SetItem(self: TriggerCollection, index: int, item: TriggerBase) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsSealed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether this collection is read-only and cannot be changed.

Get: IsSealed(self: TriggerCollection) -> bool

"""

    Items = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a System.Collections.Generic.IList wrapper around the System.Collections.ObjectModel.Collection.

"""



class UIElement3D(Visual3D, IResource, IVisual3DContainer, IAnimatable, IInputElement):
    """ System.Windows.UIElement3D is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics. """
    def AddHandler(self, routedEvent, handler, handledEventsToo=None):
        """
        AddHandler(self: UIElement3D, routedEvent: RoutedEvent, handler: Delegate, handledEventsToo: bool)
            Adds a routed event handler for a specified routed event, adding the handler to 
             the handler collection on the current element. Specify handledEventsToo as true 
             to have the provided handler be invoked for routed event that had already been 
             marked as handled by another element along the event route.
        
        
            routedEvent: An identifier for the routed event to be handled.
            handler: A reference to the handler implementation.
            handledEventsToo: true to register the handler such that it is invoked even when the routed event 
             is marked handled in its event data; false to register the handler with the 
             default condition that it will not be invoked if the routed event is already 
             marked handled. The default is false.Do not routinely ask to rehandle a routed 
             event. For more information, see Remarks.
        
        AddHandler(self: UIElement3D, routedEvent: RoutedEvent, handler: Delegate)
            Adds a routed event handler for a specified routed event, adding the handler to 
             the handler collection on the current element.
        
        
            routedEvent: An identifier for the�routed event to be handled.
            handler: A reference to the handler implementation.
        """
        pass

    def AddToEventRoute(self, route, e):
        """
        AddToEventRoute(self: UIElement3D, route: EventRoute, e: RoutedEventArgs)
            Adds handlers to the specified System.Windows.EventRoute for the current 
             System.Windows.UIElement3D event handler collection.
        
        
            route: The event route that handlers are added to.
            e: The event data that is used to add the handlers. This method uses the 
             System.Windows.RoutedEventArgs.RoutedEvent property of the event data to create 
             the handlers.
        """
        pass

    def AddVisual3DChild(self, *args): #cannot find CLR method
        """
        AddVisual3DChild(self: Visual3D, child: Visual3D)
            Defines the parent-child relationship between two 3-D visuals.
        
            child: The child 3-D visual object to add to the parent 3-D visual object.
        """
        pass

    def CaptureMouse(self):
        """
        CaptureMouse(self: UIElement3D) -> bool
        
            Attempts to force capture of the mouse to this element.
            Returns: true if the mouse is successfully captured; otherwise, false.
        """
        pass

    def CaptureStylus(self):
        """
        CaptureStylus(self: UIElement3D) -> bool
        
            Attempts to force capture of the stylus to this element.
            Returns: true if the stylus was successfully captured; otherwise, false.
        """
        pass

    def CaptureTouch(self, touchDevice):
        """
        CaptureTouch(self: UIElement3D, touchDevice: TouchDevice) -> bool
        
            Attempts to force capture of a touch to this element.
        
            touchDevice: The device to capture.
            Returns: true if the specified touch is captured to this element; otherwise, false.
        """
        pass

    def Focus(self):
        """
        Focus(self: UIElement3D) -> bool
        
            Attempts to set the logical focus on this element.
            Returns: true if both logical and keyboard focus were set to this element; false if only 
             logical focus was set.
        """
        pass

    def GetUIParentCore(self, *args): #cannot find CLR method
        """
        GetUIParentCore(self: UIElement3D) -> DependencyObject
        
            When overridden in a derived class, returns an alternative user interface (UI) 
             parent for this element if no visual parent exists.
        
            Returns: An object, if implementation of a derived class has an alternate parent 
             connection to report.
        """
        pass

    def GetVisual3DChild(self, *args): #cannot find CLR method
        """
        GetVisual3DChild(self: Visual3D, index: int) -> Visual3D
        
            Returns the specified System.Windows.Media.Media3D.Visual3D in the parent 
             System.Windows.Media.Media3D.Visual3DCollection.
        
        
            index: The index of the 3-D visual object in the collection.
            Returns: The child in the collection at the specified index value.
        """
        pass

    def InvalidateModel(self):
        """
        InvalidateModel(self: UIElement3D)
            Invalidates the model that represents the element.
        """
        pass

    def MoveFocus(self, request):
        """
        MoveFocus(self: UIElement3D, request: TraversalRequest) -> bool
        
            Attempts to move focus from this element to another element. The direction to 
             move focus is specified by a guidance direction, which is interpreted within 
             the organization of the visual parent for this element.
        
        
            request: A traversal request, which contains a property that indicates either a mode to 
             traverse in existing tab order, or a direction to move visually.
        
            Returns: true if the requested traversal was performed; otherwise, false.
        """
        pass

    def OnAccessKey(self, *args): #cannot find CLR method
        """
        OnAccessKey(self: UIElement3D, e: AccessKeyEventArgs)
            Provides class handling for when an access key that is meaningful for this 
             element is invoked.
        
        
            e: The event data to the access key event. The event data reports which key was 
             invoked, and indicate whether the System.Windows.Input.AccessKeyManager object 
             that controls the sending of these events also sent this access key invocation 
             to other elements.
        """
        pass

    def OnCreateAutomationPeer(self, *args): #cannot find CLR method
        """
        OnCreateAutomationPeer(self: UIElement3D) -> AutomationPeer
        
            Returns class-specific System.Windows.Automation.Peers.AutomationPeer 
             implementations for the Windows Presentation Foundation (WPF) infrastructure.
        
            Returns: The type-specific System.Windows.Automation.Peers.AutomationPeer implementation.
        """
        pass

    def OnDragEnter(self, *args): #cannot find CLR method
        """
        OnDragEnter(self: UIElement3D, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.DragEnter�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnDragLeave(self, *args): #cannot find CLR method
        """
        OnDragLeave(self: UIElement3D, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.DragLeave�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnDragOver(self, *args): #cannot find CLR method
        """
        OnDragOver(self: UIElement3D, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.DragOver�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnDrop(self, *args): #cannot find CLR method
        """
        OnDrop(self: UIElement3D, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.Drop�attached event reaches 
             an element in its route that is derived from this class. Implement this method 
             to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnGiveFeedback(self, *args): #cannot find CLR method
        """
        OnGiveFeedback(self: UIElement3D, e: GiveFeedbackEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.GiveFeedback�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.GiveFeedbackEventArgs that contains the event data.
        """
        pass

    def OnGotFocus(self, *args): #cannot find CLR method
        """
        OnGotFocus(self: UIElement3D, e: RoutedEventArgs)
            Raises the System.Windows.UIElement3D.GotFocus�routed event by using the event 
             data provided.
        
        
            e: A System.Windows.RoutedEventArgs that contains event data. This event data must 
             contain the identifier for the System.Windows.UIElement3D.GotFocus event.
        """
        pass

    def OnGotKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnGotKeyboardFocus(self: UIElement3D, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.GotKeyboardFocus�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnGotMouseCapture(self, *args): #cannot find CLR method
        """
        OnGotMouseCapture(self: UIElement3D, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.GotMouseCapture�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        """
        pass

    def OnGotStylusCapture(self, *args): #cannot find CLR method
        """
        OnGotStylusCapture(self: UIElement3D, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.GotStylusCapture�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnGotTouchCapture(self, *args): #cannot find CLR method
        """
        OnGotTouchCapture(self: UIElement3D, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement3D.GotTouchCapture 
             routed event that occurs when a touch is captured to this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnIsKeyboardFocusedChanged(self, *args): #cannot find CLR method
        """
        OnIsKeyboardFocusedChanged(self: UIElement3D, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement3D.IsKeyboardFocusedChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnIsKeyboardFocusWithinChanged(self, *args): #cannot find CLR method
        """
        OnIsKeyboardFocusWithinChanged(self: UIElement3D, e: DependencyPropertyChangedEventArgs)
            Invoked just before the System.Windows.UIElement3D.IsKeyboardFocusWithinChanged 
             event is raised by this element. Implement this method to add class handling 
             for this event.
        
        
            e: A System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnIsMouseCapturedChanged(self, *args): #cannot find CLR method
        """
        OnIsMouseCapturedChanged(self: UIElement3D, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement3D.IsMouseCapturedChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnIsMouseCaptureWithinChanged(self, *args): #cannot find CLR method
        """
        OnIsMouseCaptureWithinChanged(self: UIElement3D, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled 
             System.Windows.UIElement3D.IsMouseCaptureWithinChanged event is raised on this 
             element. Implement this method to add class handling for this event.
        
        
            e: A System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnIsMouseDirectlyOverChanged(self, *args): #cannot find CLR method
        """
        OnIsMouseDirectlyOverChanged(self: UIElement3D, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement3D.IsMouseDirectlyOverChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnIsStylusCapturedChanged(self, *args): #cannot find CLR method
        """
        OnIsStylusCapturedChanged(self: UIElement3D, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement3D.IsStylusCapturedChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: A System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnIsStylusCaptureWithinChanged(self, *args): #cannot find CLR method
        """
        OnIsStylusCaptureWithinChanged(self: UIElement3D, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled 
             System.Windows.UIElement3D.IsStylusCaptureWithinChanged event is raised on this 
             element. Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnIsStylusDirectlyOverChanged(self, *args): #cannot find CLR method
        """
        OnIsStylusDirectlyOverChanged(self: UIElement3D, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled 
             System.Windows.UIElement3D.IsStylusDirectlyOverChanged event is raised on this 
             element. Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnKeyDown(self, *args): #cannot find CLR method
        """
        OnKeyDown(self: UIElement3D, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.KeyDown�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        """
        pass

    def OnKeyUp(self, *args): #cannot find CLR method
        """
        OnKeyUp(self: UIElement3D, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.KeyUp�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        """
        pass

    def OnLostFocus(self, *args): #cannot find CLR method
        """
        OnLostFocus(self: UIElement3D, e: RoutedEventArgs)
            Raises the System.Windows.UIElement3D.LostFocus�routed event by using the event 
             data that is provided.
        
        
            e: A System.Windows.RoutedEventArgs that contains event data. This event data must 
             contain the identifier for the System.Windows.UIElement3D.LostFocus event.
        """
        pass

    def OnLostKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnLostKeyboardFocus(self: UIElement3D, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.LostKeyboardFocus�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains event data.
        """
        pass

    def OnLostMouseCapture(self, *args): #cannot find CLR method
        """
        OnLostMouseCapture(self: UIElement3D, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.LostMouseCapture�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains event data.
        """
        pass

    def OnLostStylusCapture(self, *args): #cannot find CLR method
        """
        OnLostStylusCapture(self: UIElement3D, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.LostStylusCapture�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains event data.
        """
        pass

    def OnLostTouchCapture(self, *args): #cannot find CLR method
        """
        OnLostTouchCapture(self: UIElement3D, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement3D.LostTouchCapture 
             routed event that occurs when this element loses a touch capture.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnMouseDown(self, *args): #cannot find CLR method
        """
        OnMouseDown(self: UIElement3D, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseDown�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. 
             This event data reports details about the mouse button that was pressed and the 
             handled state.
        """
        pass

    def OnMouseEnter(self, *args): #cannot find CLR method
        """
        OnMouseEnter(self: UIElement3D, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseEnter�attached event 
             is raised on this element. Implement this method to add class handling for this 
             event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        """
        pass

    def OnMouseLeave(self, *args): #cannot find CLR method
        """
        OnMouseLeave(self: UIElement3D, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseLeave�attached event 
             is raised on this element. Implement this method to add class handling for this 
             event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        """
        pass

    def OnMouseLeftButtonDown(self, *args): #cannot find CLR method
        """
        OnMouseLeftButtonDown(self: UIElement3D, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement3D.MouseLeftButtonDown�routed 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was pressed.
        """
        pass

    def OnMouseLeftButtonUp(self, *args): #cannot find CLR method
        """
        OnMouseLeftButtonUp(self: UIElement3D, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement3D.MouseLeftButtonUp�routed 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was released.
        """
        pass

    def OnMouseMove(self, *args): #cannot find CLR method
        """
        OnMouseMove(self: UIElement3D, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseMove�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        """
        pass

    def OnMouseRightButtonDown(self, *args): #cannot find CLR method
        """
        OnMouseRightButtonDown(self: UIElement3D, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement3D.MouseRightButtonDown�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was pressed.
        """
        pass

    def OnMouseRightButtonUp(self, *args): #cannot find CLR method
        """
        OnMouseRightButtonUp(self: UIElement3D, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement3D.MouseRightButtonUp�routed 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was released.
        """
        pass

    def OnMouseUp(self, *args): #cannot find CLR method
        """
        OnMouseUp(self: UIElement3D, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseUp�routed event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the mouse button was released.
        """
        pass

    def OnMouseWheel(self, *args): #cannot find CLR method
        """
        OnMouseWheel(self: UIElement3D, e: MouseWheelEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseWheel�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseWheelEventArgs that contains the event data.
        """
        pass

    def OnPreviewDragEnter(self, *args): #cannot find CLR method
        """
        OnPreviewDragEnter(self: UIElement3D, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDragEnter�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnPreviewDragLeave(self, *args): #cannot find CLR method
        """
        OnPreviewDragLeave(self: UIElement3D, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDragLeave�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnPreviewDragOver(self, *args): #cannot find CLR method
        """
        OnPreviewDragOver(self: UIElement3D, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDragOver�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnPreviewDrop(self, *args): #cannot find CLR method
        """
        OnPreviewDrop(self: UIElement3D, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDrop�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        """
        pass

    def OnPreviewGiveFeedback(self, *args): #cannot find CLR method
        """
        OnPreviewGiveFeedback(self: UIElement3D, e: GiveFeedbackEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewGiveFeedback�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.GiveFeedbackEventArgs that contains the event data.
        """
        pass

    def OnPreviewGotKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnPreviewGotKeyboardFocus(self: UIElement3D, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewGotKeyboardFocus�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnPreviewKeyDown(self, *args): #cannot find CLR method
        """
        OnPreviewKeyDown(self: UIElement3D, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewKeyDown�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        """
        pass

    def OnPreviewKeyUp(self, *args): #cannot find CLR method
        """
        OnPreviewKeyUp(self: UIElement3D, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewKeyUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        """
        pass

    def OnPreviewLostKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnPreviewLostKeyboardFocus(self: UIElement3D, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled 
             System.Windows.Input.Keyboard.PreviewLostKeyboardFocus�attached event reaches 
             an element in its route that is derived from this class. Implement this method 
             to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains the event 
             data.
        """
        pass

    def OnPreviewMouseDown(self, *args): #cannot find CLR method
        """
        OnPreviewMouseDown(self: UIElement3D, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseDown attached�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that one or more mouse buttons were pressed.
        """
        pass

    def OnPreviewMouseLeftButtonDown(self, *args): #cannot find CLR method
        """
        OnPreviewMouseLeftButtonDown(self: UIElement3D, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement3D.PreviewMouseLeftButtonDown�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was pressed.
        """
        pass

    def OnPreviewMouseLeftButtonUp(self, *args): #cannot find CLR method
        """
        OnPreviewMouseLeftButtonUp(self: UIElement3D, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement3D.PreviewMouseLeftButtonUp�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was released.
        """
        pass

    def OnPreviewMouseMove(self, *args): #cannot find CLR method
        """
        OnPreviewMouseMove(self: UIElement3D, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseMove�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        """
        pass

    def OnPreviewMouseRightButtonDown(self, *args): #cannot find CLR method
        """
        OnPreviewMouseRightButtonDown(self: UIElement3D, e: MouseButtonEventArgs)
            Invoked when an unhandled 
             System.Windows.UIElement3D.PreviewMouseRightButtonDown�routed event reaches an 
             element in its route that is derived from this class. Implement this method to 
             add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was pressed.
        """
        pass

    def OnPreviewMouseRightButtonUp(self, *args): #cannot find CLR method
        """
        OnPreviewMouseRightButtonUp(self: UIElement3D, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement3D.PreviewMouseRightButtonUp�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was released.
        """
        pass

    def OnPreviewMouseUp(self, *args): #cannot find CLR method
        """
        OnPreviewMouseUp(self: UIElement3D, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that one or more mouse buttons were released.
        """
        pass

    def OnPreviewMouseWheel(self, *args): #cannot find CLR method
        """
        OnPreviewMouseWheel(self: UIElement3D, e: MouseWheelEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseWheel�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseWheelEventArgs that contains the event data.
        """
        pass

    def OnPreviewQueryContinueDrag(self, *args): #cannot find CLR method
        """
        OnPreviewQueryContinueDrag(self: UIElement3D, e: QueryContinueDragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewQueryContinueDrag�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.QueryContinueDragEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusButtonDown(self, *args): #cannot find CLR method
        """
        OnPreviewStylusButtonDown(self: UIElement3D, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusButtonDown�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusButtonUp(self, *args): #cannot find CLR method
        """
        OnPreviewStylusButtonUp(self: UIElement3D, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusButtonUp�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusDown(self, *args): #cannot find CLR method
        """
        OnPreviewStylusDown(self: UIElement3D, e: StylusDownEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusDown�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusDownEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusInAirMove(self, *args): #cannot find CLR method
        """
        OnPreviewStylusInAirMove(self: UIElement3D, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusInAirMove�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusInRange(self, *args): #cannot find CLR method
        """
        OnPreviewStylusInRange(self: UIElement3D, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusInRange�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusMove(self, *args): #cannot find CLR method
        """
        OnPreviewStylusMove(self: UIElement3D, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusMove�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusOutOfRange(self, *args): #cannot find CLR method
        """
        OnPreviewStylusOutOfRange(self: UIElement3D, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusOutOfRange�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnPreviewStylusSystemGesture(self, *args): #cannot find CLR method
        """
        OnPreviewStylusSystemGesture(self: UIElement3D, e: StylusSystemGestureEventArgs)
            Invoked when an unhandled 
             System.Windows.Input.Stylus.PreviewStylusSystemGesture�attached event reaches 
             an element in its route that is derived from this class. Implement this method 
             to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusSystemGestureEventArgs that contains the event 
             data.
        """
        pass

    def OnPreviewStylusUp(self, *args): #cannot find CLR method
        """
        OnPreviewStylusUp(self: UIElement3D, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnPreviewTextInput(self, *args): #cannot find CLR method
        """
        OnPreviewTextInput(self: UIElement3D, e: TextCompositionEventArgs)
            Invoked when an unhandled 
             System.Windows.Input.TextCompositionManager.PreviewTextInput�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.TextCompositionEventArgs that contains the event data.
        """
        pass

    def OnPreviewTouchDown(self, *args): #cannot find CLR method
        """
        OnPreviewTouchDown(self: UIElement3D, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement3D.PreviewTouchDown 
             routed event that occurs when a touch presses this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnPreviewTouchMove(self, *args): #cannot find CLR method
        """
        OnPreviewTouchMove(self: UIElement3D, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement3D.PreviewTouchMove 
             routed event that occurs when a touch moves while inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnPreviewTouchUp(self, *args): #cannot find CLR method
        """
        OnPreviewTouchUp(self: UIElement3D, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement3D.PreviewTouchUp 
             routed event that occurs when a touch is released inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnPropertyChanged(self, *args): #cannot find CLR method
        """
        OnPropertyChanged(self: DependencyObject, e: DependencyPropertyChangedEventArgs)
            Invoked whenever the effective value of any dependency property on this 
             System.Windows.DependencyObject has been updated. The specific dependency 
             property that changed is reported in the event data.
        
        
            e: Event data that will contain the dependency property identifier of interest, 
             the property metadata for the type, and old and new values.
        
        OnPropertyChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnQueryContinueDrag(self, *args): #cannot find CLR method
        """
        OnQueryContinueDrag(self: UIElement3D, e: QueryContinueDragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.QueryContinueDrag�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.QueryContinueDragEventArgs that contains the event data.
        """
        pass

    def OnQueryCursor(self, *args): #cannot find CLR method
        """
        OnQueryCursor(self: UIElement3D, e: QueryCursorEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.QueryCursor�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.QueryCursorEventArgs that contains the event data.
        """
        pass

    def OnStylusButtonDown(self, *args): #cannot find CLR method
        """
        OnStylusButtonDown(self: UIElement3D, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusButtonDown�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        """
        pass

    def OnStylusButtonUp(self, *args): #cannot find CLR method
        """
        OnStylusButtonUp(self: UIElement3D, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusButtonUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        """
        pass

    def OnStylusDown(self, *args): #cannot find CLR method
        """
        OnStylusDown(self: UIElement3D, e: StylusDownEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusDown�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusDownEventArgs that contains the event data.
        """
        pass

    def OnStylusEnter(self, *args): #cannot find CLR method
        """
        OnStylusEnter(self: UIElement3D, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusEnter�attached 
             event is raised by this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnStylusInAirMove(self, *args): #cannot find CLR method
        """
        OnStylusInAirMove(self: UIElement3D, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusInAirMove�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnStylusInRange(self, *args): #cannot find CLR method
        """
        OnStylusInRange(self: UIElement3D, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusInRange�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnStylusLeave(self, *args): #cannot find CLR method
        """
        OnStylusLeave(self: UIElement3D, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusLeave�attached 
             event is raised by this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnStylusMove(self, *args): #cannot find CLR method
        """
        OnStylusMove(self: UIElement3D, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusMove�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnStylusOutOfRange(self, *args): #cannot find CLR method
        """
        OnStylusOutOfRange(self: UIElement3D, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusOutOfRange�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnStylusSystemGesture(self, *args): #cannot find CLR method
        """
        OnStylusSystemGesture(self: UIElement3D, e: StylusSystemGestureEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusSystemGesture�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusSystemGestureEventArgs that contains the event 
             data.
        """
        pass

    def OnStylusUp(self, *args): #cannot find CLR method
        """
        OnStylusUp(self: UIElement3D, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusUp�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        """
        pass

    def OnTextInput(self, *args): #cannot find CLR method
        """
        OnTextInput(self: UIElement3D, e: TextCompositionEventArgs)
            Invoked when an unhandled System.Windows.Input.TextCompositionManager.TextInput�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.TextCompositionEventArgs that contains the event data.
        """
        pass

    def OnTouchDown(self, *args): #cannot find CLR method
        """
        OnTouchDown(self: UIElement3D, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement3D.TouchDown routed 
             event that occurs when a touch presses inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnTouchEnter(self, *args): #cannot find CLR method
        """
        OnTouchEnter(self: UIElement3D, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement3D.TouchEnter routed 
             event that occurs when a touch moves from outside to inside the bounds of this 
             element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnTouchLeave(self, *args): #cannot find CLR method
        """
        OnTouchLeave(self: UIElement3D, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement3D.TouchLeave routed 
             event that occurs when a touch moves from inside to outside the bounds of this 
             element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnTouchMove(self, *args): #cannot find CLR method
        """
        OnTouchMove(self: UIElement3D, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement3D.TouchMove routed 
             event that occurs when a touch moves while inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnTouchUp(self, *args): #cannot find CLR method
        """
        OnTouchUp(self: UIElement3D, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement3D.TouchUp routed event 
             that occurs when a touch is released inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        """
        pass

    def OnUpdateModel(self, *args): #cannot find CLR method
        """
        OnUpdateModel(self: UIElement3D)
            Participates in rendering operations when overridden in a derived class.
        """
        pass

    def OnVisualChildrenChanged(self, *args): #cannot find CLR method
        """
        OnVisualChildrenChanged(self: Visual3D, visualAdded: DependencyObject, visualRemoved: DependencyObject)
            Called when the System.Windows.Media.Media3D.Visual3DCollection of the visual 
             object is modified.
        
        
            visualAdded: The System.Windows.Media.Media3D.Visual3D that was added to the collection.
            visualRemoved: The System.Windows.Media.Media3D.Visual3D that was removed from the collection.
        """
        pass

    def OnVisualParentChanged(self, *args): #cannot find CLR method
        """
        OnVisualParentChanged(self: UIElement3D, oldParent: DependencyObject)
            Invoked when the parent element of this System.Windows.UIElement3D reports a 
             change to its underlying visual parent.
        
        
            oldParent: The previous parent. This may be provided as null if the 
             System.Windows.DependencyObject did not have a parent element previously.
        """
        pass

    def PredictFocus(self, direction):
        """
        PredictFocus(self: UIElement3D, direction: FocusNavigationDirection) -> DependencyObject
        
            When overridden in a derived class, returns the element that would receive 
             focus for a specified focus traversal direction, without actually moving focus 
             to that element.
        
        
            direction: The direction of the requested focus traversal.
            Returns: The element that would have received focus if 
             System.Windows.UIElement3D.MoveFocus(System.Windows.Input.TraversalRequest) 
             were actually invoked.
        """
        pass

    def RaiseEvent(self, e):
        """
        RaiseEvent(self: UIElement3D, e: RoutedEventArgs)
            Raises a specific routed event. The System.Windows.RoutedEvent to be raised is 
             identified within the System.Windows.RoutedEventArgs instance that is provided 
             (as the System.Windows.RoutedEventArgs.RoutedEvent property of that event 
             data).
        
        
            e: A System.Windows.RoutedEventArgs that contains the event data and also 
             identifies the event to raise.
        """
        pass

    def ReleaseAllTouchCaptures(self):
        """
        ReleaseAllTouchCaptures(self: UIElement3D)
            Releases all captured touch devices from this element.
        """
        pass

    def ReleaseMouseCapture(self):
        """
        ReleaseMouseCapture(self: UIElement3D)
            Releases the mouse capture, if this element held the capture.
        """
        pass

    def ReleaseStylusCapture(self):
        """
        ReleaseStylusCapture(self: UIElement3D)
            Releases the stylus device capture, if this element held the capture.
        """
        pass

    def ReleaseTouchCapture(self, touchDevice):
        """
        ReleaseTouchCapture(self: UIElement3D, touchDevice: TouchDevice) -> bool
        
            Attempts to release the specified touch device from this element.
        
            touchDevice: The device to release.
            Returns: true if the touch device is released; otherwise, false.
        """
        pass

    def RemoveHandler(self, routedEvent, handler):
        """
        RemoveHandler(self: UIElement3D, routedEvent: RoutedEvent, handler: Delegate)
            Removes the specified routed event handler from this element.
        
            routedEvent: The identifier of the�routed event for which the handler is attached.
            handler: The specific handler implementation to remove from the event handler collection 
             on this element.
        """
        pass

    def RemoveVisual3DChild(self, *args): #cannot find CLR method
        """
        RemoveVisual3DChild(self: Visual3D, child: Visual3D)
            Removes the parent-child relationship between two 3-D visuals.
        
            child: The child 3-D visual object to remove from the parent visual.
        """
        pass

    def ShouldSerializeCommandBindings(self):
        """
        ShouldSerializeCommandBindings(self: UIElement3D) -> bool
        
            Returns whether serialization processes should serialize the contents of the 
             System.Windows.UIElement3D.CommandBindings property on instances of this class.
        
            Returns: true if the System.Windows.UIElement3D.CommandBindings property value should be 
             serialized; otherwise, false.
        """
        pass

    def ShouldSerializeInputBindings(self):
        """
        ShouldSerializeInputBindings(self: UIElement3D) -> bool
        
            Returns whether serialization processes should serialize the contents of the 
             System.Windows.UIElement3D.InputBindings property on instances of this class.
        
            Returns: true if the System.Windows.UIElement3D.InputBindings property value should be 
             serialized; otherwise, false.
        """
        pass

    def ShouldSerializeProperty(self, *args): #cannot find CLR method
        """
        ShouldSerializeProperty(self: DependencyObject, dp: DependencyProperty) -> bool
        
            Returns a value that indicates whether serialization processes should serialize 
             the value for the provided dependency property.
        
        
            dp: The identifier for the dependency property that should be serialized.
            Returns: true if the dependency property that is supplied should be value-serialized; 
             otherwise, false.
        
        ShouldSerializeProperty(self: Window_16$17, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Label_17$18, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: TextBox_18$19, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Button_19$20, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: CheckBox_20$21, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: ComboBox_21$22, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Separator_22$23, dp: DependencyProperty) -> bool
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AllowDrop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.

Get: AllowDrop(self: UIElement3D) -> bool

Set: AllowDrop(self: UIElement3D) = value
"""

    AreAnyTouchesCaptured = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether at least one touch is captured to this element.

Get: AreAnyTouchesCaptured(self: UIElement3D) -> bool

"""

    AreAnyTouchesCapturedWithin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.

Get: AreAnyTouchesCapturedWithin(self: UIElement3D) -> bool

"""

    AreAnyTouchesDirectlyOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether at least one touch is pressed over this element.

Get: AreAnyTouchesDirectlyOver(self: UIElement3D) -> bool

"""

    AreAnyTouchesOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.

Get: AreAnyTouchesOver(self: UIElement3D) -> bool

"""

    CommandBindings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of System.Windows.Input.CommandBinding objects associated with this element.

Get: CommandBindings(self: UIElement3D) -> CommandBindingCollection

"""

    Focusable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether the element can receive focus.

Get: Focusable(self: UIElement3D) -> bool

Set: Focusable(self: UIElement3D) = value
"""

    InputBindings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the collection of input bindings associated with this element.

Get: InputBindings(self: UIElement3D) -> InputBindingCollection

"""

    IsEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value indicating whether this element is enabled in the user interface (UI).

Get: IsEnabled(self: UIElement3D) -> bool

Set: IsEnabled(self: UIElement3D) = value
"""

    IsEnabledCore = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that becomes the return value of System.Windows.UIElement3D.IsEnabled in derived classes.

"""

    IsFocused = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that determines whether this element has logical focus.

Get: IsFocused(self: UIElement3D) -> bool

"""

    IsHitTestVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content.

Get: IsHitTestVisible(self: UIElement3D) -> bool

Set: IsHitTestVisible(self: UIElement3D) = value
"""

    IsInputMethodEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether an input method system, such as an Input Method Editor (IME),  is enabled for processing the input to this element.

Get: IsInputMethodEnabled(self: UIElement3D) -> bool

"""

    IsKeyboardFocused = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether this element has keyboard focus.

Get: IsKeyboardFocused(self: UIElement3D) -> bool

"""

    IsKeyboardFocusWithin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.

Get: IsKeyboardFocusWithin(self: UIElement3D) -> bool

"""

    IsMouseCaptured = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether the mouse is captured to this element.

Get: IsMouseCaptured(self: UIElement3D) -> bool

"""

    IsMouseCaptureWithin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree.

Get: IsMouseCaptureWithin(self: UIElement3D) -> bool

"""

    IsMouseDirectlyOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the position of the mouse pointer corresponds to�hit test results, which take element compositing into account.

Get: IsMouseDirectlyOver(self: UIElement3D) -> bool

"""

    IsMouseOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).

Get: IsMouseOver(self: UIElement3D) -> bool

"""

    IsStylusCaptured = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether the stylus is captured by this element.

Get: IsStylusCaptured(self: UIElement3D) -> bool

"""

    IsStylusCaptureWithin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree.

Get: IsStylusCaptureWithin(self: UIElement3D) -> bool

"""

    IsStylusDirectlyOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the stylus position corresponds to�hit test results, which take element compositing into account.

Get: IsStylusDirectlyOver(self: UIElement3D) -> bool

"""

    IsStylusOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).

Get: IsStylusOver(self: UIElement3D) -> bool

"""

    IsVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether this element is visible in the user interface (UI).

Get: IsVisible(self: UIElement3D) -> bool

"""

    TouchesCaptured = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets all touch devices that are captured to this element.

Get: TouchesCaptured(self: UIElement3D) -> IEnumerable[TouchDevice]

"""

    TouchesCapturedWithin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets all touch devices that are captured to this element or any child elements in its visual tree.

Get: TouchesCapturedWithin(self: UIElement3D) -> IEnumerable[TouchDevice]

"""

    TouchesDirectlyOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets all touch devices that are over this element.

Get: TouchesDirectlyOver(self: UIElement3D) -> IEnumerable[TouchDevice]

"""

    TouchesOver = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets all touch devices that are over this element or any child elements in its visual tree.

Get: TouchesOver(self: UIElement3D) -> IEnumerable[TouchDevice]

"""

    Visibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the user interface (UI) visibility of this element.

Get: Visibility(self: UIElement3D) -> Visibility

Set: Visibility(self: UIElement3D) = value
"""

    Visual3DChildrenCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the number of child elements for the System.Windows.Media.Media3D.Visual3D object.

"""

    Visual3DModel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.Media3D.Model3D object to render.

"""


    AllowDropProperty = None
    AreAnyTouchesCapturedProperty = None
    AreAnyTouchesCapturedWithinProperty = None
    AreAnyTouchesDirectlyOverProperty = None
    AreAnyTouchesOverProperty = None
    DragEnter = None
    DragEnterEvent = None
    DragLeave = None
    DragLeaveEvent = None
    DragOver = None
    DragOverEvent = None
    Drop = None
    DropEvent = None
    FocusableChanged = None
    FocusableProperty = None
    GiveFeedback = None
    GiveFeedbackEvent = None
    GotFocus = None
    GotFocusEvent = None
    GotKeyboardFocus = None
    GotKeyboardFocusEvent = None
    GotMouseCapture = None
    GotMouseCaptureEvent = None
    GotStylusCapture = None
    GotStylusCaptureEvent = None
    GotTouchCapture = None
    GotTouchCaptureEvent = None
    IsEnabledChanged = None
    IsEnabledProperty = None
    IsFocusedProperty = None
    IsHitTestVisibleChanged = None
    IsHitTestVisibleProperty = None
    IsKeyboardFocusedChanged = None
    IsKeyboardFocusedProperty = None
    IsKeyboardFocusWithinChanged = None
    IsKeyboardFocusWithinProperty = None
    IsMouseCapturedChanged = None
    IsMouseCapturedProperty = None
    IsMouseCaptureWithinChanged = None
    IsMouseCaptureWithinProperty = None
    IsMouseDirectlyOverChanged = None
    IsMouseDirectlyOverProperty = None
    IsMouseOverProperty = None
    IsStylusCapturedChanged = None
    IsStylusCapturedProperty = None
    IsStylusCaptureWithinChanged = None
    IsStylusCaptureWithinProperty = None
    IsStylusDirectlyOverChanged = None
    IsStylusDirectlyOverProperty = None
    IsStylusOverProperty = None
    IsVisibleChanged = None
    IsVisibleProperty = None
    KeyDown = None
    KeyDownEvent = None
    KeyUp = None
    KeyUpEvent = None
    LostFocus = None
    LostFocusEvent = None
    LostKeyboardFocus = None
    LostKeyboardFocusEvent = None
    LostMouseCapture = None
    LostMouseCaptureEvent = None
    LostStylusCapture = None
    LostStylusCaptureEvent = None
    LostTouchCapture = None
    LostTouchCaptureEvent = None
    MouseDown = None
    MouseDownEvent = None
    MouseEnter = None
    MouseEnterEvent = None
    MouseLeave = None
    MouseLeaveEvent = None
    MouseLeftButtonDown = None
    MouseLeftButtonDownEvent = None
    MouseLeftButtonUp = None
    MouseLeftButtonUpEvent = None
    MouseMove = None
    MouseMoveEvent = None
    MouseRightButtonDown = None
    MouseRightButtonDownEvent = None
    MouseRightButtonUp = None
    MouseRightButtonUpEvent = None
    MouseUp = None
    MouseUpEvent = None
    MouseWheel = None
    MouseWheelEvent = None
    PreviewDragEnter = None
    PreviewDragEnterEvent = None
    PreviewDragLeave = None
    PreviewDragLeaveEvent = None
    PreviewDragOver = None
    PreviewDragOverEvent = None
    PreviewDrop = None
    PreviewDropEvent = None
    PreviewGiveFeedback = None
    PreviewGiveFeedbackEvent = None
    PreviewGotKeyboardFocus = None
    PreviewGotKeyboardFocusEvent = None
    PreviewKeyDown = None
    PreviewKeyDownEvent = None
    PreviewKeyUp = None
    PreviewKeyUpEvent = None
    PreviewLostKeyboardFocus = None
    PreviewLostKeyboardFocusEvent = None
    PreviewMouseDown = None
    PreviewMouseDownEvent = None
    PreviewMouseLeftButtonDown = None
    PreviewMouseLeftButtonDownEvent = None
    PreviewMouseLeftButtonUp = None
    PreviewMouseLeftButtonUpEvent = None
    PreviewMouseMove = None
    PreviewMouseMoveEvent = None
    PreviewMouseRightButtonDown = None
    PreviewMouseRightButtonDownEvent = None
    PreviewMouseRightButtonUp = None
    PreviewMouseRightButtonUpEvent = None
    PreviewMouseUp = None
    PreviewMouseUpEvent = None
    PreviewMouseWheel = None
    PreviewMouseWheelEvent = None
    PreviewQueryContinueDrag = None
    PreviewQueryContinueDragEvent = None
    PreviewStylusButtonDown = None
    PreviewStylusButtonDownEvent = None
    PreviewStylusButtonUp = None
    PreviewStylusButtonUpEvent = None
    PreviewStylusDown = None
    PreviewStylusDownEvent = None
    PreviewStylusInAirMove = None
    PreviewStylusInAirMoveEvent = None
    PreviewStylusInRange = None
    PreviewStylusInRangeEvent = None
    PreviewStylusMove = None
    PreviewStylusMoveEvent = None
    PreviewStylusOutOfRange = None
    PreviewStylusOutOfRangeEvent = None
    PreviewStylusSystemGesture = None
    PreviewStylusSystemGestureEvent = None
    PreviewStylusUp = None
    PreviewStylusUpEvent = None
    PreviewTextInput = None
    PreviewTextInputEvent = None
    PreviewTouchDown = None
    PreviewTouchDownEvent = None
    PreviewTouchMove = None
    PreviewTouchMoveEvent = None
    PreviewTouchUp = None
    PreviewTouchUpEvent = None
    QueryContinueDrag = None
    QueryContinueDragEvent = None
    QueryCursor = None
    QueryCursorEvent = None
    StylusButtonDown = None
    StylusButtonDownEvent = None
    StylusButtonUp = None
    StylusButtonUpEvent = None
    StylusDown = None
    StylusDownEvent = None
    StylusEnter = None
    StylusEnterEvent = None
    StylusInAirMove = None
    StylusInAirMoveEvent = None
    StylusInRange = None
    StylusInRangeEvent = None
    StylusLeave = None
    StylusLeaveEvent = None
    StylusMove = None
    StylusMoveEvent = None
    StylusOutOfRange = None
    StylusOutOfRangeEvent = None
    StylusSystemGesture = None
    StylusSystemGestureEvent = None
    StylusUp = None
    StylusUpEvent = None
    TextInput = None
    TextInputEvent = None
    TouchDown = None
    TouchDownEvent = None
    TouchEnter = None
    TouchEnterEvent = None
    TouchLeave = None
    TouchLeaveEvent = None
    TouchMove = None
    TouchMoveEvent = None
    TouchUp = None
    TouchUpEvent = None
    VisibilityProperty = None


class ValidateValueCallback(MulticastDelegate, ICloneable, ISerializable):
    """
    Represents a method used as a callback that validates the effective value of a  dependency property.
    
    ValidateValueCallback(object: object, method: IntPtr)
    """
    def BeginInvoke(self, value, callback, object):
        """ BeginInvoke(self: ValidateValueCallback, value: object, callback: AsyncCallback, object: object) -> IAsyncResult """
        pass

    def CombineImpl(self, *args): #cannot find CLR method
        """
        CombineImpl(self: MulticastDelegate, follow: Delegate) -> Delegate
        
            Combines this System.Delegate with the specified System.Delegate to form a new 
             delegate.
        
        
            follow: The delegate to combine with this delegate.
            Returns: A delegate that is the new root of the System.MulticastDelegate invocation list.
        """
        pass

    def DynamicInvokeImpl(self, *args): #cannot find CLR method
        """
        DynamicInvokeImpl(self: Delegate, args: Array[object]) -> object
        
            Dynamically invokes (late-bound) the method represented by the current delegate.
        
            args: An array of objects that are the arguments to pass to the method represented by 
             the current delegate.-or- null, if the method represented by the current 
             delegate does not require arguments.
        
            Returns: The object returned by the method represented by the delegate.
        """
        pass

    def EndInvoke(self, result):
        """ EndInvoke(self: ValidateValueCallback, result: IAsyncResult) -> bool """
        pass

    def GetMethodImpl(self, *args): #cannot find CLR method
        """
        GetMethodImpl(self: MulticastDelegate) -> MethodInfo
        
            Returns a static method represented by the current System.MulticastDelegate.
            Returns: A static method represented by the current System.MulticastDelegate.
        """
        pass

    def Invoke(self, value):
        """ Invoke(self: ValidateValueCallback, value: object) -> bool """
        pass

    def RemoveImpl(self, *args): #cannot find CLR method
        """
        RemoveImpl(self: MulticastDelegate, value: Delegate) -> Delegate
        
            Removes an element from the invocation list of this System.MulticastDelegate 
             that is equal to the specified delegate.
        
        
            value: The delegate to search for in the invocation list.
            Returns: If value is found in the invocation list for this instance, then a new 
             System.Delegate without value in its invocation list; otherwise, this instance 
             with its original invocation list.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, object, method):
        """ __new__(cls: type, object: object, method: IntPtr) """
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass


class ValueSource(object):
    """ Reports the information returned from System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty). """
    def Equals(self, o):
        """
        Equals(self: ValueSource, o: object) -> bool
        
            Returns a value indicating whether this System.Windows.ValueSource is equal to 
             a specified object.
        
        
            o: The object to compare with this System.Windows.ValueSource.
            Returns: true if the provided object is equivalent to the current 
             System.Windows.ValueSource; otherwise, false.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: ValueSource) -> int
        
            Returns the hash code for this System.Windows.ValueSource.
            Returns: A 32-bit unsigned integer hash code.
        """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    BaseValueSource = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value of the System.Windows.BaseValueSource enumeration, which reports the source that provided the dependency property system with a value.

Get: BaseValueSource(self: ValueSource) -> BaseValueSource

"""

    IsAnimated = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that declares whether the property is being animated.

Get: IsAnimated(self: ValueSource) -> bool

"""

    IsCoerced = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that declares whether this value resulted from a System.Windows.CoerceValueCallback implementation applied to a dependency property.

Get: IsCoerced(self: ValueSource) -> bool

"""

    IsCurrent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets whether the value was set by the System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object) method.

Get: IsCurrent(self: ValueSource) -> bool

"""

    IsExpression = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that declares whether this value resulted from an evaluated expression. This might be a System.Windows.Data.BindingExpression supporting a binding, or an internal expression such as those that support the DynamicResource Markup Extension.

Get: IsExpression(self: ValueSource) -> bool

"""



class Vector(object, IFormattable):
    """
    Represents a displacement in 2-D space.
    
    Vector(x: float, y: float)
    """
    @staticmethod
    def Add(*__args):
        """
        Add(vector: Vector, point: Point) -> Point
        
            Translates the specified point by the specified vector and returns the 
             resulting point.
        
        
            vector: The amount to translate the specified point.
            point: The point to translate.
            Returns: The result of translating point by vector.
        Add(vector1: Vector, vector2: Vector) -> Vector
        
            Adds two vectors and returns the result as a System.Windows.Vector structure.
        
            vector1: The first vector to add.
            vector2: The second vector to add.
            Returns: The sum of vector1 and vector2.
        """
        pass

    @staticmethod
    def AngleBetween(vector1, vector2):
        """
        AngleBetween(vector1: Vector, vector2: Vector) -> float
        
            Retrieves the angle, expressed in degrees, between the two specified vectors.
        
            vector1: The first vector to evaluate.
            vector2: The second vector to evaluate.
            Returns: The angle, in degrees, between vector1 and vector2.
        """
        pass

    @staticmethod
    def CrossProduct(vector1, vector2):
        """
        CrossProduct(vector1: Vector, vector2: Vector) -> float
        
            Calculates the cross product of two vectors.
        
            vector1: The first vector to evaluate.
            vector2: The second vector to evaluate.
            Returns: The cross product of vector1 and vector2. The following formula is used to 
             calculate the cross product: (Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)
        """
        pass

    @staticmethod
    def Determinant(vector1, vector2):
        """
        Determinant(vector1: Vector, vector2: Vector) -> float
        
            Calculates the determinant of two vectors.
        
            vector1: The first vector to evaluate.
            vector2: The second vector to evaluate.
            Returns: The determinant of vector1 and vector2.
        """
        pass

    @staticmethod
    def Divide(vector, scalar):
        """
        Divide(vector: Vector, scalar: float) -> Vector
        
            Divides the specified vector by the specified scalar and returns the result as 
             a System.Windows.Vector.
        
        
            vector: The vector structure to divide.
            scalar: The amount by which vector is divided.
            Returns: The result of dividing vector by scalar.
        """
        pass

    @staticmethod
    def Equals(*__args):
        """
        Equals(self: Vector, value: Vector) -> bool
        
            Compares two vectors for equality.
        
            value: The vector to compare with this vector.
            Returns: true if value has the same System.Windows.Vector.X and System.Windows.Vector.Y 
             values as this vector; otherwise, false.
        
        Equals(self: Vector, o: object) -> bool
        
            Determines whether the specified System.Object is a System.Windows.Vector 
             structure and, if it is, whether it has the same System.Windows.Vector.X and 
             System.Windows.Vector.Y values as this vector.
        
        
            o: The vector to compare.
            Returns: true if o is a System.Windows.Vector and has the same System.Windows.Vector.X 
             and System.Windows.Vector.Y values as this vector; otherwise, false.
        
        Equals(vector1: Vector, vector2: Vector) -> bool
        
            Compares the two specified vectors for equality.
        
            vector1: The first vector to compare.
            vector2: The second vector to compare.
            Returns: true if t he System.Windows.Vector.X and System.Windows.Vector.Y components of 
             vector1 and vector2 are equal; otherwise, false.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: Vector) -> int
        
            Returns the hash code for this vector.
            Returns: The hash code for this instance.
        """
        pass

    @staticmethod
    def Multiply(*__args):
        """
        Multiply(vector: Vector, matrix: Matrix) -> Vector
        
            Transforms the coordinate space of the specified vector using the specified 
             System.Windows.Media.Matrix.
        
        
            vector: The vector structure to transform.
            matrix: The transformation to apply to vector.
            Returns: The result of transforming vector by matrix.
        Multiply(vector1: Vector, vector2: Vector) -> float
        
            Calculates the dot product of the two specified vectors and returns the result 
             as a System.Double.
        
        
            vector1: The first vector to multiply.
            vector2: The second vector structure to multiply.
            Returns: A System.Double containing the scalar dot product of vector1 and vector2, which 
             is calculated using the following formula: (vector1.X * vector2.X) + (vector1.Y 
             * vector2.Y)
        
        Multiply(vector: Vector, scalar: float) -> Vector
        
            Multiplies the specified vector by the specified scalar and returns the 
             resulting System.Windows.Vector.
        
        
            vector: The vector to multiply.
            scalar: The scalar to multiply.
            Returns: The result of multiplying vector and scalar.
        Multiply(scalar: float, vector: Vector) -> Vector
        
            Multiplies the specified scalar by the specified vector and returns the 
             resulting System.Windows.Vector.
        
        
            scalar: The scalar to multiply.
            vector: The vector to multiply.
            Returns: The result of multiplying scalar and vector.
        """
        pass

    def Negate(self):
        """
        Negate(self: Vector)
            Negates this vector. The vector has the same magnitude as before, but its 
             direction is now opposite.
        """
        pass

    def Normalize(self):
        """
        Normalize(self: Vector)
            Normalizes this vector.
        """
        pass

    @staticmethod
    def Parse(source):
        """
        Parse(source: str) -> Vector
        
            Converts a string representation of a vector into the equivalent 
             System.Windows.Vector structure.
        
        
            source: The string representation of the vector.
            Returns: The equivalent System.Windows.Vector structure.
        """
        pass

    @staticmethod
    def Subtract(vector1, vector2):
        """
        Subtract(vector1: Vector, vector2: Vector) -> Vector
        
            Subtracts the specified vector from another specified vector.
        
            vector1: The vector from which vector2 is subtracted.
            vector2: The vector to subtract from vector1.
            Returns: The difference between vector1 and vector2.
        """
        pass

    def ToString(self, provider=None):
        """
        ToString(self: Vector, provider: IFormatProvider) -> str
        
            Returns the string representation of this System.Windows.Vector structure with 
             the specified formatting information.
        
        
            provider: The culture-specific formatting information.
            Returns: A string that represents the System.Windows.Vector.X and 
             System.Windows.Vector.Y values of this System.Windows.Vector.
        
        ToString(self: Vector) -> str
        
            Returns the string representation of this System.Windows.Vector structure.
            Returns: A string that represents the System.Windows.Vector.X and 
             System.Windows.Vector.Y values of this System.Windows.Vector.
        """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+yx.__add__(y) <==> x+y """
        pass

    def __div__(self, *args): #cannot find CLR method
        """ x.__div__(y) <==> x/y """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __mul__(self, *args): #cannot find CLR method
        """ x.__mul__(y) <==> x*yx.__mul__(y) <==> x*yx.__mul__(y) <==> x*y """
        pass

    def __neg__(self, *args): #cannot find CLR method
        """ x.__neg__() <==> -x """
        pass

    @staticmethod # known case of __new__
    def __new__(self, x, y):
        """
        __new__(cls: type, x: float, y: float)
        __new__[Vector]() -> Vector
        """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __radd__(self, *args): #cannot find CLR method
        """
        __radd__(vector1: Vector, vector2: Vector) -> Vector
        
            Adds two vectors and returns the result as a vector.
        
            vector1: The first vector to add.
            vector2: The second vector to add.
            Returns: The sum of vector1 and vector2.
        """
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    def __rmul__(self, *args): #cannot find CLR method
        """
        __rmul__(vector1: Vector, vector2: Vector) -> float
        
            Calculates the dot product of the two specified vector structures and returns 
             the result as a System.Double.
        
        
            vector1: The first vector to multiply.
            vector2: The second vector to multiply.
            Returns: Returns a System.Double containing the scalar dot product of vector1 and 
             vector2, which is calculated using the following formula:vector1.X * vector2.X 
             + vector1.Y * vector2.Y
        
        __rmul__(scalar: float, vector: Vector) -> Vector
        
            Multiplies the specified scalar by the specified vector and returns the 
             resulting vector.
        
        
            scalar: The scalar to multiply.
            vector: The vector to multiply.
            Returns: The result of multiplying scalar and vector.
        """
        pass

    def __rsub__(self, *args): #cannot find CLR method
        """
        __rsub__(vector1: Vector, vector2: Vector) -> Vector
        
            Subtracts one specified vector from another.
        
            vector1: The vector from which vector2 is subtracted.
            vector2: The vector to subtract from vector1.
            Returns: The difference between vector1 and vector2.
        """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    def __sub__(self, *args): #cannot find CLR method
        """ x.__sub__(y) <==> x-y """
        pass

    Length = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the length of this vector.

Get: Length(self: Vector) -> float

"""

    LengthSquared = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the square of the length of this vector.

Get: LengthSquared(self: Vector) -> float

"""

    X = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Vector.X component of this vector.

Get: X(self: Vector) -> float

Set: X(self: Vector) = value
"""

    Y = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Vector.Y component of this vector.

Get: Y(self: Vector) -> float

Set: Y(self: Vector) = value
"""



class VectorConverter(TypeConverter):
    """
    Converts instances of other types to and from a System.Windows.Vector.
    
    VectorConverter()
    """
    def CanConvertFrom(self, *__args):
        """
        CanConvertFrom(self: VectorConverter, context: ITypeDescriptorContext, sourceType: Type) -> bool
        
            Indicates whether an object can be converted from a given type to an instance 
             of a System.Windows.Vector.
        
        
            context: Describes the context information of a type.
            sourceType: The source System.Type that is being queried for conversion support.
            Returns: true if objects of the specified type can be converted to a 
             System.Windows.Vector; otherwise, false.
        """
        pass

    def CanConvertTo(self, *__args):
        """
        CanConvertTo(self: VectorConverter, context: ITypeDescriptorContext, destinationType: Type) -> bool
        
            Determines whether instances of System.Windows.Vector can be converted to the 
             specified type.
        
        
            context: Describes the context information of a type.
            destinationType: The desired type this System.Windows.Vector is being evaluated for conversion.
            Returns: true if instances of System.Windows.Vector can be converted to destinationType; 
             otherwise, false.
        """
        pass

    def ConvertFrom(self, *__args):
        """
        ConvertFrom(self: VectorConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object) -> object
        
            Converts the specified object to a System.Windows.Vector.
        
            context: Describes the context information of a type.
            culture: Describes the System.Globalization.CultureInfo of the type being converted.
            value: The object being converted.
            Returns: The System.Windows.Vector created from converting value.
        """
        pass

    def ConvertTo(self, *__args):
        """
        ConvertTo(self: VectorConverter, context: ITypeDescriptorContext, culture: CultureInfo, value: object, destinationType: Type) -> object
        
            Converts the specified System.Windows.Vector to the specified type.
        
            context: Describes the context information of a type.
            culture: Describes the System.Globalization.CultureInfo of the type being converted.
            value: The System.Windows.Vector to convert.
            destinationType: The type to convert this System.Windows.Vector to.
            Returns: The object created from converting this System.Windows.Vector.
        """
        pass


class VerticalAlignment(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes how a child element is vertically positioned or stretched within a parent's layout slot.
    
    enum VerticalAlignment, values: Bottom (2), Center (1), Stretch (3), Top (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Bottom = None
    Center = None
    Stretch = None
    Top = None
    value__ = None


class Visibility(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies the display state of an element.
    
    enum Visibility, values: Collapsed (2), Hidden (1), Visible (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Collapsed = None
    Hidden = None
    value__ = None
    Visible = None


class VisualState(DependencyObject):
    """
    Represents the visual appearance of the control when it is in a specific state.
    
    VisualState()
    """
    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the name of the System.Windows.VisualState.

Get: Name(self: VisualState) -> str

Set: Name(self: VisualState) = value
"""

    Storyboard = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a System.Windows.Media.Animation.Storyboard that defines the appearance of the control when it is in the state that is represented by the System.Windows.VisualState.

Get: Storyboard(self: VisualState) -> Storyboard

Set: Storyboard(self: VisualState) = value
"""



class VisualStateChangedEventArgs(EventArgs):
    """ Provides data for the System.Windows.VisualStateGroup.CurrentStateChanging and System.Windows.VisualStateGroup.CurrentStateChanged events. """
    Control = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the element that is transitioning states.

Get: Control(self: VisualStateChangedEventArgs) -> FrameworkElement

"""

    NewState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the state that the element is transitioning to or has transitioned to.

Get: NewState(self: VisualStateChangedEventArgs) -> VisualState

"""

    OldState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the state that the element is transitioning to or has transitioned from.

Get: OldState(self: VisualStateChangedEventArgs) -> VisualState

"""

    StateGroupsRoot = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the root element that contains the System.Windows.VisualStateManager.

Get: StateGroupsRoot(self: VisualStateChangedEventArgs) -> FrameworkElement

"""



class VisualStateGroup(DependencyObject):
    """
    Contains mutually exclusive System.Windows.VisualState objects and System.Windows.VisualTransition objects that are used to move from one state to another.
    
    VisualStateGroup()
    """
    CurrentState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the System.Windows.VisualState that is currently applied to the control.

Get: CurrentState(self: VisualStateGroup) -> VisualState

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the name of the System.Windows.VisualStateGroup.

Get: Name(self: VisualStateGroup) -> str

Set: Name(self: VisualStateGroup) = value
"""

    States = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the collection of mutually exclusive System.Windows.VisualState objects.

Get: States(self: VisualStateGroup) -> IList

"""

    Transitions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the collection of System.Windows.VisualTransition objects.

Get: Transitions(self: VisualStateGroup) -> IList

"""


    CurrentStateChanged = None
    CurrentStateChanging = None


class VisualStateManager(DependencyObject):
    """
    Manages states and the logic for transitioning between states for controls.
    
    VisualStateManager()
    """
    @staticmethod
    def GetCustomVisualStateManager(obj):
        """
        GetCustomVisualStateManager(obj: FrameworkElement) -> VisualStateManager
        
            Gets the System.Windows.VisualStateManager.CustomVisualStateManager attached 
             property.
        
        
            obj: The element to get the 
             System.Windows.VisualStateManager.CustomVisualStateManager attached property 
             from.
        
            Returns: The visual state manager that transitions between the states of a control.
        """
        pass

    @staticmethod
    def GetVisualStateGroups(obj):
        """
        GetVisualStateGroups(obj: FrameworkElement) -> IList
        
            Gets the System.Windows.VisualStateManager.VisualStateGroups attached property.
        
            obj: The element to get the System.Windows.VisualStateManager.VisualStateGroups 
             attached property from.
        
            Returns: The collection of System.Windows.VisualStateGroup objects that is associated 
             with the specified object.
        """
        pass

    @staticmethod
    def GoToElementState(stateGroupsRoot, stateName, useTransitions):
        """
        GoToElementState(stateGroupsRoot: FrameworkElement, stateName: str, useTransitions: bool) -> bool
        
            Transitions the element between two states. Use this method to transition 
             states that are defined by an application, rather than defined by a control.
        
        
            stateGroupsRoot: The root element that contains the System.Windows.VisualStateManager.
            stateName: The state to transition to.
            useTransitions: true to use a System.Windows.VisualTransition object to transition between 
             states; otherwise, false.
        
            Returns: true if the control successfully transitioned to the new state; otherwise, 
             false.
        """
        pass

    @staticmethod
    def GoToState(control, stateName, useTransitions):
        """
        GoToState(control: FrameworkElement, stateName: str, useTransitions: bool) -> bool
        
            Transitions the control between two states. Use this method to transition 
             states on control that has a System.Windows.Controls.ControlTemplate.
        
        
            control: The control to transition between states.
            stateName: The state to transition to.
            useTransitions: true to use a System.Windows.VisualTransition object to transition between 
             states; otherwise, false.
        
            Returns: true if the control successfully transitioned to the new state; otherwise, 
             false.
        """
        pass

    def GoToStateCore(self, *args): #cannot find CLR method
        """
        GoToStateCore(self: VisualStateManager, control: FrameworkElement, stateGroupsRoot: FrameworkElement, stateName: str, group: VisualStateGroup, state: VisualState, useTransitions: bool) -> bool
        
            Transitions a control between states.
        
            control: The control to transition between states.
            stateGroupsRoot: The root element that contains the System.Windows.VisualStateManager.
            stateName: The name of the state to transition to.
            group: The System.Windows.VisualStateGroup that the state belongs to.
            state: The representation of the state to transition to.
            useTransitions: true to use a System.Windows.VisualTransition object to transition between 
             states; otherwise, false.
        
            Returns: true if the control successfully transitioned to the new state; otherwise, 
             false.
        """
        pass

    def RaiseCurrentStateChanged(self, *args): #cannot find CLR method
        """
        RaiseCurrentStateChanged(self: VisualStateManager, stateGroup: VisualStateGroup, oldState: VisualState, newState: VisualState, control: FrameworkElement, stateGroupsRoot: FrameworkElement)
            Raises the System.Windows.VisualStateGroup.CurrentStateChanging event on the 
             specified System.Windows.VisualStateGroup object.
        
        
            stateGroup: The object that the System.Windows.VisualStateGroup.CurrentStateChanging event 
             occurred on.
        
            oldState: The state that the control is transitioning from.
            newState: The state that the control is transitioning to.
            control: The control that is transitioning states.
            stateGroupsRoot: The root element that contains the System.Windows.VisualStateManager.
        """
        pass

    def RaiseCurrentStateChanging(self, *args): #cannot find CLR method
        """
        RaiseCurrentStateChanging(self: VisualStateManager, stateGroup: VisualStateGroup, oldState: VisualState, newState: VisualState, control: FrameworkElement, stateGroupsRoot: FrameworkElement)
            Raises the System.Windows.VisualStateGroup.CurrentStateChanging event on the 
             specified System.Windows.VisualStateGroup object.
        
        
            stateGroup: The object that the System.Windows.VisualStateGroup.CurrentStateChanging event 
             occurred on.
        
            oldState: The state that the control is transitioning from.
            newState: The state that the control is transitioning to.
            control: The control that is transitioning states.
            stateGroupsRoot: The root element that contains the System.Windows.VisualStateManager.
        """
        pass

    @staticmethod
    def SetCustomVisualStateManager(obj, value):
        """
        SetCustomVisualStateManager(obj: FrameworkElement, value: VisualStateManager)
            Sets the System.Windows.VisualStateManager.CustomVisualStateManager attached 
             property.
        
        
            obj: The object to set the property on.
            value: The visual state manager that transitions between the states of a control.
        """
        pass

    CustomVisualStateManagerProperty = None
    VisualStateGroupsProperty = None


class VisualTransition(DependencyObject):
    """
    Represents the visual behavior that occurs when a control transitions from one state to another.
    
    VisualTransition()
    """
    From = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the name of the System.Windows.VisualState to transition from.

Get: From(self: VisualTransition) -> str

Set: From(self: VisualTransition) = value
"""

    GeneratedDuration = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the time that it takes to move from one state to another.

Get: GeneratedDuration(self: VisualTransition) -> Duration

Set: GeneratedDuration(self: VisualTransition) = value
"""

    GeneratedEasingFunction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a custom mathematical formula that is used to transition between states.

Get: GeneratedEasingFunction(self: VisualTransition) -> IEasingFunction

Set: GeneratedEasingFunction(self: VisualTransition) = value
"""

    Storyboard = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.Animation.Storyboard that occurs when the transition occurs.

Get: Storyboard(self: VisualTransition) -> Storyboard

Set: Storyboard(self: VisualTransition) = value
"""

    To = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the name of the System.Windows.VisualState to transition to.

Get: To(self: VisualTransition) -> str

Set: To(self: VisualTransition) = value
"""



class Window(ContentControl, IResource, IAnimatable, IInputElement, IFrameworkInputElement, ISupportInitialize, IHaveResources, IQueryAmbient, IAddChild, IWindowService):
    """
    Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.
    
    Window()
    """
    def Activate(self):
        """
        Activate(self: Window) -> bool
        
            Attempts to bring the window to the foreground and activates it.
            Returns: true if the System.Windows.Window was successfully activated; otherwise, false.
        """
        pass

    def AddChild(self, *args): #cannot find CLR method
        """
        AddChild(self: ContentControl, value: object)
            Adds a specified object as the child of a 
             System.Windows.Controls.ContentControl.
        
        
            value: The object to add.
        AddChild(self: Window_16$17, value: object)AddChild(self: Label_17$18, value: object)AddChild(self: Button_19$20, value: object)AddChild(self: CheckBox_20$21, value: object)
        """
        pass

    def AddLogicalChild(self, *args): #cannot find CLR method
        """
        AddLogicalChild(self: FrameworkElement, child: object)
            Adds the provided object to the logical tree of this element.
        
            child: Child element to be added.
        AddLogicalChild(self: Window_16$17, child: object)AddLogicalChild(self: Label_17$18, child: object)AddLogicalChild(self: TextBox_18$19, child: object)AddLogicalChild(self: Button_19$20, child: object)AddLogicalChild(self: CheckBox_20$21, child: object)AddLogicalChild(self: ComboBox_21$22, child: object)AddLogicalChild(self: Separator_22$23, child: object)
        """
        pass

    def AddText(self, *args): #cannot find CLR method
        """
        AddText(self: ContentControl, text: str)
            Adds a specified text string to a System.Windows.Controls.ContentControl.
        
            text: The string to add.
        AddText(self: Window_16$17, text: str)AddText(self: Label_17$18, text: str)AddText(self: Button_19$20, text: str)AddText(self: CheckBox_20$21, text: str)
        """
        pass

    def AddVisualChild(self, *args): #cannot find CLR method
        """
        AddVisualChild(self: Visual, child: Visual)
            Defines the parent-child relationship between two visuals.
        
            child: The child visual object to add to parent visual.
        AddVisualChild(self: Window_16$17, child: Window_16$17)AddVisualChild(self: Label_17$18, child: Label_17$18)AddVisualChild(self: TextBox_18$19, child: TextBox_18$19)AddVisualChild(self: Button_19$20, child: Button_19$20)AddVisualChild(self: CheckBox_20$21, child: CheckBox_20$21)AddVisualChild(self: ComboBox_21$22, child: ComboBox_21$22)AddVisualChild(self: Separator_22$23, child: Separator_22$23)
        """
        pass

    def ArrangeCore(self, *args): #cannot find CLR method
        """
        ArrangeCore(self: FrameworkElement, finalRect: Rect)
            Implements System.Windows.UIElement.ArrangeCore(System.Windows.Rect) (defined 
             as virtual in System.Windows.UIElement) and seals the implementation.
        
        
            finalRect: The final area within the parent that this element should use to arrange itself 
             and its children.
        
        ArrangeCore(self: Window_16$17, finalRect: Rect)ArrangeCore(self: Label_17$18, finalRect: Rect)ArrangeCore(self: TextBox_18$19, finalRect: Rect)ArrangeCore(self: Button_19$20, finalRect: Rect)ArrangeCore(self: CheckBox_20$21, finalRect: Rect)ArrangeCore(self: ComboBox_21$22, finalRect: Rect)ArrangeCore(self: Separator_22$23, finalRect: Rect)
        """
        pass

    def ArrangeOverride(self, *args): #cannot find CLR method
        """
        ArrangeOverride(self: Window, arrangeBounds: Size) -> Size
        
            Override this method to arrange and size a window and its child elements.
        
            arrangeBounds: A System.Windows.Size that reflects the final size that the window should use 
             to arrange itself and its children.
        
            Returns: A System.Windows.Size that reflects the actual size that was used.
        ArrangeOverride(self: Window_16$17, arrangeBounds: Size) -> Size
        """
        pass

    def Close(self):
        """
        Close(self: Window)
            Manually closes a System.Windows.Window.
        """
        pass

    def DragMove(self):
        """
        DragMove(self: Window)
            Allows a window to be dragged by a mouse with its left button down over an 
             exposed area of the window's client area.
        """
        pass

    def GetLayoutClip(self, *args): #cannot find CLR method
        """
        GetLayoutClip(self: FrameworkElement, layoutSlotSize: Size) -> Geometry
        
            Returns a geometry for a clipping mask. The mask applies if the layout system 
             attempts to arrange an element that is larger than the available display space.
        
        
            layoutSlotSize: The size of the part of the element that does visual presentation.
            Returns: The clipping geometry.
        GetLayoutClip(self: Window_16$17, layoutSlotSize: Size) -> Geometry
        GetLayoutClip(self: Label_17$18, layoutSlotSize: Size) -> Geometry
        GetLayoutClip(self: TextBox_18$19, layoutSlotSize: Size) -> Geometry
        GetLayoutClip(self: Button_19$20, layoutSlotSize: Size) -> Geometry
        GetLayoutClip(self: CheckBox_20$21, layoutSlotSize: Size) -> Geometry
        GetLayoutClip(self: ComboBox_21$22, layoutSlotSize: Size) -> Geometry
        GetLayoutClip(self: Separator_22$23, layoutSlotSize: Size) -> Geometry
        """
        pass

    def GetTemplateChild(self, *args): #cannot find CLR method
        """
        GetTemplateChild(self: FrameworkElement, childName: str) -> DependencyObject
        
            Returns the named element in the visual tree of an instantiated 
             System.Windows.Controls.ControlTemplate.
        
        
            childName: Name of the child to find.
            Returns: The requested element. May be null if no element of the requested name exists.
        GetTemplateChild(self: Window_16$17, childName: str) -> DependencyObject
        GetTemplateChild(self: Label_17$18, childName: str) -> DependencyObject
        GetTemplateChild(self: TextBox_18$19, childName: str) -> DependencyObject
        GetTemplateChild(self: Button_19$20, childName: str) -> DependencyObject
        GetTemplateChild(self: CheckBox_20$21, childName: str) -> DependencyObject
        GetTemplateChild(self: ComboBox_21$22, childName: str) -> DependencyObject
        GetTemplateChild(self: Separator_22$23, childName: str) -> DependencyObject
        """
        pass

    def GetUIParentCore(self, *args): #cannot find CLR method
        """
        GetUIParentCore(self: FrameworkElement) -> DependencyObject
        
            Returns an alternative logical parent for this element if there is no visual 
             parent.
        
            Returns: Returns something other than null whenever a WPF framework-level implementation 
             of this method has a non-visual parent connection.
        
        GetUIParentCore(self: Window_16$17) -> DependencyObject
        GetUIParentCore(self: Label_17$18) -> DependencyObject
        GetUIParentCore(self: TextBox_18$19) -> DependencyObject
        GetUIParentCore(self: Button_19$20) -> DependencyObject
        GetUIParentCore(self: CheckBox_20$21) -> DependencyObject
        GetUIParentCore(self: ComboBox_21$22) -> DependencyObject
        GetUIParentCore(self: Separator_22$23) -> DependencyObject
        """
        pass

    def GetVisualChild(self, *args): #cannot find CLR method
        """
        GetVisualChild(self: FrameworkElement, index: int) -> Visual
        
            Overrides System.Windows.Media.Visual.GetVisualChild(System.Int32), and returns 
             a child at the specified index from a collection of child elements.
        
        
            index: The zero-based index of the requested child element in the collection.
            Returns: The requested child element. This should not return null; if the provided index 
             is out of range, an exception is thrown.
        
        GetVisualChild(self: Window_16$17, index: int) -> Visual
        GetVisualChild(self: Label_17$18, index: int) -> Visual
        GetVisualChild(self: TextBox_18$19, index: int) -> Visual
        GetVisualChild(self: Button_19$20, index: int) -> Visual
        GetVisualChild(self: CheckBox_20$21, index: int) -> Visual
        GetVisualChild(self: ComboBox_21$22, index: int) -> Visual
        GetVisualChild(self: Separator_22$23, index: int) -> Visual
        """
        pass

    @staticmethod
    def GetWindow(dependencyObject):
        """
        GetWindow(dependencyObject: DependencyObject) -> Window
        
            Returns a reference to the System.Windows.Window object that hosts the content 
             tree within which the dependency object is located.
        
        
            dependencyObject: The dependency object.
            Returns: A System.Windows.Window reference to the host window.
        """
        pass

    def Hide(self):
        """
        Hide(self: Window)
            Makes a window invisible.
        """
        pass

    def HitTestCore(self, *args): #cannot find CLR method
        """
        HitTestCore(self: UIElement, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        
            Implements 
             System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestPara
             meters) to supply base element hit testing behavior (returning 
             System.Windows.Media.GeometryHitTestResult).
        
        
            hitTestParameters: Describes the hit test to perform, including the initial hit point.
            Returns: Results of the test, including the evaluated geometry.
        HitTestCore(self: UIElement, hitTestParameters: PointHitTestParameters) -> HitTestResult
        
            Implements 
             System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParamet
             ers) to supply base element hit testing behavior (returning 
             System.Windows.Media.HitTestResult).
        
        
            hitTestParameters: Describes the hit test to perform, including the initial hit point.
            Returns: Results of the test, including the evaluated point.
        HitTestCore(self: Window_16$17, hitTestParameters: PointHitTestParameters) -> HitTestResult
        HitTestCore(self: Window_16$17, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        HitTestCore(self: Label_17$18, hitTestParameters: PointHitTestParameters) -> HitTestResult
        HitTestCore(self: Label_17$18, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        HitTestCore(self: TextBox_18$19, hitTestParameters: PointHitTestParameters) -> HitTestResult
        HitTestCore(self: TextBox_18$19, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        HitTestCore(self: Button_19$20, hitTestParameters: PointHitTestParameters) -> HitTestResult
        HitTestCore(self: Button_19$20, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        HitTestCore(self: CheckBox_20$21, hitTestParameters: PointHitTestParameters) -> HitTestResult
        HitTestCore(self: CheckBox_20$21, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        HitTestCore(self: ComboBox_21$22, hitTestParameters: PointHitTestParameters) -> HitTestResult
        HitTestCore(self: ComboBox_21$22, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        HitTestCore(self: Separator_22$23, hitTestParameters: PointHitTestParameters) -> HitTestResult
        HitTestCore(self: Separator_22$23, hitTestParameters: GeometryHitTestParameters) -> GeometryHitTestResult
        """
        pass

    def MeasureCore(self, *args): #cannot find CLR method
        """
        MeasureCore(self: FrameworkElement, availableSize: Size) -> Size
        
            Implements basic measure-pass layout system behavior for 
             System.Windows.FrameworkElement.
        
        
            availableSize: The available size that the parent element can give to the child elements.
            Returns: The desired size of this element in layout.
        MeasureCore(self: Window_16$17, availableSize: Size) -> Size
        MeasureCore(self: Label_17$18, availableSize: Size) -> Size
        MeasureCore(self: TextBox_18$19, availableSize: Size) -> Size
        MeasureCore(self: Button_19$20, availableSize: Size) -> Size
        MeasureCore(self: CheckBox_20$21, availableSize: Size) -> Size
        MeasureCore(self: ComboBox_21$22, availableSize: Size) -> Size
        MeasureCore(self: Separator_22$23, availableSize: Size) -> Size
        """
        pass

    def MeasureOverride(self, *args): #cannot find CLR method
        """
        MeasureOverride(self: Window, availableSize: Size) -> Size
        
            Override this method to measure the size of a window.
        
            availableSize: A System.Windows.Size that reflects the available size that this window can 
             give to the child. Infinity can be given as a value to indicate that the window 
             will size to whatever content is available.
        
            Returns: A System.Windows.Size that reflects the size that this window determines it 
             needs during layout, based on its calculations of children's sizes.
        
        MeasureOverride(self: Window_16$17, availableSize: Size) -> Size
        """
        pass

    def OnAccessKey(self, *args): #cannot find CLR method
        """
        OnAccessKey(self: UIElement, e: AccessKeyEventArgs)
            Provides class handling for when an access key that is meaningful for this 
             element is invoked.
        
        
            e: The event data to the access key event. The event data reports which key was 
             invoked, and indicate whether the System.Windows.Input.AccessKeyManager object 
             that controls the sending of these events also sent this access key invocation 
             to other elements.
        
        OnAccessKey(self: Window_16$17, e: AccessKeyEventArgs)OnAccessKey(self: Label_17$18, e: AccessKeyEventArgs)OnAccessKey(self: TextBox_18$19, e: AccessKeyEventArgs)OnAccessKey(self: Button_19$20, e: AccessKeyEventArgs)OnAccessKey(self: CheckBox_20$21, e: AccessKeyEventArgs)OnAccessKey(self: ComboBox_21$22, e: AccessKeyEventArgs)OnAccessKey(self: Separator_22$23, e: AccessKeyEventArgs)
        """
        pass

    def OnActivated(self, *args): #cannot find CLR method
        """
        OnActivated(self: Window, e: EventArgs)
            Raises the System.Windows.Window.Activated event.
        
            e: An System.EventArgs that contains the event data.
        OnActivated(self: Window_16$17, e: EventArgs)
        """
        pass

    def OnChildDesiredSizeChanged(self, *args): #cannot find CLR method
        """
        OnChildDesiredSizeChanged(self: UIElement, child: UIElement)
            Supports layout behavior when a child element is resized.
        
            child: The child element that is being resized.
        OnChildDesiredSizeChanged(self: Window_16$17, child: Window_16$17)OnChildDesiredSizeChanged(self: Label_17$18, child: Label_17$18)OnChildDesiredSizeChanged(self: TextBox_18$19, child: TextBox_18$19)OnChildDesiredSizeChanged(self: Button_19$20, child: Button_19$20)OnChildDesiredSizeChanged(self: CheckBox_20$21, child: CheckBox_20$21)OnChildDesiredSizeChanged(self: ComboBox_21$22, child: ComboBox_21$22)OnChildDesiredSizeChanged(self: Separator_22$23, child: Separator_22$23)
        """
        pass

    def OnClosed(self, *args): #cannot find CLR method
        """
        OnClosed(self: Window, e: EventArgs)
            Raises the System.Windows.Window.Closed event.
        
            e: An System.EventArgs that contains the event data.
        OnClosed(self: Window_16$17, e: EventArgs)
        """
        pass

    def OnClosing(self, *args): #cannot find CLR method
        """
        OnClosing(self: Window, e: CancelEventArgs)
            Raises the System.Windows.Window.Closing event.
        
            e: A System.ComponentModel.CancelEventArgs that contains the event data.
        OnClosing(self: Window_16$17, e: CancelEventArgs)
        """
        pass

    def OnContentChanged(self, *args): #cannot find CLR method
        """
        OnContentChanged(self: Window, oldContent: object, newContent: object)
            Called when the System.Windows.Controls.ContentControl.Content property changes.
        
            oldContent: A reference to the root of the old content tree.
            newContent: A reference to the root of the new content tree.
        OnContentChanged(self: Window_16$17, oldContent: object, newContent: object)
        """
        pass

    def OnContentRendered(self, *args): #cannot find CLR method
        """
        OnContentRendered(self: Window, e: EventArgs)
            Raises the System.Windows.Window.ContentRendered event.
        
            e: An System.EventArgs that contains the event data.
        OnContentRendered(self: Window_16$17, e: EventArgs)
        """
        pass

    def OnContentStringFormatChanged(self, *args): #cannot find CLR method
        """
        OnContentStringFormatChanged(self: ContentControl, oldContentStringFormat: str, newContentStringFormat: str)
            Occurs when the System.Windows.Controls.ContentControl.ContentStringFormat 
             property changes.
        
        
            oldContentStringFormat: The old value of System.Windows.Controls.ContentControl.ContentStringFormat.
            newContentStringFormat: The new value of System.Windows.Controls.ContentControl.ContentStringFormat.
        OnContentStringFormatChanged(self: Window_16$17, oldContentStringFormat: str, newContentStringFormat: str)OnContentStringFormatChanged(self: Label_17$18, oldContentStringFormat: str, newContentStringFormat: str)OnContentStringFormatChanged(self: Button_19$20, oldContentStringFormat: str, newContentStringFormat: str)OnContentStringFormatChanged(self: CheckBox_20$21, oldContentStringFormat: str, newContentStringFormat: str)
        """
        pass

    def OnContentTemplateChanged(self, *args): #cannot find CLR method
        """
        OnContentTemplateChanged(self: ContentControl, oldContentTemplate: DataTemplate, newContentTemplate: DataTemplate)
            Called when the System.Windows.Controls.ContentControl.ContentTemplate property 
             changes.
        
        
            oldContentTemplate: The old value of the System.Windows.Controls.ContentControl.ContentTemplate 
             property.
        
            newContentTemplate: The new value of the System.Windows.Controls.ContentControl.ContentTemplate 
             property.
        
        OnContentTemplateChanged(self: Window_16$17, oldContentTemplate: DataTemplate, newContentTemplate: DataTemplate)OnContentTemplateChanged(self: Label_17$18, oldContentTemplate: DataTemplate, newContentTemplate: DataTemplate)OnContentTemplateChanged(self: Button_19$20, oldContentTemplate: DataTemplate, newContentTemplate: DataTemplate)OnContentTemplateChanged(self: CheckBox_20$21, oldContentTemplate: DataTemplate, newContentTemplate: DataTemplate)
        """
        pass

    def OnContentTemplateSelectorChanged(self, *args): #cannot find CLR method
        """
        OnContentTemplateSelectorChanged(self: ContentControl, oldContentTemplateSelector: DataTemplateSelector, newContentTemplateSelector: DataTemplateSelector)
            Called when the System.Windows.Controls.ContentControl.ContentTemplateSelector 
             property changes.
        
        
            oldContentTemplateSelector: The old value of the 
             System.Windows.Controls.ContentControl.ContentTemplateSelector property.
        
            newContentTemplateSelector: The new value of the 
             System.Windows.Controls.ContentControl.ContentTemplateSelector property.
        
        OnContentTemplateSelectorChanged(self: Window_16$17, oldContentTemplateSelector: DataTemplateSelector, newContentTemplateSelector: DataTemplateSelector)OnContentTemplateSelectorChanged(self: Label_17$18, oldContentTemplateSelector: DataTemplateSelector, newContentTemplateSelector: DataTemplateSelector)OnContentTemplateSelectorChanged(self: Button_19$20, oldContentTemplateSelector: DataTemplateSelector, newContentTemplateSelector: DataTemplateSelector)OnContentTemplateSelectorChanged(self: CheckBox_20$21, oldContentTemplateSelector: DataTemplateSelector, newContentTemplateSelector: DataTemplateSelector)
        """
        pass

    def OnContextMenuClosing(self, *args): #cannot find CLR method
        """
        OnContextMenuClosing(self: FrameworkElement, e: ContextMenuEventArgs)
            Invoked whenever an unhandled 
             System.Windows.FrameworkElement.ContextMenuClosing routed event reaches this 
             class in its route. Implement this method to add class handling for this event.
        
        
            e: Provides data about the event.
        OnContextMenuClosing(self: Window_16$17, e: ContextMenuEventArgs)OnContextMenuClosing(self: Label_17$18, e: ContextMenuEventArgs)OnContextMenuClosing(self: TextBox_18$19, e: ContextMenuEventArgs)OnContextMenuClosing(self: Button_19$20, e: ContextMenuEventArgs)OnContextMenuClosing(self: CheckBox_20$21, e: ContextMenuEventArgs)OnContextMenuClosing(self: ComboBox_21$22, e: ContextMenuEventArgs)OnContextMenuClosing(self: Separator_22$23, e: ContextMenuEventArgs)
        """
        pass

    def OnContextMenuOpening(self, *args): #cannot find CLR method
        """
        OnContextMenuOpening(self: FrameworkElement, e: ContextMenuEventArgs)
            Invoked whenever an unhandled 
             System.Windows.FrameworkElement.ContextMenuOpening routed event reaches this 
             class in its route. Implement this method to add class handling for this event.
        
        
            e: The System.Windows.RoutedEventArgs that contains the event data.
        OnContextMenuOpening(self: Window_16$17, e: ContextMenuEventArgs)OnContextMenuOpening(self: Label_17$18, e: ContextMenuEventArgs)OnContextMenuOpening(self: TextBox_18$19, e: ContextMenuEventArgs)OnContextMenuOpening(self: Button_19$20, e: ContextMenuEventArgs)OnContextMenuOpening(self: CheckBox_20$21, e: ContextMenuEventArgs)OnContextMenuOpening(self: ComboBox_21$22, e: ContextMenuEventArgs)OnContextMenuOpening(self: Separator_22$23, e: ContextMenuEventArgs)
        """
        pass

    def OnCreateAutomationPeer(self, *args): #cannot find CLR method
        """
        OnCreateAutomationPeer(self: Window) -> AutomationPeer
        
            Creates and returns a System.Windows.Automation.Peers.WindowAutomationPeer 
             object for this System.Windows.Window.
        
            Returns: A System.Windows.Automation.Peers.WindowAutomationPeer object for this 
             System.Windows.Window.
        
        OnCreateAutomationPeer(self: Window_16$17) -> AutomationPeer
        """
        pass

    def OnDeactivated(self, *args): #cannot find CLR method
        """
        OnDeactivated(self: Window, e: EventArgs)
            Raises the System.Windows.Window.Deactivated event.
        
            e: An System.EventArgs that contains the event data.
        OnDeactivated(self: Window_16$17, e: EventArgs)
        """
        pass

    def OnDpiChanged(self, *args): #cannot find CLR method
        """ OnDpiChanged(self: Window, oldDpi: DpiScale, newDpi: DpiScale)OnDpiChanged(self: Window_16$17, oldDpi: DpiScale, newDpi: DpiScale) """
        pass

    def OnDragEnter(self, *args): #cannot find CLR method
        """
        OnDragEnter(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.DragEnter�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnDragEnter(self: Window_16$17, e: DragEventArgs)OnDragEnter(self: Label_17$18, e: DragEventArgs)OnDragEnter(self: TextBox_18$19, e: DragEventArgs)OnDragEnter(self: Button_19$20, e: DragEventArgs)OnDragEnter(self: CheckBox_20$21, e: DragEventArgs)OnDragEnter(self: ComboBox_21$22, e: DragEventArgs)OnDragEnter(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnDragLeave(self, *args): #cannot find CLR method
        """
        OnDragLeave(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.DragLeave�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnDragLeave(self: Window_16$17, e: DragEventArgs)OnDragLeave(self: Label_17$18, e: DragEventArgs)OnDragLeave(self: TextBox_18$19, e: DragEventArgs)OnDragLeave(self: Button_19$20, e: DragEventArgs)OnDragLeave(self: CheckBox_20$21, e: DragEventArgs)OnDragLeave(self: ComboBox_21$22, e: DragEventArgs)OnDragLeave(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnDragOver(self, *args): #cannot find CLR method
        """
        OnDragOver(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.DragOver�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnDragOver(self: Window_16$17, e: DragEventArgs)OnDragOver(self: Label_17$18, e: DragEventArgs)OnDragOver(self: TextBox_18$19, e: DragEventArgs)OnDragOver(self: Button_19$20, e: DragEventArgs)OnDragOver(self: CheckBox_20$21, e: DragEventArgs)OnDragOver(self: ComboBox_21$22, e: DragEventArgs)OnDragOver(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnDrop(self, *args): #cannot find CLR method
        """
        OnDrop(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.DragEnter�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnDrop(self: Window_16$17, e: DragEventArgs)OnDrop(self: Label_17$18, e: DragEventArgs)OnDrop(self: TextBox_18$19, e: DragEventArgs)OnDrop(self: Button_19$20, e: DragEventArgs)OnDrop(self: CheckBox_20$21, e: DragEventArgs)OnDrop(self: ComboBox_21$22, e: DragEventArgs)OnDrop(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnGiveFeedback(self, *args): #cannot find CLR method
        """
        OnGiveFeedback(self: UIElement, e: GiveFeedbackEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.GiveFeedback�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.GiveFeedbackEventArgs that contains the event data.
        OnGiveFeedback(self: Window_16$17, e: GiveFeedbackEventArgs)OnGiveFeedback(self: Label_17$18, e: GiveFeedbackEventArgs)OnGiveFeedback(self: TextBox_18$19, e: GiveFeedbackEventArgs)OnGiveFeedback(self: Button_19$20, e: GiveFeedbackEventArgs)OnGiveFeedback(self: CheckBox_20$21, e: GiveFeedbackEventArgs)OnGiveFeedback(self: ComboBox_21$22, e: GiveFeedbackEventArgs)OnGiveFeedback(self: Separator_22$23, e: GiveFeedbackEventArgs)
        """
        pass

    def OnGotFocus(self, *args): #cannot find CLR method
        """
        OnGotFocus(self: FrameworkElement, e: RoutedEventArgs)
            Invoked whenever an unhandled System.Windows.UIElement.GotFocus event reaches 
             this element in its route.
        
        
            e: The System.Windows.RoutedEventArgs that contains the event data.
        OnGotFocus(self: Window_16$17, e: RoutedEventArgs)OnGotFocus(self: Label_17$18, e: RoutedEventArgs)OnGotFocus(self: TextBox_18$19, e: RoutedEventArgs)OnGotFocus(self: Button_19$20, e: RoutedEventArgs)OnGotFocus(self: CheckBox_20$21, e: RoutedEventArgs)OnGotFocus(self: Separator_22$23, e: RoutedEventArgs)
        """
        pass

    def OnGotKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnGotKeyboardFocus(self: UIElement, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.GotKeyboardFocus�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains the event 
             data.
        
        OnGotKeyboardFocus(self: Window_16$17, e: KeyboardFocusChangedEventArgs)OnGotKeyboardFocus(self: Label_17$18, e: KeyboardFocusChangedEventArgs)OnGotKeyboardFocus(self: TextBox_18$19, e: KeyboardFocusChangedEventArgs)OnGotKeyboardFocus(self: Button_19$20, e: KeyboardFocusChangedEventArgs)OnGotKeyboardFocus(self: CheckBox_20$21, e: KeyboardFocusChangedEventArgs)OnGotKeyboardFocus(self: ComboBox_21$22, e: KeyboardFocusChangedEventArgs)OnGotKeyboardFocus(self: Separator_22$23, e: KeyboardFocusChangedEventArgs)
        """
        pass

    def OnGotMouseCapture(self, *args): #cannot find CLR method
        """
        OnGotMouseCapture(self: UIElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.GotMouseCapture�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        OnGotMouseCapture(self: Window_16$17, e: MouseEventArgs)OnGotMouseCapture(self: Label_17$18, e: MouseEventArgs)OnGotMouseCapture(self: TextBox_18$19, e: MouseEventArgs)OnGotMouseCapture(self: Button_19$20, e: MouseEventArgs)OnGotMouseCapture(self: CheckBox_20$21, e: MouseEventArgs)OnGotMouseCapture(self: ComboBox_21$22, e: MouseEventArgs)OnGotMouseCapture(self: Separator_22$23, e: MouseEventArgs)
        """
        pass

    def OnGotStylusCapture(self, *args): #cannot find CLR method
        """
        OnGotStylusCapture(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.GotStylusCapture�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnGotStylusCapture(self: Window_16$17, e: StylusEventArgs)OnGotStylusCapture(self: Label_17$18, e: StylusEventArgs)OnGotStylusCapture(self: TextBox_18$19, e: StylusEventArgs)OnGotStylusCapture(self: Button_19$20, e: StylusEventArgs)OnGotStylusCapture(self: CheckBox_20$21, e: StylusEventArgs)OnGotStylusCapture(self: ComboBox_21$22, e: StylusEventArgs)OnGotStylusCapture(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnGotTouchCapture(self, *args): #cannot find CLR method
        """
        OnGotTouchCapture(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.GotTouchCapture routed 
             event that occurs when a touch is captured to this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnGotTouchCapture(self: Window_16$17, e: TouchEventArgs)OnGotTouchCapture(self: Label_17$18, e: TouchEventArgs)OnGotTouchCapture(self: TextBox_18$19, e: TouchEventArgs)OnGotTouchCapture(self: Button_19$20, e: TouchEventArgs)OnGotTouchCapture(self: CheckBox_20$21, e: TouchEventArgs)OnGotTouchCapture(self: ComboBox_21$22, e: TouchEventArgs)OnGotTouchCapture(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnInitialized(self, *args): #cannot find CLR method
        """
        OnInitialized(self: FrameworkElement, e: EventArgs)
            Raises the System.Windows.FrameworkElement.Initialized event. This method is 
             invoked whenever System.Windows.FrameworkElement.IsInitialized is set to true 
             internally.
        
        
            e: The System.Windows.RoutedEventArgs that contains the event data.
        OnInitialized(self: Window_16$17, e: EventArgs)OnInitialized(self: Label_17$18, e: EventArgs)OnInitialized(self: TextBox_18$19, e: EventArgs)OnInitialized(self: Button_19$20, e: EventArgs)OnInitialized(self: CheckBox_20$21, e: EventArgs)OnInitialized(self: ComboBox_21$22, e: EventArgs)OnInitialized(self: Separator_22$23, e: EventArgs)
        """
        pass

    def OnIsKeyboardFocusedChanged(self, *args): #cannot find CLR method
        """
        OnIsKeyboardFocusedChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement.IsKeyboardFocusedChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsKeyboardFocusedChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusedChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusedChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusedChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusedChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusedChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusedChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnIsKeyboardFocusWithinChanged(self, *args): #cannot find CLR method
        """
        OnIsKeyboardFocusWithinChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked just before the System.Windows.UIElement.IsKeyboardFocusWithinChanged 
             event is raised by this element. Implement this method to add class handling 
             for this event.
        
        
            e: A System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsKeyboardFocusWithinChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusWithinChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusWithinChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusWithinChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusWithinChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusWithinChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsKeyboardFocusWithinChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnIsMouseCapturedChanged(self, *args): #cannot find CLR method
        """
        OnIsMouseCapturedChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement.IsMouseCapturedChanged event 
             is raised on this element. Implement this method to add class handling for this 
             event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsMouseCapturedChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsMouseCapturedChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsMouseCapturedChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsMouseCapturedChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsMouseCapturedChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsMouseCapturedChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsMouseCapturedChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnIsMouseCaptureWithinChanged(self, *args): #cannot find CLR method
        """
        OnIsMouseCaptureWithinChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement.IsMouseCaptureWithinChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: A System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsMouseCaptureWithinChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsMouseCaptureWithinChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsMouseCaptureWithinChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsMouseCaptureWithinChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsMouseCaptureWithinChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsMouseCaptureWithinChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsMouseCaptureWithinChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnIsMouseDirectlyOverChanged(self, *args): #cannot find CLR method
        """
        OnIsMouseDirectlyOverChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement.IsMouseDirectlyOverChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsMouseDirectlyOverChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsMouseDirectlyOverChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsMouseDirectlyOverChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsMouseDirectlyOverChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsMouseDirectlyOverChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsMouseDirectlyOverChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsMouseDirectlyOverChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnIsStylusCapturedChanged(self, *args): #cannot find CLR method
        """
        OnIsStylusCapturedChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement.IsStylusCapturedChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: A System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsStylusCapturedChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsStylusCapturedChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsStylusCapturedChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsStylusCapturedChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsStylusCapturedChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsStylusCapturedChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsStylusCapturedChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnIsStylusCaptureWithinChanged(self, *args): #cannot find CLR method
        """
        OnIsStylusCaptureWithinChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement.IsStylusCaptureWithinChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsStylusCaptureWithinChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsStylusCaptureWithinChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsStylusCaptureWithinChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsStylusCaptureWithinChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsStylusCaptureWithinChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsStylusCaptureWithinChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsStylusCaptureWithinChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnIsStylusDirectlyOverChanged(self, *args): #cannot find CLR method
        """
        OnIsStylusDirectlyOverChanged(self: UIElement, e: DependencyPropertyChangedEventArgs)
            Invoked when an unhandled System.Windows.UIElement.IsStylusDirectlyOverChanged 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.DependencyPropertyChangedEventArgs that contains the event 
             data.
        
        OnIsStylusDirectlyOverChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnIsStylusDirectlyOverChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnIsStylusDirectlyOverChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnIsStylusDirectlyOverChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnIsStylusDirectlyOverChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnIsStylusDirectlyOverChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnIsStylusDirectlyOverChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnKeyDown(self, *args): #cannot find CLR method
        """
        OnKeyDown(self: UIElement, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.KeyDown�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        OnKeyDown(self: Window_16$17, e: KeyEventArgs)OnKeyDown(self: Label_17$18, e: KeyEventArgs)OnKeyDown(self: TextBox_18$19, e: KeyEventArgs)OnKeyDown(self: Button_19$20, e: KeyEventArgs)OnKeyDown(self: CheckBox_20$21, e: KeyEventArgs)OnKeyDown(self: ComboBox_21$22, e: KeyEventArgs)OnKeyDown(self: Separator_22$23, e: KeyEventArgs)
        """
        pass

    def OnKeyUp(self, *args): #cannot find CLR method
        """
        OnKeyUp(self: UIElement, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.KeyUp�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        OnKeyUp(self: Window_16$17, e: KeyEventArgs)OnKeyUp(self: Label_17$18, e: KeyEventArgs)OnKeyUp(self: TextBox_18$19, e: KeyEventArgs)OnKeyUp(self: Button_19$20, e: KeyEventArgs)OnKeyUp(self: CheckBox_20$21, e: KeyEventArgs)OnKeyUp(self: ComboBox_21$22, e: KeyEventArgs)OnKeyUp(self: Separator_22$23, e: KeyEventArgs)
        """
        pass

    def OnLocationChanged(self, *args): #cannot find CLR method
        """
        OnLocationChanged(self: Window, e: EventArgs)
            Raises the System.Windows.Window.LocationChanged event.
        
            e: An System.EventArgs that contains the event data.
        OnLocationChanged(self: Window_16$17, e: EventArgs)
        """
        pass

    def OnLostFocus(self, *args): #cannot find CLR method
        """
        OnLostFocus(self: UIElement, e: RoutedEventArgs)
            Raises the System.Windows.UIElement.LostFocus�routed event by using the event 
             data that is provided.
        
        
            e: A System.Windows.RoutedEventArgs that contains event data. This event data must 
             contain the identifier for the System.Windows.UIElement.LostFocus event.
        
        OnLostFocus(self: Window_16$17, e: RoutedEventArgs)OnLostFocus(self: Label_17$18, e: RoutedEventArgs)OnLostFocus(self: TextBox_18$19, e: RoutedEventArgs)OnLostFocus(self: Button_19$20, e: RoutedEventArgs)OnLostFocus(self: CheckBox_20$21, e: RoutedEventArgs)OnLostFocus(self: ComboBox_21$22, e: RoutedEventArgs)OnLostFocus(self: Separator_22$23, e: RoutedEventArgs)
        """
        pass

    def OnLostKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnLostKeyboardFocus(self: UIElement, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.LostKeyboardFocus�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains event data.
        OnLostKeyboardFocus(self: Window_16$17, e: KeyboardFocusChangedEventArgs)OnLostKeyboardFocus(self: Label_17$18, e: KeyboardFocusChangedEventArgs)OnLostKeyboardFocus(self: TextBox_18$19, e: KeyboardFocusChangedEventArgs)OnLostKeyboardFocus(self: Button_19$20, e: KeyboardFocusChangedEventArgs)OnLostKeyboardFocus(self: CheckBox_20$21, e: KeyboardFocusChangedEventArgs)OnLostKeyboardFocus(self: ComboBox_21$22, e: KeyboardFocusChangedEventArgs)OnLostKeyboardFocus(self: Separator_22$23, e: KeyboardFocusChangedEventArgs)
        """
        pass

    def OnLostMouseCapture(self, *args): #cannot find CLR method
        """
        OnLostMouseCapture(self: UIElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.LostMouseCapture�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains event data.
        OnLostMouseCapture(self: Window_16$17, e: MouseEventArgs)OnLostMouseCapture(self: Label_17$18, e: MouseEventArgs)OnLostMouseCapture(self: TextBox_18$19, e: MouseEventArgs)OnLostMouseCapture(self: Button_19$20, e: MouseEventArgs)OnLostMouseCapture(self: CheckBox_20$21, e: MouseEventArgs)OnLostMouseCapture(self: Separator_22$23, e: MouseEventArgs)
        """
        pass

    def OnLostStylusCapture(self, *args): #cannot find CLR method
        """
        OnLostStylusCapture(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.LostStylusCapture�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains event data.
        OnLostStylusCapture(self: Window_16$17, e: StylusEventArgs)OnLostStylusCapture(self: Label_17$18, e: StylusEventArgs)OnLostStylusCapture(self: TextBox_18$19, e: StylusEventArgs)OnLostStylusCapture(self: Button_19$20, e: StylusEventArgs)OnLostStylusCapture(self: CheckBox_20$21, e: StylusEventArgs)OnLostStylusCapture(self: ComboBox_21$22, e: StylusEventArgs)OnLostStylusCapture(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnLostTouchCapture(self, *args): #cannot find CLR method
        """
        OnLostTouchCapture(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.LostTouchCapture 
             routed event that occurs when this element loses a touch capture.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnLostTouchCapture(self: Window_16$17, e: TouchEventArgs)OnLostTouchCapture(self: Label_17$18, e: TouchEventArgs)OnLostTouchCapture(self: TextBox_18$19, e: TouchEventArgs)OnLostTouchCapture(self: Button_19$20, e: TouchEventArgs)OnLostTouchCapture(self: CheckBox_20$21, e: TouchEventArgs)OnLostTouchCapture(self: ComboBox_21$22, e: TouchEventArgs)OnLostTouchCapture(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnManipulationBoundaryFeedback(self, *args): #cannot find CLR method
        """
        OnManipulationBoundaryFeedback(self: Window, e: ManipulationBoundaryFeedbackEventArgs)
            Called when the System.Windows.UIElement.ManipulationBoundaryFeedback event 
             occurs.
        
        
            e: The data for the event.
        OnManipulationBoundaryFeedback(self: Window_16$17, e: ManipulationBoundaryFeedbackEventArgs)
        """
        pass

    def OnManipulationCompleted(self, *args): #cannot find CLR method
        """
        OnManipulationCompleted(self: UIElement, e: ManipulationCompletedEventArgs)
            Called when the System.Windows.UIElement.ManipulationCompleted event occurs.
        
            e: The data for the event.
        OnManipulationCompleted(self: Window_16$17, e: ManipulationCompletedEventArgs)OnManipulationCompleted(self: Label_17$18, e: ManipulationCompletedEventArgs)OnManipulationCompleted(self: TextBox_18$19, e: ManipulationCompletedEventArgs)OnManipulationCompleted(self: Button_19$20, e: ManipulationCompletedEventArgs)OnManipulationCompleted(self: CheckBox_20$21, e: ManipulationCompletedEventArgs)OnManipulationCompleted(self: ComboBox_21$22, e: ManipulationCompletedEventArgs)OnManipulationCompleted(self: Separator_22$23, e: ManipulationCompletedEventArgs)
        """
        pass

    def OnManipulationDelta(self, *args): #cannot find CLR method
        """
        OnManipulationDelta(self: UIElement, e: ManipulationDeltaEventArgs)
            Called when the System.Windows.UIElement.ManipulationDelta event occurs.
        
            e: The data for the event.
        OnManipulationDelta(self: Window_16$17, e: ManipulationDeltaEventArgs)OnManipulationDelta(self: Label_17$18, e: ManipulationDeltaEventArgs)OnManipulationDelta(self: TextBox_18$19, e: ManipulationDeltaEventArgs)OnManipulationDelta(self: Button_19$20, e: ManipulationDeltaEventArgs)OnManipulationDelta(self: CheckBox_20$21, e: ManipulationDeltaEventArgs)OnManipulationDelta(self: ComboBox_21$22, e: ManipulationDeltaEventArgs)OnManipulationDelta(self: Separator_22$23, e: ManipulationDeltaEventArgs)
        """
        pass

    def OnManipulationInertiaStarting(self, *args): #cannot find CLR method
        """
        OnManipulationInertiaStarting(self: UIElement, e: ManipulationInertiaStartingEventArgs)
            Called when the System.Windows.UIElement.ManipulationInertiaStarting event 
             occurs.
        
        
            e: The data for the event.
        OnManipulationInertiaStarting(self: Window_16$17, e: ManipulationInertiaStartingEventArgs)OnManipulationInertiaStarting(self: Label_17$18, e: ManipulationInertiaStartingEventArgs)OnManipulationInertiaStarting(self: TextBox_18$19, e: ManipulationInertiaStartingEventArgs)OnManipulationInertiaStarting(self: Button_19$20, e: ManipulationInertiaStartingEventArgs)OnManipulationInertiaStarting(self: CheckBox_20$21, e: ManipulationInertiaStartingEventArgs)OnManipulationInertiaStarting(self: ComboBox_21$22, e: ManipulationInertiaStartingEventArgs)OnManipulationInertiaStarting(self: Separator_22$23, e: ManipulationInertiaStartingEventArgs)
        """
        pass

    def OnManipulationStarted(self, *args): #cannot find CLR method
        """
        OnManipulationStarted(self: UIElement, e: ManipulationStartedEventArgs)
            Called when the System.Windows.UIElement.ManipulationStarted event occurs.
        
            e: The data for the event.
        OnManipulationStarted(self: Window_16$17, e: ManipulationStartedEventArgs)OnManipulationStarted(self: Label_17$18, e: ManipulationStartedEventArgs)OnManipulationStarted(self: TextBox_18$19, e: ManipulationStartedEventArgs)OnManipulationStarted(self: Button_19$20, e: ManipulationStartedEventArgs)OnManipulationStarted(self: CheckBox_20$21, e: ManipulationStartedEventArgs)OnManipulationStarted(self: ComboBox_21$22, e: ManipulationStartedEventArgs)OnManipulationStarted(self: Separator_22$23, e: ManipulationStartedEventArgs)
        """
        pass

    def OnManipulationStarting(self, *args): #cannot find CLR method
        """
        OnManipulationStarting(self: UIElement, e: ManipulationStartingEventArgs)
            Provides class handling for the System.Windows.UIElement.ManipulationStarting 
             routed event that occurs when the manipulation processor is first created.
        
        
            e: A System.Windows.Input.ManipulationStartingEventArgs  that contains the event 
             data.
        
        OnManipulationStarting(self: Window_16$17, e: ManipulationStartingEventArgs)OnManipulationStarting(self: Label_17$18, e: ManipulationStartingEventArgs)OnManipulationStarting(self: TextBox_18$19, e: ManipulationStartingEventArgs)OnManipulationStarting(self: Button_19$20, e: ManipulationStartingEventArgs)OnManipulationStarting(self: CheckBox_20$21, e: ManipulationStartingEventArgs)OnManipulationStarting(self: ComboBox_21$22, e: ManipulationStartingEventArgs)OnManipulationStarting(self: Separator_22$23, e: ManipulationStartingEventArgs)
        """
        pass

    def OnMouseDoubleClick(self, *args): #cannot find CLR method
        """
        OnMouseDoubleClick(self: Control, e: MouseButtonEventArgs)
            Raises the System.Windows.Controls.Control.MouseDoubleClick routed event.
        
            e: The event data.
        OnMouseDoubleClick(self: Window_16$17, e: MouseButtonEventArgs)OnMouseDoubleClick(self: Label_17$18, e: MouseButtonEventArgs)OnMouseDoubleClick(self: TextBox_18$19, e: MouseButtonEventArgs)OnMouseDoubleClick(self: Button_19$20, e: MouseButtonEventArgs)OnMouseDoubleClick(self: CheckBox_20$21, e: MouseButtonEventArgs)OnMouseDoubleClick(self: ComboBox_21$22, e: MouseButtonEventArgs)OnMouseDoubleClick(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnMouseDown(self, *args): #cannot find CLR method
        """
        OnMouseDown(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseDown�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. 
             This event data reports details about the mouse button that was pressed and the 
             handled state.
        
        OnMouseDown(self: Window_16$17, e: MouseButtonEventArgs)OnMouseDown(self: Label_17$18, e: MouseButtonEventArgs)OnMouseDown(self: TextBox_18$19, e: MouseButtonEventArgs)OnMouseDown(self: Button_19$20, e: MouseButtonEventArgs)OnMouseDown(self: CheckBox_20$21, e: MouseButtonEventArgs)OnMouseDown(self: ComboBox_21$22, e: MouseButtonEventArgs)OnMouseDown(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnMouseEnter(self, *args): #cannot find CLR method
        """
        OnMouseEnter(self: UIElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseEnter�attached event 
             is raised on this element. Implement this method to add class handling for this 
             event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        OnMouseEnter(self: Window_16$17, e: MouseEventArgs)OnMouseEnter(self: Label_17$18, e: MouseEventArgs)OnMouseEnter(self: TextBox_18$19, e: MouseEventArgs)OnMouseEnter(self: Button_19$20, e: MouseEventArgs)OnMouseEnter(self: CheckBox_20$21, e: MouseEventArgs)OnMouseEnter(self: ComboBox_21$22, e: MouseEventArgs)OnMouseEnter(self: Separator_22$23, e: MouseEventArgs)
        """
        pass

    def OnMouseLeave(self, *args): #cannot find CLR method
        """
        OnMouseLeave(self: UIElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseLeave�attached event 
             is raised on this element. Implement this method to add class handling for this 
             event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        OnMouseLeave(self: Window_16$17, e: MouseEventArgs)OnMouseLeave(self: Label_17$18, e: MouseEventArgs)OnMouseLeave(self: TextBox_18$19, e: MouseEventArgs)OnMouseLeave(self: Button_19$20, e: MouseEventArgs)OnMouseLeave(self: CheckBox_20$21, e: MouseEventArgs)OnMouseLeave(self: ComboBox_21$22, e: MouseEventArgs)OnMouseLeave(self: Separator_22$23, e: MouseEventArgs)
        """
        pass

    def OnMouseLeftButtonDown(self, *args): #cannot find CLR method
        """
        OnMouseLeftButtonDown(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.MouseLeftButtonDown�routed 
             event is raised on this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was pressed.
        
        OnMouseLeftButtonDown(self: Window_16$17, e: MouseButtonEventArgs)OnMouseLeftButtonDown(self: Label_17$18, e: MouseButtonEventArgs)OnMouseLeftButtonDown(self: TextBox_18$19, e: MouseButtonEventArgs)OnMouseLeftButtonDown(self: Button_19$20, e: MouseButtonEventArgs)OnMouseLeftButtonDown(self: CheckBox_20$21, e: MouseButtonEventArgs)OnMouseLeftButtonDown(self: ComboBox_21$22, e: MouseButtonEventArgs)OnMouseLeftButtonDown(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnMouseLeftButtonUp(self, *args): #cannot find CLR method
        """
        OnMouseLeftButtonUp(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.MouseLeftButtonUp�routed 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was released.
        
        OnMouseLeftButtonUp(self: Window_16$17, e: MouseButtonEventArgs)OnMouseLeftButtonUp(self: Label_17$18, e: MouseButtonEventArgs)OnMouseLeftButtonUp(self: TextBox_18$19, e: MouseButtonEventArgs)OnMouseLeftButtonUp(self: Button_19$20, e: MouseButtonEventArgs)OnMouseLeftButtonUp(self: CheckBox_20$21, e: MouseButtonEventArgs)OnMouseLeftButtonUp(self: ComboBox_21$22, e: MouseButtonEventArgs)OnMouseLeftButtonUp(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnMouseMove(self, *args): #cannot find CLR method
        """
        OnMouseMove(self: UIElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseMove�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        OnMouseMove(self: Window_16$17, e: MouseEventArgs)OnMouseMove(self: Label_17$18, e: MouseEventArgs)OnMouseMove(self: TextBox_18$19, e: MouseEventArgs)OnMouseMove(self: Button_19$20, e: MouseEventArgs)OnMouseMove(self: CheckBox_20$21, e: MouseEventArgs)OnMouseMove(self: Separator_22$23, e: MouseEventArgs)
        """
        pass

    def OnMouseRightButtonDown(self, *args): #cannot find CLR method
        """
        OnMouseRightButtonDown(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.MouseRightButtonDown�routed 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was pressed.
        
        OnMouseRightButtonDown(self: Window_16$17, e: MouseButtonEventArgs)OnMouseRightButtonDown(self: Label_17$18, e: MouseButtonEventArgs)OnMouseRightButtonDown(self: TextBox_18$19, e: MouseButtonEventArgs)OnMouseRightButtonDown(self: Button_19$20, e: MouseButtonEventArgs)OnMouseRightButtonDown(self: CheckBox_20$21, e: MouseButtonEventArgs)OnMouseRightButtonDown(self: ComboBox_21$22, e: MouseButtonEventArgs)OnMouseRightButtonDown(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnMouseRightButtonUp(self, *args): #cannot find CLR method
        """
        OnMouseRightButtonUp(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.MouseRightButtonUp�routed 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was released.
        
        OnMouseRightButtonUp(self: Window_16$17, e: MouseButtonEventArgs)OnMouseRightButtonUp(self: Label_17$18, e: MouseButtonEventArgs)OnMouseRightButtonUp(self: TextBox_18$19, e: MouseButtonEventArgs)OnMouseRightButtonUp(self: Button_19$20, e: MouseButtonEventArgs)OnMouseRightButtonUp(self: CheckBox_20$21, e: MouseButtonEventArgs)OnMouseRightButtonUp(self: ComboBox_21$22, e: MouseButtonEventArgs)OnMouseRightButtonUp(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnMouseUp(self, *args): #cannot find CLR method
        """
        OnMouseUp(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseUp�routed event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the mouse button was released.
        
        OnMouseUp(self: Window_16$17, e: MouseButtonEventArgs)OnMouseUp(self: Label_17$18, e: MouseButtonEventArgs)OnMouseUp(self: TextBox_18$19, e: MouseButtonEventArgs)OnMouseUp(self: Button_19$20, e: MouseButtonEventArgs)OnMouseUp(self: CheckBox_20$21, e: MouseButtonEventArgs)OnMouseUp(self: ComboBox_21$22, e: MouseButtonEventArgs)OnMouseUp(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnMouseWheel(self, *args): #cannot find CLR method
        """
        OnMouseWheel(self: UIElement, e: MouseWheelEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.MouseWheel�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseWheelEventArgs that contains the event data.
        OnMouseWheel(self: Window_16$17, e: MouseWheelEventArgs)OnMouseWheel(self: Label_17$18, e: MouseWheelEventArgs)OnMouseWheel(self: TextBox_18$19, e: MouseWheelEventArgs)OnMouseWheel(self: Button_19$20, e: MouseWheelEventArgs)OnMouseWheel(self: CheckBox_20$21, e: MouseWheelEventArgs)OnMouseWheel(self: Separator_22$23, e: MouseWheelEventArgs)
        """
        pass

    def OnPreviewDragEnter(self, *args): #cannot find CLR method
        """
        OnPreviewDragEnter(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDragEnter�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnPreviewDragEnter(self: Window_16$17, e: DragEventArgs)OnPreviewDragEnter(self: Label_17$18, e: DragEventArgs)OnPreviewDragEnter(self: TextBox_18$19, e: DragEventArgs)OnPreviewDragEnter(self: Button_19$20, e: DragEventArgs)OnPreviewDragEnter(self: CheckBox_20$21, e: DragEventArgs)OnPreviewDragEnter(self: ComboBox_21$22, e: DragEventArgs)OnPreviewDragEnter(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnPreviewDragLeave(self, *args): #cannot find CLR method
        """
        OnPreviewDragLeave(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDragLeave�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnPreviewDragLeave(self: Window_16$17, e: DragEventArgs)OnPreviewDragLeave(self: Label_17$18, e: DragEventArgs)OnPreviewDragLeave(self: TextBox_18$19, e: DragEventArgs)OnPreviewDragLeave(self: Button_19$20, e: DragEventArgs)OnPreviewDragLeave(self: CheckBox_20$21, e: DragEventArgs)OnPreviewDragLeave(self: ComboBox_21$22, e: DragEventArgs)OnPreviewDragLeave(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnPreviewDragOver(self, *args): #cannot find CLR method
        """
        OnPreviewDragOver(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDragOver�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnPreviewDragOver(self: Window_16$17, e: DragEventArgs)OnPreviewDragOver(self: Label_17$18, e: DragEventArgs)OnPreviewDragOver(self: TextBox_18$19, e: DragEventArgs)OnPreviewDragOver(self: Button_19$20, e: DragEventArgs)OnPreviewDragOver(self: CheckBox_20$21, e: DragEventArgs)OnPreviewDragOver(self: ComboBox_21$22, e: DragEventArgs)OnPreviewDragOver(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnPreviewDrop(self, *args): #cannot find CLR method
        """
        OnPreviewDrop(self: UIElement, e: DragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewDrop�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.DragEventArgs that contains the event data.
        OnPreviewDrop(self: Window_16$17, e: DragEventArgs)OnPreviewDrop(self: Label_17$18, e: DragEventArgs)OnPreviewDrop(self: TextBox_18$19, e: DragEventArgs)OnPreviewDrop(self: Button_19$20, e: DragEventArgs)OnPreviewDrop(self: CheckBox_20$21, e: DragEventArgs)OnPreviewDrop(self: ComboBox_21$22, e: DragEventArgs)OnPreviewDrop(self: Separator_22$23, e: DragEventArgs)
        """
        pass

    def OnPreviewGiveFeedback(self, *args): #cannot find CLR method
        """
        OnPreviewGiveFeedback(self: UIElement, e: GiveFeedbackEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewGiveFeedback�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.GiveFeedbackEventArgs that contains the event data.
        OnPreviewGiveFeedback(self: Window_16$17, e: GiveFeedbackEventArgs)OnPreviewGiveFeedback(self: Label_17$18, e: GiveFeedbackEventArgs)OnPreviewGiveFeedback(self: TextBox_18$19, e: GiveFeedbackEventArgs)OnPreviewGiveFeedback(self: Button_19$20, e: GiveFeedbackEventArgs)OnPreviewGiveFeedback(self: CheckBox_20$21, e: GiveFeedbackEventArgs)OnPreviewGiveFeedback(self: ComboBox_21$22, e: GiveFeedbackEventArgs)OnPreviewGiveFeedback(self: Separator_22$23, e: GiveFeedbackEventArgs)
        """
        pass

    def OnPreviewGotKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnPreviewGotKeyboardFocus(self: UIElement, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewGotKeyboardFocus�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains the event 
             data.
        
        OnPreviewGotKeyboardFocus(self: Window_16$17, e: KeyboardFocusChangedEventArgs)OnPreviewGotKeyboardFocus(self: Label_17$18, e: KeyboardFocusChangedEventArgs)OnPreviewGotKeyboardFocus(self: TextBox_18$19, e: KeyboardFocusChangedEventArgs)OnPreviewGotKeyboardFocus(self: Button_19$20, e: KeyboardFocusChangedEventArgs)OnPreviewGotKeyboardFocus(self: CheckBox_20$21, e: KeyboardFocusChangedEventArgs)OnPreviewGotKeyboardFocus(self: ComboBox_21$22, e: KeyboardFocusChangedEventArgs)OnPreviewGotKeyboardFocus(self: Separator_22$23, e: KeyboardFocusChangedEventArgs)
        """
        pass

    def OnPreviewKeyDown(self, *args): #cannot find CLR method
        """
        OnPreviewKeyDown(self: UIElement, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewKeyDown�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        OnPreviewKeyDown(self: Window_16$17, e: KeyEventArgs)OnPreviewKeyDown(self: Label_17$18, e: KeyEventArgs)OnPreviewKeyDown(self: TextBox_18$19, e: KeyEventArgs)OnPreviewKeyDown(self: Button_19$20, e: KeyEventArgs)OnPreviewKeyDown(self: CheckBox_20$21, e: KeyEventArgs)OnPreviewKeyDown(self: ComboBox_21$22, e: KeyEventArgs)OnPreviewKeyDown(self: Separator_22$23, e: KeyEventArgs)
        """
        pass

    def OnPreviewKeyUp(self, *args): #cannot find CLR method
        """
        OnPreviewKeyUp(self: UIElement, e: KeyEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewKeyUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyEventArgs that contains the event data.
        OnPreviewKeyUp(self: Window_16$17, e: KeyEventArgs)OnPreviewKeyUp(self: Label_17$18, e: KeyEventArgs)OnPreviewKeyUp(self: TextBox_18$19, e: KeyEventArgs)OnPreviewKeyUp(self: Button_19$20, e: KeyEventArgs)OnPreviewKeyUp(self: CheckBox_20$21, e: KeyEventArgs)OnPreviewKeyUp(self: ComboBox_21$22, e: KeyEventArgs)OnPreviewKeyUp(self: Separator_22$23, e: KeyEventArgs)
        """
        pass

    def OnPreviewLostKeyboardFocus(self, *args): #cannot find CLR method
        """
        OnPreviewLostKeyboardFocus(self: UIElement, e: KeyboardFocusChangedEventArgs)
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewKeyDown�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.KeyboardFocusChangedEventArgs that contains the event 
             data.
        
        OnPreviewLostKeyboardFocus(self: Window_16$17, e: KeyboardFocusChangedEventArgs)OnPreviewLostKeyboardFocus(self: Label_17$18, e: KeyboardFocusChangedEventArgs)OnPreviewLostKeyboardFocus(self: TextBox_18$19, e: KeyboardFocusChangedEventArgs)OnPreviewLostKeyboardFocus(self: Button_19$20, e: KeyboardFocusChangedEventArgs)OnPreviewLostKeyboardFocus(self: CheckBox_20$21, e: KeyboardFocusChangedEventArgs)OnPreviewLostKeyboardFocus(self: ComboBox_21$22, e: KeyboardFocusChangedEventArgs)OnPreviewLostKeyboardFocus(self: Separator_22$23, e: KeyboardFocusChangedEventArgs)
        """
        pass

    def OnPreviewMouseDoubleClick(self, *args): #cannot find CLR method
        """
        OnPreviewMouseDoubleClick(self: Control, e: MouseButtonEventArgs)
            Raises the System.Windows.Controls.Control.PreviewMouseDoubleClick routed event.
        
            e: The event data.
        OnPreviewMouseDoubleClick(self: Window_16$17, e: MouseButtonEventArgs)OnPreviewMouseDoubleClick(self: Label_17$18, e: MouseButtonEventArgs)OnPreviewMouseDoubleClick(self: TextBox_18$19, e: MouseButtonEventArgs)OnPreviewMouseDoubleClick(self: Button_19$20, e: MouseButtonEventArgs)OnPreviewMouseDoubleClick(self: CheckBox_20$21, e: MouseButtonEventArgs)OnPreviewMouseDoubleClick(self: ComboBox_21$22, e: MouseButtonEventArgs)OnPreviewMouseDoubleClick(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnPreviewMouseDown(self, *args): #cannot find CLR method
        """
        OnPreviewMouseDown(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseDown attached�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that one or more mouse buttons were pressed.
        
        OnPreviewMouseDown(self: Window_16$17, e: MouseButtonEventArgs)OnPreviewMouseDown(self: Label_17$18, e: MouseButtonEventArgs)OnPreviewMouseDown(self: TextBox_18$19, e: MouseButtonEventArgs)OnPreviewMouseDown(self: Button_19$20, e: MouseButtonEventArgs)OnPreviewMouseDown(self: CheckBox_20$21, e: MouseButtonEventArgs)OnPreviewMouseDown(self: ComboBox_21$22, e: MouseButtonEventArgs)OnPreviewMouseDown(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnPreviewMouseLeftButtonDown(self, *args): #cannot find CLR method
        """
        OnPreviewMouseLeftButtonDown(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.PreviewMouseLeftButtonDown�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was pressed.
        
        OnPreviewMouseLeftButtonDown(self: Window_16$17, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonDown(self: Label_17$18, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonDown(self: TextBox_18$19, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonDown(self: Button_19$20, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonDown(self: CheckBox_20$21, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonDown(self: ComboBox_21$22, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonDown(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnPreviewMouseLeftButtonUp(self, *args): #cannot find CLR method
        """
        OnPreviewMouseLeftButtonUp(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.PreviewMouseLeftButtonUp�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the left mouse button was released.
        
        OnPreviewMouseLeftButtonUp(self: Window_16$17, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonUp(self: Label_17$18, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonUp(self: TextBox_18$19, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonUp(self: Button_19$20, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonUp(self: CheckBox_20$21, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonUp(self: ComboBox_21$22, e: MouseButtonEventArgs)OnPreviewMouseLeftButtonUp(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnPreviewMouseMove(self, *args): #cannot find CLR method
        """
        OnPreviewMouseMove(self: UIElement, e: MouseEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseMove�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseEventArgs that contains the event data.
        OnPreviewMouseMove(self: Window_16$17, e: MouseEventArgs)OnPreviewMouseMove(self: Label_17$18, e: MouseEventArgs)OnPreviewMouseMove(self: TextBox_18$19, e: MouseEventArgs)OnPreviewMouseMove(self: Button_19$20, e: MouseEventArgs)OnPreviewMouseMove(self: CheckBox_20$21, e: MouseEventArgs)OnPreviewMouseMove(self: ComboBox_21$22, e: MouseEventArgs)OnPreviewMouseMove(self: Separator_22$23, e: MouseEventArgs)
        """
        pass

    def OnPreviewMouseRightButtonDown(self, *args): #cannot find CLR method
        """
        OnPreviewMouseRightButtonDown(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.PreviewMouseRightButtonDown�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was pressed.
        
        OnPreviewMouseRightButtonDown(self: Window_16$17, e: MouseButtonEventArgs)OnPreviewMouseRightButtonDown(self: Label_17$18, e: MouseButtonEventArgs)OnPreviewMouseRightButtonDown(self: TextBox_18$19, e: MouseButtonEventArgs)OnPreviewMouseRightButtonDown(self: Button_19$20, e: MouseButtonEventArgs)OnPreviewMouseRightButtonDown(self: CheckBox_20$21, e: MouseButtonEventArgs)OnPreviewMouseRightButtonDown(self: ComboBox_21$22, e: MouseButtonEventArgs)OnPreviewMouseRightButtonDown(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnPreviewMouseRightButtonUp(self, *args): #cannot find CLR method
        """
        OnPreviewMouseRightButtonUp(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.UIElement.PreviewMouseRightButtonUp�
             routed event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that the right mouse button was released.
        
        OnPreviewMouseRightButtonUp(self: Window_16$17, e: MouseButtonEventArgs)OnPreviewMouseRightButtonUp(self: Label_17$18, e: MouseButtonEventArgs)OnPreviewMouseRightButtonUp(self: TextBox_18$19, e: MouseButtonEventArgs)OnPreviewMouseRightButtonUp(self: Button_19$20, e: MouseButtonEventArgs)OnPreviewMouseRightButtonUp(self: CheckBox_20$21, e: MouseButtonEventArgs)OnPreviewMouseRightButtonUp(self: ComboBox_21$22, e: MouseButtonEventArgs)OnPreviewMouseRightButtonUp(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnPreviewMouseUp(self, *args): #cannot find CLR method
        """
        OnPreviewMouseUp(self: UIElement, e: MouseButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseButtonEventArgs that contains the event data. The 
             event data reports that one or more mouse buttons were released.
        
        OnPreviewMouseUp(self: Window_16$17, e: MouseButtonEventArgs)OnPreviewMouseUp(self: Label_17$18, e: MouseButtonEventArgs)OnPreviewMouseUp(self: TextBox_18$19, e: MouseButtonEventArgs)OnPreviewMouseUp(self: Button_19$20, e: MouseButtonEventArgs)OnPreviewMouseUp(self: CheckBox_20$21, e: MouseButtonEventArgs)OnPreviewMouseUp(self: ComboBox_21$22, e: MouseButtonEventArgs)OnPreviewMouseUp(self: Separator_22$23, e: MouseButtonEventArgs)
        """
        pass

    def OnPreviewMouseWheel(self, *args): #cannot find CLR method
        """
        OnPreviewMouseWheel(self: UIElement, e: MouseWheelEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.PreviewMouseWheel�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.MouseWheelEventArgs that contains the event data.
        OnPreviewMouseWheel(self: Window_16$17, e: MouseWheelEventArgs)OnPreviewMouseWheel(self: Label_17$18, e: MouseWheelEventArgs)OnPreviewMouseWheel(self: TextBox_18$19, e: MouseWheelEventArgs)OnPreviewMouseWheel(self: Button_19$20, e: MouseWheelEventArgs)OnPreviewMouseWheel(self: CheckBox_20$21, e: MouseWheelEventArgs)OnPreviewMouseWheel(self: ComboBox_21$22, e: MouseWheelEventArgs)OnPreviewMouseWheel(self: Separator_22$23, e: MouseWheelEventArgs)
        """
        pass

    def OnPreviewQueryContinueDrag(self, *args): #cannot find CLR method
        """
        OnPreviewQueryContinueDrag(self: UIElement, e: QueryContinueDragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.PreviewQueryContinueDrag�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.QueryContinueDragEventArgs that contains the event data.
        OnPreviewQueryContinueDrag(self: Window_16$17, e: QueryContinueDragEventArgs)OnPreviewQueryContinueDrag(self: Label_17$18, e: QueryContinueDragEventArgs)OnPreviewQueryContinueDrag(self: TextBox_18$19, e: QueryContinueDragEventArgs)OnPreviewQueryContinueDrag(self: Button_19$20, e: QueryContinueDragEventArgs)OnPreviewQueryContinueDrag(self: CheckBox_20$21, e: QueryContinueDragEventArgs)OnPreviewQueryContinueDrag(self: ComboBox_21$22, e: QueryContinueDragEventArgs)OnPreviewQueryContinueDrag(self: Separator_22$23, e: QueryContinueDragEventArgs)
        """
        pass

    def OnPreviewStylusButtonDown(self, *args): #cannot find CLR method
        """
        OnPreviewStylusButtonDown(self: UIElement, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusButtonDown�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        OnPreviewStylusButtonDown(self: Window_16$17, e: StylusButtonEventArgs)OnPreviewStylusButtonDown(self: Label_17$18, e: StylusButtonEventArgs)OnPreviewStylusButtonDown(self: TextBox_18$19, e: StylusButtonEventArgs)OnPreviewStylusButtonDown(self: Button_19$20, e: StylusButtonEventArgs)OnPreviewStylusButtonDown(self: CheckBox_20$21, e: StylusButtonEventArgs)OnPreviewStylusButtonDown(self: ComboBox_21$22, e: StylusButtonEventArgs)OnPreviewStylusButtonDown(self: Separator_22$23, e: StylusButtonEventArgs)
        """
        pass

    def OnPreviewStylusButtonUp(self, *args): #cannot find CLR method
        """
        OnPreviewStylusButtonUp(self: UIElement, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusButtonUp�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        OnPreviewStylusButtonUp(self: Window_16$17, e: StylusButtonEventArgs)OnPreviewStylusButtonUp(self: Label_17$18, e: StylusButtonEventArgs)OnPreviewStylusButtonUp(self: TextBox_18$19, e: StylusButtonEventArgs)OnPreviewStylusButtonUp(self: Button_19$20, e: StylusButtonEventArgs)OnPreviewStylusButtonUp(self: CheckBox_20$21, e: StylusButtonEventArgs)OnPreviewStylusButtonUp(self: ComboBox_21$22, e: StylusButtonEventArgs)OnPreviewStylusButtonUp(self: Separator_22$23, e: StylusButtonEventArgs)
        """
        pass

    def OnPreviewStylusDown(self, *args): #cannot find CLR method
        """
        OnPreviewStylusDown(self: UIElement, e: StylusDownEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusDown�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusDownEventArgs that contains the event data.
        OnPreviewStylusDown(self: Window_16$17, e: StylusDownEventArgs)OnPreviewStylusDown(self: Label_17$18, e: StylusDownEventArgs)OnPreviewStylusDown(self: TextBox_18$19, e: StylusDownEventArgs)OnPreviewStylusDown(self: Button_19$20, e: StylusDownEventArgs)OnPreviewStylusDown(self: CheckBox_20$21, e: StylusDownEventArgs)OnPreviewStylusDown(self: ComboBox_21$22, e: StylusDownEventArgs)OnPreviewStylusDown(self: Separator_22$23, e: StylusDownEventArgs)
        """
        pass

    def OnPreviewStylusInAirMove(self, *args): #cannot find CLR method
        """
        OnPreviewStylusInAirMove(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusInAirMove�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnPreviewStylusInAirMove(self: Window_16$17, e: StylusEventArgs)OnPreviewStylusInAirMove(self: Label_17$18, e: StylusEventArgs)OnPreviewStylusInAirMove(self: TextBox_18$19, e: StylusEventArgs)OnPreviewStylusInAirMove(self: Button_19$20, e: StylusEventArgs)OnPreviewStylusInAirMove(self: CheckBox_20$21, e: StylusEventArgs)OnPreviewStylusInAirMove(self: ComboBox_21$22, e: StylusEventArgs)OnPreviewStylusInAirMove(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnPreviewStylusInRange(self, *args): #cannot find CLR method
        """
        OnPreviewStylusInRange(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusInRange�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnPreviewStylusInRange(self: Window_16$17, e: StylusEventArgs)OnPreviewStylusInRange(self: Label_17$18, e: StylusEventArgs)OnPreviewStylusInRange(self: TextBox_18$19, e: StylusEventArgs)OnPreviewStylusInRange(self: Button_19$20, e: StylusEventArgs)OnPreviewStylusInRange(self: CheckBox_20$21, e: StylusEventArgs)OnPreviewStylusInRange(self: ComboBox_21$22, e: StylusEventArgs)OnPreviewStylusInRange(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnPreviewStylusMove(self, *args): #cannot find CLR method
        """
        OnPreviewStylusMove(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusMove�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnPreviewStylusMove(self: Window_16$17, e: StylusEventArgs)OnPreviewStylusMove(self: Label_17$18, e: StylusEventArgs)OnPreviewStylusMove(self: TextBox_18$19, e: StylusEventArgs)OnPreviewStylusMove(self: Button_19$20, e: StylusEventArgs)OnPreviewStylusMove(self: CheckBox_20$21, e: StylusEventArgs)OnPreviewStylusMove(self: ComboBox_21$22, e: StylusEventArgs)OnPreviewStylusMove(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnPreviewStylusOutOfRange(self, *args): #cannot find CLR method
        """
        OnPreviewStylusOutOfRange(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusOutOfRange�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnPreviewStylusOutOfRange(self: Window_16$17, e: StylusEventArgs)OnPreviewStylusOutOfRange(self: Label_17$18, e: StylusEventArgs)OnPreviewStylusOutOfRange(self: TextBox_18$19, e: StylusEventArgs)OnPreviewStylusOutOfRange(self: Button_19$20, e: StylusEventArgs)OnPreviewStylusOutOfRange(self: CheckBox_20$21, e: StylusEventArgs)OnPreviewStylusOutOfRange(self: ComboBox_21$22, e: StylusEventArgs)OnPreviewStylusOutOfRange(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnPreviewStylusSystemGesture(self, *args): #cannot find CLR method
        """
        OnPreviewStylusSystemGesture(self: UIElement, e: StylusSystemGestureEventArgs)
            Invoked when an unhandled 
             System.Windows.Input.Stylus.PreviewStylusSystemGesture�attached event reaches 
             an element in its route that is derived from this class. Implement this method 
             to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusSystemGestureEventArgs that contains the event 
             data.
        
        OnPreviewStylusSystemGesture(self: Window_16$17, e: StylusSystemGestureEventArgs)OnPreviewStylusSystemGesture(self: Label_17$18, e: StylusSystemGestureEventArgs)OnPreviewStylusSystemGesture(self: TextBox_18$19, e: StylusSystemGestureEventArgs)OnPreviewStylusSystemGesture(self: Button_19$20, e: StylusSystemGestureEventArgs)OnPreviewStylusSystemGesture(self: CheckBox_20$21, e: StylusSystemGestureEventArgs)OnPreviewStylusSystemGesture(self: ComboBox_21$22, e: StylusSystemGestureEventArgs)OnPreviewStylusSystemGesture(self: Separator_22$23, e: StylusSystemGestureEventArgs)
        """
        pass

    def OnPreviewStylusUp(self, *args): #cannot find CLR method
        """
        OnPreviewStylusUp(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.PreviewStylusUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnPreviewStylusUp(self: Window_16$17, e: StylusEventArgs)OnPreviewStylusUp(self: Label_17$18, e: StylusEventArgs)OnPreviewStylusUp(self: TextBox_18$19, e: StylusEventArgs)OnPreviewStylusUp(self: Button_19$20, e: StylusEventArgs)OnPreviewStylusUp(self: CheckBox_20$21, e: StylusEventArgs)OnPreviewStylusUp(self: ComboBox_21$22, e: StylusEventArgs)OnPreviewStylusUp(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnPreviewTextInput(self, *args): #cannot find CLR method
        """
        OnPreviewTextInput(self: UIElement, e: TextCompositionEventArgs)
            Invoked when an unhandled 
             System.Windows.Input.TextCompositionManager.PreviewTextInput�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.TextCompositionEventArgs that contains the event data.
        OnPreviewTextInput(self: Window_16$17, e: TextCompositionEventArgs)OnPreviewTextInput(self: Label_17$18, e: TextCompositionEventArgs)OnPreviewTextInput(self: TextBox_18$19, e: TextCompositionEventArgs)OnPreviewTextInput(self: Button_19$20, e: TextCompositionEventArgs)OnPreviewTextInput(self: CheckBox_20$21, e: TextCompositionEventArgs)OnPreviewTextInput(self: ComboBox_21$22, e: TextCompositionEventArgs)OnPreviewTextInput(self: Separator_22$23, e: TextCompositionEventArgs)
        """
        pass

    def OnPreviewTouchDown(self, *args): #cannot find CLR method
        """
        OnPreviewTouchDown(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.PreviewTouchDown 
             routed event that occurs when a touch presses this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnPreviewTouchDown(self: Window_16$17, e: TouchEventArgs)OnPreviewTouchDown(self: Label_17$18, e: TouchEventArgs)OnPreviewTouchDown(self: TextBox_18$19, e: TouchEventArgs)OnPreviewTouchDown(self: Button_19$20, e: TouchEventArgs)OnPreviewTouchDown(self: CheckBox_20$21, e: TouchEventArgs)OnPreviewTouchDown(self: ComboBox_21$22, e: TouchEventArgs)OnPreviewTouchDown(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnPreviewTouchMove(self, *args): #cannot find CLR method
        """
        OnPreviewTouchMove(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.PreviewTouchMove 
             routed event that occurs when a touch moves while inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnPreviewTouchMove(self: Window_16$17, e: TouchEventArgs)OnPreviewTouchMove(self: Label_17$18, e: TouchEventArgs)OnPreviewTouchMove(self: TextBox_18$19, e: TouchEventArgs)OnPreviewTouchMove(self: Button_19$20, e: TouchEventArgs)OnPreviewTouchMove(self: CheckBox_20$21, e: TouchEventArgs)OnPreviewTouchMove(self: ComboBox_21$22, e: TouchEventArgs)OnPreviewTouchMove(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnPreviewTouchUp(self, *args): #cannot find CLR method
        """
        OnPreviewTouchUp(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.PreviewTouchUp routed 
             event that occurs when a touch is released inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnPreviewTouchUp(self: Window_16$17, e: TouchEventArgs)OnPreviewTouchUp(self: Label_17$18, e: TouchEventArgs)OnPreviewTouchUp(self: TextBox_18$19, e: TouchEventArgs)OnPreviewTouchUp(self: Button_19$20, e: TouchEventArgs)OnPreviewTouchUp(self: CheckBox_20$21, e: TouchEventArgs)OnPreviewTouchUp(self: ComboBox_21$22, e: TouchEventArgs)OnPreviewTouchUp(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnPropertyChanged(self, *args): #cannot find CLR method
        """
        OnPropertyChanged(self: FrameworkElement, e: DependencyPropertyChangedEventArgs)
            Invoked whenever the effective value of any dependency property on this 
             System.Windows.FrameworkElement has been updated. The specific dependency 
             property that changed is reported in the arguments parameter. Overrides 
             System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPrope
             rtyChangedEventArgs).
        
        
            e: The event data that describes the property that changed, as well as old and new 
             values.
        
        OnPropertyChanged(self: Window_16$17, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Label_17$18, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: TextBox_18$19, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Button_19$20, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: CheckBox_20$21, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: ComboBox_21$22, e: DependencyPropertyChangedEventArgs)OnPropertyChanged(self: Separator_22$23, e: DependencyPropertyChangedEventArgs)
        """
        pass

    def OnQueryContinueDrag(self, *args): #cannot find CLR method
        """
        OnQueryContinueDrag(self: UIElement, e: QueryContinueDragEventArgs)
            Invoked when an unhandled System.Windows.DragDrop.QueryContinueDrag�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.QueryContinueDragEventArgs that contains the event data.
        OnQueryContinueDrag(self: Window_16$17, e: QueryContinueDragEventArgs)OnQueryContinueDrag(self: Label_17$18, e: QueryContinueDragEventArgs)OnQueryContinueDrag(self: TextBox_18$19, e: QueryContinueDragEventArgs)OnQueryContinueDrag(self: Button_19$20, e: QueryContinueDragEventArgs)OnQueryContinueDrag(self: CheckBox_20$21, e: QueryContinueDragEventArgs)OnQueryContinueDrag(self: ComboBox_21$22, e: QueryContinueDragEventArgs)OnQueryContinueDrag(self: Separator_22$23, e: QueryContinueDragEventArgs)
        """
        pass

    def OnQueryCursor(self, *args): #cannot find CLR method
        """
        OnQueryCursor(self: UIElement, e: QueryCursorEventArgs)
            Invoked when an unhandled System.Windows.Input.Mouse.QueryCursor�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.QueryCursorEventArgs that contains the event data.
        OnQueryCursor(self: Window_16$17, e: QueryCursorEventArgs)OnQueryCursor(self: Label_17$18, e: QueryCursorEventArgs)OnQueryCursor(self: TextBox_18$19, e: QueryCursorEventArgs)OnQueryCursor(self: Button_19$20, e: QueryCursorEventArgs)OnQueryCursor(self: CheckBox_20$21, e: QueryCursorEventArgs)OnQueryCursor(self: ComboBox_21$22, e: QueryCursorEventArgs)OnQueryCursor(self: Separator_22$23, e: QueryCursorEventArgs)
        """
        pass

    def OnRender(self, *args): #cannot find CLR method
        """
        OnRender(self: UIElement, drawingContext: DrawingContext)
            When overridden in a derived class, participates in rendering operations that 
             are directed by the layout system. The rendering instructions for this element 
             are not used directly when this method is invoked, and are instead preserved 
             for later asynchronous use by layout and drawing.
        
        
            drawingContext: The drawing instructions for a specific element. This context is provided to 
             the layout system.
        
        OnRender(self: Window_16$17, drawingContext: DrawingContext)OnRender(self: Label_17$18, drawingContext: DrawingContext)OnRender(self: TextBox_18$19, drawingContext: DrawingContext)OnRender(self: Button_19$20, drawingContext: DrawingContext)OnRender(self: CheckBox_20$21, drawingContext: DrawingContext)OnRender(self: ComboBox_21$22, drawingContext: DrawingContext)OnRender(self: Separator_22$23, drawingContext: DrawingContext)
        """
        pass

    def OnRenderSizeChanged(self, *args): #cannot find CLR method
        """
        OnRenderSizeChanged(self: FrameworkElement, sizeInfo: SizeChangedInfo)
            Raises the System.Windows.FrameworkElement.SizeChanged event, using the 
             specified information as part of the eventual event data.
        
        
            sizeInfo: Details of the old and new size involved in the change.
        OnRenderSizeChanged(self: Window_16$17, sizeInfo: SizeChangedInfo)OnRenderSizeChanged(self: Label_17$18, sizeInfo: SizeChangedInfo)OnRenderSizeChanged(self: TextBox_18$19, sizeInfo: SizeChangedInfo)OnRenderSizeChanged(self: Button_19$20, sizeInfo: SizeChangedInfo)OnRenderSizeChanged(self: CheckBox_20$21, sizeInfo: SizeChangedInfo)OnRenderSizeChanged(self: ComboBox_21$22, sizeInfo: SizeChangedInfo)OnRenderSizeChanged(self: Separator_22$23, sizeInfo: SizeChangedInfo)
        """
        pass

    def OnSourceInitialized(self, *args): #cannot find CLR method
        """
        OnSourceInitialized(self: Window, e: EventArgs)
            Raises the System.Windows.Window.SourceInitialized event.
        
            e: An System.EventArgs that contains the event data.
        OnSourceInitialized(self: Window_16$17, e: EventArgs)
        """
        pass

    def OnStateChanged(self, *args): #cannot find CLR method
        """
        OnStateChanged(self: Window, e: EventArgs)
            Raises the System.Windows.Window.StateChanged event.
        
            e: An System.EventArgs that contains the event data.
        OnStateChanged(self: Window_16$17, e: EventArgs)
        """
        pass

    def OnStyleChanged(self, *args): #cannot find CLR method
        """
        OnStyleChanged(self: FrameworkElement, oldStyle: Style, newStyle: Style)
            Invoked when the style in use on this element changes, which will invalidate 
             the layout.
        
        
            oldStyle: The old style.
            newStyle: The new style.
        OnStyleChanged(self: Window_16$17, oldStyle: Style, newStyle: Style)OnStyleChanged(self: Label_17$18, oldStyle: Style, newStyle: Style)OnStyleChanged(self: TextBox_18$19, oldStyle: Style, newStyle: Style)OnStyleChanged(self: Button_19$20, oldStyle: Style, newStyle: Style)OnStyleChanged(self: CheckBox_20$21, oldStyle: Style, newStyle: Style)OnStyleChanged(self: ComboBox_21$22, oldStyle: Style, newStyle: Style)OnStyleChanged(self: Separator_22$23, oldStyle: Style, newStyle: Style)
        """
        pass

    def OnStylusButtonDown(self, *args): #cannot find CLR method
        """
        OnStylusButtonDown(self: UIElement, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusButtonDown�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        OnStylusButtonDown(self: Window_16$17, e: StylusButtonEventArgs)OnStylusButtonDown(self: Label_17$18, e: StylusButtonEventArgs)OnStylusButtonDown(self: TextBox_18$19, e: StylusButtonEventArgs)OnStylusButtonDown(self: Button_19$20, e: StylusButtonEventArgs)OnStylusButtonDown(self: CheckBox_20$21, e: StylusButtonEventArgs)OnStylusButtonDown(self: ComboBox_21$22, e: StylusButtonEventArgs)OnStylusButtonDown(self: Separator_22$23, e: StylusButtonEventArgs)
        """
        pass

    def OnStylusButtonUp(self, *args): #cannot find CLR method
        """
        OnStylusButtonUp(self: UIElement, e: StylusButtonEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusButtonUp�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusButtonEventArgs that contains the event data.
        OnStylusButtonUp(self: Window_16$17, e: StylusButtonEventArgs)OnStylusButtonUp(self: Label_17$18, e: StylusButtonEventArgs)OnStylusButtonUp(self: TextBox_18$19, e: StylusButtonEventArgs)OnStylusButtonUp(self: Button_19$20, e: StylusButtonEventArgs)OnStylusButtonUp(self: CheckBox_20$21, e: StylusButtonEventArgs)OnStylusButtonUp(self: ComboBox_21$22, e: StylusButtonEventArgs)OnStylusButtonUp(self: Separator_22$23, e: StylusButtonEventArgs)
        """
        pass

    def OnStylusDown(self, *args): #cannot find CLR method
        """
        OnStylusDown(self: UIElement, e: StylusDownEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusDown�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusDownEventArgs that contains the event data.
        OnStylusDown(self: Window_16$17, e: StylusDownEventArgs)OnStylusDown(self: Label_17$18, e: StylusDownEventArgs)OnStylusDown(self: TextBox_18$19, e: StylusDownEventArgs)OnStylusDown(self: Button_19$20, e: StylusDownEventArgs)OnStylusDown(self: CheckBox_20$21, e: StylusDownEventArgs)OnStylusDown(self: ComboBox_21$22, e: StylusDownEventArgs)OnStylusDown(self: Separator_22$23, e: StylusDownEventArgs)
        """
        pass

    def OnStylusEnter(self, *args): #cannot find CLR method
        """
        OnStylusEnter(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusEnter�attached 
             event is raised by this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnStylusEnter(self: Window_16$17, e: StylusEventArgs)OnStylusEnter(self: Label_17$18, e: StylusEventArgs)OnStylusEnter(self: TextBox_18$19, e: StylusEventArgs)OnStylusEnter(self: Button_19$20, e: StylusEventArgs)OnStylusEnter(self: CheckBox_20$21, e: StylusEventArgs)OnStylusEnter(self: ComboBox_21$22, e: StylusEventArgs)OnStylusEnter(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnStylusInAirMove(self, *args): #cannot find CLR method
        """
        OnStylusInAirMove(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusInAirMove�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnStylusInAirMove(self: Window_16$17, e: StylusEventArgs)OnStylusInAirMove(self: Label_17$18, e: StylusEventArgs)OnStylusInAirMove(self: TextBox_18$19, e: StylusEventArgs)OnStylusInAirMove(self: Button_19$20, e: StylusEventArgs)OnStylusInAirMove(self: CheckBox_20$21, e: StylusEventArgs)OnStylusInAirMove(self: ComboBox_21$22, e: StylusEventArgs)OnStylusInAirMove(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnStylusInRange(self, *args): #cannot find CLR method
        """
        OnStylusInRange(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusInRange�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnStylusInRange(self: Window_16$17, e: StylusEventArgs)OnStylusInRange(self: Label_17$18, e: StylusEventArgs)OnStylusInRange(self: TextBox_18$19, e: StylusEventArgs)OnStylusInRange(self: Button_19$20, e: StylusEventArgs)OnStylusInRange(self: CheckBox_20$21, e: StylusEventArgs)OnStylusInRange(self: ComboBox_21$22, e: StylusEventArgs)OnStylusInRange(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnStylusLeave(self, *args): #cannot find CLR method
        """
        OnStylusLeave(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusLeave�attached 
             event is raised by this element. Implement this method to add class handling 
             for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnStylusLeave(self: Window_16$17, e: StylusEventArgs)OnStylusLeave(self: Label_17$18, e: StylusEventArgs)OnStylusLeave(self: TextBox_18$19, e: StylusEventArgs)OnStylusLeave(self: Button_19$20, e: StylusEventArgs)OnStylusLeave(self: CheckBox_20$21, e: StylusEventArgs)OnStylusLeave(self: ComboBox_21$22, e: StylusEventArgs)OnStylusLeave(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnStylusMove(self, *args): #cannot find CLR method
        """
        OnStylusMove(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusMove�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnStylusMove(self: Window_16$17, e: StylusEventArgs)OnStylusMove(self: Label_17$18, e: StylusEventArgs)OnStylusMove(self: TextBox_18$19, e: StylusEventArgs)OnStylusMove(self: Button_19$20, e: StylusEventArgs)OnStylusMove(self: CheckBox_20$21, e: StylusEventArgs)OnStylusMove(self: ComboBox_21$22, e: StylusEventArgs)OnStylusMove(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnStylusOutOfRange(self, *args): #cannot find CLR method
        """
        OnStylusOutOfRange(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusOutOfRange�attached 
             event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnStylusOutOfRange(self: Window_16$17, e: StylusEventArgs)OnStylusOutOfRange(self: Label_17$18, e: StylusEventArgs)OnStylusOutOfRange(self: TextBox_18$19, e: StylusEventArgs)OnStylusOutOfRange(self: Button_19$20, e: StylusEventArgs)OnStylusOutOfRange(self: CheckBox_20$21, e: StylusEventArgs)OnStylusOutOfRange(self: ComboBox_21$22, e: StylusEventArgs)OnStylusOutOfRange(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnStylusSystemGesture(self, *args): #cannot find CLR method
        """
        OnStylusSystemGesture(self: UIElement, e: StylusSystemGestureEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusSystemGesture�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusSystemGestureEventArgs that contains the event 
             data.
        
        OnStylusSystemGesture(self: Window_16$17, e: StylusSystemGestureEventArgs)OnStylusSystemGesture(self: Label_17$18, e: StylusSystemGestureEventArgs)OnStylusSystemGesture(self: TextBox_18$19, e: StylusSystemGestureEventArgs)OnStylusSystemGesture(self: Button_19$20, e: StylusSystemGestureEventArgs)OnStylusSystemGesture(self: CheckBox_20$21, e: StylusSystemGestureEventArgs)OnStylusSystemGesture(self: ComboBox_21$22, e: StylusSystemGestureEventArgs)OnStylusSystemGesture(self: Separator_22$23, e: StylusSystemGestureEventArgs)
        """
        pass

    def OnStylusUp(self, *args): #cannot find CLR method
        """
        OnStylusUp(self: UIElement, e: StylusEventArgs)
            Invoked when an unhandled System.Windows.Input.Stylus.StylusUp�attached event 
             reaches an element in its route that is derived from this class. Implement this 
             method to add class handling for this event.
        
        
            e: The System.Windows.Input.StylusEventArgs that contains the event data.
        OnStylusUp(self: Window_16$17, e: StylusEventArgs)OnStylusUp(self: Label_17$18, e: StylusEventArgs)OnStylusUp(self: TextBox_18$19, e: StylusEventArgs)OnStylusUp(self: Button_19$20, e: StylusEventArgs)OnStylusUp(self: CheckBox_20$21, e: StylusEventArgs)OnStylusUp(self: ComboBox_21$22, e: StylusEventArgs)OnStylusUp(self: Separator_22$23, e: StylusEventArgs)
        """
        pass

    def OnTemplateChanged(self, *args): #cannot find CLR method
        """
        OnTemplateChanged(self: Control, oldTemplate: ControlTemplate, newTemplate: ControlTemplate)
            Called whenever the control's template changes.
        
            oldTemplate: The old template.
            newTemplate: The new template.
        OnTemplateChanged(self: Window_16$17, oldTemplate: ControlTemplate, newTemplate: ControlTemplate)OnTemplateChanged(self: Label_17$18, oldTemplate: ControlTemplate, newTemplate: ControlTemplate)OnTemplateChanged(self: TextBox_18$19, oldTemplate: ControlTemplate, newTemplate: ControlTemplate)OnTemplateChanged(self: Button_19$20, oldTemplate: ControlTemplate, newTemplate: ControlTemplate)OnTemplateChanged(self: CheckBox_20$21, oldTemplate: ControlTemplate, newTemplate: ControlTemplate)OnTemplateChanged(self: ComboBox_21$22, oldTemplate: ControlTemplate, newTemplate: ControlTemplate)OnTemplateChanged(self: Separator_22$23, oldTemplate: ControlTemplate, newTemplate: ControlTemplate)
        """
        pass

    def OnTextInput(self, *args): #cannot find CLR method
        """
        OnTextInput(self: UIElement, e: TextCompositionEventArgs)
            Invoked when an unhandled System.Windows.Input.TextCompositionManager.TextInput�
             attached event reaches an element in its route that is derived from this class. 
             Implement this method to add class handling for this event.
        
        
            e: The System.Windows.Input.TextCompositionEventArgs that contains the event data.
        OnTextInput(self: Window_16$17, e: TextCompositionEventArgs)OnTextInput(self: Label_17$18, e: TextCompositionEventArgs)OnTextInput(self: TextBox_18$19, e: TextCompositionEventArgs)OnTextInput(self: Button_19$20, e: TextCompositionEventArgs)OnTextInput(self: CheckBox_20$21, e: TextCompositionEventArgs)OnTextInput(self: ComboBox_21$22, e: TextCompositionEventArgs)OnTextInput(self: Separator_22$23, e: TextCompositionEventArgs)
        """
        pass

    def OnToolTipClosing(self, *args): #cannot find CLR method
        """
        OnToolTipClosing(self: FrameworkElement, e: ToolTipEventArgs)
            Invoked whenever an unhandled System.Windows.FrameworkElement.ToolTipClosing 
             routed event reaches this class in its route. Implement this method to add 
             class handling for this event.
        
        
            e: Provides data about the event.
        OnToolTipClosing(self: Window_16$17, e: ToolTipEventArgs)OnToolTipClosing(self: Label_17$18, e: ToolTipEventArgs)OnToolTipClosing(self: TextBox_18$19, e: ToolTipEventArgs)OnToolTipClosing(self: Button_19$20, e: ToolTipEventArgs)OnToolTipClosing(self: CheckBox_20$21, e: ToolTipEventArgs)OnToolTipClosing(self: ComboBox_21$22, e: ToolTipEventArgs)OnToolTipClosing(self: Separator_22$23, e: ToolTipEventArgs)
        """
        pass

    def OnToolTipOpening(self, *args): #cannot find CLR method
        """
        OnToolTipOpening(self: FrameworkElement, e: ToolTipEventArgs)
            Invoked whenever the System.Windows.FrameworkElement.ToolTipOpening routed 
             event reaches this class in its route. Implement this method to add class 
             handling for this event.
        
        
            e: Provides data about the event.
        OnToolTipOpening(self: Window_16$17, e: ToolTipEventArgs)OnToolTipOpening(self: Label_17$18, e: ToolTipEventArgs)OnToolTipOpening(self: TextBox_18$19, e: ToolTipEventArgs)OnToolTipOpening(self: Button_19$20, e: ToolTipEventArgs)OnToolTipOpening(self: CheckBox_20$21, e: ToolTipEventArgs)OnToolTipOpening(self: ComboBox_21$22, e: ToolTipEventArgs)OnToolTipOpening(self: Separator_22$23, e: ToolTipEventArgs)
        """
        pass

    def OnTouchDown(self, *args): #cannot find CLR method
        """
        OnTouchDown(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.TouchDown routed event 
             that occurs when a touch presses inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnTouchDown(self: Window_16$17, e: TouchEventArgs)OnTouchDown(self: Label_17$18, e: TouchEventArgs)OnTouchDown(self: TextBox_18$19, e: TouchEventArgs)OnTouchDown(self: Button_19$20, e: TouchEventArgs)OnTouchDown(self: CheckBox_20$21, e: TouchEventArgs)OnTouchDown(self: ComboBox_21$22, e: TouchEventArgs)OnTouchDown(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnTouchEnter(self, *args): #cannot find CLR method
        """
        OnTouchEnter(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.TouchEnter routed 
             event that occurs when a touch moves from outside to inside the bounds of this 
             element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnTouchEnter(self: Window_16$17, e: TouchEventArgs)OnTouchEnter(self: Label_17$18, e: TouchEventArgs)OnTouchEnter(self: TextBox_18$19, e: TouchEventArgs)OnTouchEnter(self: Button_19$20, e: TouchEventArgs)OnTouchEnter(self: CheckBox_20$21, e: TouchEventArgs)OnTouchEnter(self: ComboBox_21$22, e: TouchEventArgs)OnTouchEnter(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnTouchLeave(self, *args): #cannot find CLR method
        """
        OnTouchLeave(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.TouchLeave routed 
             event that occurs when a touch moves from inside to outside the bounds of this 
             System.Windows.UIElement.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnTouchLeave(self: Window_16$17, e: TouchEventArgs)OnTouchLeave(self: Label_17$18, e: TouchEventArgs)OnTouchLeave(self: TextBox_18$19, e: TouchEventArgs)OnTouchLeave(self: Button_19$20, e: TouchEventArgs)OnTouchLeave(self: CheckBox_20$21, e: TouchEventArgs)OnTouchLeave(self: ComboBox_21$22, e: TouchEventArgs)OnTouchLeave(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnTouchMove(self, *args): #cannot find CLR method
        """
        OnTouchMove(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.TouchMove routed event 
             that occurs when a touch moves while inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnTouchMove(self: Window_16$17, e: TouchEventArgs)OnTouchMove(self: Label_17$18, e: TouchEventArgs)OnTouchMove(self: TextBox_18$19, e: TouchEventArgs)OnTouchMove(self: Button_19$20, e: TouchEventArgs)OnTouchMove(self: CheckBox_20$21, e: TouchEventArgs)OnTouchMove(self: ComboBox_21$22, e: TouchEventArgs)OnTouchMove(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnTouchUp(self, *args): #cannot find CLR method
        """
        OnTouchUp(self: UIElement, e: TouchEventArgs)
            Provides class handling for the System.Windows.UIElement.TouchUp routed event 
             that occurs when a touch is released inside this element.
        
        
            e: A System.Windows.Input.TouchEventArgs that contains the event data.
        OnTouchUp(self: Window_16$17, e: TouchEventArgs)OnTouchUp(self: Label_17$18, e: TouchEventArgs)OnTouchUp(self: TextBox_18$19, e: TouchEventArgs)OnTouchUp(self: Button_19$20, e: TouchEventArgs)OnTouchUp(self: CheckBox_20$21, e: TouchEventArgs)OnTouchUp(self: ComboBox_21$22, e: TouchEventArgs)OnTouchUp(self: Separator_22$23, e: TouchEventArgs)
        """
        pass

    def OnVisualChildrenChanged(self, *args): #cannot find CLR method
        """
        OnVisualChildrenChanged(self: Visual, visualAdded: DependencyObject, visualRemoved: DependencyObject)
            Called when the System.Windows.Media.VisualCollection of the visual object is 
             modified.
        
        
            visualAdded: The System.Windows.Media.Visual that was added to the collection
            visualRemoved: The System.Windows.Media.Visual that was removed from the collection
        OnVisualChildrenChanged(self: Window_16$17, visualAdded: DependencyObject, visualRemoved: DependencyObject)OnVisualChildrenChanged(self: Label_17$18, visualAdded: DependencyObject, visualRemoved: DependencyObject)OnVisualChildrenChanged(self: TextBox_18$19, visualAdded: DependencyObject, visualRemoved: DependencyObject)OnVisualChildrenChanged(self: Button_19$20, visualAdded: DependencyObject, visualRemoved: DependencyObject)OnVisualChildrenChanged(self: CheckBox_20$21, visualAdded: DependencyObject, visualRemoved: DependencyObject)OnVisualChildrenChanged(self: ComboBox_21$22, visualAdded: DependencyObject, visualRemoved: DependencyObject)OnVisualChildrenChanged(self: Separator_22$23, visualAdded: DependencyObject, visualRemoved: DependencyObject)
        """
        pass

    def OnVisualParentChanged(self, *args): #cannot find CLR method
        """
        OnVisualParentChanged(self: Window, oldParent: DependencyObject)
            Called when the parent of the window is changed.
        
            oldParent: The previous parent. Set to null if the System.Windows.DependencyObject did not 
             have a previous parent.
        
        OnVisualParentChanged(self: Window_16$17, oldParent: DependencyObject)
        """
        pass

    def ParentLayoutInvalidated(self, *args): #cannot find CLR method
        """
        ParentLayoutInvalidated(self: FrameworkElement, child: UIElement)
            Supports incremental layout implementations in specialized subclasses of 
             System.Windows.FrameworkElement. 
             System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement
             )  is invoked when a child element has invalidated a property that is marked in 
             metadata as affecting the parent's measure or arrange passes during layout.
        
        
            child: The child element reporting the change.
        ParentLayoutInvalidated(self: Window_16$17, child: UIElement)ParentLayoutInvalidated(self: Label_17$18, child: UIElement)ParentLayoutInvalidated(self: TextBox_18$19, child: UIElement)ParentLayoutInvalidated(self: Button_19$20, child: UIElement)ParentLayoutInvalidated(self: CheckBox_20$21, child: UIElement)ParentLayoutInvalidated(self: ComboBox_21$22, child: UIElement)ParentLayoutInvalidated(self: Separator_22$23, child: UIElement)
        """
        pass

    def RemoveLogicalChild(self, *args): #cannot find CLR method
        """
        RemoveLogicalChild(self: FrameworkElement, child: object)
            Removes the provided object from this element's logical tree. 
             System.Windows.FrameworkElement updates the affected logical tree parent 
             pointers to keep in sync with this deletion.
        
        
            child: The element to remove.
        RemoveLogicalChild(self: Window_16$17, child: object)RemoveLogicalChild(self: Label_17$18, child: object)RemoveLogicalChild(self: TextBox_18$19, child: object)RemoveLogicalChild(self: Button_19$20, child: object)RemoveLogicalChild(self: CheckBox_20$21, child: object)RemoveLogicalChild(self: ComboBox_21$22, child: object)RemoveLogicalChild(self: Separator_22$23, child: object)
        """
        pass

    def RemoveVisualChild(self, *args): #cannot find CLR method
        """
        RemoveVisualChild(self: Visual, child: Visual)
            Removes the parent-child relationship between two visuals.
        
            child: The child visual object to remove from the parent visual.
        RemoveVisualChild(self: Window_16$17, child: Window_16$17)RemoveVisualChild(self: Label_17$18, child: Label_17$18)RemoveVisualChild(self: TextBox_18$19, child: TextBox_18$19)RemoveVisualChild(self: Button_19$20, child: Button_19$20)RemoveVisualChild(self: CheckBox_20$21, child: CheckBox_20$21)RemoveVisualChild(self: ComboBox_21$22, child: ComboBox_21$22)RemoveVisualChild(self: Separator_22$23, child: Separator_22$23)
        """
        pass

    def ShouldSerializeProperty(self, *args): #cannot find CLR method
        """
        ShouldSerializeProperty(self: DependencyObject, dp: DependencyProperty) -> bool
        
            Returns a value that indicates whether serialization processes should serialize 
             the value for the provided dependency property.
        
        
            dp: The identifier for the dependency property that should be serialized.
            Returns: true if the dependency property that is supplied should be value-serialized; 
             otherwise, false.
        
        ShouldSerializeProperty(self: Window_16$17, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Label_17$18, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: TextBox_18$19, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Button_19$20, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: CheckBox_20$21, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: ComboBox_21$22, dp: DependencyProperty) -> bool
        ShouldSerializeProperty(self: Separator_22$23, dp: DependencyProperty) -> bool
        """
        pass

    def Show(self):
        """
        Show(self: Window)
            Opens a window and returns without waiting for the newly opened window to close.
        """
        pass

    def ShowDialog(self):
        """
        ShowDialog(self: Window) -> Nullable[bool]
        
            Opens a window and returns only when the newly opened window is closed.
            Returns: A System.Nullable value of type System.Boolean that specifies whether the 
             activity was accepted (true) or canceled (false). The return value is the value 
             of the System.Windows.Window.DialogResult property before a window closes.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AllowsTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether a window's client area supports transparency.

Get: AllowsTransparency(self: Window) -> bool

Set: AllowsTransparency(self: Window) = value
"""

    DefaultStyleKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the key to use to reference the style for this control, when theme styles are used or defined.

"""

    DialogResult = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the dialog result value, which is the value that is returned from the System.Windows.Window.ShowDialog method.

Get: DialogResult(self: Window) -> Nullable[bool]

Set: DialogResult(self: Window) = value
"""

    HandlesScrolling = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether a control supports scrolling.

"""

    HasEffectiveKeyboardFocus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    Icon = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a window's icon.

Get: Icon(self: Window) -> ImageSource

Set: Icon(self: Window) = value
"""

    InheritanceBehavior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the scope limits for property value inheritance, resource key lookup, and RelativeSource FindAncestor lookup.

"""

    IsActive = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that indicates whether the window is active.

Get: IsActive(self: Window) -> bool

"""

    IsEnabledCore = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value that becomes the return value of System.Windows.UIElement.IsEnabled in derived classes.

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the position of the window's left edge, in relation to the desktop.

Get: Left(self: Window) -> float

Set: Left(self: Window) = value
"""

    LogicalChildren = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets an enumerator for a window's logical child elements.

"""

    OwnedWindows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of windows for which this window is the owner.

Get: OwnedWindows(self: Window) -> WindowCollection

"""

    Owner = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Window that owns this System.Windows.Window.

Get: Owner(self: Window) -> Window

Set: Owner(self: Window) = value
"""

    ResizeMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the resize mode.

Get: ResizeMode(self: Window) -> ResizeMode

Set: ResizeMode(self: Window) = value
"""

    RestoreBounds = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the size and location of a window before being either minimized or maximized.

Get: RestoreBounds(self: Window) -> Rect

"""

    ShowActivated = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether a window is activated when first shown.

Get: ShowActivated(self: Window) -> bool

Set: ShowActivated(self: Window) = value
"""

    ShowInTaskbar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether the window has a task bar button.

Get: ShowInTaskbar(self: Window) -> bool

Set: ShowInTaskbar(self: Window) = value
"""

    SizeToContent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.

Get: SizeToContent(self: Window) -> SizeToContent

Set: SizeToContent(self: Window) = value
"""

    StylusPlugIns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a collection of all stylus plug-in (customization) objects associated with this element.

"""

    TaskbarItemInfo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the Windows 7�taskbar thumbnail for the System.Windows.Window.

Get: TaskbarItemInfo(self: Window) -> TaskbarItemInfo

Set: TaskbarItemInfo(self: Window) = value
"""

    Title = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a window's title.

Get: Title(self: Window) -> str

Set: Title(self: Window) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the position of the window's top edge, in relation to the desktop.

Get: Top(self: Window) -> float

Set: Top(self: Window) = value
"""

    Topmost = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether a window appears in the topmost z-order.

Get: Topmost(self: Window) -> bool

Set: Topmost(self: Window) = value
"""

    VisualBitmapEffect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.Effects.BitmapEffect value for the System.Windows.Media.Visual.

"""

    VisualBitmapEffectInput = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.Effects.BitmapEffectInput value for the System.Windows.Media.Visual.

"""

    VisualBitmapScalingMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.BitmapScalingMode for the System.Windows.Media.Visual.

"""

    VisualCacheMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a cached representation of the System.Windows.Media.Visual.

"""

    VisualChildrenCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the number of visual child elements within this element.

"""

    VisualClearTypeHint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.ClearTypeHint that determines how ClearType is rendered in the System.Windows.Media.Visual.

"""

    VisualClip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the clip region of the System.Windows.Media.Visual as a System.Windows.Media.Geometry value.

"""

    VisualEdgeMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the edge mode of the System.Windows.Media.Visual as an System.Windows.Media.EdgeMode value.

"""

    VisualEffect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the bitmap effect to apply to the System.Windows.Media.Visual.

"""

    VisualOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the offset value of the visual object.

"""

    VisualOpacity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the opacity of the System.Windows.Media.Visual.

"""

    VisualOpacityMask = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.Brush value that represents the opacity mask of the System.Windows.Media.Visual.

"""

    VisualParent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the visual tree parent of the visual object.

"""

    VisualScrollableAreaClip = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a clipped scrollable area for the System.Windows.Media.Visual.

"""

    VisualTextHintingMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.TextHintingMode of the System.Windows.Media.Visual.

"""

    VisualTextRenderingMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.TextRenderingMode of the System.Windows.Media.Visual.

"""

    VisualTransform = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the System.Windows.Media.Transform value for the System.Windows.Media.Visual.

"""

    VisualXSnappingGuidelines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the x-coordinate (vertical) guideline collection.

"""

    VisualYSnappingGuidelines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the y-coordinate (horizontal) guideline collection.

"""

    WindowStartupLocation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the position of the window when first shown.

Get: WindowStartupLocation(self: Window) -> WindowStartupLocation

Set: WindowStartupLocation(self: Window) = value
"""

    WindowState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a value that indicates whether a window is restored, minimized, or maximized.

Get: WindowState(self: Window) -> WindowState

Set: WindowState(self: Window) = value
"""

    WindowStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets a window's border style.

Get: WindowStyle(self: Window) -> WindowStyle

Set: WindowStyle(self: Window) = value
"""


    Activated = None
    AllowsTransparencyProperty = None
    Closed = None
    Closing = None
    ContentRendered = None
    Deactivated = None
    DpiChanged = None
    DpiChangedEvent = None
    IconProperty = None
    IsActiveProperty = None
    LeftProperty = None
    LocationChanged = None
    ResizeModeProperty = None
    ShowActivatedProperty = None
    ShowInTaskbarProperty = None
    SizeToContentProperty = None
    SourceInitialized = None
    StateChanged = None
    TaskbarItemInfoProperty = None
    TitleProperty = None
    TopmostProperty = None
    TopProperty = None
    WindowStateProperty = None
    WindowStyleProperty = None


class WindowCollection(object, ICollection, IEnumerable):
    """
    Represents a collection of System.Windows.Window objects. This class cannot be inherited.
    
    WindowCollection()
    """
    def CopyTo(self, array, index):
        """
        CopyTo(self: WindowCollection, array: Array[Window], index: int)
            Copies each System.Windows.Window object in the collection to an array, 
             starting from the specified index.
        
        
            array: An array of type System.Windows.Window that the System.Windows.Window objects 
             in the collection are copied to.
        
            index: The position in the collection to start copying from.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: WindowCollection) -> IEnumerator
        
            Returns an System.Collections.IEnumerator that you can use to enumerate the 
             System.Windows.Window objects in the collection.
        
            Returns: An System.Collections.IEnumerator that you can use to enumerate the 
             System.Windows.Window objects in the collection.
        """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __len__(self, *args): #cannot find CLR method
        """ x.__len__() <==> len(x) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the number of System.Windows.Window objects contained in the System.Windows.WindowCollection.

Get: Count(self: WindowCollection) -> int

"""

    IsSynchronized = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets a value indicating whether the System.Windows.WindowCollection object is thread safe.

Get: IsSynchronized(self: WindowCollection) -> bool

"""

    SyncRoot = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets an object that can be used to synchronize access to the collection.

Get: SyncRoot(self: WindowCollection) -> object

"""



class WindowStartupLocation(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies the position that a System.Windows.Window will be shown in when it is first opened. Used by the System.Windows.Window.WindowStartupLocation property.
    
    enum WindowStartupLocation, values: CenterOwner (2), CenterScreen (1), Manual (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CenterOwner = None
    CenterScreen = None
    Manual = None
    value__ = None


class WindowState(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies whether a window is minimized, maximized, or restored. Used by the System.Windows.Window.WindowState property.
    
    enum WindowState, values: Maximized (2), Minimized (1), Normal (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Maximized = None
    Minimized = None
    Normal = None
    value__ = None


class WindowStyle(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies the type of border that a System.Windows.Window has. Used by the System.Windows.Window.WindowStyle property.
    
    enum WindowStyle, values: None (0), SingleBorderWindow (1), ThreeDBorderWindow (2), ToolWindow (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    None = None
    SingleBorderWindow = None
    ThreeDBorderWindow = None
    ToolWindow = None
    value__ = None


class WrapDirection(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies the allowable directions that content can wrap around an object.
    
    enum WrapDirection, values: Both (3), Left (1), None (0), Right (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Both = None
    Left = None
    None = None
    Right = None
    value__ = None


# variables with complex values

