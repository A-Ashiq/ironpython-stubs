class BaseExportOptions(object,IDisposable):
 def Dispose(self):
  pass
 def GetExportFontTable(self):
  pass
 def GetExportLayerTable(self):
  pass
 def GetExportLinetypeTable(self):
  pass
 def GetExportPatternTable(self):
  pass
 @staticmethod
 def GetPredefinedSetupNames(document):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def SetExportFontTable(self,fontTable):
  pass
 def SetExportLayerTable(self,layerTable):
  pass
 def SetExportLinetypeTable(self,linetypeTable):
  pass
 def SetExportPatternTable(self,patternTable):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 Colors=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Export color mode.
   Default value is ExportColorMode.IndexColors.
Get: Colors(self: BaseExportOptions) -> ExportColorMode
Set: Colors(self: BaseExportOptions) = value
""" 
 HatchPatternsFileName=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Custom hatch patterns (pat) file name.
Get: HatchPatternsFileName(self: BaseExportOptions) -> str
Set: HatchPatternsFileName(self: BaseExportOptions) = value
""" 
 HideReferencePlane=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Whether or not to hide reference planes.
   Default value is false.
Get: HideReferencePlane(self: BaseExportOptions) -> bool
Set: HideReferencePlane(self: BaseExportOptions) = value
""" 
 HideScopeBox=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Whether or not to hide the scope box.
   Default value is false.
Get: HideScopeBox(self: BaseExportOptions) -> bool
Set: HideScopeBox(self: BaseExportOptions) = value
""" 
 HideUnreferenceViewTags=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Whether or not to hide unreference view tags.
   Default value is false.
Get: HideUnreferenceViewTags(self: BaseExportOptions) -> bool
Set: HideUnreferenceViewTags(self: BaseExportOptions) = value
""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: BaseExportOptions) -> bool
""" 
 LayerMapping=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Name of a layer settings standard or filename (with custom layer settings).
   Valid standards are: DGNV7 (only for DGN), AIA, CP83, BS1192, and ISO13567.
   default value is "" (empty) which means if no value is set,
   if no value is set, Revit will use a default value according to the localization.
Get: LayerMapping(self: BaseExportOptions) -> str
Set: LayerMapping(self: BaseExportOptions) = value
""" 
 PreserveCoincidentLines=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Whether or not to preserve coincident lines.
   Default value is false.
Get: PreserveCoincidentLines(self: BaseExportOptions) -> bool
Set: PreserveCoincidentLines(self: BaseExportOptions) = value
""" 
 PropOverrides=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """How to export overridden object styles.
   Default value is PropOverrideMode.ByEntity.
Get: PropOverrides(self: BaseExportOptions) -> PropOverrideMode
Set: PropOverrides(self: BaseExportOptions) = value
""" 
class ACADExportOptions(BaseExportOptions,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 ACAPreference=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The preferred way to generate geometry of ACA objects.
   Default value is ACAObjectPreference.Object.
Get: ACAPreference(self: ACADExportOptions) -> ACAObjectPreference
Set: ACAPreference(self: ACADExportOptions) = value
""" 
 ExportingAreas=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """True to export area and room geometry, false otherwise.
   Default value is false.
Get: ExportingAreas(self: ACADExportOptions) -> bool
Set: ExportingAreas(self: ACADExportOptions) = value
""" 
 ExportOfSolids=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The mode used to export solids in 3D views.
   Default value is SolidGeometry.Polymesh.
Get: ExportOfSolids(self: ACADExportOptions) -> SolidGeometry
Set: ExportOfSolids(self: ACADExportOptions) = value
""" 
 FileVersion=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """ACADVersion::Default
   Default value is ACADVersion.Default.
Get: FileVersion(self: ACADExportOptions) -> ACADVersion
Set: FileVersion(self: ACADExportOptions) = value
""" 
 LineScaling=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The scaling mode for the line type.
   Default value is LineScaling.ViewScale.
Get: LineScaling(self: ACADExportOptions) -> LineScaling
Set: LineScaling(self: ACADExportOptions) = value
""" 
 LinetypesFileName=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The custom linetype file name (*.lin).
   Default value is empty.
Get: LinetypesFileName(self: ACADExportOptions) -> str
Set: LinetypesFileName(self: ACADExportOptions) = value
""" 
 MarkNonplotLayers=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """If true and the nonplot layer suffix is not empty, all layers whose names contain that suffix will be marked as non-plot.
Get: MarkNonplotLayers(self: ACADExportOptions) -> bool
Set: MarkNonplotLayers(self: ACADExportOptions) = value
""" 
 NonplotSuffix=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """If the MarkNonplotLayers attribute is set to true, all layers with names containing this suffix will be marked as non-plot.
   No action will be performed if the suffix is empty.
Get: NonplotSuffix(self: ACADExportOptions) -> str
Set: NonplotSuffix(self: ACADExportOptions) = value
""" 
 SharedCoords=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """True to use the shared coordinate system's origin, false to use the project origin.
   Default value is false.
Get: SharedCoords(self: ACADExportOptions) -> bool
Set: SharedCoords(self: ACADExportOptions) = value
""" 
 TargetUnit=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The target unit type.
   Default value is ExportUnit.Default.
Get: TargetUnit(self: ACADExportOptions) -> ExportUnit
Set: TargetUnit(self: ACADExportOptions) = value
""" 
 TextTreatment=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The text treatment.
   Deault value is TextTreatment.Exact.
Get: TextTreatment(self: ACADExportOptions) -> TextTreatment
Set: TextTreatment(self: ACADExportOptions) = value
""" 
class ACADVersion(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Default=None
 R2007=None
 R2010=None
 R2013=None
 value__=None
class ACAObjectPreference(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Geometry=None
 Object=None
 value__=None
class AdaptiveComponentFamilyUtils(object):
 @staticmethod
 def GetNumberOfAdaptivePoints(family):
  pass
 @staticmethod
 def GetNumberOfPlacementPoints(family):
  pass
 @staticmethod
 def GetNumberOfShapeHandlePoints(family):
  pass
 @staticmethod
 def GetPlacementNumber(doc,refPointId):
  pass
 @staticmethod
 def GetPointConstraintType(doc,refPointId):
  pass
 @staticmethod
 def GetPointOrientationType(doc,refPointId):
  pass
 @staticmethod
 def IsAdaptiveComponentFamily(family):
  pass
 @staticmethod
 def IsAdaptivePlacementPoint(doc,refPointId):
  pass
 @staticmethod
 def IsAdaptivePoint(doc,refPointId):
  pass
 @staticmethod
 def IsAdaptiveShapeHandlePoint(doc,refPointId):
  pass
 @staticmethod
 def MakeAdaptivePoint(doc,refPointId,type):
  pass
 @staticmethod
 def SetPlacementNumber(doc,refPointId,placementNumber):
  pass
 @staticmethod
 def SetPointConstraintType(doc,refPointId,constraintType):
  pass
 @staticmethod
 def SetPointOrientationType(doc,refPointId,orientationType):
  pass
 __all__=['GetNumberOfAdaptivePoints','GetNumberOfPlacementPoints','GetNumberOfShapeHandlePoints','GetPlacementNumber','GetPointConstraintType','GetPointOrientationType','IsAdaptiveComponentFamily','IsAdaptivePlacementPoint','IsAdaptivePoint','IsAdaptiveShapeHandlePoint','MakeAdaptivePoint','SetPlacementNumber','SetPointConstraintType','SetPointOrientationType',]
class AdaptiveComponentInstanceUtils(object):
 @staticmethod
 def CreateAdaptiveComponentInstance(doc,famSymb):
  pass
 @staticmethod
 def GetInstancePlacementPointElementRefIds(famInst):
  pass
 @staticmethod
 def GetInstancePointElementRefIds(famInst):
  pass
 @staticmethod
 def GetInstanceShapeHandlePointElementRefIds(famInst):
  pass
 @staticmethod
 def HasAdaptiveFamilySymbol(famInst):
  pass
 @staticmethod
 def IsAdaptiveComponentInstance(famInst):
  pass
 @staticmethod
 def IsAdaptiveFamilySymbol(famSymb):
  pass
 @staticmethod
 def IsInstanceFlipped(famInst):
  pass
 @staticmethod
 def MoveAdaptiveComponentInstance(famInst,trf,unHost):
  pass
 @staticmethod
 def SetInstanceFlipped(famInst,flip):
  pass
 __all__=['CreateAdaptiveComponentInstance','GetInstancePlacementPointElementRefIds','GetInstancePointElementRefIds','GetInstanceShapeHandlePointElementRefIds','HasAdaptiveFamilySymbol','IsAdaptiveComponentInstance','IsAdaptiveFamilySymbol','IsInstanceFlipped','MoveAdaptiveComponentInstance','SetInstanceFlipped',]
class AdaptivePointConstraintType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Axis_X=None
 Axis_Y=None
 Axis_Z=None
 None=None
 Plane_XY=None
 Plane_YZ=None
 Plane_ZX=None
 value__=None
class AdaptivePointOrientationType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 ToGlobalXYZ=None
 ToGlobalZthenHost=None
 ToHost=None
 ToHostAndLoopSystem=None
 ToInstance=None
 ToInstanceZthenHost=None
 value__=None
class AdaptivePointType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 PlacementPoint=None
 ReferencePoint=None
 ShapeHandlePoint=None
 value__=None
class AddInId(object,IDisposable):
 def Dispose(self):
  pass
 def GetAddInName(self):
  pass
 def GetAddInNameFromDocument(self,aDoc):
  pass
 def GetGUID(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,val):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: AddInId) -> bool
""" 
class AllowedValues(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 All=None
 NonNegative=None
 Positive=None
 value__=None
class AlphanumericRevisionSettings(object,IDisposable):
 def Dispose(self):
  pass
 def GetSequence(self):
  pass
 def IsEqual(self,other):
  pass
 def IsValid(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def SetSequence(self,sequence):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,*__args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: AlphanumericRevisionSettings) -> bool
""" 
 Prefix=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The prefix string that will be prepended to the number of each revision with Alphanumeric RevisionNumberingType.
Get: Prefix(self: AlphanumericRevisionSettings) -> str
Set: Prefix(self: AlphanumericRevisionSettings) = value
""" 
 Suffix=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The suffix string that will be appended to the number of each revision with Alphanumeric RevisionNumberingType.
Get: Suffix(self: AlphanumericRevisionSettings) -> str
Set: Suffix(self: AlphanumericRevisionSettings) = value
""" 
class AlternateUnits(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Below=None
 None=None
 Right=None
 value__=None
class AnalyzesAsType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 AA_Gravity=None
 AA_GravityLateral=None
 AA_Hanger=None
 AA_Lateral=None
 AA_Mat=None
 AA_Not_For_Analysis=None
 AA_SlabOneWay=None
 AA_SlabOnGrade=None
 AA_SlabTwoWay=None
 value__=None
class Element(object,IDisposable):
 def ArePhasesModifiable(self):
  pass
 def CanBeHidden(self,pView):
  pass
 def CanBeLocked(self):
  pass
 def CanHaveAnalyticalModel(self):
  pass
 @staticmethod
 def CanHaveTypeAssigned(document=None,elementIds=None):
  pass
 @staticmethod
 def ChangeTypeId(*__args):
  pass
 def DeleteEntity(self,schema):
  pass
 def Dispose(self):
  pass
 def GetAnalyticalModel(self):
  pass
 def GetAnalyticalModelId(self):
  pass
 def getBoundingBox(self,*args):
  pass
 @staticmethod
 def GetChangeTypeAny():
  pass
 @staticmethod
 def GetChangeTypeElementAddition():
  pass
 @staticmethod
 def GetChangeTypeElementDeletion():
  pass
 @staticmethod
 def GetChangeTypeGeometry():
  pass
 @staticmethod
 def GetChangeTypeParameter(*__args):
  pass
 def GetEntity(self,schema):
  pass
 def GetEntitySchemaGuids(self):
  pass
 def GetExternalFileReference(self):
  pass
 def GetExternalResourceReference(self,resourceType):
  pass
 def GetExternalResourceReferences(self):
  pass
 def GetGeneratingElementIds(self,geometryObject):
  pass
 def GetGeometryObjectFromReference(self,reference):
  pass
 def GetMaterialArea(self,materialId,usePaintMaterial):
  pass
 def GetMaterialIds(self,returnPaintMaterials):
  pass
 def GetMaterialVolume(self,materialId):
  pass
 def GetMonitoredLinkElementIds(self):
  pass
 def GetMonitoredLocalElementIds(self):
  pass
 def GetOrderedParameters(self):
  pass
 def GetParameterFormatOptions(self,parameterId):
  pass
 def GetParameters(self,name):
  pass
 def GetPhaseStatus(self,phaseId):
  pass
 def GetTypeId(self):
  pass
 @staticmethod
 def GetValidTypes(document=None,elementIds=None):
  pass
 def HasPhases(self):
  pass
 def IsExternalFileReference(self):
  pass
 def IsHidden(self,pView):
  pass
 def IsMonitoringLinkElement(self):
  pass
 def IsMonitoringLocalElement(self):
  pass
 def IsPhaseCreatedValid(self,createdPhaseId):
  pass
 def IsPhaseDemolishedValid(self,demolishedPhaseId):
  pass
 @staticmethod
 def IsValidType(*__args):
  pass
 def LookupParameter(self,name):
  pass
 def RefersToExternalResourceReference(self,resourceType):
  pass
 def RefersToExternalResourceReferences(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def SetEntity(self,entity):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 AssemblyInstanceId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The id of the assembly instance to which the element belongs.
Get: AssemblyInstanceId(self: Element) -> ElementId
""" 
 Category=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves a Category object that represents the category or sub category in which the
element resides.
Get: Category(self: Element) -> Category
""" 
 CreatedPhaseId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Id of a Phase at which the Element was created.
Get: CreatedPhaseId(self: Element) -> ElementId
Set: CreatedPhaseId(self: Element) = value
""" 
 DemolishedPhaseId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Id of a Phase at which the Element was demolished.
Get: DemolishedPhaseId(self: Element) -> ElementId
Set: DemolishedPhaseId(self: Element) = value
""" 
 DesignOption=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the design option to which the element belongs.
Get: DesignOption(self: Element) -> DesignOption
""" 
 Document=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the Document in which the Element resides.
Get: Document(self: Element) -> Document
""" 
 GroupId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The id of the group to which an element belongs.
Get: GroupId(self: Element) -> ElementId
""" 
 Id=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """A unique identifier for an Element in an Autodesk Revit project.
Get: Id(self: Element) -> ElementId
""" 
 IsTransient=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Indicates whether an element is transient or permanent.
Get: IsTransient(self: Element) -> bool
""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: Element) -> bool
""" 
 LevelId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The id of the level associated with the element.
Get: LevelId(self: Element) -> ElementId
""" 
 Location=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """This property is used to find the physical location of an element within a project.
Get: Location(self: Element) -> Location
""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """A human readable name for the Element.
Get: Name(self: Element) -> str
Set: Name(self: Element) = value
""" 
 OwnerViewId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The id of the view that owns the element.
Get: OwnerViewId(self: Element) -> ElementId
""" 
 Parameters=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves a set containing all of the parameters that are contained within the element.
Get: Parameters(self: Element) -> ParameterSet
""" 
 ParametersMap=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves a map containing all of the parameters that are contained within the element.
Get: ParametersMap(self: Element) -> ParameterMap
""" 
 Pinned=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if the element has been pinned to prevent changes.
Get: Pinned(self: Element) -> bool
Set: Pinned(self: Element) = value
""" 
 UniqueId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """A stable unique identifier for an element within the document.
Get: UniqueId(self: Element) -> str
""" 
 ViewSpecific=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if the element is owned by a view.
Get: ViewSpecific(self: Element) -> bool
""" 
 WorksetId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Get Id of the Workset which owns the element.
Get: WorksetId(self: Element) -> WorksetId
""" 
class Dimension(Element,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def IsTextPositionAdjustable(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def ResetTextPosition(self):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Above=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The text shown above the segment's value.
Get: Above(self: Dimension) -> str
Set: Above(self: Dimension) = value
""" 
 AreSegmentsEqual=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Indicates if all segments are forced to be equal.
Get: AreSegmentsEqual(self: Dimension) -> bool
Set: AreSegmentsEqual(self: Dimension) = value
""" 
 Below=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The text shown below the segment's value.
Get: Below(self: Dimension) -> str
Set: Below(self: Dimension) = value
""" 
 Curve=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """A curve that represents the dimension line.
Get: Curve(self: Dimension) -> Curve
""" 
 DimensionShape=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The shape of this dimension.
Get: DimensionShape(self: Dimension) -> DimensionShape
""" 
 DimensionType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The dimension style of this dimension.
Get: DimensionType(self: Dimension) -> DimensionType
Set: DimensionType(self: Dimension) = value
""" 
 FamilyLabel=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The family parameter label of the dimension.
Get: FamilyLabel(self: Dimension) -> FamilyParameter
Set: FamilyLabel(self: Dimension) = value
""" 
 IsLocked=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Indicates if this dimension is locked.
Get: IsLocked(self: Dimension) -> bool
Set: IsLocked(self: Dimension) = value
""" 
 LeaderEndPosition=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The position of the dimension's leader end point.
Get: LeaderEndPosition(self: Dimension) -> XYZ
Set: LeaderEndPosition(self: Dimension) = value
""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves or changes the name associated with the Dimension.
Get: Name(self: Dimension) -> str
Set: Name(self: Dimension) = value
""" 
 NumberOfSegments=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The number of segments for the dimension.
Get: NumberOfSegments(self: Dimension) -> int
""" 
 Origin=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The dimension origin.
Get: Origin(self: Dimension) -> XYZ
""" 
 Prefix=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The text shown before the segment's value.
Get: Prefix(self: Dimension) -> str
Set: Prefix(self: Dimension) = value
""" 
 References=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns an array of geometric references to which the dimension is attached.
Get: References(self: Dimension) -> ReferenceArray
""" 
 Segments=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The segments in the dimension.
Get: Segments(self: Dimension) -> DimensionSegmentArray
""" 
 Suffix=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The text shown after the segment's value.
Get: Suffix(self: Dimension) -> str
Set: Suffix(self: Dimension) = value
""" 
 TextPosition=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The position of the dimension text's drag point.
Get: TextPosition(self: Dimension) -> XYZ
Set: TextPosition(self: Dimension) = value
""" 
 Value=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The value of the dimension.
Get: Value(self: Dimension) -> Nullable[float]
""" 
 ValueOverride=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The text that replaces the segment's value.
Get: ValueOverride(self: Dimension) -> str
Set: ValueOverride(self: Dimension) = value
""" 
 ValueString=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The dimension value as a user visible string.
Get: ValueString(self: Dimension) -> str
""" 
 View=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Supplies the view that contains the dimension if the dimension is view specific.
Get: View(self: Dimension) -> View
""" 
class AngularDimension(Dimension,IDisposable):
 @staticmethod
 def Create(document,dbView,arc,references,dimensionStyle):
  pass
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def SetRadius(self,radius):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class Instance(Element,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetTotalTransform(self):
  pass
 def GetTransform(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class FamilyInstance(Instance,IDisposable):
 def AddCoping(self,cutter):
  pass
 def Dispose(self):
  pass
 def flipFacing(self):
  pass
 def FlipFromToRoom(self):
  pass
 def flipHand(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetCopingIds(self):
  pass
 def GetFamilyPointPlacementReferences(self):
  pass
 def GetOriginalGeometry(self,options):
  pass
 def GetSpatialElementCalculationPoint(self):
  pass
 def GetSpatialElementFromToCalculationPoints(self):
  pass
 def GetSubComponentIds(self):
  pass
 def GetSweptProfile(self):
  pass
 def HasModifiedGeometry(self):
  pass
 def HasSweptProfile(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def RemoveCoping(self,cutter):
  pass
 def rotate(self):
  pass
 def SetCopingIds(self,cutters):
  pass
 def setElementType(self,*args):
  pass
 def Split(self,param):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 CanFlipFacing=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Property to test whether the orientation of family instance facing can be flipped.
Get: CanFlipFacing(self: FamilyInstance) -> bool
""" 
 CanFlipHand=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Property to test whether the orientation of family instance hand can be flipped.
Get: CanFlipHand(self: FamilyInstance) -> bool
""" 
 CanFlipWorkPlane=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if the instance can flip its work plane.
Get: CanFlipWorkPlane(self: FamilyInstance) -> bool
""" 
 CanRotate=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Property to test whether the family instance can be rotated by 180 degrees.
Get: CanRotate(self: FamilyInstance) -> bool
""" 
 CanSplit=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies whether a particular family instance can be split at a point on it's defining curve (by Autodesk.Revit.DB.FamilyInstance.Split(System.Double)).
Get: CanSplit(self: FamilyInstance) -> bool
""" 
 ExtensionUtility=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Property to check whether the instance can be extended and return the interface for extension operation.
Get: ExtensionUtility(self: FamilyInstance) -> IExtension
""" 
 FacingFlipped=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Property to test whether the orientation of family instance facing is flipped.
Get: FacingFlipped(self: FamilyInstance) -> bool
""" 
 FacingOrientation=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Property to get the orientation of family instance facing.
Get: FacingOrientation(self: FamilyInstance) -> XYZ
""" 
 HandFlipped=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Property to test whether the orientation of family instance hand is flipped.
Get: HandFlipped(self: FamilyInstance) -> bool
""" 
 HandOrientation=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Property to get the orientation of family instance hand.
Get: HandOrientation(self: FamilyInstance) -> XYZ
""" 
 HasSpatialElementCalculationPoint=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if this instance has a single SpatialElementCalculationPoint used as the search point for Revit to identify if the instance is inside a room or space.
Get: HasSpatialElementCalculationPoint(self: FamilyInstance) -> bool
""" 
 HasSpatialElementFromToCalculationPoints=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if this instance has a pair of SpatialElementCalculationPoints used as the search points for Revit to identify if the instance lies between up to two rooms or spaces.
Get: HasSpatialElementFromToCalculationPoints(self: FamilyInstance) -> bool
""" 
 Host=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """If the instance is contained within another element, this property returns the containing
element. An instance that is face hosted will return the element containing the face.
Get: Host(self: FamilyInstance) -> Element
""" 
 HostFace=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Property to get the reference to the host face of family instance.
Get: HostFace(self: FamilyInstance) -> Reference
""" 
 HostParameter=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """If the instance is hosted by a wall, this property returns the parameter value of the insertion
point of the instance along the wall's location curve, as long as the family of the instance isn't work plane based.
Get: HostParameter(self: FamilyInstance) -> float
""" 
 Invisible=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Property to test whether the family instance is invisible.
Get: Invisible(self: FamilyInstance) -> bool
""" 
 IsSlantedColumn=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Indicates if the family instance is a slanted column.
Get: IsSlantedColumn(self: FamilyInstance) -> bool
""" 
 IsWorkPlaneFlipped=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if the instance's work plane is flipped.
Get: IsWorkPlaneFlipped(self: FamilyInstance) -> bool
Set: IsWorkPlaneFlipped(self: FamilyInstance) = value
""" 
 Location=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """This property is used to find the physical location of an instance within project.
Get: Location(self: FamilyInstance) -> Location
""" 
 MEPModel=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves the MEP model for the family instance.
Get: MEPModel(self: FamilyInstance) -> MEPModel
""" 
 Mirrored=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Property to test whether the family instance is mirrored. (only one axis is flipped)
Get: Mirrored(self: FamilyInstance) -> bool
""" 
 StructuralMaterialId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies the material that defines the instance's structural analysis properties.
Get: StructuralMaterialId(self: FamilyInstance) -> ElementId
Set: StructuralMaterialId(self: FamilyInstance) = value
""" 
 StructuralMaterialType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """This property returns the physical material from which the instance is made.
Get: StructuralMaterialType(self: FamilyInstance) -> StructuralMaterialType
""" 
 StructuralType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Provides the primary structural type of the instance, such as beam or column etc.
Get: StructuralType(self: FamilyInstance) -> StructuralType
""" 
 StructuralUsage=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Provides the primary structural usage of the instance, such as brace, girder etc.
Get: StructuralUsage(self: FamilyInstance) -> StructuralInstanceUsage
Set: StructuralUsage(self: FamilyInstance) = value
""" 
 SuperComponent=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Property to get the super component of current family instance.
Get: SuperComponent(self: FamilyInstance) -> Element
""" 
 Symbol=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns or changes the FamilySymbol object that represents the type of the instance.
Get: Symbol(self: FamilyInstance) -> FamilySymbol
Set: Symbol(self: FamilyInstance) = value
""" 
class AnnotationSymbol(FamilyInstance,IDisposable):
 def addLeader(self):
  pass
 def Dispose(self):
  pass
 def duplicate(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetLeaders(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def removeLeader(self):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 AnnotationSymbolType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The AnnotationSymbol style of this AnnotationSymbol.
Get: AnnotationSymbolType(self: AnnotationSymbol) -> AnnotationSymbolType
Set: AnnotationSymbolType(self: AnnotationSymbol) = value
""" 
class ElementType(Element,IDisposable):
 def Dispose(self):
  pass
 def Duplicate(self,name):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetPreviewImage(self,size):
  pass
 def GetSimilarTypes(self):
  pass
 def IsSimilarType(self,typeId):
  pass
 def IsValidDefaultFamilyType(self,familyCategoryId):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 CanBeCopied=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Determine if this ElementType can create a copy
Get: CanBeCopied(self: ElementType) -> bool
""" 
 CanBeDeleted=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Determine if this ElementType can be deleted
Get: CanBeDeleted(self: ElementType) -> bool
""" 
 CanBeRenamed=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Determine if this ElementType can be renamed
Get: CanBeRenamed(self: ElementType) -> bool
""" 
 FamilyName=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Gets the family name of this element type.
Get: FamilyName(self: ElementType) -> str
""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Set the name for the ElementType.
Set: Name(self: ElementType) = value
""" 
class InsertableObject(ElementType,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class FamilySymbol(InsertableObject,IDisposable):
 def Activate(self):
  pass
 def CanHaveStructuralSection(self):
  pass
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetFamilyPointLocations(self):
  pass
 def GetStructuralSection(self):
  pass
 def GetThermalProperties(self):
  pass
 def HasThermalProperties(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def SetStructuralSection(self,structuralSection):
  pass
 def SetThermalProperties(self,thermalProperties):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Family=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The Family object to which the symbol belongs.
Get: Family(self: FamilySymbol) -> Family
""" 
 IsActive=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies whether the symbol is active.
Get: IsActive(self: FamilySymbol) -> bool
""" 
 StructuralMaterialType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """This property returns the physical material from which the type is made.
Get: StructuralMaterialType(self: FamilySymbol) -> StructuralMaterialType
""" 
class AnnotationSymbolType(FamilySymbol,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class APIObject(object,IDisposable):
 def Dispose(self):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsReadOnly=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if the object is read-only or modifiable.
Get: IsReadOnly(self: APIObject) -> bool
""" 
class AppearanceAssetElement(Element,IDisposable):
 @staticmethod
 def Create(document,name,asset):
  pass
 def Dispose(self):
  pass
 @staticmethod
 def GetAppearanceAssetElementByName(doc,name):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetRenderingAsset(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def SetRenderingAsset(self,asset):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class GeometryObject(APIObject,IDisposable):
 def Dispose(self):
  pass
 def Equals(self,obj):
  pass
 def GetHashCode(self):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __eq__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 GraphicsStyleId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The ElementId of the GeometryObject's GraphicsStyle
Get: GraphicsStyleId(self: GeometryObject) -> ElementId
""" 
 IsElementGeometry=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Indicates whether this geometry is obtained directly from an Element.
Get: IsElementGeometry(self: GeometryObject) -> bool
""" 
 Visibility=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The visibility.
Get: Visibility(self: GeometryObject) -> Visibility
""" 
class Curve(GeometryObject,IDisposable):
 def Clone(self):
  pass
 def ComputeDerivatives(self,parameter,normalized):
  pass
 def ComputeNormalizedParameter(self,rawParameter):
  pass
 def ComputeRawParameter(self,normalizedParameter):
  pass
 def CreateOffset(self,offsetDist,referenceVector):
  pass
 def CreateReversed(self):
  pass
 def CreateTransformed(self,transform):
  pass
 def Dispose(self):
  pass
 def Distance(self,point):
  pass
 def Evaluate(self,parameter,normalized):
  pass
 def GetEndParameter(self,index):
  pass
 def GetEndPoint(self,index):
  pass
 def GetEndPointReference(self,index):
  pass
 def Intersect(self,curve,resultArray=None):
  pass
 def IsInside(self,parameter,end=None):
  pass
 def MakeBound(self,startParameter,endParameter):
  pass
 def MakeUnbound(self):
  pass
 def Project(self,point):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def SetGraphicsStyleId(self,id):
  pass
 def Tessellate(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 ApproximateLength=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The approximate length of the curve.
Get: ApproximateLength(self: Curve) -> float
""" 
 IsBound=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Describes whether the parameter of the curve is restricted to a particular interval.
Get: IsBound(self: Curve) -> bool
""" 
 IsCyclic=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The boolean value that indicates whether this curve is cyclic.
Get: IsCyclic(self: Curve) -> bool
""" 
 Length=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The exact length of the curve.
Get: Length(self: Curve) -> float
""" 
 Period=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The period of this curve.
Get: Period(self: Curve) -> float
""" 
 Reference=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns a stable reference to the curve.
Get: Reference(self: Curve) -> Reference
""" 
class Arc(Curve,IDisposable):
 @staticmethod
 def Create(*__args):
  pass
 def Dispose(self):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Center=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the center of the arc.
Get: Center(self: Arc) -> XYZ
""" 
 Normal=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the normal to the plane in which the arc is defined.
Get: Normal(self: Arc) -> XYZ
""" 
 Radius=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the radius of the arc.
Get: Radius(self: Arc) -> float
""" 
 XDirection=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the X direction.
Get: XDirection(self: Arc) -> XYZ
""" 
 YDirection=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the Y direction.
Get: YDirection(self: Arc) -> XYZ
""" 
class SpatialElement(Element,IDisposable):
 def Dispose(self):
  pass
 def GetBoundarySegments(self,options):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Area=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The area.
Get: Area(self: SpatialElement) -> float
""" 
 Level=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Gets the level of the room.
Get: Level(self: SpatialElement) -> Level
""" 
 Location=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The location of the element.
Get: Location(self: SpatialElement) -> Location
""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """A human readable name for the Element.
Set: Name(self: SpatialElement) = value
""" 
 Number=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The number.
Get: Number(self: SpatialElement) -> str
Set: Number(self: SpatialElement) = value
""" 
 Perimeter=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The perimeter.
Get: Perimeter(self: SpatialElement) -> float
""" 
class Area(SpatialElement,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 AreaScheme=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The area scheme.
Get: AreaScheme(self: Area) -> AreaScheme
""" 
 IsGrossInterior=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The boolean value that indicates whether the area is gross interior.
Get: IsGrossInterior(self: Area) -> bool
""" 
class AreaElemType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 BOMAArea=None
 GrossArea=None
 value__=None
class ElementFilter(object,IDisposable):
 def Dispose(self):
  pass
 def PassesFilter(self,*__args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 Inverted=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """True if the results of the filter are inverted; elements that would normally be accepted by this filter will be rejected,
   and elements that would normally be rejected will be accepted.
Get: Inverted(self: ElementFilter) -> bool
""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ElementFilter) -> bool
""" 
class ElementSlowFilter(ElementFilter,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class AreaFilter(ElementSlowFilter,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class AreaScheme(Element,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 IsGrossBuildingArea=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Indicates if the area scheme is a Gross Building Area scheme.
Get: IsGrossBuildingArea(self: AreaScheme) -> bool
""" 
class SpatialElementTag(Element,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 HasLeader=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if a leader is displayed for the tag or not.
Get: HasLeader(self: SpatialElementTag) -> bool
Set: HasLeader(self: SpatialElementTag) = value
""" 
 IsOrphaned=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if the tag is orphaned or not.
Get: IsOrphaned(self: SpatialElementTag) -> bool
""" 
 IsTaggingLink=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if the tag has reference to an object in a linked document or not.
Get: IsTaggingLink(self: SpatialElementTag) -> bool
""" 
 LeaderElbow=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The position of the leader's elbow (middle point).
Get: LeaderElbow(self: SpatialElementTag) -> XYZ
Set: LeaderElbow(self: SpatialElementTag) = value
""" 
 LeaderEnd=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The position of the leader's end.
Get: LeaderEnd(self: SpatialElementTag) -> XYZ
Set: LeaderEnd(self: SpatialElementTag) = value
""" 
 Location=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The location of the tag.
Get: Location(self: SpatialElementTag) -> Location
""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The name associated with the tag.
Set: Name(self: SpatialElementTag) = value
""" 
 TagHeadPosition=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The position of the tag's head.
Get: TagHeadPosition(self: SpatialElementTag) -> XYZ
Set: TagHeadPosition(self: SpatialElementTag) = value
""" 
 TagOrientation=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The orientation of the tag.
Get: TagOrientation(self: SpatialElementTag) -> SpatialElementTagOrientation
Set: TagOrientation(self: SpatialElementTag) = value
""" 
 View=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The view in which the tag was placed.
Get: View(self: SpatialElementTag) -> View
""" 
class AreaTag(SpatialElementTag,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Area=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The area that the tag is associated with.
Get: Area(self: AreaTag) -> Area
""" 
 AreaTagType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The tag type.
Get: AreaTagType(self: AreaTag) -> AreaTagType
Set: AreaTagType(self: AreaTag) = value
""" 
class AreaTagFilter(ElementSlowFilter,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class AreaTagType(FamilySymbol,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class AreaVolumeSettings(Element,IDisposable):
 def Dispose(self):
  pass
 @staticmethod
 def GetAreaVolumeSettings(aDoc):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetSpatialElementBoundaryLocation(self,spType):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def SetSpatialElementBoundaryLocation(self,spatialElementBoundaryLocation,spType):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 ComputeVolumes=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """True to enable volume computation.  False to disable it.
Get: ComputeVolumes(self: AreaVolumeSettings) -> bool
Set: ComputeVolumes(self: AreaVolumeSettings) = value
""" 
class ArrayAnchorMember(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Last=None
 Second=None
 value__=None
class KeyBasedTreeEntryTable(Element,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetKeyBasedTreeEntries(self):
  pass
 def LoadFrom(self,desiredResourceReference,loadResults):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Reload(self,loadResults):
  pass
 def ServerSupports(self,extRef):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class AssemblyCodeTable(KeyBasedTreeEntryTable,IDisposable):
 def Dispose(self):
  pass
 @staticmethod
 def GetAssemblyCodeTable(doc):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class AssemblyDetailViewOrientation(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 DetailSectionA=None
 DetailSectionB=None
 ElevationBack=None
 ElevationBottom=None
 ElevationFront=None
 ElevationLeft=None
 ElevationRight=None
 ElevationTop=None
 HorizontalDetail=None
 value__=None
class AssemblyDifference(object,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: AssemblyDifference) -> bool
""" 
class AssemblyDifferenceConfiguration(AssemblyDifference,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class AssemblyDifferenceMemberCount(AssemblyDifference,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Count1=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Number of members in the first assembly
Get: Count1(self: AssemblyDifferenceMemberCount) -> int
""" 
 Count2=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Number of members in the second assembly
Get: Count2(self: AssemblyDifferenceMemberCount) -> int
""" 
class AssemblyDifferenceMemberDifference(AssemblyDifference,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 MemberDifference=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Difference between the assembly members
Get: MemberDifference(self: AssemblyDifferenceMemberDifference) -> AssemblyMemberDifference
""" 
 MemberId1=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Id of the member in the first assembly
Get: MemberId1(self: AssemblyDifferenceMemberDifference) -> ElementId
""" 
 MemberId2=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Id of the member in the second assembly
Get: MemberId2(self: AssemblyDifferenceMemberDifference) -> ElementId
""" 
class AssemblyDifferenceNamingCategory(AssemblyDifference,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 NamingCategoryId1=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Naming category id of the first assembly
Get: NamingCategoryId1(self: AssemblyDifferenceNamingCategory) -> ElementId
""" 
 NamingCategoryId2=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Naming category id of the second assembly
Get: NamingCategoryId2(self: AssemblyDifferenceNamingCategory) -> ElementId
""" 
class AssemblyDifferenceNone(AssemblyDifference,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class AssemblyInstance(Element,IDisposable):
 def AddMemberIds(self,memberIds):
  pass
 def AllowsAssemblyViewCreation(self):
  pass
 @staticmethod
 def AreElementsValidForAssembly(document,assemblyMemberIds,assemblyId):
  pass
 @staticmethod
 def CanRemoveElementsFromAssembly(assemblyInstance,memberIds):
  pass
 @staticmethod
 def CompareAssemblyInstances(instance1,instance2):
  pass
 @staticmethod
 def Create(document,assemblyMemberIds,namingCategoryId):
  pass
 def Disassemble(self):
  pass
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetCenter(self):
  pass
 def GetMemberIds(self):
  pass
 def GetTransform(self):
  pass
 @staticmethod
 def IsValidNamingCategory(document,namingCategoryId,assemblyMemberIds):
  pass
 @staticmethod
 def PlaceInstance(document,assemblyTypeId,location):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def RemoveMemberIds(self,memberIds):
  pass
 def setElementType(self,*args):
  pass
 def SetMemberIds(self,memberIds):
  pass
 def SetTransform(self,trf):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 AssemblyTypeName=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The name for the assembly type.
   All matching assembly instances share this name.
   Unique assembly instances are named automatically based on their naming category.
Get: AssemblyTypeName(self: AssemblyInstance) -> str
Set: AssemblyTypeName(self: AssemblyInstance) = value
""" 
 Location=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """This property is used to find the physical location of the assembly instance within project.
Get: Location(self: AssemblyInstance) -> Location
""" 
 NamingCategoryId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Id of the category that drives the default naming scheme for the assembly instance.
Get: NamingCategoryId(self: AssemblyInstance) -> ElementId
Set: NamingCategoryId(self: AssemblyInstance) = value
""" 
class AssemblyMemberDifference(object,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: AssemblyMemberDifference) -> bool
""" 
class AssemblyMemberDifferentCategory(AssemblyMemberDifference,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 CategoryId1=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Category id of the first assembly member
Get: CategoryId1(self: AssemblyMemberDifferentCategory) -> ElementId
""" 
 CategoryId2=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Category id of the second assembly member
Get: CategoryId2(self: AssemblyMemberDifferentCategory) -> ElementId
""" 
class AssemblyMemberDifferentGeometry(AssemblyMemberDifference,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class AssemblyMemberDifferentParameters(AssemblyMemberDifference,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class AssemblyMemberDifferentType(AssemblyMemberDifference,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 TypeId1=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Type id of the first assembly member
Get: TypeId1(self: AssemblyMemberDifferentType) -> ElementId
""" 
 TypeId2=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Type id of the second assembly member
Get: TypeId2(self: AssemblyMemberDifferentType) -> ElementId
""" 
class AssemblyType(ElementType,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class AssemblyViewUtils(object):
 @staticmethod
 def AcquireAssemblyViews(document,sourceAssemblyInstanceId,targetAssemblyInstanceId):
  pass
 @staticmethod
 def Create3DOrthographic(document,assemblyInstanceId,viewTemplateId=None,isAssigned=None):
  pass
 @staticmethod
 def CreateDetailSection(document,assemblyInstanceId,direction,viewTemplateId=None,isAssigned=None):
  pass
 @staticmethod
 def CreateMaterialTakeoff(document,assemblyInstanceId,viewTemplateId=None,isAssigned=None):
  pass
 @staticmethod
 def CreatePartList(document,assemblyInstanceId,viewTemplateId=None,isAssigned=None):
  pass
 @staticmethod
 def CreateSheet(document,assemblyInstanceId,titleBlockId):
  pass
 @staticmethod
 def CreateSingleCategorySchedule(document,assemblyInstanceId,scheduleCategoryId,viewTemplateId=None,isAssigned=None):
  pass
 __all__=['AcquireAssemblyViews','Create3DOrthographic','CreateDetailSection','CreateMaterialTakeoff','CreatePartList','CreateSheet','CreateSingleCategorySchedule',]
class AttachmentType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Attachment=None
 Overlay=None
 value__=None
class AutomaticConnectionBehaviorType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Accepting=None
 Active=None
 Exclude=None
 Forced=None
 Full=None
 value__=None
class BackgroundImageFit(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Horizontal=None
 None=None
 Stretch=None
 value__=None
 Vertical=None
class BackgroundSettings(object,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: BackgroundSettings) -> bool
""" 
class BackgroundStyle(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Color=None
 Image=None
 SkyCloudy=None
 SkyFewClouds=None
 SkyNoClouds=None
 SkyVeryCloudy=None
 SkyVeryFewClouds=None
 Transparent=None
 value__=None
class BaseArray(Element,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetCopiedMemberIds(self):
  pass
 def GetOriginalMemberIds(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Label=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The family parameter label of the BaseArray.
Get: Label(self: BaseArray) -> FamilyParameter
Set: Label(self: BaseArray) = value
""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Get and Set the Name property
Set: Name(self: BaseArray) = value
""" 
 NumMembers=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves or changes the number of the arrayed members.
Get: NumMembers(self: BaseArray) -> int
Set: NumMembers(self: BaseArray) = value
""" 
class BaseImportOptions(object,IDisposable):
 def Dispose(self):
  pass
 def GetLayerSelection(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def SetLayerSelection(self,layerSelection):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 AutoCorrectAlmostVHLines=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Correct almost-vertical lines and almost-horizontal lines for import model
   if option is set to true, the almost-vertical lines would be vertical lines and almost-horizontal lines would be horizontal lines.
Get: AutoCorrectAlmostVHLines(self: BaseImportOptions) -> bool
Set: AutoCorrectAlmostVHLines(self: BaseImportOptions) = value
""" 
 ColorMode=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Color mode for the import.
   Three modes are supported. Black and White, Preserve Colors, and Invert Colors.
Get: ColorMode(self: BaseImportOptions) -> ImportColorMode
Set: ColorMode(self: BaseImportOptions) = value
""" 
 CustomScale=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Scaling the import.
   If this is defined and a valid value (> 0.0), it takes preference over units.
Get: CustomScale(self: BaseImportOptions) -> float
Set: CustomScale(self: BaseImportOptions) = value
""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: BaseImportOptions) -> bool
""" 
 OrientToView=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Place the import at the same orientation as the view that was passed into the import method.
   This option can only be used when not importing into a single view.(i.e. ThisViewOnly is set to false)
Get: OrientToView(self: BaseImportOptions) -> bool
Set: OrientToView(self: BaseImportOptions) = value
""" 
 Placement=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Where to place the import.
   Set this option to place the view at the origin or the center, or a shared coordinates.
Get: Placement(self: BaseImportOptions) -> ImportPlacement
Set: Placement(self: BaseImportOptions) = value
""" 
 ReferencePoint=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The 3D point in the document where the imported instance will be inserted.
   If not explicitly set, the instance will be inserted at the document origin.
Get: ReferencePoint(self: BaseImportOptions) -> XYZ
Set: ReferencePoint(self: BaseImportOptions) = value
""" 
 ThisViewOnly=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Imports drawings into the view that was passed into the import method.
   This option is not available in 3D views.
Get: ThisViewOnly(self: BaseImportOptions) -> bool
Set: ThisViewOnly(self: BaseImportOptions) = value
""" 
 Unit=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The unit of measure for imported geometry.
Get: Unit(self: BaseImportOptions) -> ImportUnit
Set: Unit(self: BaseImportOptions) = value
""" 
 VisibleLayersOnly=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Only import the visible layers.
Get: VisibleLayersOnly(self: BaseImportOptions) -> bool
Set: VisibleLayersOnly(self: BaseImportOptions) = value
""" 
class BaseLoadOn(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 kNoOfBaseLoadOnMethods=None
 kUseActualLoad=None
 kUseCalculatedLoad=None
 kUseDefaultLoad=None
 kUseEnteredLoad=None
 value__=None
class BasePoint(Element,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 IsShared=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Indicates whether the base point is shared.
Get: IsShared(self: BasePoint) -> bool
""" 
class BasicFileInfo(object,IDisposable):
 def Dispose(self):
  pass
 @staticmethod
 def Extract(file):
  pass
 def GetDocumentVersion(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 AllLocalChangesSavedToCentral=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Are all local changes saved to the central file?
Get: AllLocalChangesSavedToCentral(self: BasicFileInfo) -> bool
""" 
 CentralPath=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the central model path.
Get: CentralPath(self: BasicFileInfo) -> str
""" 
 IsCentral=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Checks if the file is workshared and Central.
Get: IsCentral(self: BasicFileInfo) -> bool
""" 
 IsCreatedLocal=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Checks if the file is created local.
Get: IsCreatedLocal(self: BasicFileInfo) -> bool
""" 
 IsInProgress=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Checks if the file is workshared and is in process of becoming Central.
Get: IsInProgress(self: BasicFileInfo) -> bool
""" 
 IsLocal=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Checks if the file is workshared and Local.
Get: IsLocal(self: BasicFileInfo) -> bool
""" 
 IsSavedInCurrentVersion=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Checks if the file is saved in the current version.
Get: IsSavedInCurrentVersion(self: BasicFileInfo) -> bool
""" 
 IsSavedInLaterVersion=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Checks if the file is saved in a later version of Revit than the running Revit.
Get: IsSavedInLaterVersion(self: BasicFileInfo) -> bool
""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: BasicFileInfo) -> bool
""" 
 IsWorkshared=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Checks if the file is workshared.
Get: IsWorkshared(self: BasicFileInfo) -> bool
""" 
 LanguageWhenSaved=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Return the language active for the last save
Get: LanguageWhenSaved(self: BasicFileInfo) -> LanguageType
""" 
 LatestCentralEpisodeGUID=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """This is the central model's episode GUID corresponding to the last reload latest
   done for this model.
Get: LatestCentralEpisodeGUID(self: BasicFileInfo) -> Guid
""" 
 LatestCentralVersion=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """This is the central model's version number corresponding to the last reload latest
   done for this model.
Get: LatestCentralVersion(self: BasicFileInfo) -> int
""" 
 SavedInVersion=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the version in which file is saved.
Get: SavedInVersion(self: BasicFileInfo) -> str
""" 
 Username=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the username.
Get: Username(self: BasicFileInfo) -> str
""" 
class BeamSystem(Element,IDisposable):
 @staticmethod
 def BeamBelongsTo(beam):
  pass
 @staticmethod
 def Create(document,profile,*__args):
  pass
 def Dispose(self):
  pass
 @staticmethod
 def DropBeamSystem(beamSystem):
  pass
 def GetBeamIds(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 BeamSystemType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves or changes the type of the BeamSystem.
Get: BeamSystemType(self: BeamSystem) -> BeamSystemType
Set: BeamSystemType(self: BeamSystem) = value
""" 
 BeamType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves or changes the Beam Type of the BeamSystem.
Get: BeamType(self: BeamSystem) -> FamilySymbol
Set: BeamType(self: BeamSystem) = value
""" 
 Direction=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The Direction of the BeamSystem.
Get: Direction(self: BeamSystem) -> XYZ
""" 
 Elevation=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves or changes the Elevation of the BeamSystem.
Get: Elevation(self: BeamSystem) -> float
Set: Elevation(self: BeamSystem) = value
""" 
 LayoutRule=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves or changes the LayoutRule of the BeamSystem.
Get: LayoutRule(self: BeamSystem) -> LayoutRule
Set: LayoutRule(self: BeamSystem) = value
""" 
 Level=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Get or change the level of the BeamSystem.
When the level is changed, the elevation is changed to make the 
the BeamSystem remain the location.
Get: Level(self: BeamSystem) -> Level
Set: Level(self: BeamSystem) = value
""" 
 Profile=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieve or set the profile of the BeamSystem.
Get: Profile(self: BeamSystem) -> CurveArray
Set: Profile(self: BeamSystem) = value
""" 
class BeamSystemJustifyType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Beginning=None
 Center=None
 DirectionLine=None
 End=None
 value__=None
class BeamSystemType(ElementType,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class BehaviorType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 BaseObject=None
 Bend=None
 Branch=None
 BreakInto=None
 Coupling=None
 ElectricalBaseObject=None
 EndCap=None
 Flange=None
 Flat_Tap=None
 Flex=None
 Hanger=None
 Inline=None
 Intersection=None
 Invalid=None
 MechanicalCoupling=None
 Normal=None
 OrientToCenterLine=None
 OrientToFace=None
 OrientToObject=None
 Oval_CentreLine_Tap=None
 Round_CentreLine_Tap=None
 Straight=None
 SystemMember=None
 value__=None
 Valve=None
 VerticalBend=None
class Binding(APIObject,IDisposable):
 def Dispose(self):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class DefinitionBindingMap(APIObject,IDisposable,IEnumerable):
 def Clear(self):
  pass
 def Contains(self,key):
  pass
 def Dispose(self):
  pass
 def Erase(self,key):
  pass
 def ForwardIterator(self):
  pass
 def GetEnumerator(self):
  pass
 def Insert(self,key,item):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def ReverseIterator(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __getitem__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 def __setitem__(self,*args):
  pass
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Test to see if the map is empty.
Get: IsEmpty(self: DefinitionBindingMap) -> bool
""" 
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the number of bindings that are in the map.
Get: Size(self: DefinitionBindingMap) -> int
""" 
class BindingMap(DefinitionBindingMap,IDisposable,IEnumerable):
 def Clear(self):
  pass
 def Contains(self,key):
  pass
 def Dispose(self):
  pass
 def Erase(self,key):
  pass
 def Insert(self,key,item,parameterGroup=None):
  pass
 def ReInsert(self,key,item,parameterGroup=None):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Remove(self,key):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __getitem__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 def __setitem__(self,*args):
  pass
class CombinableElement(Element,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Combinations=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The geometry combinations that this element belongs to.
Get: Combinations(self: CombinableElement) -> GeomCombinationSet
""" 
class GenericForm(CombinableElement,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetVisibility(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def SetVisibility(self,visibility):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 IsSolid=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if the GenericForm is a solid or a void element.
Get: IsSolid(self: GenericForm) -> bool
""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Get and Set the Name property
Set: Name(self: GenericForm) = value
""" 
 Subcategory=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The subcategory.
Get: Subcategory(self: GenericForm) -> Category
Set: Subcategory(self: GenericForm) = value
""" 
 Visible=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The visibility of the GenericForm.
Get: Visible(self: GenericForm) -> bool
""" 
class Blend(GenericForm,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetVertexConnectionMap(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def SetVertexConnectionMap(self,vertexMap):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 BottomOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The offset of the bottom end of the blend relative to the sketch plane.
Get: BottomOffset(self: Blend) -> float
Set: BottomOffset(self: Blend) = value
""" 
 BottomProfile=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The curves which make up the bottom profile of the sketch.
Get: BottomProfile(self: Blend) -> CurveArrArray
""" 
 BottomSketch=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the Bottom Sketch of the Blend.
Get: BottomSketch(self: Blend) -> Sketch
""" 
 TopOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The offset of the top end of the blend relative to the sketch plane.
Get: TopOffset(self: Blend) -> float
Set: TopOffset(self: Blend) = value
""" 
 TopProfile=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The curves which make up the top profile of the sketch.
Get: TopProfile(self: Blend) -> CurveArrArray
""" 
 TopSketch=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the Top Sketch of the Blend.
Get: TopSketch(self: Blend) -> Sketch
""" 
class BooleanOperationsType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Difference=None
 Intersect=None
 Union=None
 value__=None
class BooleanOperationsUtils(object,IDisposable):
 @staticmethod
 def CutWithHalfSpace(solid,plane):
  pass
 @staticmethod
 def CutWithHalfSpaceModifyingOriginalSolid(solid,plane):
  pass
 def Dispose(self):
  pass
 @staticmethod
 def ExecuteBooleanOperation(solid0,solid1,booleanType):
  pass
 @staticmethod
 def ExecuteBooleanOperationModifyingOriginalSolid(solid0,solid1,booleanType):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: BooleanOperationsUtils) -> bool
""" 
class BorderTile(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Empty=None
 Overhanging=None
 Partial=None
 value__=None
class BoundarySegment(object,IDisposable):
 def Dispose(self):
  pass
 def GetCurve(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 ElementId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieve the id of the element that produces this boundary segment.
   If the segment is created from an element in a link, this is the id of the RevitLinkInstance.
Get: ElementId(self: BoundarySegment) -> ElementId
""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: BoundarySegment) -> bool
""" 
 LinkElementId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieve the element id of the element in a link instance that forms this boundary.
Get: LinkElementId(self: BoundarySegment) -> ElementId
""" 
class ElementQuickFilter(ElementFilter,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class BoundingBoxContainsPointFilter(ElementQuickFilter,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,point,*__args):
  pass
 Point=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The XYZ point to use when matching element bounding boxes.
Get: Point(self: BoundingBoxContainsPointFilter) -> XYZ
Set: Point(self: BoundingBoxContainsPointFilter) = value
""" 
 Tolerance=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Allows control over the match criteria by using a tolerance in the geometry comparison. It is suggested to use this in cases where trivial differences should be considered when matching elements.
Get: Tolerance(self: BoundingBoxContainsPointFilter) -> float
Set: Tolerance(self: BoundingBoxContainsPointFilter) = value
""" 
class BoundingBoxIntersectsFilter(ElementQuickFilter,IDisposable):
 def Dispose(self):
  pass
 def GetBoundingBox(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,outline,*__args):
  pass
 Tolerance=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Allows control over the match criteria by using a tolerance in the geometry comparison. It is suggested to use this in cases where trivial differences should be considered when matching elements.
Get: Tolerance(self: BoundingBoxIntersectsFilter) -> float
Set: Tolerance(self: BoundingBoxIntersectsFilter) = value
""" 
class BoundingBoxIsInsideFilter(ElementQuickFilter,IDisposable):
 def Dispose(self):
  pass
 def GetBoundingBox(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,outline,*__args):
  pass
 Tolerance=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Allows control over the match criteria by using a tolerance in the geometry comparison. It is suggested to use this in cases where trivial differences should be considered when matching elements.
Get: Tolerance(self: BoundingBoxIsInsideFilter) -> float
Set: Tolerance(self: BoundingBoxIsInsideFilter) = value
""" 
class BoundingBoxUV(object,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,min_u=None,min_v=None,max_u=None,max_v=None):
  pass
 def __repr__(self,*args):
  pass
 Max=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Maximum coordinates (upper-right corner of the box).
Get: Max(self: BoundingBoxUV) -> UV
Set: Max(self: BoundingBoxUV) = value
""" 
 Min=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Minimum coordinates (lower-left corner of the box).
Get: Min(self: BoundingBoxUV) -> UV
Set: Min(self: BoundingBoxUV) = value
""" 
class BoundingBoxXYZ(APIObject,IDisposable):
 def Dispose(self):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Enabled=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Defines whether the entire bounding box is enabled.
Get: Enabled(self: BoundingBoxXYZ) -> bool
Set: Enabled(self: BoundingBoxXYZ) = value
""" 
 Max=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Maximum coordinates (upper-right-front corner of the box).
Get: Max(self: BoundingBoxXYZ) -> XYZ
Set: Max(self: BoundingBoxXYZ) = value
""" 
 Min=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Minimum coordinates (lower-left-rear corner of the box).
Get: Min(self: BoundingBoxXYZ) -> XYZ
Set: Min(self: BoundingBoxXYZ) = value
""" 
 Transform=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The transform from the coordinate space of the box to the model coordinate space.
Get: Transform(self: BoundingBoxXYZ) -> Transform
Set: Transform(self: BoundingBoxXYZ) = value
""" 
class BoxPlacement(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 BottomLeft=None
 BottomRight=None
 Center=None
 TopLeft=None
 TopRight=None
 value__=None
class ShapeBuilder(object,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ShapeBuilder) -> bool
""" 
class BRepBuilder(ShapeBuilder,IDisposable):
 def AddCoEdge(self,loopId,edgeId,bCoEdgeIsReversed):
  pass
 def AddEdge(self,edgeGeom):
  pass
 def AddFace(self,surfaceGeom,bFaceIsReversed):
  pass
 def AddLoop(self,faceId):
  pass
 def CanAddGeometry(self):
  pass
 def Dispose(self):
  pass
 def Finish(self):
  pass
 def FinishFace(self,faceId):
  pass
 def FinishLoop(self,loopId):
  pass
 def GetResult(self):
  pass
 @staticmethod
 def IsPermittedSurfaceType(surface):
  pass
 def IsResultAvailable(self):
  pass
 def IsValidEdgeId(self,edgeId):
  pass
 def IsValidFaceId(self,faceId):
  pass
 def IsValidLoopId(self,loopId):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def SetFaceMaterialId(self,faceId,materialId):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,geomType):
  pass
class BRepBuilderEdgeGeometry(object,IDisposable):
 @staticmethod
 def Create(*__args):
  pass
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: BRepBuilderEdgeGeometry) -> bool
""" 
class BRepBuilderGeometryId(object,IDisposable):
 def Dispose(self):
  pass
 @staticmethod
 def InvalidGeometryId():
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,other):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: BRepBuilderGeometryId) -> bool
""" 
class BRepBuilderOutcome(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Failure=None
 Success=None
 value__=None
class BRepBuilderState(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 AcceptingData=None
 Completed=None
 InvalidState=None
 value__=None
class BRepBuilderSurfaceGeometry(object,IDisposable):
 @staticmethod
 def Create(surface,surfaceEnvelope):
  pass
 @staticmethod
 def CreateNURBSSurface(degreeU,degreeV,knotsU,knotsV,controlPoints,*__args):
  pass
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: BRepBuilderSurfaceGeometry) -> bool
""" 
class BRepType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 OpenShell=None
 Solid=None
 value__=None
 Void=None
class BrowserOrganization(ElementType,IDisposable):
 def AreFiltersSatisfied(self,elementId):
  pass
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 @staticmethod
 def GetCurrentBrowserOrganizationForSheets(document):
  pass
 @staticmethod
 def GetCurrentBrowserOrganizationForViews(document):
  pass
 def GetFolderItems(self,elementId):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 SortingOrder=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The sorting order if sorting of items is applicable in the browser.
Get: SortingOrder(self: BrowserOrganization) -> SortingOrder
""" 
 SortingParameterId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The Id of the parameter used to determine the sorting order of items in the browser.
Get: SortingParameterId(self: BrowserOrganization) -> ElementId
""" 
class BrowserOrganizationType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Families=None
 Sheets=None
 value__=None
 Views=None
class HostObjAttributes(ElementType,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetCompoundStructure(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def SetCompoundStructure(self,compoundStructure):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class BuildingPadType(HostObjAttributes,IDisposable):
 @staticmethod
 def CreateDefault(document):
  pass
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 ThermalProperties=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The calculated and settable thermal properties of the BuildingPadType
Get: ThermalProperties(self: BuildingPadType) -> ThermalProperties
""" 
class BuildingSiteExportOptions(object):
 AreaPerPerson=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Custom value for Area Per Person value.
Get: AreaPerPerson(self: BuildingSiteExportOptions) -> float
Set: AreaPerPerson(self: BuildingSiteExportOptions) = value
""" 
 PropertyLine=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Optional property Line to export; it may be ll.
Get: PropertyLine(self: BuildingSiteExportOptions) -> PropertyLine
Set: PropertyLine(self: BuildingSiteExportOptions) = value
""" 
 PropertyLineOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Property Line Offset. Default is 0.0.
Get: PropertyLineOffset(self: BuildingSiteExportOptions) -> float
Set: PropertyLineOffset(self: BuildingSiteExportOptions) = value
""" 
 TotalGrossArea=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Custom value for the total area.
Get: TotalGrossArea(self: BuildingSiteExportOptions) -> float
Set: TotalGrossArea(self: BuildingSiteExportOptions) = value
""" 
 TotalOccupancy=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Custom value for the total occupancy.
Get: TotalOccupancy(self: BuildingSiteExportOptions) -> int
Set: TotalOccupancy(self: BuildingSiteExportOptions) = value
""" 
class BuildingType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 kAutomotiveFacility=None
 kConventionCenter=None
 kCourthouse=None
 kDiningBarLoungeOrLeisure=None
 kDiningCafeteriaFastFood=None
 kDiningFamily=None
 kDormitory=None
 kExerciseCenter=None
 kFireStation=None
 kGymnasium=None
 kHospitalOrHealthcare=None
 kHotel=None
 kLibrary=None
 kManufacturing=None
 kMotel=None
 kMotionPictureTheatre=None
 kMultiFamily=None
 kMuseum=None
 kNoOfBuildingTypes=None
 kOffice=None
 kParkingGarage=None
 kPenitentiary=None
 kPerformingArtsTheater=None
 kPoliceStation=None
 kPostOffice=None
 kReligiousBuilding=None
 kRetail=None
 kSchoolOrUniversity=None
 kSportsArena=None
 kTownHall=None
 kTransportation=None
 kWarehouse=None
 kWorkshop=None
 value__=None
class BuiltInCategory(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 INVALID=None
 OST_AdaptivePoints=None
 OST_AdaptivePoints_HiddenLines=None
 OST_AdaptivePoints_Lines=None
 OST_AdaptivePoints_Planes=None
 OST_AdaptivePoints_Points=None
 OST_AlwaysExcludedInAllViews=None
 OST_Analemma=None
 OST_AnalysisDisplayStyle=None
 OST_AnalysisResults=None
 OST_AnalyticalNodes=None
 OST_AnalyticalNodes_Lines=None
 OST_AnalyticalNodes_Planes=None
 OST_AnalyticalNodes_Points=None
 OST_AnalyticalRigidLinks=None
 OST_AnalyticSpaces=None
 OST_AnalyticSurfaces=None
 OST_AnnotationCrop=None
 OST_AnnotationCropSpecial=None
 OST_AppearanceAsset=None
 OST_ArcWallRectOpening=None
 OST_AreaColorFill=None
 OST_AreaInteriorFill=None
 OST_AreaInteriorFillVisibility=None
 OST_AreaLoads=None
 OST_AreaLoadTags=None
 OST_AreaPolylines=None
 OST_AreaReference=None
 OST_AreaReferenceVisibility=None
 OST_AreaRein=None
 OST_AreaReinBoundary=None
 OST_AreaReinSketchOverride=None
 OST_AreaReinSpanSymbol=None
 OST_AreaReinTags=None
 OST_AreaReinXVisibility=None
 OST_AreaReport_Arc_Minus=None
 OST_AreaReport_Arc_Plus=None
 OST_AreaReport_Boundary=None
 OST_AreaReport_Triangle=None
 OST_Areas=None
 OST_AreaSchemeLines=None
 OST_AreaSchemes=None
 OST_AreaTags=None
 OST_Assemblies=None
 OST_AssemblyOrigin=None
 OST_AssemblyOrigin_Lines=None
 OST_AssemblyOrigin_Planes=None
 OST_AssemblyOrigin_Points=None
 OST_AssemblyTags=None
 OST_Automatic=None
 OST_AxisOfRotation=None
 OST_AxisX=None
 OST_AxisY=None
 OST_AxisZ=None
 OST_BasePointAxisX=None
 OST_BasePointAxisY=None
 OST_BasePointAxisZ=None
 OST_BeamAnalytical=None
 OST_BeamAnalyticalTags=None
 OST_BeamEndSegment=None
 OST_BeamLocalCoordSys=None
 OST_BeamStartSegment=None
 OST_BeamSystemTags=None
 OST_Blocks=None
 OST_BoundaryConditions=None
 OST_BraceAnalytical=None
 OST_BraceAnalyticalTags=None
 OST_BraceEndSegment=None
 OST_BraceLocalCoordSys=None
 OST_BraceStartSegment=None
 OST_BranchPanelScheduleTemplates=None
 OST_BrokenSectionLine=None
 OST_BuildingPad=None
 OST_CableTray=None
 OST_CableTrayCenterLine=None
 OST_CableTrayDrop=None
 OST_CableTrayFitting=None
 OST_CableTrayFittingCenterLine=None
 OST_CableTrayFittingTags=None
 OST_CableTrayRiseDrop=None
 OST_CableTrayRun=None
 OST_CableTrayTags=None
 OST_Cage=None
 OST_CalloutBoundary=None
 OST_CalloutHeads=None
 OST_CalloutLeaderLine=None
 OST_Callouts=None
 OST_Cameras=None
 OST_Camera_Lines=None
 OST_Casework=None
 OST_CaseworkHiddenLines=None
 OST_CaseworkTags=None
 OST_Catalogs=None
 OST_CeilingOpening=None
 OST_Ceilings=None
 OST_CeilingsCut=None
 OST_CeilingsCutPattern=None
 OST_CeilingsDefault=None
 OST_CeilingsFinish1=None
 OST_CeilingsFinish2=None
 OST_CeilingsHiddenLines=None
 OST_CeilingsInsulation=None
 OST_CeilingsMembrane=None
 OST_CeilingsProjection=None
 OST_CeilingsStructure=None
 OST_CeilingsSubstrate=None
 OST_CeilingsSurfacePattern=None
 OST_CeilingTags=None
 OST_CenterLines=None
 OST_CLines=None
 OST_CloudLines=None
 OST_ColorFillLegends=None
 OST_ColorFillSchema=None
 OST_ColumnAnalytical=None
 OST_ColumnAnalyticalGeometry=None
 OST_ColumnAnalyticalRigidLinks=None
 OST_ColumnAnalyticalTags=None
 OST_ColumnEndSegment=None
 OST_ColumnLocalCoordSys=None
 OST_ColumnOpening=None
 OST_Columns=None
 OST_ColumnsHiddenLines=None
 OST_ColumnStartSegment=None
 OST_CommunicationDevices=None
 OST_CommunicationDeviceTags=None
 OST_CompassInner=None
 OST_CompassOuter=None
 OST_CompassPrimaryMonth=None
 OST_CompassSecondaryMonth=None
 OST_CompassSection=None
 OST_CompassSectionFilled=None
 OST_ComponentRepeater=None
 OST_ComponentRepeaterSlot=None
 OST_Conduit=None
 OST_ConduitCenterLine=None
 OST_ConduitDrop=None
 OST_ConduitFitting=None
 OST_ConduitFittingCenterLine=None
 OST_ConduitFittingTags=None
 OST_ConduitRiseDrop=None
 OST_ConduitRun=None
 OST_ConduitStandards=None
 OST_ConduitTags=None
 OST_ConnectorElem=None
 OST_ConnectorElemXAxis=None
 OST_ConnectorElemYAxis=None
 OST_ConnectorElemZAxis=None
 OST_Constraints=None
 OST_ContourLabels=None
 OST_ControlAxisX=None
 OST_ControlAxisY=None
 OST_ControlAxisZ=None
 OST_ControlLocal=None
 OST_CoordinateSystem=None
 OST_Cornices=None
 OST_Coupler=None
 OST_CouplerHiddenLines=None
 OST_CouplerTags=None
 OST_CoverType=None
 OST_CropBoundary=None
 OST_CropBoundarySpecial=None
 OST_CurtainGrids=None
 OST_CurtainGridsCurtaSystem=None
 OST_CurtainGridsRoof=None
 OST_CurtainGridsSystem=None
 OST_CurtainGridsWall=None
 OST_CurtainWallMullions=None
 OST_CurtainWallMullionsCut=None
 OST_CurtainWallMullionsHiddenLines=None
 OST_CurtainWallPanels=None
 OST_CurtainWallPanelsHiddenLines=None
 OST_CurtainWallPanelTags=None
 OST_Curtain_Systems=None
 OST_CurtaSystem=None
 OST_CurtaSystemFaceManager=None
 OST_CurtaSystemHiddenLines=None
 OST_CurtaSystemTags=None
 OST_Curves=None
 OST_CurvesMediumLines=None
 OST_CurvesThinLines=None
 OST_CurvesWideLines=None
 OST_CutOutlines=None
 OST_DataDevices=None
 OST_DataDeviceTags=None
 OST_DataPanelScheduleTemplates=None
 OST_DecalElement=None
 OST_DecalType=None
 OST_DemolishedLines=None
 OST_DesignOptions=None
 OST_DesignOptionSets=None
 OST_DetailComponents=None
 OST_DetailComponentsHiddenLines=None
 OST_DetailComponentTags=None
 OST_Dimensions=None
 OST_DimLockControlLeader=None
 OST_DirectionEdgeLines=None
 OST_DisplacementElements=None
 OST_DisplacementPath=None
 OST_DividedPath=None
 OST_DividedSurface=None
 OST_DividedSurfaceBelt=None
 OST_DividedSurface_DiscardedDivisionLines=None
 OST_DividedSurface_Gridlines=None
 OST_DividedSurface_Nodes=None
 OST_DividedSurface_PatternFill=None
 OST_DividedSurface_PatternLines=None
 OST_DividedSurface_PreDividedSurface=None
 OST_DividedSurface_TransparentFace=None
 OST_DivisionProfile=None
 OST_DivisionRules=None
 OST_Divisions=None
 OST_Doors=None
 OST_DoorsFrameMullionCut=None
 OST_DoorsFrameMullionProjection=None
 OST_DoorsGlassCut=None
 OST_DoorsGlassProjection=None
 OST_DoorsHiddenLines=None
 OST_DoorsOpeningCut=None
 OST_DoorsOpeningProjection=None
 OST_DoorsPanelCut=None
 OST_DoorsPanelProjection=None
 OST_DoorTags=None
 OST_DormerOpeningIncomplete=None
 OST_DSR_ArrowHeadStyleId=None
 OST_DSR_CenterlinePatternCatId=None
 OST_DSR_CenterlineTickMarkStyleId=None
 OST_DSR_DimStyleHeavyEndCategoryId=None
 OST_DSR_DimStyleHeavyEndCatId=None
 OST_DSR_DimStyleTickCategoryId=None
 OST_DSR_InteriorTickMarkStyleId=None
 OST_DSR_LeaderTickMarkStyleId=None
 OST_DSR_LineAndTextAttrCategoryId=None
 OST_DSR_LineAndTextAttrFontId=None
 OST_DuctAccessory=None
 OST_DuctAccessoryTags=None
 OST_DuctColorFillLegends=None
 OST_DuctColorFills=None
 OST_DuctCurves=None
 OST_DuctCurvesCenterLine=None
 OST_DuctCurvesContour=None
 OST_DuctCurvesDrop=None
 OST_DuctCurvesInsulation=None
 OST_DuctCurvesLining=None
 OST_DuctCurvesRiseDrop=None
 OST_DuctFitting=None
 OST_DuctFittingCenterLine=None
 OST_DuctFittingInsulation=None
 OST_DuctFittingLining=None
 OST_DuctFittingTags=None
 OST_DuctInsulations=None
 OST_DuctInsulationsTags=None
 OST_DuctLinings=None
 OST_DuctLiningsTags=None
 OST_DuctSystem=None
 OST_DuctSystem_Reference=None
 OST_DuctSystem_Reference_Visibility=None
 OST_DuctTags=None
 OST_DuctTerminal=None
 OST_DuctTerminalTags=None
 OST_EAConstructions=None
 OST_EdgeSlab=None
 OST_EditCutProfile=None
 OST_ElecDistributionSys=None
 OST_ElectricalCircuit=None
 OST_ElectricalCircuitTags=None
 OST_ElectricalDemandFactor=None
 OST_ElectricalDemandFactorDefinitions=None
 OST_ElectricalEquipment=None
 OST_ElectricalEquipmentHiddenLines=None
 OST_ElectricalEquipmentTags=None
 OST_ElectricalFixtures=None
 OST_ElectricalFixturesHiddenLines=None
 OST_ElectricalFixtureTags=None
 OST_ElectricalInternalCircuits=None
 OST_ElectricalLoadClassifications=None
 OST_ElectricalVoltage=None
 OST_Elev=None
 OST_ElevationMarks=None
 OST_Entourage=None
 OST_EntourageHiddenLines=None
 OST_EPS_Demolished=None
 OST_EPS_Existing=None
 OST_EPS_Future=None
 OST_EPS_New=None
 OST_EPS_Temporary=None
 OST_Extrusions=None
 OST_FabricAreaBoundary=None
 OST_FabricAreas=None
 OST_FabricAreaSketchEnvelopeLines=None
 OST_FabricAreaSketchSheetsLines=None
 OST_FabricAreaTags=None
 OST_FabricationContainment=None
 OST_FabricationContainmentCenterLine=None
 OST_FabricationContainmentDrop=None
 OST_FabricationContainmentRise=None
 OST_FabricationContainmentSymbology=None
 OST_FabricationContainmentTags=None
 OST_FabricationDuctwork=None
 OST_FabricationDuctworkCenterLine=None
 OST_FabricationDuctworkDrop=None
 OST_FabricationDuctworkInsulation=None
 OST_FabricationDuctworkLining=None
 OST_FabricationDuctworkRise=None
 OST_FabricationDuctworkSymbology=None
 OST_FabricationDuctworkTags=None
 OST_FabricationHangers=None
 OST_FabricationHangerTags=None
 OST_FabricationPartsTmpGraphicDrag=None
 OST_FabricationPartsTmpGraphicEnd=None
 OST_FabricationPipework=None
 OST_FabricationPipeworkCenterLine=None
 OST_FabricationPipeworkDrop=None
 OST_FabricationPipeworkInsulation=None
 OST_FabricationPipeworkRise=None
 OST_FabricationPipeworkSymbology=None
 OST_FabricationPipeworkTags=None
 OST_FabricationServiceElements=None
 OST_FabricReinforcement=None
 OST_FabricReinforcementBoundary=None
 OST_FabricReinforcementTags=None
 OST_FabricReinforcementWire=None
 OST_FabricReinSpanSymbol=None
 OST_FaceSplitter=None
 OST_Fascia=None
 OST_FilledRegion=None
 OST_FillPatterns=None
 OST_FireAlarmDevices=None
 OST_FireAlarmDeviceTags=None
 OST_Fixtures=None
 OST_FlexDuctCurves=None
 OST_FlexDuctCurvesCenterLine=None
 OST_FlexDuctCurvesContour=None
 OST_FlexDuctCurvesInsulation=None
 OST_FlexDuctCurvesPattern=None
 OST_FlexDuctTags=None
 OST_FlexPipeCurves=None
 OST_FlexPipeCurvesCenterLine=None
 OST_FlexPipeCurvesContour=None
 OST_FlexPipeCurvesInsulation=None
 OST_FlexPipeCurvesPattern=None
 OST_FlexPipeTags=None
 OST_FloorAnalytical=None
 OST_FloorAnalyticalTags=None
 OST_FloorLocalCoordSys=None
 OST_FloorOpening=None
 OST_Floors=None
 OST_FloorsAnalyticalGeometry=None
 OST_FloorsCut=None
 OST_FloorsCutPattern=None
 OST_FloorsDefault=None
 OST_FloorsFinish1=None
 OST_FloorsFinish2=None
 OST_FloorsInsulation=None
 OST_FloorsInteriorEdges=None
 OST_FloorsMembrane=None
 OST_FloorsProjection=None
 OST_FloorsStructure=None
 OST_FloorsSubstrate=None
 OST_FloorsSurfacePattern=None
 OST_FloorTags=None
 OST_Fluids=None
 OST_FndSlabLocalCoordSys=None
 OST_FootingAnalyticalGeometry=None
 OST_FootingSpanDirectionSymbol=None
 OST_FoundationSlabAnalytical=None
 OST_FoundationSlabAnalyticalTags=None
 OST_FramingAnalyticalGeometry=None
 OST_Furniture=None
 OST_FurnitureHiddenLines=None
 OST_FurnitureSystems=None
 OST_FurnitureSystemsHiddenLines=None
 OST_FurnitureSystemTags=None
 OST_FurnitureTags=None
 OST_GbXMLFaces=None
 OST_gbXML_Ceiling=None
 OST_gbXML_ExteriorWall=None
 OST_gbXML_FixedSkylight=None
 OST_gbXML_FixedWindow=None
 OST_gbXML_InteriorFloor=None
 OST_gbXML_InteriorWall=None
 OST_gbXML_NonSlidingDoor=None
 OST_GbXML_Opening=None
 OST_gbXML_OpeningAir=None
 OST_gbXML_OperableSkylight=None
 OST_gbXML_OperableWindow=None
 OST_gbXML_RaisedFloor=None
 OST_gbXML_Roof=None
 OST_gbXML_Shade=None
 OST_gbXML_SlabOnGrade=None
 OST_gbXML_SlidingDoor=None
 OST_GbXML_SType_Exterior=None
 OST_GbXML_SType_Interior=None
 OST_GbXML_SType_Shade=None
 OST_GbXML_SType_Underground=None
 OST_gbXML_SurfaceAir=None
 OST_gbXML_UndergroundCeiling=None
 OST_gbXML_UndergroundSlab=None
 OST_gbXML_UndergroundWall=None
 OST_GenericAnnotation=None
 OST_GenericLines=None
 OST_GenericModel=None
 OST_GenericModelHiddenLines=None
 OST_GenericModelTags=None
 OST_Girder=None
 OST_GraphicalWarning_OpenConnector=None
 OST_GridChains=None
 OST_GridHeads=None
 OST_Grids=None
 OST_GuideGrid=None
 OST_Gutter=None
 OST_HiddenFloorLines=None
 OST_HiddenLines=None
 OST_HiddenStructuralColumnLines=None
 OST_HiddenStructuralConnectionLines_Deprecated=None
 OST_HiddenStructuralFoundationLines=None
 OST_HiddenStructuralFramingLines=None
 OST_HiddenWallLines=None
 OST_HorizontalBracing=None
 OST_HostFin=None
 OST_HostFinCeiling=None
 OST_HostFinFloor=None
 OST_HostFinHF=None
 OST_HostFinRoof=None
 OST_HostFinTags=None
 OST_HostFinWall=None
 OST_HostTemplate=None
 OST_HVAC_Load_Building_Types=None
 OST_HVAC_Load_Schedules=None
 OST_HVAC_Load_Space_Types=None
 OST_HVAC_Zones=None
 OST_HVAC_Zones_Boundary=None
 OST_HVAC_Zones_ColorFill=None
 OST_HVAC_Zones_InteriorFill=None
 OST_HVAC_Zones_InteriorFill_Visibility=None
 OST_HVAC_Zones_Reference=None
 OST_HVAC_Zones_Reference_Visibility=None
 OST_ImportObjectStyles=None
 OST_InstanceDrivenLineStyle=None
 OST_InsulationLines=None
 OST_InternalAreaLoads=None
 OST_InternalAreaLoadTags=None
 OST_InternalLineLoads=None
 OST_InternalLineLoadTags=None
 OST_InternalLoads=None
 OST_InternalPointLoads=None
 OST_InternalPointLoadTags=None
 OST_InvisibleLines=None
 OST_IOS=None
 OST_IOSAligningLine=None
 OST_IOSAlignmentGraphics=None
 OST_IOSArrays=None
 OST_IOSAttachedDetailGroups=None
 OST_IOSBackedUpElements=None
 OST_IOSBBoxScreenSize=None
 OST_IOSConstructionLine=None
 OST_IOSCrashGraphics=None
 OST_IOSCuttingGeometry=None
 OST_IOSDatumPlane=None
 OST_IOSDetailGroups=None
 OST_IOSDragBox=None
 OST_IOSDragBoxInverted=None
 OST_IOSFabricReinSpanSymbolCtrl=None
 OST_IOSFlipControl=None
 OST_IOSFreeSnapLine=None
 OST_IOSGhost=None
 OST_IOSGroups=None
 OST_IOSMeasureLine=None
 OST_IOSMeasureLineScreenSize=None
 OST_IOSModelGroups=None
 OST_IOSNavWheelPivotBall=None
 OST_IOSNotSilhouette=None
 OST_IOSOpening=None
 OST_IOSRebarSystemSpanSymbolCtrl=None
 OST_IOSRegeneratedElements=None
 OST_IOSRegenerationFailure=None
 OST_IOSRoomCalculationPoint=None
 OST_IOSRoomComputationHeight=None
 OST_IOSRoomPerimeterLines=None
 OST_IOSRoomTagToRoomLines=None
 OST_IOSRoomUpperLowerLines=None
 OST_IOSSketchGrid=None
 OST_IOSSlabShapeEditorAutoCrease=None
 OST_IOSSlabShapeEditorBoundary=None
 OST_IOSSlabShapeEditorExplitCrease=None
 OST_IOSSlabShapeEditorPointBoundary=None
 OST_IOSSlabShapeEditorPointInterior=None
 OST_IOSSuspendedSketch=None
 OST_IOSSuspendedSketch_obsolete=None
 OST_IOSThinPixel=None
 OST_IOSThinPixel_Dash=None
 OST_IOSThinPixel_DashDot=None
 OST_IOSThinPixel_Dot=None
 OST_IOSTilePatternGrid=None
 OST_IOSWallCoreBoundary=None
 OST_IOS_GeoLocations=None
 OST_IOS_GeoSite=None
 OST_IsolatedFoundationAnalytical=None
 OST_IsolatedFoundationAnalyticalTags=None
 OST_Joist=None
 OST_KeynoteTags=None
 OST_KickerBracing=None
 OST_LayoutNodes=None
 OST_LayoutPathBase_Pipings=None
 OST_LayoutPath_Bases=None
 OST_LegendComponents=None
 OST_LevelHeads=None
 OST_Levels=None
 OST_LightingDevices=None
 OST_LightingDeviceTags=None
 OST_LightingFixtures=None
 OST_LightingFixturesHiddenLines=None
 OST_LightingFixtureSource=None
 OST_LightingFixtureTags=None
 OST_LightLine=None
 OST_Lights=None
 OST_LineLoads=None
 OST_LineLoadTags=None
 OST_Lines=None
 OST_LinesBeyond=None
 OST_LinesHiddenLines=None
 OST_LinkAnalyticalTags=None
 OST_LinksAnalytical=None
 OST_LoadCases=None
 OST_LoadCasesAccidental=None
 OST_LoadCasesDead=None
 OST_LoadCasesLive=None
 OST_LoadCasesRoofLive=None
 OST_LoadCasesSeismic=None
 OST_LoadCasesSnow=None
 OST_LoadCasesTemperature=None
 OST_LoadCasesWind=None
 OST_Loads=None
 OST_MaskingRegion=None
 OST_Mass=None
 OST_MassAreaFaceTags=None
 OST_MassCutter=None
 OST_MassExteriorWall=None
 OST_MassExteriorWallUnderground=None
 OST_MassFaceSplitter=None
 OST_MassFloor=None
 OST_MassFloorsAll=None
 OST_MassFloor_Obsolete_IdInWrongRange=None
 OST_MassForm=None
 OST_MassGlazing=None
 OST_MassGlazingAll=None
 OST_MassHiddenLines=None
 OST_Massing=None
 OST_MassingCutOutlines=None
 OST_MassingProjectionOutlines=None
 OST_MassInteriorWall=None
 OST_MassOpening=None
 OST_MassRoof=None
 OST_MassShade=None
 OST_MassSkylights=None
 OST_MassSlab=None
 OST_MassSurface_Obsolete_IdInWrongRange=None
 OST_MassTags=None
 OST_MassTags_Obsolete_IdInWrongRange=None
 OST_MassWallsAll=None
 OST_MassZone=None
 OST_Mass_Obsolete_IdInWrongRange=None
 OST_MatchAll=None
 OST_MatchAnnotation=None
 OST_MatchDetail=None
 OST_Matchline=None
 OST_MatchModel=None
 OST_MatchProfile=None
 OST_MatchSiteComponent=None
 OST_Materials=None
 OST_MaterialTags=None
 OST_MechanicalEquipment=None
 OST_MechanicalEquipmentHiddenLines=None
 OST_MechanicalEquipmentTags=None
 OST_MEPSpaceColorFill=None
 OST_MEPSpaceInteriorFill=None
 OST_MEPSpaceInteriorFillVisibility=None
 OST_MEPSpaceReference=None
 OST_MEPSpaceReferenceVisibility=None
 OST_MEPSpaces=None
 OST_MEPSpaceSeparationLines=None
 OST_MEPSpaceTags=None
 OST_ModelText=None
 OST_MultiCategoryTags=None
 OST_MultiReferenceAnnotations=None
 OST_MultistoryStairs=None
 OST_MultiSurface=None
 OST_NodeAnalyticalTags=None
 OST_NumberingSchemas=None
 OST_NurseCallDevices=None
 OST_NurseCallDeviceTags=None
 OST_OBSOLETE_ElemArrayHiddenLines=None
 OST_OBSOLETE_FabricationPartsTmpGraphicDrop=None
 OST_OBSOLETE_FabricationPartsTmpGraphicDropDrag=None
 OST_OverheadLines=None
 OST_PanelScheduleGraphics=None
 OST_ParamElemElectricalLoadClassification=None
 OST_Parking=None
 OST_ParkingHiddenLines=None
 OST_ParkingTags=None
 OST_PartHiddenLines=None
 OST_Parts=None
 OST_PartTags=None
 OST_PathRein=None
 OST_PathReinBoundary=None
 OST_PathReinSpanSymbol=None
 OST_PathReinTags=None
 OST_Phases=None
 OST_PipeAccessory=None
 OST_PipeAccessoryTags=None
 OST_PipeColorFillLegends=None
 OST_PipeColorFills=None
 OST_PipeConnections=None
 OST_PipeCurves=None
 OST_PipeCurvesCenterLine=None
 OST_PipeCurvesContour=None
 OST_PipeCurvesDrop=None
 OST_PipeCurvesInsulation=None
 OST_PipeCurvesRiseDrop=None
 OST_PipeFitting=None
 OST_PipeFittingCenterLine=None
 OST_PipeFittingInsulation=None
 OST_PipeFittingTags=None
 OST_PipeInsulations=None
 OST_PipeInsulationsTags=None
 OST_PipeMaterials=None
 OST_PipeSchedules=None
 OST_PipeSegments=None
 OST_PipeTags=None
 OST_PipingSystem=None
 OST_PipingSystem_Reference=None
 OST_PipingSystem_Reference_Visibility=None
 OST_PlaceHolderDucts=None
 OST_PlaceHolderPipes=None
 OST_PlanRegion=None
 OST_Planting=None
 OST_PlantingHiddenLines=None
 OST_PlantingTags=None
 OST_PlumbingFixtures=None
 OST_PlumbingFixturesHiddenLines=None
 OST_PlumbingFixtureTags=None
 OST_PointClouds=None
 OST_PointLoads=None
 OST_PointLoadTags=None
 OST_PreviewLegendComponents=None
 OST_ProfileFamilies=None
 OST_ProjectBasePoint=None
 OST_ProjectInformation=None
 OST_Property=None
 OST_PropertySet=None
 OST_Purlin=None
 OST_RailingBalusterRail=None
 OST_RailingBalusterRailCut=None
 OST_RailingHandRail=None
 OST_RailingHandRailAboveCut=None
 OST_RailingRailPathExtensionLines=None
 OST_RailingRailPathLines=None
 OST_Railings=None
 OST_RailingSupport=None
 OST_RailingSystem=None
 OST_RailingSystemBaluster=None
 OST_RailingSystemBalusterHiddenLines_Deprecated=None
 OST_RailingSystemHandRail=None
 OST_RailingSystemHandRailBracket=None
 OST_RailingSystemHandRailBracketHiddenLines_Deprecated=None
 OST_RailingSystemHandRailHiddenLines_Deprecated=None
 OST_RailingSystemHardware=None
 OST_RailingSystemHiddenLines_Deprecated=None
 OST_RailingSystemPanel=None
 OST_RailingSystemPanelBracketHiddenLines_Deprecated=None
 OST_RailingSystemPanelHiddenLines_Deprecated=None
 OST_RailingSystemPost=None
 OST_RailingSystemPostHiddenLines_Deprecated=None
 OST_RailingSystemRail=None
 OST_RailingSystemRailHiddenLines_Deprecated=None
 OST_RailingSystemSegment=None
 OST_RailingSystemSegmentHiddenLines_Deprecated=None
 OST_RailingSystemTags=None
 OST_RailingSystemTermination=None
 OST_RailingSystemTerminationHiddenLines_Deprecated=None
 OST_RailingSystemTopRail=None
 OST_RailingSystemTopRailHiddenLines_Deprecated=None
 OST_RailingSystemTransition=None
 OST_RailingSystemTransitionHiddenLines_Deprecated=None
 OST_RailingTermination=None
 OST_RailingTopRail=None
 OST_RailingTopRailAboveCut=None
 OST_Ramps=None
 OST_RampsAboveCut=None
 OST_RampsDownArrow=None
 OST_RampsDownText=None
 OST_RampsHiddenLines=None
 OST_RampsIncomplete=None
 OST_RampsStringer=None
 OST_RampsStringerAboveCut=None
 OST_RampsUpArrow=None
 OST_RampsUpText=None
 OST_RasterImages=None
 OST_Rebar=None
 OST_RebarCover=None
 OST_RebarHiddenLines=None
 OST_RebarLines=None
 OST_RebarSetToggle=None
 OST_RebarShape=None
 OST_RebarSketchLines=None
 OST_RebarTags=None
 OST_ReferenceLines=None
 OST_ReferencePoints=None
 OST_ReferencePoints_HiddenLines=None
 OST_ReferencePoints_Lines=None
 OST_ReferencePoints_Planes=None
 OST_ReferencePoints_Points=None
 OST_ReferenceViewer=None
 OST_ReferenceViewerSymbol=None
 OST_RemovedGridSeg=None
 OST_RemovedGridSeg_Obsolete_IdInWrongRange=None
 OST_RenderRegions=None
 OST_RepeatingDetailLines=None
 OST_Reveals=None
 OST_RevisionClouds=None
 OST_RevisionCloudTags=None
 OST_Revisions=None
 OST_RigidLinksAnalytical=None
 OST_Roads=None
 OST_RoadsHiddenLines=None
 OST_RoofOpening=None
 OST_Roofs=None
 OST_RoofsCut=None
 OST_RoofsCutPattern=None
 OST_RoofsDefault=None
 OST_RoofsFinish1=None
 OST_RoofsFinish2=None
 OST_RoofsHiddenLines=None
 OST_RoofsInsulation=None
 OST_RoofsInteriorEdges=None
 OST_RoofsMembrane=None
 OST_RoofSoffit=None
 OST_RoofsProjection=None
 OST_RoofsStructure=None
 OST_RoofsSubstrate=None
 OST_RoofsSurfacePattern=None
 OST_RoofTags=None
 OST_RoomColorFill=None
 OST_RoomInteriorFill=None
 OST_RoomInteriorFillVisibility=None
 OST_RoomPolylines=None
 OST_RoomReference=None
 OST_RoomReferenceVisibility=None
 OST_Rooms=None
 OST_RoomSeparationLines=None
 OST_RoomTags=None
 OST_RouteCurve=None
 OST_RouteCurveBranch=None
 OST_RouteCurveMain=None
 OST_RoutingPreferences=None
 OST_RvtLinks=None
 OST_ScheduleGraphics=None
 OST_ScheduleViewParamGroup=None
 OST_SecondaryTopographyContours=None
 OST_SectionBox=None
 OST_SectionHeadMediumLines=None
 OST_SectionHeads=None
 OST_SectionHeadThinLines=None
 OST_SectionHeadWideLines=None
 OST_SectionLine=None
 OST_Sections=None
 OST_SecurityDevices=None
 OST_SecurityDeviceTags=None
 OST_Sewer=None
 OST_ShaftOpening=None
 OST_ShaftOpeningHiddenLines=None
 OST_SharedBasePoint=None
 OST_Sheets=None
 OST_Site=None
 OST_SiteHiddenLines=None
 OST_SitePoint=None
 OST_SitePointBoundary=None
 OST_SiteProperty=None
 OST_SitePropertyLineSegment=None
 OST_SitePropertyLineSegmentTags=None
 OST_SitePropertyTags=None
 OST_SiteRegion=None
 OST_SiteSurface=None
 OST_SiteTags=None
 OST_SketchLines=None
 OST_SpanDirectionSymbol=None
 OST_SpecialityEquipment=None
 OST_SpecialityEquipmentHiddenLines=None
 OST_SpecialityEquipmentTags=None
 OST_SplitterProfile=None
 OST_SpotCoordinates=None
 OST_SpotCoordinateSymbols=None
 OST_SpotElevations=None
 OST_SpotElevSymbols=None
 OST_SpotSlopes=None
 OST_SpotSlopesSymbols=None
 OST_Sprinklers=None
 OST_SprinklerTags=None
 OST_StackedWalls=None
 OST_StackedWalls_Obsolete_IdInWrongRange=None
 OST_Stair2012_Deprecated=None
 OST_StairLanding2012HiddenLines_Deprecated=None
 OST_StairRun2012HiddenLines_Deprecated=None
 OST_Stairs=None
 OST_Stairs2012HiddenLines_Deprecated=None
 OST_StairsAboveCut_ToBeDeprecated=None
 OST_StairsCutMarks=None
 OST_StairsCutMarksAboveCut=None
 OST_StairsDownArrows=None
 OST_StairsDownText=None
 OST_StairsHiddenLines=None
 OST_StairsIncomplete_Deprecated=None
 OST_StairsLandings=None
 OST_StairsLandingTags=None
 OST_StairsNosingLines=None
 OST_StairsNosingLinesAboveCut=None
 OST_StairsOutlines=None
 OST_StairsOutlinesAboveCut=None
 OST_StairsPaths=None
 OST_StairsPathsAboveCut=None
 OST_StairsRailing=None
 OST_StairsRailingAboveCut=None
 OST_StairsRailingBaluster=None
 OST_StairsRailingHiddenLines=None
 OST_StairsRailingRail=None
 OST_StairsRailingTags=None
 OST_StairsRiserLines=None
 OST_StairsRiserLinesAboveCut=None
 OST_StairsRuns=None
 OST_StairsRunTags=None
 OST_StairsSketchBoundaryLines=None
 OST_StairsSketchLandingCenterLines=None
 OST_StairsSketchPathLines=None
 OST_StairsSketchRiserLines=None
 OST_StairsSketchRunLines=None
 OST_StairsStringerCarriage=None
 OST_StairsSupports=None
 OST_StairsSupportsAboveCut=None
 OST_StairsSupportTags=None
 OST_StairsTags=None
 OST_StairStringer2012HiddenLines_Deprecated=None
 OST_StairStringer2012_Deprecated=None
 OST_StairsTriserNumbers=None
 OST_StairsTrisers=None
 OST_StairsTriserTags=None
 OST_StairsUpArrows=None
 OST_StairsUpText=None
 OST_StairTread2012HiddenLines_Deprecated=None
 OST_StickSymbols_Obsolete_IdInWrongRange=None
 OST_StructConnectionAnchors=None
 OST_StructConnectionBolts=None
 OST_StructConnectionFailed=None
 OST_StructConnectionHiddenLines=None
 OST_StructConnectionOthers=None
 OST_StructConnectionPlates=None
 OST_StructConnectionProfiles=None
 OST_StructConnectionReference=None
 OST_StructConnections=None
 OST_StructConnectionStale=None
 OST_StructConnectionSymbol=None
 OST_StructConnectionSymbols=None
 OST_StructConnectionTags=None
 OST_StructLocationLineControl=None
 OST_StructuralAnnotations=None
 OST_StructuralBracePlanReps=None
 OST_StructuralColumnLocationLine=None
 OST_StructuralColumns=None
 OST_StructuralColumnStickSymbols=None
 OST_StructuralColumnTags=None
 OST_StructuralConnectionHandlerTags_Deprecated=None
 OST_StructuralConnectionHandler_Deprecated=None
 OST_StructuralFoundation=None
 OST_StructuralFoundationTags=None
 OST_StructuralFraming=None
 OST_StructuralFramingLocationLine=None
 OST_StructuralFramingOpening=None
 OST_StructuralFramingOther=None
 OST_StructuralFramingSystem=None
 OST_StructuralFramingSystemHiddenLines_Obsolete=None
 OST_StructuralFramingTags=None
 OST_StructuralStiffener=None
 OST_StructuralStiffenerHiddenLines=None
 OST_StructuralStiffenerTags=None
 OST_StructuralTruss=None
 OST_StructuralTrussHiddenLines=None
 OST_StructuralTrussStickSymbols=None
 OST_StructWeldLines=None
 OST_Sun=None
 OST_SunPath1=None
 OST_SunPath2=None
 OST_SunriseText=None
 OST_SunsetText=None
 OST_SunStudy=None
 OST_SunSurface=None
 OST_SWallRectOpening=None
 OST_SwitchboardScheduleTemplates=None
 OST_SwitchSystem=None
 OST_Tags=None
 OST_TelephoneDevices=None
 OST_TelephoneDeviceTags=None
 OST_TextNotes=None
 OST_TilePatterns=None
 OST_TitleBlockMediumLines=None
 OST_TitleBlocks=None
 OST_TitleBlockThinLines=None
 OST_TitleBlockWideLines=None
 OST_Topography=None
 OST_TopographyContours=None
 OST_TopographyHiddenLines=None
 OST_TopographySurface=None
 OST_Truss=None
 OST_TrussBottomChordCurve=None
 OST_TrussChord=None
 OST_TrussDiagWebCurve=None
 OST_TrussDummy=None
 OST_TrussTags=None
 OST_TrussTopChordCurve=None
 OST_TrussVertWebCurve=None
 OST_TrussWeb=None
 OST_VerticalBracing=None
 OST_Viewers=None
 OST_ViewportLabel=None
 OST_Viewports=None
 OST_Views=None
 OST_VolumeOfInterest=None
 OST_WallAnalytical=None
 OST_WallAnalyticalTags=None
 OST_WallFoundationAnalytical=None
 OST_WallFoundationAnalyticalTags=None
 OST_WallLocalCoordSys=None
 OST_WallRefPlanes=None
 OST_WallRefPlanes_Obsolete_IdInWrongRange=None
 OST_Walls=None
 OST_WallsAnalyticalGeometry=None
 OST_WallsCutOutlines=None
 OST_WallsCutPattern=None
 OST_WallsDefault=None
 OST_WallsFinish1=None
 OST_WallsFinish2=None
 OST_WallsInsulation=None
 OST_WallsMembrane=None
 OST_WallsProjectionOutlines=None
 OST_WallsStructure=None
 OST_WallsSubstrate=None
 OST_WallsSurfacePattern=None
 OST_WallTags=None
 OST_WeakDims=None
 OST_Windows=None
 OST_WindowsFrameMullionCut=None
 OST_WindowsFrameMullionProjection=None
 OST_WindowsGlassCut=None
 OST_WindowsGlassProjection=None
 OST_WindowsHiddenLines=None
 OST_WindowsOpeningCut=None
 OST_WindowsOpeningProjection=None
 OST_WindowsSillHeadCut=None
 OST_WindowsSillHeadProjection=None
 OST_WindowTags=None
 OST_Wire=None
 OST_WireHomeRunArrows=None
 OST_WireInsulations=None
 OST_WireMaterials=None
 OST_WireTags=None
 OST_WireTemperatureRatings=None
 OST_WireTickMarks=None
 OST_XRayConstrainedProfileEdge=None
 OST_XRayImplicitPathCurve=None
 OST_XRayPathCurve=None
 OST_XRayPathPoint=None
 OST_XRayProfileEdge=None
 OST_XRaySideEdge=None
 OST_ZoneSchemes=None
 OST_ZoneTags=None
 OST_ZoningEnvelope=None
 value__=None
class BuiltInFailures(object):
 AnalyticalModelFailures=None
 ArrayFailures=None
 AssemblyFailures=None
 AutoJoinFailures=None
 AutoRouteFailures=None
 BeamFailures=None
 BeamSystemFailures=None
 BendFailures=None
 BlendFailures=None
 ColorFillFailures=None
 ColumnFailures=None
 ColumnInsideWallFailures=None
 ComponentRepeaterFailures=None
 ComponentRepeaterSlotFailures=None
 ConnectorFailures=None
 ConstraintFailures=None
 ConversionFailures=None
 CopyMonitorFailures=None
 CopyPasteFailures=None
 CreationFailures=None
 CurtainGridFamilyFailures=None
 CurtainWallFailures=None
 CurveByPointFailures=None
 CurveFailures=None
 CutFailures=None
 CutterFailures=None
 CuttingFailures=None
 DatumPlaneFailures=None
 DebugTabBindingFailures=None
 DecalFailures=None
 DesignOptionFailures=None
 DetailFailures=None
 DimensionFailures=None
 DisplacementElementFailures=None
 DividedPathFailures=None
 DividedSurfaceFailures=None
 DocumentFailures=None
 DPartFailures=None
 DuctFailures=None
 EditingFailures=None
 ElectricalFailures=None
 ElectricityFailures=None
 ElementFailures=None
 ElementTypeFailures=None
 ElevationFailures=None
 EnergyAnalysisFailures=None
 EnergyAnalysisUtilitiesDBFailures=None
 ExportFailures=None
 ExtrusionFailures=None
 FabricAreaFailures=None
 FabricationShapeFailures=None
 FabricFailures=None
 FabricSheetFailures=None
 FaceSplitterFailures=None
 FamilyFailures=None
 FilledRegionFailures=None
 FloorFailures=None
 FluidFailures=None
 FormFailures=None
 GeneralFailures=None
 GenericFailures=None
 GenericMEPFailures=None
 GeometryFailures=None
 GlobalParameterFailures=None
 GridChainSketchFailures=None
 GridFailures=None
 GroupFailures=None
 HostObjFailures=None
 HvacFailures=None
 IlluminationFailures=None
 ImageFailures=None
 ImportExportFailures=None
 ImportFailures=None
 InaccurateFailures=None
 InfillFailures=None
 InterferenceFailures=None
 JoinElementsFailures=None
 KeyBasedTreeEntryFailures=None
 KeyBasedTreeFileFailures=None
 KeynoteFailures=None
 KeynoteTagFailures=None
 LegendFailures=None
 LevelFailures=None
 LinkFailures=None
 LoadFailures=None
 LooseDimensionFailures=None
 MassFailures=None
 MatchlineFailures=None
 MechanicalFailures=None
 MEPCalculationFailures=None
 MEPFabricationFailures=None
 MirrorFailures=None
 MultiReferenceAnnotationFailures=None
 NumberingFailures=None
 OffsetFacesCellLegacyFailures=None
 OpeningFailures=None
 OverlapFailures=None
 ParameterFailures=None
 PartMakerMethodForFamilyInstanceFailures=None
 PartMakerMethodForMergePartFailures=None
 PartMakerMethodForWallFailures=None
 PathFailures=None
 PerformanceFailures=None
 PipingFailures=None
 PlanRegionFailures=None
 PointFailures=None
 ProfileFailures=None
 PropertySetElementFailures=None
 RebarCouplerFailures=None
 RebarFailures=None
 RebarShapeFailures=None
 RebarSystemFailures=None
 RefPlaneFailures=None
 RegenFailures=None
 RenderFailures=None
 RevisionCloudFailures=None
 RevisionFailures=None
 RevolutionFailures=None
 RoofFailures=None
 RoomFailures=None
 ScheduleViewFailures=None
 SculptingFailures=None
 SectionViewFailures=None
 SelectionFailures=None
 SheetFailures=None
 SiteFailures=None
 SiteImportFailures=None
 SketchFailures=None
 SkylightFailures=None
 SlabFailures=None
 SlabShapeFailures=None
 SlantedColumnFailures=None
 SpanDirectionSymbolFailures=None
 SplineFailures=None
 StairRampFailures=None
 StructuralAssetFailures=None
 StructuralConnectionFailures=None
 StructuralLoadFailures=None
 SweepFailures=None
 SweptBlendFailures=None
 SystemNavigatorFailures=None
 SystemsFailures=None
 TagFailures=None
 TextFailures=None
 TilePatternTileFailures=None
 ToggleViewFailures=None
 TrussFailures=None
 UniqueElementFailures=None
 ViewFailures=None
 WallFailures=None
 WallJoinFailures=None
 WallJoinRoofFailures=None
 WorksharingFailures=None
 __all__=['AnalyticalModelFailures','ArrayFailures','AssemblyFailures','AutoJoinFailures','AutoRouteFailures','BeamFailures','BeamSystemFailures','BendFailures','BlendFailures','ColorFillFailures','ColumnFailures','ColumnInsideWallFailures','ComponentRepeaterFailures','ComponentRepeaterSlotFailures','ConnectorFailures','ConstraintFailures','ConversionFailures','CopyMonitorFailures','CopyPasteFailures','CreationFailures','CurtainGridFamilyFailures','CurtainWallFailures','CurveByPointFailures','CurveFailures','CutFailures','CutterFailures','CuttingFailures','DatumPlaneFailures','DebugTabBindingFailures','DecalFailures','DesignOptionFailures','DetailFailures','DimensionFailures','DisplacementElementFailures','DividedPathFailures','DividedSurfaceFailures','DocumentFailures','DPartFailures','DuctFailures','EditingFailures','ElectricalFailures','ElectricityFailures','ElementFailures','ElementTypeFailures','ElevationFailures','EnergyAnalysisFailures','EnergyAnalysisUtilitiesDBFailures','ExportFailures','ExtrusionFailures','FabricAreaFailures','FabricationShapeFailures','FabricFailures','FabricSheetFailures','FaceSplitterFailures','FamilyFailures','FilledRegionFailures','FloorFailures','FluidFailures','FormFailures','GeneralFailures','GenericFailures','GenericMEPFailures','GeometryFailures','GlobalParameterFailures','GridChainSketchFailures','GridFailures','GroupFailures','HostObjFailures','HvacFailures','IlluminationFailures','ImageFailures','ImportExportFailures','ImportFailures','InaccurateFailures','InfillFailures','InterferenceFailures','JoinElementsFailures','KeyBasedTreeEntryFailures','KeyBasedTreeFileFailures','KeynoteFailures','KeynoteTagFailures','LegendFailures','LevelFailures','LinkFailures','LoadFailures','LooseDimensionFailures','MassFailures','MatchlineFailures','MechanicalFailures','MEPCalculationFailures','MEPFabricationFailures','MirrorFailures','MultiReferenceAnnotationFailures','NumberingFailures','OffsetFacesCellLegacyFailures','OpeningFailures','OverlapFailures','ParameterFailures','PartMakerMethodForFamilyInstanceFailures','PartMakerMethodForMergePartFailures','PartMakerMethodForWallFailures','PathFailures','PerformanceFailures','PipingFailures','PlanRegionFailures','PointFailures','ProfileFailures','PropertySetElementFailures','RebarCouplerFailures','RebarFailures','RebarShapeFailures','RebarSystemFailures','RefPlaneFailures','RegenFailures','RenderFailures','RevisionCloudFailures','RevisionFailures','RevolutionFailures','RoofFailures','RoomFailures','ScheduleViewFailures','SculptingFailures','SectionViewFailures','SelectionFailures','SheetFailures','SiteFailures','SiteImportFailures','SketchFailures','SkylightFailures','SlabFailures','SlabShapeFailures','SlantedColumnFailures','SpanDirectionSymbolFailures','SplineFailures','StairRampFailures','StructuralAssetFailures','StructuralConnectionFailures','StructuralLoadFailures','SweepFailures','SweptBlendFailures','SystemNavigatorFailures','SystemsFailures','TagFailures','TextFailures','TilePatternTileFailures','ToggleViewFailures','TrussFailures','UniqueElementFailures','ViewFailures','WallFailures','WallJoinFailures','WallJoinRoofFailures','WorksharingFailures',]
class BuiltInParameter(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 ACTUAL_MAX_RIDGE_HEIGHT_PARAM=None
 ALLOW_AUTO_EMBED=None
 ALL_GRID_ROTATION_FOR_DIVISION_RULE=None
 ALL_MODEL_COST=None
 ALL_MODEL_DESCRIPTION=None
 ALL_MODEL_FAMILY_NAME=None
 ALL_MODEL_IMAGE=None
 ALL_MODEL_INSTANCE_COMMENTS=None
 ALL_MODEL_MANUFACTURER=None
 ALL_MODEL_MARK=None
 ALL_MODEL_MODEL=None
 ALL_MODEL_TYPE_COMMENTS=None
 ALL_MODEL_TYPE_IMAGE=None
 ALL_MODEL_TYPE_MARK=None
 ALL_MODEL_TYPE_NAME=None
 ALL_MODEL_URL=None
 ALTERNATE_UNITS=None
 ALTERNATE_UNITS_PREFIX=None
 ALTERNATE_UNITS_SUFFIX=None
 ALWAYS_ZERO_LENGTH=None
 ANALYTICAL_ABSORPTANCE=None
 ANALYTICAL_GEOMETRY_IS_VALID=None
 ANALYTICAL_HEAT_TRANSFER_COEFFICIENT=None
 ANALYTICAL_LINK_RELEASE_ROTATION_X=None
 ANALYTICAL_LINK_RELEASE_ROTATION_Y=None
 ANALYTICAL_LINK_RELEASE_ROTATION_Z=None
 ANALYTICAL_LINK_RELEASE_TRANSLATION_X=None
 ANALYTICAL_LINK_RELEASE_TRANSLATION_Y=None
 ANALYTICAL_LINK_RELEASE_TRANSLATION_Z=None
 ANALYTICAL_MEMBER_FORCE_END_ALL_NON_ZERO=None
 ANALYTICAL_MEMBER_FORCE_END_FX=None
 ANALYTICAL_MEMBER_FORCE_END_FY=None
 ANALYTICAL_MEMBER_FORCE_END_FZ=None
 ANALYTICAL_MEMBER_FORCE_END_MX=None
 ANALYTICAL_MEMBER_FORCE_END_MY=None
 ANALYTICAL_MEMBER_FORCE_END_MZ=None
 ANALYTICAL_MEMBER_FORCE_START_ALL_NON_ZERO=None
 ANALYTICAL_MEMBER_FORCE_START_FX=None
 ANALYTICAL_MEMBER_FORCE_START_FY=None
 ANALYTICAL_MEMBER_FORCE_START_FZ=None
 ANALYTICAL_MEMBER_FORCE_START_MX=None
 ANALYTICAL_MEMBER_FORCE_START_MY=None
 ANALYTICAL_MEMBER_FORCE_START_MZ=None
 ANALYTICAL_MODEL_AREA=None
 ANALYTICAL_MODEL_BASE_ALIGNMENT_METHOD=None
 ANALYTICAL_MODEL_BASE_EXTENSION_METHOD=None
 ANALYTICAL_MODEL_BASE_Y_PROJECTION=None
 ANALYTICAL_MODEL_BASE_Z_PROJECTION=None
 ANALYTICAL_MODEL_CODE_CHECKING=None
 ANALYTICAL_MODEL_COLUMN_BASE_EXTENSION=None
 ANALYTICAL_MODEL_COLUMN_TOP_EXTENSION=None
 ANALYTICAL_MODEL_END_ALIGNMENT_METHOD=None
 ANALYTICAL_MODEL_END_Y_PROJECTION=None
 ANALYTICAL_MODEL_END_Z_PROJECTION=None
 ANALYTICAL_MODEL_FLOOR_ALIGNMENT_METHOD=None
 ANALYTICAL_MODEL_FLOOR_PROJECTION=None
 ANALYTICAL_MODEL_FOUNDATIONS_MARK=None
 ANALYTICAL_MODEL_LENGTH=None
 ANALYTICAL_MODEL_MANUALLY_ADJUSTED=None
 ANALYTICAL_MODEL_NODES_MARK=None
 ANALYTICAL_MODEL_PERIMETER=None
 ANALYTICAL_MODEL_PHYSICAL_TYPE=None
 ANALYTICAL_MODEL_ROTATION=None
 ANALYTICAL_MODEL_SKETCH_ALIGNMENT_METHOD=None
 ANALYTICAL_MODEL_SKETCH_PROJECTION=None
 ANALYTICAL_MODEL_START_ALIGNMENT_METHOD=None
 ANALYTICAL_MODEL_START_Y_PROJECTION=None
 ANALYTICAL_MODEL_START_Z_PROJECTION=None
 ANALYTICAL_MODEL_STICK_ELEMENTS_MARK=None
 ANALYTICAL_MODEL_SURFACE_ELEMENTS_MARK=None
 ANALYTICAL_MODEL_TOP_ALIGNMENT_METHOD=None
 ANALYTICAL_MODEL_TOP_EXTENSION_METHOD=None
 ANALYTICAL_MODEL_TOP_Y_PROJECTION=None
 ANALYTICAL_MODEL_TOP_Z_PROJECTION=None
 ANALYTICAL_MODEL_WALL_ALIGNMENT_METHOD=None
 ANALYTICAL_MODEL_WALL_BASE_PROJECTION=None
 ANALYTICAL_MODEL_WALL_PROJECTION=None
 ANALYTICAL_MODEL_WALL_TOP_PROJECTION=None
 ANALYTICAL_ROUGHNESS=None
 ANALYTICAL_SOLAR_HEAT_GAIN_COEFFICIENT=None
 ANALYTICAL_THERMAL_MASS=None
 ANALYTICAL_THERMAL_RESISTANCE=None
 ANALYTICAL_VISUAL_LIGHT_TRANSMITTANCE=None
 ANALYTIC_CONSTRUCTION_GBXML_TYPEID=None
 ANALYTIC_CONSTRUCTION_LOOKUP_TABLE=None
 ANY_PATTERN_ID_PARAM=None
 ANY_PATTERN_ID_PARAM_NO_NO=None
 ARC_CENTER_MARK=None
 ARC_CURVE_CNTR_MRK_VISIBLE=None
 ARC_LEADER_PARAM=None
 ARC_WALL_CNTR_MRK_VISIBLE=None
 AREA_SCHEME_ID=None
 AREA_SCHEME_NAME=None
 AREA_TYPE=None
 AREA_TYPE_TEXT=None
 ARROWHEAD_END_AT_RISER=None
 ARROWHEAD_TYPE=None
 ARROW_CLOSED=None
 ARROW_FILLED=None
 ARROW_SIZE=None
 ARROW_TYPE=None
 ASSEMBLY_NAME=None
 ASSEMBLY_NAMING_CATEGORY=None
 ASSIGN_TEMPLATE_ON_VIEW_CREATION=None
 AUTO_JOIN_CONDITION=None
 AUTO_JOIN_CONDITION_WALL=None
 AUTO_MULLION_BORDER1_GRID1=None
 AUTO_MULLION_BORDER1_GRID2=None
 AUTO_MULLION_BORDER1_HORIZ=None
 AUTO_MULLION_BORDER1_VERT=None
 AUTO_MULLION_BORDER2_GRID1=None
 AUTO_MULLION_BORDER2_GRID2=None
 AUTO_MULLION_BORDER2_HORIZ=None
 AUTO_MULLION_BORDER2_VERT=None
 AUTO_MULLION_INTERIOR_GRID1=None
 AUTO_MULLION_INTERIOR_GRID2=None
 AUTO_MULLION_INTERIOR_HORIZ=None
 AUTO_MULLION_INTERIOR_VERT=None
 AUTO_PANEL=None
 AUTO_PANEL_WALL=None
 BASELINE_DIM_OFFSET=None
 BASEPOINT_ANGLETON_PARAM=None
 BASEPOINT_EASTWEST_PARAM=None
 BASEPOINT_ELEVATION_PARAM=None
 BASEPOINT_NORTHSOUTH_PARAM=None
 BEAM_H_JUSTIFICATION=None
 BEAM_SYSTEM_3D_PARAM=None
 BEAM_SYSTEM_TAG_INST_PARAM_ANGLE=None
 BEAM_SYSTEM_TAG_PARAM_LEFT=None
 BEAM_SYSTEM_TAG_PARAM_RIGHT=None
 BEAM_V_JUSTIFICATION=None
 BEAM_V_JUSTIFICATION_OTHER_VALUE=None
 BENT_FABRIC_PARAM_BEND_DIRECTION=None
 BENT_FABRIC_PARAM_LONGITUDINAL_CUT_LENGTH=None
 BENT_FABRIC_PARAM_STRAIGHT_WIRES_LOCATION=None
 BLEND_END_PARAM=None
 BLEND_START_PARAM=None
 BOUNDARY_AREA_RESTRAINT_X=None
 BOUNDARY_AREA_RESTRAINT_Y=None
 BOUNDARY_AREA_RESTRAINT_Z=None
 BOUNDARY_BEARING=None
 BOUNDARY_CONDITIONS_IS_EXT=None
 BOUNDARY_CONDITIONS_TYPE=None
 BOUNDARY_DIRECTION_ROT_X=None
 BOUNDARY_DIRECTION_ROT_Y=None
 BOUNDARY_DIRECTION_ROT_Z=None
 BOUNDARY_DIRECTION_X=None
 BOUNDARY_DIRECTION_Y=None
 BOUNDARY_DIRECTION_Z=None
 BOUNDARY_DISTANCE=None
 BOUNDARY_LINEAR_RESTRAINT_ROT_X=None
 BOUNDARY_LINEAR_RESTRAINT_X=None
 BOUNDARY_LINEAR_RESTRAINT_Y=None
 BOUNDARY_LINEAR_RESTRAINT_Z=None
 BOUNDARY_PARAM_PRESET=None
 BOUNDARY_PARAM_PRESET_AREA=None
 BOUNDARY_PARAM_PRESET_LINEAR=None
 BOUNDARY_RADIUS=None
 BOUNDARY_RESTRAINT_ROT_X=None
 BOUNDARY_RESTRAINT_ROT_Y=None
 BOUNDARY_RESTRAINT_ROT_Z=None
 BOUNDARY_RESTRAINT_X=None
 BOUNDARY_RESTRAINT_Y=None
 BOUNDARY_RESTRAINT_Z=None
 BOUNDARY_X_ROTATION_FIXED=None
 BOUNDARY_X_ROTATION_SPRING=None
 BOUNDARY_X_TRANSLATION_FIXED=None
 BOUNDARY_X_TRANSLATION_SPRING=None
 BOUNDARY_Y_ROTATION_FIXED=None
 BOUNDARY_Y_ROTATION_SPRING=None
 BOUNDARY_Y_TRANSLATION_FIXED=None
 BOUNDARY_Y_TRANSLATION_SPRING=None
 BOUNDARY_Z_ROTATION_FIXED=None
 BOUNDARY_Z_ROTATION_SPRING=None
 BOUNDARY_Z_TRANSLATION_FIXED=None
 BOUNDARY_Z_TRANSLATION_SPRING=None
 BR_ORG_FILTER=None
 BR_ORG_FOLDERS=None
 BUILDINGPAD_HEIGHTABOVELEVEL_PARAM=None
 BUILDINGPAD_THICKNESS=None
 BUILDING_CLOSING_TIME_PARAM=None
 BUILDING_CURVE_GSTYLE=None
 BUILDING_CURVE_GSTYLE_PLUS_INVISIBLE=None
 BUILDING_OPENING_TIME_PARAM=None
 BUILDING_UNOCCUPIED_COOLING_SET_POINT_PARAM=None
 BUILIDING_PAD_STRUCTURE_ID_PARAM=None
 CABLETRAY_MINBENDMULTIPLIER_PARAM=None
 CALLOUT_ATTR_HEAD_TAG=None
 CALLOUT_CORNER_SHEET_RADIUS=None
 CALLOUT_SYNCRONIZE_BOUND_OFFSET_FAR=None
 CALLOUT_TAG=None
 CASEWORK_CONSTRUCTION_TYPE=None
 CASEWORK_DEPTH=None
 CASEWORK_FINISH=None
 CASEWORK_HEIGHT=None
 CASEWORK_WIDTH=None
 CEILING_ATTR_DEFAULT_HEIGHT_PARAM=None
 CEILING_ATTR_PATTERN_PARAM=None
 CEILING_ATTR_SPACING1_PARAM=None
 CEILING_ATTR_SPACING2_PARAM=None
 CEILING_ATTR_SYSTEMNAME_PARAM=None
 CEILING_HAS_THICKNESS_PARAM=None
 CEILING_HEIGHTABOVELEVEL_PARAM=None
 CEILING_STRUCTURE_ID_PARAM=None
 CEILING_THICKNESS=None
 CEILING_THICKNESS_PARAM=None
 CENTER_MARK_SIZE=None
 CIRCUIT_LOAD_CLASSIFICATION_PARAM=None
 CIRC_MULLION_RADIUS=None
 CLEAR_COVER=None
 CLEAR_COVER_BOTTOM=None
 CLEAR_COVER_EXTERIOR=None
 CLEAR_COVER_INTERIOR=None
 CLEAR_COVER_OTHER=None
 CLEAR_COVER_TOP=None
 CLIENT_NAME=None
 CLINE_SUBCATEGORY=None
 COARSE_SCALE_FILL_PATTERN_COLOR=None
 COARSE_SCALE_FILL_PATTERN_ID_PARAM=None
 COLOR_FILL_FILTERED_PARAM=None
 COLOR_FILL_SWATCH_HEIGHT_PARAM=None
 COLOR_FILL_SWATCH_WIDTH_PARAM=None
 COLOR_SCHEME_LOCATION=None
 COLUMN_BASE_ATTACHED_PARAM=None
 COLUMN_BASE_ATTACHMENT_OFFSET_PARAM=None
 COLUMN_BASE_ATTACH_CUT_PARAM=None
 COLUMN_BASE_ATTACH_JUSTIFICATION_PARAM=None
 COLUMN_LOCATION_MARK=None
 COLUMN_TOP_ATTACHED_PARAM=None
 COLUMN_TOP_ATTACHMENT_OFFSET_PARAM=None
 COLUMN_TOP_ATTACH_CUT_PARAM=None
 COLUMN_TOP_ATTACH_JUSTIFICATION_PARAM=None
 CONCEPTUAL_CONSTRUCTION_MATERIAL=None
 CONDUIT_STANDARD_TYPE_PARAM=None
 CONNECTOR_ANGLE=None
 CONNECTOR_ANGLE_OF_DEFLECTION=None
 CONNECTOR_DIAMETER=None
 CONNECTOR_ENGAGEMENT_LENGTH=None
 CONNECTOR_GENDER_TYPE=None
 CONNECTOR_HEIGHT=None
 CONNECTOR_INDEX=None
 CONNECTOR_INSIDE_DIAMETER=None
 CONNECTOR_JOINT_TYPE=None
 CONNECTOR_LENGTH=None
 CONNECTOR_PROFILE_TYPE=None
 CONNECTOR_RADIUS=None
 CONNECTOR_REFERENCE_INDEX=None
 CONNECTOR_UTILITY_PARAM=None
 CONNECTOR_VISIBLE_SIZE=None
 CONNECTOR_WIDTH=None
 CONSTRAINT_FIXED_OFFSET=None
 CONTINUOUSRAIL_BEGINNING_TERMINATION_ATTACHMENT_PARAM=None
 CONTINUOUSRAIL_BEGINNING_TERMINATION_TYPE_PARAM=None
 CONTINUOUSRAIL_DEFAULT_JOIN_TYPE_PARAM=None
 CONTINUOUSRAIL_END_EXTENSION_LENGTH_PARAM=None
 CONTINUOUSRAIL_END_TERMINATION_ATTACHMENT_PARAM=None
 CONTINUOUSRAIL_END_TERMINATION_TYPE_PARAM=None
 CONTINUOUSRAIL_EXTENSION_LENGTH_PARAM=None
 CONTINUOUSRAIL_FILLET_RADIUS_PARAM=None
 CONTINUOUSRAIL_JOIN_TYPE_PARAM=None
 CONTINUOUSRAIL_LENGTH_PARAM=None
 CONTINUOUSRAIL_MATERIALS_PARAM=None
 CONTINUOUSRAIL_PLUS_TREAD_DEPTH_PARAM=None
 CONTINUOUSRAIL_PROFILE_TYPE_PARAM=None
 CONTINUOUSRAIL_TRANSITION_TYPE_PARAM=None
 CONTINUOUS_FOOTING_BEARING_WIDTH=None
 CONTINUOUS_FOOTING_BOTTOM_HEEL=None
 CONTINUOUS_FOOTING_BOTTOM_TOE=None
 CONTINUOUS_FOOTING_BREAK_AT_INSERTS_DISABLE=None
 CONTINUOUS_FOOTING_DEFAULT_END_EXTENSION_LENGTH=None
 CONTINUOUS_FOOTING_ECCENTRICITY=None
 CONTINUOUS_FOOTING_LENGTH=None
 CONTINUOUS_FOOTING_STRUCTURAL_USAGE=None
 CONTINUOUS_FOOTING_TOP_HEEL=None
 CONTINUOUS_FOOTING_TOP_TOE=None
 CONTINUOUS_FOOTING_WIDTH=None
 CONTOUR_ELEVATION=None
 CONTOUR_ELEVATION_STEP=None
 CONTOUR_LABELS_ELEV_BASE_TYPE=None
 CONTOUR_LABELS_LINEAR_UNITS=None
 CONTOUR_LABELS_PRIMARY_ONLY=None
 CONTOUR_LABELS_RELATIVE_BASE=None
 CONTOUR_SUBCATEGORY_ID=None
 COUPLER_CODE=None
 COUPLER_COUPLED_BAR_SIZE=None
 COUPLER_COUPLED_ENDTREATMENT=None
 COUPLER_COUPLED_ENGAGEMENT=None
 COUPLER_LENGTH=None
 COUPLER_MAIN_BAR_SIZE=None
 COUPLER_MAIN_ENDTREATMENT=None
 COUPLER_MAIN_ENGAGEMENT=None
 COUPLER_MARK=None
 COUPLER_NUMBER=None
 COUPLER_QUANTITY=None
 COUPLER_WEIGHT=None
 COUPLER_WIDTH=None
 COVER_TYPE_LENGTH=None
 COVER_TYPE_NAME=None
 CURTAINGRID_ADJUST_BORDER_1=None
 CURTAINGRID_ADJUST_BORDER_2=None
 CURTAINGRID_ADJUST_BORDER_HORIZ=None
 CURTAINGRID_ADJUST_BORDER_U=None
 CURTAINGRID_ADJUST_BORDER_V=None
 CURTAINGRID_ADJUST_BORDER_VERT=None
 CURTAINGRID_ANGLE_1=None
 CURTAINGRID_ANGLE_2=None
 CURTAINGRID_ANGLE_HORIZ=None
 CURTAINGRID_ANGLE_U=None
 CURTAINGRID_ANGLE_V=None
 CURTAINGRID_ANGLE_VERT=None
 CURTAINGRID_BELT_1=None
 CURTAINGRID_BELT_2=None
 CURTAINGRID_BELT_HORIZ=None
 CURTAINGRID_BELT_RATIO_1=None
 CURTAINGRID_BELT_RATIO_2=None
 CURTAINGRID_BELT_RATIO_U=None
 CURTAINGRID_BELT_RATIO_V=None
 CURTAINGRID_BELT_U=None
 CURTAINGRID_BELT_V=None
 CURTAINGRID_BELT_VERT=None
 CURTAINGRID_ORIGIN_1=None
 CURTAINGRID_ORIGIN_2=None
 CURTAINGRID_ORIGIN_HORIZ=None
 CURTAINGRID_ORIGIN_U=None
 CURTAINGRID_ORIGIN_V=None
 CURTAINGRID_ORIGIN_VERT=None
 CURTAINGRID_USE_CURVE_DIST=None
 CURTAINGRID_USE_CURVE_DIST_1=None
 CURTAINGRID_USE_CURVE_DIST_2=None
 CURTAINGRID_USE_CURVE_DIST_HORIZ=None
 CURTAINGRID_USE_CURVE_DIST_U=None
 CURTAINGRID_USE_CURVE_DIST_V=None
 CURTAINGRID_USE_CURVE_DIST_VERT=None
 CURTAIN_GRID_BASE_ORIENTATION=None
 CURTAIN_VERSION_PARAM=None
 CURTAIN_WALL_PANELS_CONSTRUCTION_TYPE=None
 CURTAIN_WALL_PANELS_FINISH=None
 CURTAIN_WALL_PANELS_HEIGHT=None
 CURTAIN_WALL_PANELS_WIDTH=None
 CURTAIN_WALL_PANEL_HOST_ID=None
 CURTAIN_WALL_SYSPANEL_OFFSET=None
 CURTAIN_WALL_SYSPANEL_THICKNESS=None
 CURVE_BY_POINTS_PROJECTION_TYPE=None
 CURVE_DETERMINES_ORIENTATION=None
 CURVE_EDGE_OFFSET=None
 CURVE_ELEM_ARC_END_ANGLE=None
 CURVE_ELEM_ARC_RADIUS=None
 CURVE_ELEM_ARC_RANGE=None
 CURVE_ELEM_ARC_START_ANGLE=None
 CURVE_ELEM_DEFINES_SLOPE=None
 CURVE_ELEM_LENGTH=None
 CURVE_ELEM_LINE_ANGLE=None
 CURVE_HEIGHT_OFFSET=None
 CURVE_IS_DETAIL=None
 CURVE_IS_FILLED=None
 CURVE_IS_REFERENCE_LINE=None
 CURVE_IS_SLOPE_DEFINING=None
 CURVE_LEVEL=None
 CURVE_NUMBER_OF_SEGMENTS=None
 CURVE_PARAM_CONCRETE_CANTILEVER=None
 CURVE_PARAM_STEEL_CANTILEVER=None
 CURVE_SUPPORT_OFFSET=None
 CURVE_VISIBILITY_PARAM=None
 CURVE_WALL_OFFSET=None
 CURVE_WALL_OFFSET_ROOFS=None
 CUST_MULLION_THICK=None
 CUST_MULLION_WIDTH1=None
 CUST_MULLION_WIDTH2=None
 CUT_LINE_ANGLE=None
 CUT_LINE_DISTANCE=None
 CUT_LINE_EXTENSION=None
 CUT_LINE_TYPE=None
 CUT_MARK_SYMBOL=None
 CUT_MARK_SYMBOL_SIZE=None
 CWP_ADD_GRID_PREFIX=None
 CWP_ADD_GRID_SUFFIX=None
 CWP_ADD_LEVEL_PREFIX=None
 CWP_ADD_LEVEL_SUFFIX=None
 CWP_COPY_FLOOR_INSERTS=None
 CWP_COPY_ROOF_INSERTS=None
 CWP_COPY_WALL_INSERTS=None
 CWP_LEVEL_OFFSET=None
 CWP_LINKED_ROOM_PARAMS=None
 CWP_LINKED_ROOM_PHASES=None
 CWP_REUSE_EXISTING_GRIDS=None
 CWP_REUSE_EXISTING_LEVELS=None
 CWP_REUSE_GRIDS_SAME_NAME=None
 CWP_REUSE_LEVELS_SAME_NAME=None
 CWP_SPLIT_COLUMNS_AT_LEVELS=None
 DATUM_BUBBLE_END_1=None
 DATUM_BUBBLE_END_2=None
 DATUM_BUBBLE_LOCATION_IN_ELEV=None
 DATUM_PLANE_DEFINES_ORIGIN=None
 DATUM_PLANE_DEFINES_WALL_CLOSURE=None
 DATUM_TEXT=None
 DATUM_VOLUME_OF_INTEREST=None
 DEBUGTAB_DATABOUNDCONTROLSDEMO_BOOLEAN=None
 DEBUGTAB_DATABOUNDCONTROLSDEMO_DOUBLE=None
 DEBUGTAB_DATABOUNDCONTROLSDEMO_ENUM=None
 DEBUGTAB_DATABOUNDCONTROLSDEMO_INTEGER=None
 DECAL_ATTRIBUTES=None
 DECAL_HEIGHT=None
 DECAL_LOCK_PROPORTIONS=None
 DECAL_SUBCATEGORY_ID=None
 DECAL_WIDTH=None
 DEFAULT_CONSTRUCTION_EXT_WALL_UNDERGROUND=None
 DEFAULT_CONSTRUCTION_MASS_EXTERIOR_WALL=None
 DEFAULT_CONSTRUCTION_MASS_FLOOR=None
 DEFAULT_CONSTRUCTION_MASS_GLAZING=None
 DEFAULT_CONSTRUCTION_MASS_INTERIOR_WALL=None
 DEFAULT_CONSTRUCTION_MASS_OPENING=None
 DEFAULT_CONSTRUCTION_MASS_ROOF=None
 DEFAULT_CONSTRUCTION_MASS_SHADE=None
 DEFAULT_CONSTRUCTION_MASS_SKYLIGHT=None
 DEFAULT_CONSTRUCTION_MASS_SLAB=None
 DEFAULT_VIEW_TEMPLATE=None
 DEFINES_CONSTANT_HEIGHT=None
 DESIGN_OPTION_ID=None
 DESIGN_OPTION_PARAM=None
 DIAMETER_SYMBOL_LOCATION=None
 DIAMETER_SYMBOL_TEXT=None
 DIM_DISPLAY_EQ=None
 DIM_ISREPORTING=None
 DIM_LABEL=None
 DIM_LABEL_GP_SHOW=None
 DIM_LABEL_IS_INSTANCE=None
 DIM_LEADER=None
 DIM_LEADER_ARROWHEAD=None
 DIM_LEADER_DISPLAY_CONDITION=None
 DIM_LEADER_SHOULDER_LENGTH=None
 DIM_LEADER_TYPE=None
 DIM_LINE_EXTENSION=None
 DIM_NOT_MODIFIABLE=None
 DIM_REFERENCE_COUNT=None
 DIM_STYLE_ANGULAR_UNITS=None
 DIM_STYLE_ANGULAR_UNITS_ALT=None
 DIM_STYLE_CENTERLINE_PATTERN=None
 DIM_STYLE_CENTERLINE_SYMBOL=None
 DIM_STYLE_CENTERLINE_TICK_MARK=None
 DIM_STYLE_DIM_LINE_SNAP_DIST=None
 DIM_STYLE_FLIPPED_DIM_LINE_EXTENSION=None
 DIM_STYLE_INTERIOR_TICK_MARK=None
 DIM_STYLE_LEADER_TICK_MARK=None
 DIM_STYLE_LINEAR_UNITS=None
 DIM_STYLE_LINEAR_UNITS_ALT=None
 DIM_STYLE_READ_CONVENTION=None
 DIM_STYLE_SHOW_OPENING_HT=None
 DIM_STYLE_SUPPRESS_SPACES=None
 DIM_TEXT_BACKGROUND=None
 DIM_TEXT_LOCATION_FOR_LEADER=None
 DIM_TOTAL_LENGTH=None
 DIM_TO_INSERTS=None
 DIM_TO_INSERT_TYPE=None
 DIM_TO_INTERSECTING_GRIDS=None
 DIM_TO_INTERSECTING_WALLS=None
 DIM_VALUE_ANGLE=None
 DIM_VALUE_LENGTH=None
 DIM_WITNS_LINE_CNTRL=None
 DIM_WITNS_LINE_EXTENSION_BELOW=None
 DISPLACED_ELEMENT_DISPLACEMENT_X=None
 DISPLACED_ELEMENT_DISPLACEMENT_Y=None
 DISPLACED_ELEMENT_DISPLACEMENT_Z=None
 DISPLACEMENT_PATH_DEPTH=None
 DISPLACEMENT_PATH_STYLE=None
 DISTANCE_TO_CUT_MARK=None
 DIVIDEDPATH_BEGINNING_INDENT=None
 DIVIDEDPATH_DISPLAY_NODES=None
 DIVIDEDPATH_DISPLAY_NODE_NUMBERS=None
 DIVIDEDPATH_DISPLAY_REFERENCE_CURVES=None
 DIVIDEDPATH_DISTANCE=None
 DIVIDEDPATH_END_INDENT=None
 DIVIDEDPATH_FLIP_DIRECTION=None
 DIVIDEDPATH_JUSTIFICATION=None
 DIVIDEDPATH_LAYOUT=None
 DIVIDEDPATH_LAYOUT_FIXED_NUM_POINT=None
 DIVIDEDPATH_MAX_DISTANCE=None
 DIVIDEDPATH_MEASUREMENT_TYPE=None
 DIVIDEDPATH_MERGED_POINT_NUM=None
 DIVIDEDPATH_MIN_DISTANCE=None
 DIVIDEDPATH_TOTAL_PATH_LENGTH=None
 DIVIDED_SURFACE_ALL_GRID_ROTATION=None
 DIVIDED_SURFACE_ALL_POINTS=None
 DIVIDED_SURFACE_COMPONENT_TRIM_TYPE=None
 DIVIDED_SURFACE_COVER_FACE_COMPLETELY=None
 DIVIDED_SURFACE_DISPLAY_COMPONENTS=None
 DIVIDED_SURFACE_DISPLAY_DISCARDEDDIVISIONLINES=None
 DIVIDED_SURFACE_DISPLAY_GRIDLINES=None
 DIVIDED_SURFACE_DISPLAY_NODES=None
 DIVIDED_SURFACE_DISPLAY_ORIGINAL_SURFACE=None
 DIVIDED_SURFACE_DISPLAY_PATTERN_FILL=None
 DIVIDED_SURFACE_DISPLAY_PATTERN_LINES=None
 DIVIDED_SURFACE_DISPLAY_SURFACE_OPTION=None
 DIVIDED_SURFACE_EDGE_NUMBER=None
 DIVIDED_SURFACE_FACET_NUMBER=None
 DIVIDED_SURFACE_GRIDLINES_STYLE=None
 DIVIDED_SURFACE_GRID_OPTION_PARAM_1=None
 DIVIDED_SURFACE_GRID_OPTION_PARAM_2=None
 DIVIDED_SURFACE_OFFSET_FROM_SURFACE=None
 DIVIDED_SURFACE_ORIGINAL_SURFACE_MATERIAL=None
 DIVIDED_SURFACE_PATTERN=None
 DIVIDED_SURFACE_PATTERN_FILL_MATERIAL=None
 DIVIDED_SURFACE_PATTERN_FLIP=None
 DIVIDED_SURFACE_PATTERN_INDENT_1=None
 DIVIDED_SURFACE_PATTERN_INDENT_2=None
 DIVIDED_SURFACE_PATTERN_LINES_STYLE=None
 DIVIDED_SURFACE_PATTERN_MIRROR=None
 DIVIDED_SURFACE_PATTERN_ROTATION_ANGLE=None
 DIVIDED_SURFACE_POINT_NUMBER=None
 DIVIDED_SURFACE_RULE_1_SUSPENSION=None
 DIVIDED_SURFACE_RULE_2_SUSPENSION=None
 DIVIDED_SURFACE_SURFACE_AREA=None
 DIVIDED_SURFACE_TILE_BORDER=None
 DIVIDED_SURFACE_TOTAL_EDGE_LENGTH=None
 DIVISION_PATTERN=None
 DIVISION_PROFILE_WIDTH=None
 DIVISION_RULE_PARAM=None
 DIVISION_SKETCH_CURVE_DIVISION_PARAMS_OVERRIDE_PARAM=None
 DIVISION_SKETCH_CURVE_EXTENTD_TO_SILH_PARAM=None
 DOOR_CONSTRUCTION_TYPE=None
 DOOR_COST=None
 DOOR_FINISH=None
 DOOR_FIRE_RATING=None
 DOOR_FRAME_MATERIAL=None
 DOOR_FRAME_TYPE=None
 DOOR_HEIGHT=None
 DOOR_NUMBER=None
 DOOR_OPERATION_TYPE=None
 DOOR_THICKNESS=None
 DOOR_WIDTH=None
 DPART_AREA_COMPUTED=None
 DPART_BASE_LEVEL=None
 DPART_BASE_LEVEL_BY_ORIGINAL=None
 DPART_CAN_HOST_REBAR=None
 DPART_EXCLUDED=None
 DPART_HEIGHT_COMPUTED=None
 DPART_LAYER_CONSTRUCTION=None
 DPART_LAYER_FUNCTION=None
 DPART_LAYER_WIDTH=None
 DPART_LENGTH_COMPUTED=None
 DPART_MATERIAL_BY_ORIGINAL=None
 DPART_MATERIAL_ID_PARAM=None
 DPART_ORIGINAL_CATEGORY=None
 DPART_ORIGINAL_CATEGORY_ID=None
 DPART_ORIGINAL_FAMILY=None
 DPART_ORIGINAL_TYPE=None
 DPART_PHASE_CREATED_BY_ORIGINAL=None
 DPART_PHASE_DEMOLISHED_BY_ORIGINAL=None
 DPART_SHAPE_MODIFIED=None
 DPART_VOLUME_COMPUTED=None
 DRAW_FOR_EACH_RUN=None
 DUCT_TERMINAL_ENGAGEMENT_LENGTH=None
 EDGE_LINEWORK=None
 EDITED_BY=None
 ELECTICAL_EQUIP_VOLTAGE=None
 ELECTICAL_EQUIP_WATTAGE=None
 ELEMENT_IS_CUTTING=None
 ELEMENT_LOCKED_PARAM=None
 ELEM_CATEGORY_PARAM=None
 ELEM_CATEGORY_PARAM_MT=None
 ELEM_DELETABLE_IN_FAMILY=None
 ELEM_FAMILY_AND_TYPE_PARAM=None
 ELEM_FAMILY_PARAM=None
 ELEM_IS_REFERENCE=None
 ELEM_PARTITION_PARAM=None
 ELEM_REFERENCE_NAME=None
 ELEM_REFERENCE_NAME_2D_XZ=None
 ELEM_ROOM_ID=None
 ELEM_ROOM_NAME=None
 ELEM_ROOM_NUMBER=None
 ELEM_TYPE_LABEL=None
 ELEM_TYPE_PARAM=None
 ELEVATN_TAG=None
 ELEV_ARROW_ANGLE=None
 ELEV_ARROW_FILLED=None
 ELEV_ASSOC_DATUM=None
 ELEV_REFERENCE_LABEL_POS=None
 ELEV_SHAPE=None
 ELEV_SHOW_VIEW_NAME=None
 ELEV_SYMBOL_ID=None
 ELEV_TEXT_POS=None
 ELEV_VIEW_NAME_POS=None
 ELEV_WIDTH=None
 ELLIPSE_FOCUS_MRK_VISIBLE=None
 ELLIPSE_X_PARAM=None
 ELLIPSE_Y_PARAM=None
 END_EXTENSION=None
 END_JOIN_CUTBACK=None
 END_TREATMENT=None
 END_Y_JUSTIFICATION=None
 END_Y_OFFSET_VALUE=None
 END_Z_JUSTIFICATION=None
 END_Z_OFFSET_VALUE=None
 ENERGY_ANALYSIS_ADVANCED_OPTIONS=None
 ENERGY_ANALYSIS_BUILDING_OPERATING_SCHEDULE=None
 ENERGY_ANALYSIS_CONCEPTUAL_CONSTRUCTION=None
 ENERGY_ANALYSIS_CREATE_ANALYTICAL_MODEL=None
 ENERGY_ANALYSIS_GLAZING_IS_SHADED=None
 ENERGY_ANALYSIS_HVAC_SYSTEM=None
 ENERGY_ANALYSIS_MASSZONE_COREOFFSET=None
 ENERGY_ANALYSIS_MASSZONE_DIVIDEPERIMETER=None
 ENERGY_ANALYSIS_MASSZONE_USEENERGYDATASETTINGS=None
 ENERGY_ANALYSIS_MASS_ZONING=None
 ENERGY_ANALYSIS_OUTDOOR_AIR_INFORMATION_PARAM=None
 ENERGY_ANALYSIS_PERCENTAGE_GLAZING=None
 ENERGY_ANALYSIS_PERCENTAGE_SKYLIGHTS=None
 ENERGY_ANALYSIS_SHADE_DEPTH=None
 ENERGY_ANALYSIS_SILL_HEIGHT=None
 ENERGY_ANALYSIS_SKYLIGHT_WIDTH=None
 EQUALITY_FORMULA=None
 EQUALITY_TEXT_FOR_ANGULAR_DIM=None
 EQUALITY_TEXT_FOR_CONTINUOUS_LINEAR_DIM=None
 EQUALITY_WITNESS_DISPLAY=None
 EXTRUSION_AUTO_PARAMS=None
 EXTRUSION_END_PARAM=None
 EXTRUSION_LENGTH=None
 EXTRUSION_START_PARAM=None
 FABRICATION_BOTTOM_ELEVATION_INCLUDE_INSULATION_OF_PART=None
 FABRICATION_BOTTOM_ELEVATION_OF_PART=None
 FABRICATION_BOTTOM_OF_PART=None
 FABRICATION_CENTERLINE_ELEVATION_OF_PART=None
 FABRICATION_DOUBLEWALL_MATERIAL_ABBREVIATION=None
 FABRICATION_END_OFFSET_PARAM=None
 FABRICATION_FITTING_DESCRIPTION=None
 FABRICATION_INSULATION_ABBREVIATION=None
 FABRICATION_INSULATION_SPEC=None
 FABRICATION_INSULATION_SPECIFICATION_ABBREVIATION=None
 FABRICATION_LEVEL_PARAM=None
 FABRICATION_MATERIAL_ABBREVIATION=None
 FABRICATION_OFFSET_PARAM=None
 FABRICATION_PART_ALIAS=None
 FABRICATION_PART_ANGLE=None
 FABRICATION_PART_ANGLE_OPTION=None
 FABRICATION_PART_BOUGHT_OUT=None
 FABRICATION_PART_CUT_TYPE=None
 FABRICATION_PART_DEPTH_IN=None
 FABRICATION_PART_DEPTH_IN_OPTION=None
 FABRICATION_PART_DEPTH_OUT=None
 FABRICATION_PART_DEPTH_OUT_OPTION=None
 FABRICATION_PART_DIAMETER_IN=None
 FABRICATION_PART_DIAMETER_IN_OPTION=None
 FABRICATION_PART_DIAMETER_OUT=None
 FABRICATION_PART_DIAMETER_OUT_OPTION=None
 FABRICATION_PART_DOUBLEWALL_MATERIAL=None
 FABRICATION_PART_DOUBLEWALL_MATERIAL_AREA=None
 FABRICATION_PART_DOUBLEWALL_MATERIAL_THICKNESS=None
 FABRICATION_PART_INSULATION_AREA=None
 FABRICATION_PART_ITEM_NUMBER=None
 FABRICATION_PART_LENGTH=None
 FABRICATION_PART_LENGTH_OPTION=None
 FABRICATION_PART_LINING_AREA=None
 FABRICATION_PART_MATERIAL=None
 FABRICATION_PART_MATERIAL_THICKNESS=None
 FABRICATION_PART_NOTES=None
 FABRICATION_PART_SHEETMETAL_AREA=None
 FABRICATION_PART_TAKEOFF_DIALOG_PARAM=None
 FABRICATION_PART_WEIGHT=None
 FABRICATION_PART_WIDTH_IN=None
 FABRICATION_PART_WIDTH_IN_OPTION=None
 FABRICATION_PART_WIDTH_OUT=None
 FABRICATION_PART_WIDTH_OUT_OPTION=None
 FABRICATION_PIPE_INVERT_ELEVATION=None
 FABRICATION_PRODUCT_CODE=None
 FABRICATION_PRODUCT_DATA_FINISH_DESCRIPTION=None
 FABRICATION_PRODUCT_DATA_INSTALL_TYPE=None
 FABRICATION_PRODUCT_DATA_ITEM_DESCRIPTION=None
 FABRICATION_PRODUCT_DATA_LONG_DESCRIPTION=None
 FABRICATION_PRODUCT_DATA_MATERIAL_DESCRIPTION=None
 FABRICATION_PRODUCT_DATA_OEM=None
 FABRICATION_PRODUCT_DATA_PRODUCT=None
 FABRICATION_PRODUCT_DATA_RANGE=None
 FABRICATION_PRODUCT_DATA_SIZE_DESCRIPTION=None
 FABRICATION_PRODUCT_DATA_SPECIFICATION=None
 FABRICATION_PRODUCT_ENTRY=None
 FABRICATION_RELATIVE_FILENAME=None
 FABRICATION_ROUTING_SOLUTIONS_UI_PARAM=None
 FABRICATION_SERVICE_ABBREVIATION=None
 FABRICATION_SERVICE_NAME=None
 FABRICATION_SERVICE_PARAM=None
 FABRICATION_SET_UP_DOWN_TAG=None
 FABRICATION_SLOPE_PARAM=None
 FABRICATION_SPECIFICATION=None
 FABRICATION_SPECIFICATION_ABBREVIATION=None
 FABRICATION_SPOT_BOTTOM_ELEVATION_INCLUDE_INSULATION_OF_PART=None
 FABRICATION_SPOT_BOTTOM_ELEVATION_OF_PART=None
 FABRICATION_SPOT_TOP_ELEVATION_INCLUDE_INSULATION_OF_PART=None
 FABRICATION_SPOT_TOP_ELEVATION_OF_PART=None
 FABRICATION_START_OFFSET_PARAM=None
 FABRICATION_TOP_ELEVATION_INCLUDE_INSULATION_OF_PART=None
 FABRICATION_TOP_ELEVATION_OF_PART=None
 FABRICATION_TOP_OF_PART=None
 FABRICATION_VENDOR=None
 FABRICATION_VENDOR_CODE=None
 FABRIC_BEND_DIAMETER=None
 FABRIC_NUMBER=None
 FABRIC_PARAM_COVER_OFFSET=None
 FABRIC_PARAM_CUT_BY_HOST=None
 FABRIC_PARAM_CUT_OVERALL_LENGTH=None
 FABRIC_PARAM_CUT_OVERALL_WIDTH=None
 FABRIC_PARAM_CUT_SHEET_MASS=None
 FABRIC_PARAM_LAPSPLICE_POSITION=None
 FABRIC_PARAM_LOCATION_GENERIC=None
 FABRIC_PARAM_LOCATION_SLAB=None
 FABRIC_PARAM_LOCATION_WALL=None
 FABRIC_PARAM_MAJOR_LAPSPLICE_LENGTH=None
 FABRIC_PARAM_MINOR_LAPSPLICE_LENGTH=None
 FABRIC_PARAM_ROUNDING=None
 FABRIC_PARAM_SHARED_FAMILY_KEY=None
 FABRIC_PARAM_SHEET_TYPE=None
 FABRIC_PARAM_SPAN_SYM_BOTTOM=None
 FABRIC_PARAM_SPAN_SYM_D_BOTTOM=None
 FABRIC_PARAM_SPAN_SYM_D_LEFT=None
 FABRIC_PARAM_SPAN_SYM_D_RIGHT=None
 FABRIC_PARAM_SPAN_SYM_D_TOP=None
 FABRIC_PARAM_SPAN_SYM_LEFT=None
 FABRIC_PARAM_SPAN_SYM_RIGHT=None
 FABRIC_PARAM_SPAN_SYM_TOP=None
 FABRIC_PARAM_SPAN_TAG_COMPONENT_REFERENCE=None
 FABRIC_PARAM_TAG_VIEW=None
 FABRIC_PARAM_TOTAL_SHEET_MASS=None
 FABRIC_SHEET_DEFAULT_MAJOR_LAPSPLICE_LENGTH=None
 FABRIC_SHEET_DEFAULT_MINOR_LAPSPLICE_LENGTH=None
 FABRIC_SHEET_LENGTH=None
 FABRIC_SHEET_MAJOR_DIRECTION_WIRE_TYPE=None
 FABRIC_SHEET_MAJOR_END_OVERHANG=None
 FABRIC_SHEET_MAJOR_LAYOUT_PATTERN=None
 FABRIC_SHEET_MAJOR_NUMBER_OF_WIRES=None
 FABRIC_SHEET_MAJOR_REINFORCEMENT_AREA=None
 FABRIC_SHEET_MAJOR_SPACING=None
 FABRIC_SHEET_MAJOR_START_OVERHANG=None
 FABRIC_SHEET_MASS=None
 FABRIC_SHEET_MASSUNIT=None
 FABRIC_SHEET_MINOR_DIRECTION_WIRE_TYPE=None
 FABRIC_SHEET_MINOR_END_OVERHANG=None
 FABRIC_SHEET_MINOR_LAYOUT_PATTERN=None
 FABRIC_SHEET_MINOR_NUMBER_OF_WIRES=None
 FABRIC_SHEET_MINOR_REINFORCEMENT_AREA=None
 FABRIC_SHEET_MINOR_SPACING=None
 FABRIC_SHEET_MINOR_START_OVERHANG=None
 FABRIC_SHEET_OVERALL_LENGTH=None
 FABRIC_SHEET_OVERALL_WIDTH=None
 FABRIC_SHEET_PHYSICAL_MATERIAL_ASSET=None
 FABRIC_SHEET_WIDTH=None
 FABRIC_WIRE_DIAMETER=None
 FABRIC_WIRE_DISTANCE=None
 FABRIC_WIRE_LENGTH=None
 FABRIC_WIRE_TYPE=None
 FACEROOF_LEVEL_PARAM=None
 FACEROOF_OFFSET_PARAM=None
 FAMILY_ALLOW_CUT_WITH_VOIDS=None
 FAMILY_ALWAYS_VERTICAL=None
 FAMILY_AUTOJOIN=None
 FAMILY_BASE_LEVEL_OFFSET_PARAM=None
 FAMILY_BASE_LEVEL_PARAM=None
 FAMILY_CAN_HOST_REBAR=None
 FAMILY_CATEGORY_PSEUDO_PARAM=None
 FAMILY_CONTENT_PART_TYPE=None
 FAMILY_CURVE_ATTACHMENT_PROPORTION=None
 FAMILY_CURVE_GSTYLE_FOR_2010_MASS=None
 FAMILY_CURVE_GSTYLE_PLUS_INVISIBLE=None
 FAMILY_CURVE_GSTYLE_PLUS_INVISIBLE_MINUS_ANALYTICAL=None
 FAMILY_CURVE_GSTYLE_PLUS_INVISIBLE_PLUS_STICK_SYM=None
 FAMILY_CURVE_GSTYLE_PLUS_INVISIBLE_PLUS_STICK_SYM_MINUS_ANALYTICAL=None
 FAMILY_ELECTRICAL_MAINTAIN_ANNOTATION_ORIENTATION=None
 FAMILY_ELEM_SUBCATEGORY=None
 FAMILY_ENABLE_CUTTING_IN_VIEWS=None
 FAMILY_EXPORT_AS_GEOMETRY=None
 FAMILY_HEIGHT_PARAM=None
 FAMILY_HOSTING_BEHAVIOR=None
 FAMILY_IS_ELEVATION_MARK_BODY=None
 FAMILY_IS_PARAMETRIC=None
 FAMILY_KEEP_TEXT_READABLE=None
 FAMILY_KEYWORD_PROTECTED=None
 FAMILY_KEY_EXT_PARAM=None
 FAMILY_LEVEL_PARAM=None
 FAMILY_LINE_LENGTH_PARAM=None
 FAMILY_NAME_PSEUDO_PARAM=None
 FAMILY_RENDERING_TYPE=None
 FAMILY_RFA_PATH_PSEUDO_PARAM=None
 FAMILY_ROTATE_WITH_COMPONENT=None
 FAMILY_ROUGH_HEIGHT_PARAM=None
 FAMILY_ROUGH_WIDTH_PARAM=None
 FAMILY_ROUNDCONNECTOR_DIMENSIONTYPE=None
 FAMILY_SHARED=None
 FAMILY_STRUCT_FOOTING_USE_CAP_TOP=None
 FAMILY_STRUCT_MATERIAL_TYPE=None
 FAMILY_SYMBOLIC_REP=None
 FAMILY_THICKNESS_PARAM=None
 FAMILY_TOP_LEVEL_OFFSET_PARAM=None
 FAMILY_TOP_LEVEL_PARAM=None
 FAMILY_USAGE_PSEUDO_PARAM=None
 FAMILY_USE_PRECUT_SHAPE=None
 FAMILY_WIDTH_PARAM=None
 FAMILY_WINDOW_INSET_PARAM=None
 FAMILY_WORK_PLANE_BASED=None
 FAMILY_WPB_DEFAULT_ELEVATION=None
 FAM_PROFILE_DEFINITION=None
 FAM_PROFILE_USAGE=None
 FASCIA_DEPTH_PARAM=None
 FASCIA_MATERIAL_PARAM=None
 FASCIA_PROFILE_PARAM=None
 FBX_ASSET_TYPE=None
 FBX_LIGHT_AT_A_DISTANCE=None
 FBX_LIGHT_BALLAST_LOSS=None
 FBX_LIGHT_COLOR_FILTER=None
 FBX_LIGHT_DIMMING_LIGHT_COLOR=None
 FBX_LIGHT_EFFICACY=None
 FBX_LIGHT_EMIT_CIRCLE_DIAMETER=None
 FBX_LIGHT_EMIT_LINE_LENGTH=None
 FBX_LIGHT_EMIT_RECTANGLE_LENGTH=None
 FBX_LIGHT_EMIT_RECTANGLE_WIDTH=None
 FBX_LIGHT_EMIT_SHAPE_VISIBLE=None
 FBX_LIGHT_ILLUMINANCE=None
 FBX_LIGHT_INITIAL_COLOR_CTRL=None
 FBX_LIGHT_INITIAL_COLOR_NAME=None
 FBX_LIGHT_INITIAL_COLOR_TEMPERATURE=None
 FBX_LIGHT_INITIAL_INTENSITY=None
 FBX_LIGHT_INITIAL_INTENSITY_INPUT_METHOD=None
 FBX_LIGHT_LAMP_LUMEN_DEPR=None
 FBX_LIGHT_LAMP_TILT_LOSS=None
 FBX_LIGHT_LIMUNOUS_FLUX=None
 FBX_LIGHT_LIMUNOUS_INTENSITY=None
 FBX_LIGHT_LOSS_FACTOR_CTRL=None
 FBX_LIGHT_LOSS_FACTOR_METHOD=None
 FBX_LIGHT_LUMENAIRE_DIRT=None
 FBX_LIGHT_PHOTOMETRICS=None
 FBX_LIGHT_PHOTOMETRICS_FAM=None
 FBX_LIGHT_PHOTOMETRIC_FILE=None
 FBX_LIGHT_PHOTOMETRIC_FILE_CACHE=None
 FBX_LIGHT_SOURCE_DIAMETER=None
 FBX_LIGHT_SOURCE_LENGTH=None
 FBX_LIGHT_SPOT_BEAM_ANGLE=None
 FBX_LIGHT_SPOT_FIELD_ANGLE=None
 FBX_LIGHT_SPOT_TILT_ANGLE=None
 FBX_LIGHT_SURFACE_LOSS=None
 FBX_LIGHT_TEMPERATURE_LOSS=None
 FBX_LIGHT_TOTAL_LIGHT_LOSS=None
 FBX_LIGHT_VOLTAGE_LOSS=None
 FBX_LIGHT_WATTAGE=None
 FILLED_REGION_BACKGROUND=None
 FILL_PATTERN_ID_PARAM=None
 FILL_PATTERN_ID_PARAM_NO_NO=None
 FIRE_RATING=None
 FIXED_ROTATION=None
 FLEXIBLE_INSTANCE_FLIP=None
 FLOOR_ATTR_DEFAULT_HEIGHT_PARAM=None
 FLOOR_ATTR_DEFAULT_THICKNESS_PARAM=None
 FLOOR_ATTR_THICKNESS_PARAM=None
 FLOOR_HEIGHTABOVELEVEL_PARAM=None
 FLOOR_PARAM_IS_STRUCTURAL=None
 FLOOR_PARAM_SPAN_DIRECTION=None
 FLOOR_STRUCTURE_ID_PARAM=None
 FOLLOW_SURFACE=None
 FRAMING_LENGTH_ROUNDOFF=None
 FUNCTION_PARAM=None
 FURNITURE_HEIGHT=None
 FURNITURE_THICKNESS=None
 FURNITURE_WIDTH=None
 GBXML_EDIT_DATA_PARAM=None
 GENERIC_CONSTRUCTION_TYPE=None
 GENERIC_DEPTH=None
 GENERIC_FINISH=None
 GENERIC_HEIGHT=None
 GENERIC_THICKNESS=None
 GENERIC_WIDTH=None
 GEOM_VISIBILITY_PARAM=None
 GEO_LOCATION=None
 GRAPHIC_DISPLAY_OPTIONS=None
 GRAPHIC_DISPLAY_OPTIONS_BACKGROUND=None
 GRAPHIC_DISPLAY_OPTIONS_FOG=None
 GRAPHIC_DISPLAY_OPTIONS_LIGHTING=None
 GRAPHIC_DISPLAY_OPTIONS_MODEL=None
 GRAPHIC_DISPLAY_OPTIONS_PHOTO_EXPOSURE=None
 GRAPHIC_DISPLAY_OPTIONS_SHADOWS=None
 GRAPHIC_DISPLAY_OPTIONS_SKETCHY_LINES=None
 GRAPHIC_DISPLAY_OPTIONS_SS_INTENSITY=None
 GRIDLINE_SPEC_STATUS=None
 GRID_BANK_COL_NUM=None
 GRID_BANK_COL_WIDTH=None
 GRID_BANK_ROW_HEIGHT=None
 GRID_BANK_ROW_NUM=None
 GRID_BUBBLE_END_1=None
 GRID_BUBBLE_END_2=None
 GRID_BUBBLE_LINE_PEN=None
 GRID_CENTER_SEGMENT_COLOR=None
 GRID_CENTER_SEGMENT_PATTERN=None
 GRID_CENTER_SEGMENT_STYLE=None
 GRID_CENTER_SEGMENT_WEIGHT=None
 GRID_END_SEGMENTS_LENGTH=None
 GRID_END_SEGMENT_COLOR=None
 GRID_END_SEGMENT_PATTERN=None
 GRID_END_SEGMENT_WEIGHT=None
 GRID_HEAD_TAG=None
 GROUPNAME_PARAM=None
 GROUP_ALLOWED_VIEW_TYPES=None
 GROUP_ATTACHED_PARENT_NAME=None
 GROUP_LEVEL=None
 GROUP_OFFSET_FROM_LEVEL=None
 GUIDE_GRID_NAME_PARAM=None
 GUIDE_GRID_SPACING_PARAM=None
 GUTTER_MATERIAL_PARAM=None
 GUTTER_PROFILE_PARAM=None
 HANDRAIL_HAND_CLEARANCE_PARAM=None
 HANDRAIL_HEIGHT_PARAM=None
 HANDRAIL_PROJECTION_PARAM=None
 HANDRAIL_SUPPORTS_JUSTIFICATION_PARAM=None
 HANDRAIL_SUPPORTS_LAYOUT_PARAM=None
 HANDRAIL_SUPPORTS_NUMBER_PARAM=None
 HANDRAIL_SUPPORTS_SPACING_PARAM=None
 HANDRAIL_SUPPORTS_TYPE_PARAM=None
 HEAD_ON_PLACEMENT_METHOD=None
 HEAVY_END_PEN=None
 HEAVY_TICK_MARK_PEN=None
 HOST_AREA_COMPUTED=None
 HOST_ID_PARAM=None
 HOST_PANEL_SCHEDULE_AS_PANEL_PARAM=None
 HOST_PERIMETER_COMPUTED=None
 HOST_SSE_CURVED_EDGE_CONDITION_PARAM=None
 HOST_VOLUME_COMPUTED=None
 ICON_INDEX_PARAM=None
 ID_PARAM=None
 IFC_BUILDING_GUID=None
 IFC_GUID=None
 IFC_PROJECT_GUID=None
 IFC_SITE_GUID=None
 IFC_TYPE_GUID=None
 IMPORT_ADT_COMPONENTS_DESC=None
 IMPORT_ADT_ENTITY_HEIGHT=None
 IMPORT_ADT_ENTITY_LENGTH=None
 IMPORT_ADT_ENTITY_ROLL=None
 IMPORT_ADT_ENTITY_STRUCT_TYPE=None
 IMPORT_ADT_ENTITY_STYLE=None
 IMPORT_ADT_ENTITY_THICKNESS=None
 IMPORT_ADT_ENTITY_TYPE=None
 IMPORT_ADT_ENTITY_WIDTH=None
 IMPORT_BACKGROUND=None
 IMPORT_BASE_LEVEL=None
 IMPORT_BASE_LEVEL_OFFSET=None
 IMPORT_DISPLAY_UNITS=None
 IMPORT_INSTANCE_SCALE=None
 IMPORT_SCALE=None
 IMPORT_SYMBOL_NAME=None
 INSTANCE_ELEVATION_PARAM=None
 INSTANCE_FREE_HOST_OFFSET_PARAM=None
 INSTANCE_FREE_HOST_PARAM=None
 INSTANCE_HEAD_HEIGHT_PARAM=None
 INSTANCE_LENGTH_PARAM=None
 INSTANCE_MOVES_WITH_GRID_PARAM=None
 INSTANCE_MOVE_BASE_WITH_GRIDS=None
 INSTANCE_MOVE_TOP_WITH_GRIDS=None
 INSTANCE_OFFSET_POS_PARAM=None
 INSTANCE_REFERENCE_LEVEL_PARAM=None
 INSTANCE_SCHEDULE_ONLY_LEVEL_PARAM=None
 INSTANCE_SILL_HEIGHT_PARAM=None
 INSTANCE_STRUCT_USAGE_PARAM=None
 INSULATION_SCALE=None
 INSULATION_WIDTH=None
 INTERIOR_TICK_DISPLAY=None
 INVALID=None
 IS_VISIBLE_PARAM=None
 JOIN_STRENGTH_ORDER=None
 JOIST_SYSTEM_CLEAR_SPACING_PARAM=None
 JOIST_SYSTEM_ELEM_TAG_NEW_MEMBERS_VIEW=None
 JOIST_SYSTEM_FIXED_SPACING_PARAM=None
 JOIST_SYSTEM_JUSTIFICATION_PARAM=None
 JOIST_SYSTEM_LAYOUT_RULE_PARAM=None
 JOIST_SYSTEM_MAXIMUM_SPACING_PARAM=None
 JOIST_SYSTEM_NEW_BEAM_TYPE_NO_FAM_NAME_PARAM=None
 JOIST_SYSTEM_NEW_BEAM_TYPE_PARAM=None
 JOIST_SYSTEM_NUMBER_OF_LINES_PARAM=None
 JOIST_SYSTEM_NUM_BEAMS_SAME_TYPE=None
 JOIST_SYSTEM_SPACING_PARAM=None
 KEEP_READABLE=None
 KEYNOTE_NUMBER=None
 KEYNOTE_PARAM=None
 KEYNOTE_TEXT=None
 KEY_SOURCE_PARAM=None
 KEY_VALUE=None
 LAYOUTNODE_CURVETYPE_PARAM=None
 LEADER_ARROWHEAD=None
 LEADER_ARROW_WIDTH=None
 LEADER_LEFT_ATTACHMENT=None
 LEADER_LINE=None
 LEADER_OFFSET_SHEET=None
 LEADER_RIGHT_ATTACHMENT=None
 LEGEND_COMPONENT=None
 LEGEND_COMPONENT_DETAIL_LEVEL=None
 LEGEND_COMPONENT_LENGTH=None
 LEGEND_COMPONENT_VIEW=None
 LEVEL_ATTR_ROOM_COMPUTATION_AUTOMATIC=None
 LEVEL_ATTR_ROOM_COMPUTATION_HEIGHT=None
 LEVEL_DATA_FLOOR_AREA=None
 LEVEL_DATA_FLOOR_PERIMETER=None
 LEVEL_DATA_MASS_FAMILY_AND_TYPE_PARAM=None
 LEVEL_DATA_MASS_FAMILY_PARAM=None
 LEVEL_DATA_MASS_INSTANCE_COMMENTS=None
 LEVEL_DATA_MASS_TYPE_COMMENTS=None
 LEVEL_DATA_MASS_TYPE_DESCRIPTION=None
 LEVEL_DATA_MASS_TYPE_PARAM=None
 LEVEL_DATA_OWNING_LEVEL=None
 LEVEL_DATA_SPACE_USAGE=None
 LEVEL_DATA_SURFACE_AREA=None
 LEVEL_DATA_VOLUME=None
 LEVEL_ELEV=None
 LEVEL_HEAD_TAG=None
 LEVEL_IS_BUILDING_STORY=None
 LEVEL_IS_GROUND_PLANE=None
 LEVEL_IS_STRUCTURAL=None
 LEVEL_NAME=None
 LEVEL_PARAM=None
 LEVEL_RELATIVE_BASE_TYPE=None
 LEVEL_ROOM_COMPUTATION_HEIGHT=None
 LEVEL_UP_TO_LEVEL=None
 LIGHTING_FIXTURE_LAMP=None
 LIGHTING_FIXTURE_LIGHT_EMITTER=None
 LIGHTING_FIXTURE_WATTAGE=None
 LINEAR_DIM_TYPE=None
 LINE_COLOR=None
 LINE_PATTERN=None
 LINE_PEN=None
 LINE_SHAPE_AT_CORNER=None
 LOAD_ALL_NON_0_LOADS=None
 LOAD_AREA_AREA=None
 LOAD_AREA_FORCE_FX1=None
 LOAD_AREA_FORCE_FX2=None
 LOAD_AREA_FORCE_FX3=None
 LOAD_AREA_FORCE_FY1=None
 LOAD_AREA_FORCE_FY2=None
 LOAD_AREA_FORCE_FY3=None
 LOAD_AREA_FORCE_FZ1=None
 LOAD_AREA_FORCE_FZ2=None
 LOAD_AREA_FORCE_FZ3=None
 LOAD_AREA_IS_PROJECTED=None
 LOAD_ARROW_SEPARATION=None
 LOAD_ATTR_AREA_FORCE_SCALE_FACTOR=None
 LOAD_ATTR_FORCE_ARROW_TYPE=None
 LOAD_ATTR_FORCE_SCALE_FACTOR=None
 LOAD_ATTR_LINEAR_FORCE_SCALE_FACTOR=None
 LOAD_ATTR_MOMENT_ARROW_ARC=None
 LOAD_ATTR_MOMENT_ARROW_LINE=None
 LOAD_ATTR_MOMENT_SCALE_FACTOR=None
 LOAD_CASE_ID=None
 LOAD_CASE_NAME=None
 LOAD_CASE_NATURE=None
 LOAD_CASE_NATURE_TEXT=None
 LOAD_CASE_NUMBER=None
 LOAD_CASE_SUBCATEGORY=None
 LOAD_COMBINATION_FACTOR=None
 LOAD_COMBINATION_NAME=None
 LOAD_COMMENTS=None
 LOAD_DESCRIPTION=None
 LOAD_FORCE_FX=None
 LOAD_FORCE_FY=None
 LOAD_FORCE_FZ=None
 LOAD_IS_CREATED_BY_API=None
 LOAD_IS_HOSTED=None
 LOAD_IS_PROJECTED=None
 LOAD_IS_REACTION=None
 LOAD_IS_UNIFORM=None
 LOAD_LINEAR_FORCE_FX1=None
 LOAD_LINEAR_FORCE_FX2=None
 LOAD_LINEAR_FORCE_FY1=None
 LOAD_LINEAR_FORCE_FY2=None
 LOAD_LINEAR_FORCE_FZ1=None
 LOAD_LINEAR_FORCE_FZ2=None
 LOAD_LINEAR_LENGTH=None
 LOAD_MOMENT_MX=None
 LOAD_MOMENT_MX1=None
 LOAD_MOMENT_MX2=None
 LOAD_MOMENT_MY=None
 LOAD_MOMENT_MY1=None
 LOAD_MOMENT_MY2=None
 LOAD_MOMENT_MZ=None
 LOAD_MOMENT_MZ1=None
 LOAD_MOMENT_MZ2=None
 LOAD_NATURE_NAME=None
 LOAD_USAGE_NAME=None
 LOAD_USE_LOCAL_COORDINATE_SYSTEM=None
 LOCKED_BASE_OFFSET=None
 LOCKED_END_OFFSET=None
 LOCKED_START_OFFSET=None
 LOCKED_TOP_OFFSET=None
 LV_MULLION_LEG1=None
 LV_MULLION_LEG2=None
 MARKUPS_CREATED=None
 MARKUPS_CREATOR=None
 MARKUPS_HISTORY=None
 MARKUPS_LABEL=None
 MARKUPS_MODIFIED=None
 MARKUPS_NOTES=None
 MARKUPS_PRIVATE=None
 MARKUPS_STATUS=None
 MASSING_INTEGRATION_LEVEL=None
 MASS_DATA_CONCEPTUAL_CONSTRUCTION=None
 MASS_DATA_GLAZING_IS_SHADED=None
 MASS_DATA_MASS_EXTERIOR_WALL_AREA=None
 MASS_DATA_MASS_INTERIOR_WALL_AREA=None
 MASS_DATA_MASS_OPENING_AREA=None
 MASS_DATA_MASS_ROOF_AREA=None
 MASS_DATA_MASS_SKYLIGHT_AREA=None
 MASS_DATA_MASS_WINDOW_AREA=None
 MASS_DATA_PERCENTAGE_GLAZING=None
 MASS_DATA_PERCENTAGE_SKYLIGHTS=None
 MASS_DATA_SHADE_DEPTH=None
 MASS_DATA_SILL_HEIGHT=None
 MASS_DATA_SKYLIGHT_WIDTH=None
 MASS_DATA_SLAB=None
 MASS_DATA_SUBCATEGORY=None
 MASS_DATA_SURFACE_DATA_SOURCE=None
 MASS_DATA_UNDERGROUND=None
 MASS_FLOOR_AREA_LEVELS=None
 MASS_GROSS_AREA=None
 MASS_GROSS_SURFACE_AREA=None
 MASS_GROSS_VOLUME=None
 MASS_SURFACEDATA_MATERIAL=None
 MASS_ZONE_CONDITION_TYPE_PARAM=None
 MASS_ZONE_FLOOR_AREA=None
 MASS_ZONE_MATERIAL=None
 MASS_ZONE_SPACE_TYPE_PARAM=None
 MASS_ZONE_VOLUME=None
 MATCHLINE_BOTTOM_OFFSET=None
 MATCHLINE_BOTTOM_PLANE=None
 MATCHLINE_TOP_OFFSET=None
 MATCHLINE_TOP_PLANE=None
 MATERIAL_AREA=None
 MATERIAL_ASPAINT=None
 MATERIAL_ASSET_PARAM_ASSET_LIB_ID=None
 MATERIAL_ASSET_PARAM_COMMON_SHARED_ASSET=None
 MATERIAL_ASSET_PARAM_EXTERNAL_MATERIAL_ID=None
 MATERIAL_ASSET_PARAM_SOURCE=None
 MATERIAL_ASSET_PARAM_SOURCE_URL=None
 MATERIAL_ID_PARAM=None
 MATERIAL_NAME=None
 MATERIAL_PARAM_COLOR=None
 MATERIAL_PARAM_GLOW=None
 MATERIAL_PARAM_SHININESS=None
 MATERIAL_PARAM_SMOOTHNESS=None
 MATERIAL_PARAM_TRANSPARENCY=None
 MATERIAL_VOLUME=None
 MEASURE_FROM_STRUCTURE=None
 MEP_PROFILE_TYPE_PARAM=None
 MODEL_CATEGORY_ID_PARAM=None
 MODEL_GRAPHICS_STYLE=None
 MODEL_GRAPHICS_STYLE_ANON_DRAFT=None
 MODEL_OR_SYMBOLIC=None
 MODEL_TEXT_SIZE=None
 MULLION_ANGLE=None
 MULLION_CORNER_TYPE=None
 MULLION_DEPTH=None
 MULLION_DEPTH1=None
 MULLION_DEPTH2=None
 MULLION_FAM_TYPE=None
 MULLION_OFFSET=None
 MULLION_POSITION=None
 MULLION_PROFILE=None
 MULTISTORY_STAIRS_ACTUAL_TREAD_DEPTH=None
 MULTISTORY_STAIRS_REF_LEVEL=None
 MULTISTORY_STAIRS_RUN_BEGIN_WITH_RISER=None
 MULTISTORY_STAIRS_RUN_END_WITH_RISER=None
 MULTI_REFERENCE_ANNOTATION_DIMENSION_STYLE=None
 MULTI_REFERENCE_ANNOTATION_GROUP_TAG_HEADS=None
 MULTI_REFERENCE_ANNOTATION_REFERENCE_CATEGORY=None
 MULTI_REFERENCE_ANNOTATION_SHOW_DIMENSION_TEXT=None
 MULTI_REFERENCE_ANNOTATION_TAG_TYPE=None
 NODE_CONNECTION_STATUS=None
 NUMBER_PARTITION_PARAM=None
 NUMBER_SYSTEM_DISPLAY_RULE=None
 NUMBER_SYSTEM_JUSTIFY=None
 NUMBER_SYSTEM_JUSTIFY_OFFSET=None
 NUMBER_SYSTEM_ORIENTATION=None
 NUMBER_SYSTEM_REFERENCE=None
 NUMBER_SYSTEM_REFERENCE_OFFSET=None
 NUMBER_SYSTEM_TAG_TYPE=None
 NUMBER_SYSTEM_TEXT_SIZE=None
 OBJECT_STYLE_MATERIAL_ID_PARAM=None
 OFFSETFACES_SHOW_SHAPE_HANDLES=None
 OMNICLASS_CODE=None
 OMNICLASS_DESCRIPTION=None
 OPTION_NAME=None
 OPTION_SET_ID=None
 OPTION_SET_NAME=None
 ORDINATE_DIM_SETTING=None
 ORIENT_BY_VIEW=None
 PADDING_LENGTH=None
 PANEL_SCHEDULE_NAME=None
 PARTMAKER_PARAM_DIVISION_GAP=None
 PART_MAKER_DIVISION_PROFILE_OFFSET=None
 PART_MAKER_SPLITTER_PROFILE=None
 PART_MAKER_SPLITTER_PROFILE_EDGE_MATCH=None
 PART_MAKER_SPLITTER_PROFILE_FLIP_ACROSS=None
 PART_MAKER_SPLITTER_PROFILE_FLIP_ALONG=None
 PATH_REIN_ADDL_OFFSET=None
 PATH_REIN_ALTERNATING=None
 PATH_REIN_ALT_OFFSET=None
 PATH_REIN_END_HOOK_ORIENT_1_SLAB=None
 PATH_REIN_END_HOOK_ORIENT_1_WALL=None
 PATH_REIN_END_HOOK_ORIENT_2_SLAB=None
 PATH_REIN_END_HOOK_ORIENT_2_WALL=None
 PATH_REIN_END_HOOK_TYPE_1=None
 PATH_REIN_END_HOOK_TYPE_2=None
 PATH_REIN_END_SPANHOOK_ALT=None
 PATH_REIN_END_SPANHOOK_PRIM=None
 PATH_REIN_FACE_SLAB=None
 PATH_REIN_FACE_WALL=None
 PATH_REIN_HOOK_ORIENT_1_SLAB=None
 PATH_REIN_HOOK_ORIENT_1_WALL=None
 PATH_REIN_HOOK_ORIENT_2_SLAB=None
 PATH_REIN_HOOK_ORIENT_2_WALL=None
 PATH_REIN_HOOK_TYPE_1=None
 PATH_REIN_HOOK_TYPE_2=None
 PATH_REIN_LENGTH_1=None
 PATH_REIN_LENGTH_2=None
 PATH_REIN_NUMBER_OF_BARS=None
 PATH_REIN_SHAPE_1=None
 PATH_REIN_SHAPE_2=None
 PATH_REIN_SPACING=None
 PATH_REIN_SPANHOOK_ALT=None
 PATH_REIN_SPANHOOK_PRIM=None
 PATH_REIN_SPANLENGTH_ALT_OFFSET=None
 PATH_REIN_SPANLENGTH_BARLENGTH_ALT=None
 PATH_REIN_SPANLENGTH_BARLENGTH_PRIM=None
 PATH_REIN_SPANLENGTH_BOTTOM_ALT=None
 PATH_REIN_SPANLENGTH_BOTTOM_PRIM=None
 PATH_REIN_SPANLENGTH_TOP_ALT=None
 PATH_REIN_SUMMARY=None
 PATH_REIN_TYPE_1=None
 PATH_REIN_TYPE_2=None
 PATTERN_INDENT_1_FOR_DIVISION_RULE=None
 PATTERN_INDENT_2_FOR_DIVISION_RULE=None
 PATTERN_MIRROR_FOR_DIVISION_RULE=None
 PHASE_CREATED=None
 PHASE_DEMOLISHED=None
 PHASE_NAME=None
 PHASE_SEQUENCE_NUMBER=None
 PHY_MATERIAL_PARAM_AVERAGE_MODULUS=None
 PHY_MATERIAL_PARAM_BEHAVIOR=None
 PHY_MATERIAL_PARAM_BENDING=None
 PHY_MATERIAL_PARAM_BENDING_REINFORCEMENT=None
 PHY_MATERIAL_PARAM_CLASS=None
 PHY_MATERIAL_PARAM_COMPRESSION_PARALLEL=None
 PHY_MATERIAL_PARAM_COMPRESSION_PERPENDICULAR=None
 PHY_MATERIAL_PARAM_CONCRETE_COMPRESSION=None
 PHY_MATERIAL_PARAM_DAMPING_RATIO=None
 PHY_MATERIAL_PARAM_EXP_COEFF=None
 PHY_MATERIAL_PARAM_EXP_COEFF1=None
 PHY_MATERIAL_PARAM_EXP_COEFF2=None
 PHY_MATERIAL_PARAM_EXP_COEFF3=None
 PHY_MATERIAL_PARAM_EXP_COEFF_1=None
 PHY_MATERIAL_PARAM_EXP_COEFF_2=None
 PHY_MATERIAL_PARAM_FIVEPERCENT_MODULUS_OF_ELACTICITY=None
 PHY_MATERIAL_PARAM_GRADE=None
 PHY_MATERIAL_PARAM_LIGHT_WEIGHT=None
 PHY_MATERIAL_PARAM_MINIMUM_TENSILE_STRENGTH=None
 PHY_MATERIAL_PARAM_MINIMUM_YIELD_STRESS=None
 PHY_MATERIAL_PARAM_POISSON_MOD=None
 PHY_MATERIAL_PARAM_POISSON_MOD1=None
 PHY_MATERIAL_PARAM_POISSON_MOD2=None
 PHY_MATERIAL_PARAM_POISSON_MOD3=None
 PHY_MATERIAL_PARAM_POISSON_MOD_12=None
 PHY_MATERIAL_PARAM_POISSON_MOD_23=None
 PHY_MATERIAL_PARAM_REDUCTION_FACTOR=None
 PHY_MATERIAL_PARAM_RESISTANCE_CALC_STRENGTH=None
 PHY_MATERIAL_PARAM_SHEAR_MOD=None
 PHY_MATERIAL_PARAM_SHEAR_MOD1=None
 PHY_MATERIAL_PARAM_SHEAR_MOD2=None
 PHY_MATERIAL_PARAM_SHEAR_MOD3=None
 PHY_MATERIAL_PARAM_SHEAR_MOD_12=None
 PHY_MATERIAL_PARAM_SHEAR_PARALLEL=None
 PHY_MATERIAL_PARAM_SHEAR_PERPENDICULAR=None
 PHY_MATERIAL_PARAM_SHEAR_REINFORCEMENT=None
 PHY_MATERIAL_PARAM_SHEAR_STRENGTH_REDUCTION=None
 PHY_MATERIAL_PARAM_SPECIES=None
 PHY_MATERIAL_PARAM_STRUCTURAL_DENSITY=None
 PHY_MATERIAL_PARAM_STRUCTURAL_SPECIFIC_HEAT=None
 PHY_MATERIAL_PARAM_STRUCTURAL_THERMAL_TREATED=None
 PHY_MATERIAL_PARAM_SUBCLASS=None
 PHY_MATERIAL_PARAM_TENSION_PARALLEL=None
 PHY_MATERIAL_PARAM_TENSION_PERPENDICULAR=None
 PHY_MATERIAL_PARAM_THERMAL_CONDUCTIVITY=None
 PHY_MATERIAL_PARAM_THERMAL_CONDUCTIVITY_X=None
 PHY_MATERIAL_PARAM_THERMAL_CONDUCTIVITY_Y=None
 PHY_MATERIAL_PARAM_THERMAL_CONDUCTIVITY_Z=None
 PHY_MATERIAL_PARAM_TYPE=None
 PHY_MATERIAL_PARAM_UNIT_WEIGHT=None
 PHY_MATERIAL_PARAM_WOOD_CONSTRUCTION=None
 PHY_MATERIAL_PARAM_YOUNG_MOD=None
 PHY_MATERIAL_PARAM_YOUNG_MOD1=None
 PHY_MATERIAL_PARAM_YOUNG_MOD2=None
 PHY_MATERIAL_PARAM_YOUNG_MOD3=None
 PHY_MATERIAL_PARAM_YOUNG_MOD_1=None
 PHY_MATERIAL_PARAM_YOUNG_MOD_2=None
 PHY_MATERIAL_PROPERTIES=None
 PIPING_CONNECTION_TYPE=None
 PIPING_GENDER_TYPE=None
 PLAN_REGION_VIEW_RANGE=None
 PLAN_VIEW_CUT_PLANE_HEIGHT=None
 PLAN_VIEW_LEVEL=None
 PLAN_VIEW_NORTH=None
 PLAN_VIEW_RANGE=None
 PLAN_VIEW_TOP_CLIP_HEIGHT=None
 PLAN_VIEW_VIEW_DIR=None
 PLUMBING_FIXTURES_CW_CONNECTION=None
 PLUMBING_FIXTURES_DRAIN=None
 PLUMBING_FIXTURES_HW_CONNECTION=None
 PLUMBING_FIXTURES_SUPPLY_FITTING=None
 PLUMBING_FIXTURES_SUPPLY_PIPE=None
 PLUMBING_FIXTURES_TRAP=None
 PLUMBING_FIXTURES_VENT_CONNECTION=None
 PLUMBING_FIXTURES_WASTE_CONNECTION=None
 POCHE_MAT_ID=None
 POINTCLOUDINSTANCE_NAME=None
 POINTCLOUDTYPE_SCALE=None
 POINT_ADAPTIVE_CONSTRAINED=None
 POINT_ADAPTIVE_NUM_PARAM=None
 POINT_ADAPTIVE_ORIENTATION_TYPE=None
 POINT_ADAPTIVE_SHOW_NUMBER=None
 POINT_ADAPTIVE_TYPE_PARAM=None
 POINT_ELEMENT_ANGLE=None
 POINT_ELEMENT_CHORD_LENGTH=None
 POINT_ELEMENT_DRIVEN=None
 POINT_ELEMENT_DRIVING=None
 POINT_ELEMENT_HOSTED_ON_FACE_U_PARAM=None
 POINT_ELEMENT_HOSTED_ON_FACE_V_PARAM=None
 POINT_ELEMENT_HOSTED_PARAM=None
 POINT_ELEMENT_MEASUREMENT_TYPE=None
 POINT_ELEMENT_MEASURE_FROM=None
 POINT_ELEMENT_MIRRORED=None
 POINT_ELEMENT_NON_NORMALIZED_CURVE_PARAMATER=None
 POINT_ELEMENT_NORMALIZED_CURVE_PARAMATER=None
 POINT_ELEMENT_NORMALIZED_SEGMENT_LENGTH=None
 POINT_ELEMENT_OFFSET=None
 POINT_ELEMENT_ROTATION_ANGLE=None
 POINT_ELEMENT_SEGMENT_LENGTH=None
 POINT_ELEMENT_SHOW_NORMAL_PLANE_ONLY=None
 POINT_ELEMENT_SHOW_PLANES=None
 POINT_ELEMENT_ZFLIPPED=None
 POINT_ELEVATION=None
 POINT_FLEXIBLE_CONSTRAINED=None
 POINT_FLEXIBLE_NUM_PARAM=None
 POINT_FLEXIBLE_ORIENTATION_TYPE=None
 POINT_FLEXIBLE_SHOW_NUMBER=None
 POINT_NAME_PARAM=None
 POINT_VISIBILITY_PARAM=None
 PRIMARY_OPTION_ID=None
 PROFILE1_ANGLE=None
 PROFILE1_FAM_TYPE=None
 PROFILE1_FLIPPED_HOR=None
 PROFILE1_OFFSET_X=None
 PROFILE1_OFFSET_Y=None
 PROFILE2_ANGLE=None
 PROFILE2_FAM_TYPE=None
 PROFILE2_FLIPPED_HOR=None
 PROFILE2_OFFSET_X=None
 PROFILE2_OFFSET_Y=None
 PROFILE_ANGLE=None
 PROFILE_FAM_TYPE=None
 PROFILE_FAM_TYPE_PLUS_NONE=None
 PROFILE_FLIPPED_HOR=None
 PROFILE_OFFSET_X=None
 PROFILE_OFFSET_Y=None
 PROFILE_PARAM_ALONG_PATH=None
 PROJECTED_SURFACE_AREA=None
 PROJECT_ADDRESS=None
 PROJECT_AUTHOR=None
 PROJECT_BUILDING_NAME=None
 PROJECT_BUILDING_TYPE=None
 PROJECT_ISSUE_DATE=None
 PROJECT_NAME=None
 PROJECT_NUMBER=None
 PROJECT_ORGANIZATION_DESCRIPTION=None
 PROJECT_ORGANIZATION_NAME=None
 PROJECT_POSTAL_CODE=None
 PROJECT_REVISION_ENUMERATION=None
 PROJECT_REVISION_REVISION_DATE=None
 PROJECT_REVISION_REVISION_DESCRIPTION=None
 PROJECT_REVISION_REVISION_ISSUED=None
 PROJECT_REVISION_REVISION_ISSUED_BY=None
 PROJECT_REVISION_REVISION_ISSUED_TO=None
 PROJECT_REVISION_REVISION_NUM=None
 PROJECT_REVISION_SEQUENCE_NUM=None
 PROJECT_STATUS=None
 PROPERTY_AREA=None
 PROPERTY_AREA_OPEN=None
 PROPERTY_AREA_UNITS=None
 PROPERTY_LENGTH_UNITS=None
 PROPERTY_SEGMENT_BEARING=None
 PROPERTY_SEGMENT_DISTANCE=None
 PROPERTY_SEGMENT_E_W=None
 PROPERTY_SEGMENT_L_R=None
 PROPERTY_SEGMENT_N_S=None
 PROPERTY_SEGMENT_RADIUS=None
 PROPERTY_SEGMENT_SUBCATEGORY_ID=None
 PROPERTY_SET_DESCRIPTION=None
 PROPERTY_SET_KEYWORDS=None
 PROPERTY_SET_MATERIAL_ASPECT=None
 PROPERTY_SET_NAME=None
 PROPERTY_SUBCATEGORY_ID=None
 RADIAL_ARRAY_ARC_RADIUS=None
 RADIUS_SYMBOL_LOCATION=None
 RADIUS_SYMBOL_TEXT=None
 RAILING_SYSTEM_HANDRAILS_HEIGHT_PARAM=None
 RAILING_SYSTEM_HANDRAILS_LATTERAL_OFFSET=None
 RAILING_SYSTEM_HANDRAILS_POSITION_PARAM=None
 RAILING_SYSTEM_HANDRAILS_TYPES_PARAM=None
 RAILING_SYSTEM_SECONDARY_HANDRAILS_HEIGHT_PARAM=None
 RAILING_SYSTEM_SECONDARY_HANDRAILS_LATTERAL_OFFSET=None
 RAILING_SYSTEM_SECONDARY_HANDRAILS_POSITION_PARAM=None
 RAILING_SYSTEM_SECONDARY_HANDRAILS_TYPES_PARAM=None
 RAILING_SYSTEM_TOP_RAIL_HEIGHT_PARAM=None
 RAILING_SYSTEM_TOP_RAIL_TYPES_PARAM=None
 RAMP_ATTR_LEFT_BALUSTER_ATTACH_PT=None
 RAMP_ATTR_MATERIAL=None
 RAMP_ATTR_MIN_INV_SLOPE=None
 RAMP_ATTR_RIGHT_BALUSTER_ATTACH_PT=None
 RAMP_ATTR_SHAPE=None
 RAMP_ATTR_TEXT_FONT=None
 RAMP_ATTR_TEXT_SIZE=None
 RAMP_ATTR_THICKNESS=None
 RAMP_MAX_RUN_LENGTH=None
 RASTER_HORIZONTAL_SCALE=None
 RASTER_MAINTAIN_ASPECT_RATIO=None
 RASTER_SHEETHEIGHT=None
 RASTER_SHEETWIDTH=None
 RASTER_SYMBOL_FILENAME=None
 RASTER_SYMBOL_HEIGHT=None
 RASTER_SYMBOL_PIXELHEIGHT=None
 RASTER_SYMBOL_PIXELWIDTH=None
 RASTER_SYMBOL_RESOLUTION=None
 RASTER_SYMBOL_VIEWNAME=None
 RASTER_SYMBOL_WIDTH=None
 RASTER_VERTICAL_SCALE=None
 RBS_ADDITIONAL_FLOW=None
 RBS_ADJUSTABLE_CONNECTOR=None
 RBS_BUILDING_CONSTRUCTIONCLASS=None
 RBS_BUILDING_USELOADCREDITS=None
 RBS_CABLETRAYCONDUITRUN_LENGTH_PARAM=None
 RBS_CABLETRAYCONDUIT_BENDORFITTING=None
 RBS_CABLETRAYCONDUIT_CONNECTORELEM_TYPE=None
 RBS_CABLETRAYCONDUIT_SYSTEM_TYPE=None
 RBS_CABLETRAYRUN_HEIGHT_PARAM=None
 RBS_CABLETRAYRUN_WIDTH_PARAM=None
 RBS_CABLETRAY_BENDRADIUS=None
 RBS_CABLETRAY_HEIGHT_PARAM=None
 RBS_CABLETRAY_RUNGHEIGHT=None
 RBS_CABLETRAY_RUNGSPACE=None
 RBS_CABLETRAY_RUNGWIDTH=None
 RBS_CABLETRAY_SHAPETYPE=None
 RBS_CABLETRAY_THICKNESS=None
 RBS_CABLETRAY_WIDTH_PARAM=None
 RBS_CALCULATED_SIZE=None
 RBS_COMPONENT_CLASSIFICATION_PARAM=None
 RBS_CONDUITRUN_DIAMETER_PARAM=None
 RBS_CONDUITRUN_INNER_DIAM_PARAM=None
 RBS_CONDUITRUN_OUTER_DIAM_PARAM=None
 RBS_CONDUIT_BENDRADIUS=None
 RBS_CONDUIT_DIAMETER_PARAM=None
 RBS_CONDUIT_INNER_DIAM_PARAM=None
 RBS_CONDUIT_OUTER_DIAM_PARAM=None
 RBS_CONDUIT_TRADESIZE=None
 RBS_CONNECTOR_DESCRIPTION=None
 RBS_CONNECTOR_ISPRIMARY=None
 RBS_CONNECTOR_OFFSET_OBSOLETE=None
 RBS_CONSTRUCTION_SET_PARAM=None
 RBS_CONSTRUCTION_TYPE_SHADINGFACTOR_PARAM=None
 RBS_CTC_BOTTOM_ELEVATION=None
 RBS_CTC_SERVICE_TYPE=None
 RBS_CTC_TOP_ELEVATION=None
 RBS_CURVETYPE_DEFAULT_BEND_PARAM=None
 RBS_CURVETYPE_DEFAULT_CAP_PARAM=None
 RBS_CURVETYPE_DEFAULT_CROSS_PARAM=None
 RBS_CURVETYPE_DEFAULT_ELBOWDOWN_PARAM=None
 RBS_CURVETYPE_DEFAULT_ELBOWUP_PARAM=None
 RBS_CURVETYPE_DEFAULT_ELBOW_PARAM=None
 RBS_CURVETYPE_DEFAULT_HORIZONTAL_BEND_PARAM=None
 RBS_CURVETYPE_DEFAULT_MECHJOINT_PARAM=None
 RBS_CURVETYPE_DEFAULT_TAKEOFF_PARAM=None
 RBS_CURVETYPE_DEFAULT_TEEDOWN_PARAM=None
 RBS_CURVETYPE_DEFAULT_TEEUP_PARAM=None
 RBS_CURVETYPE_DEFAULT_TEE_PARAM=None
 RBS_CURVETYPE_DEFAULT_TRANSITION_PARAM=None
 RBS_CURVETYPE_DEFAULT_UNION_PARAM=None
 RBS_CURVETYPE_MAX_HEIGHT_PARAM=None
 RBS_CURVETYPE_MAX_WIDTH_PARAM=None
 RBS_CURVETYPE_MULTISHAPE_TRANSITION_OVALROUND_PARAM=None
 RBS_CURVETYPE_MULTISHAPE_TRANSITION_PARAM=None
 RBS_CURVETYPE_MULTISHAPE_TRANSITION_RECTOVAL_PARAM=None
 RBS_CURVETYPE_PREFERRED_BRANCH_PARAM=None
 RBS_CURVETYPE_ROUGHNESS_PARAM=None
 RBS_CURVE_DIAMETER_PARAM=None
 RBS_CURVE_HEIGHT_PARAM=None
 RBS_CURVE_HOR_OFFSET_PARAM=None
 RBS_CURVE_SLOPE=None
 RBS_CURVE_SURFACE_AREA=None
 RBS_CURVE_UTSLOPE=None
 RBS_CURVE_VERT_OFFSET_PARAM=None
 RBS_CURVE_WIDTH_PARAM=None
 RBS_DISTRIBUTIONSYS_CONFIG_PARAM=None
 RBS_DISTRIBUTIONSYS_NUMWIRES_PARAM=None
 RBS_DISTRIBUTIONSYS_PHASE_PARAM=None
 RBS_DISTRIBUTIONSYS_VLG_PARAM=None
 RBS_DISTRIBUTIONSYS_VLL_PARAM=None
 RBS_DUCT_BOTTOM_ELEVATION=None
 RBS_DUCT_CALCULATED_SIZE=None
 RBS_DUCT_CONNECTOR_SYSTEM_CLASSIFICATION_PARAM=None
 RBS_DUCT_FITTING_LOSS_METHOD_PARAM=None
 RBS_DUCT_FITTING_LOSS_METHOD_SERVER_PARAM=None
 RBS_DUCT_FITTING_LOSS_METHOD_SETTINGS=None
 RBS_DUCT_FITTING_LOSS_TABLE_PARAM=None
 RBS_DUCT_FLOW_CONFIGURATION_PARAM=None
 RBS_DUCT_FLOW_DIRECTION_PARAM=None
 RBS_DUCT_FLOW_PARAM=None
 RBS_DUCT_PIPE_SYSTEM_ABBREVIATION_PARAM=None
 RBS_DUCT_PRESSURE_DROP=None
 RBS_DUCT_ROUTING_PREFERENCE_PARAM=None
 RBS_DUCT_SIZE_FORMATTED_PARAM=None
 RBS_DUCT_SLOPE=None
 RBS_DUCT_STATIC_PRESSURE=None
 RBS_DUCT_SYSTEM_CALCULATION_PARAM=None
 RBS_DUCT_SYSTEM_TYPE_PARAM=None
 RBS_DUCT_TOP_ELEVATION=None
 RBS_DUCT_TYPE_PARAM=None
 RBS_ELECTRICAL_DATA=None
 RBS_ELEC_AMBIENT_TEMPERATURE=None
 RBS_ELEC_APPARENT_CURRENT_PARAM=None
 RBS_ELEC_APPARENT_CURRENT_PHASEA_PARAM=None
 RBS_ELEC_APPARENT_CURRENT_PHASEB_PARAM=None
 RBS_ELEC_APPARENT_CURRENT_PHASEC_PARAM=None
 RBS_ELEC_APPARENT_LOAD=None
 RBS_ELEC_APPARENT_LOAD_PHASE1=None
 RBS_ELEC_APPARENT_LOAD_PHASE2=None
 RBS_ELEC_APPARENT_LOAD_PHASE3=None
 RBS_ELEC_APPARENT_LOAD_PHASEA=None
 RBS_ELEC_APPARENT_LOAD_PHASEB=None
 RBS_ELEC_APPARENT_LOAD_PHASEC=None
 RBS_ELEC_BALANCED_LOAD=None
 RBS_ELEC_CALC_COEFFICIENT_UTILIZATION=None
 RBS_ELEC_CIRCUIT_FRAME_PARAM=None
 RBS_ELEC_CIRCUIT_LENGTH_PARAM=None
 RBS_ELEC_CIRCUIT_NAME=None
 RBS_ELEC_CIRCUIT_NAMING=None
 RBS_ELEC_CIRCUIT_NOTES_PARAM=None
 RBS_ELEC_CIRCUIT_NUMBER=None
 RBS_ELEC_CIRCUIT_NUMBER_OF_ELEMENTS_PARAM=None
 RBS_ELEC_CIRCUIT_PANEL_PARAM=None
 RBS_ELEC_CIRCUIT_PREFIX=None
 RBS_ELEC_CIRCUIT_PREFIX_SEPARATOR=None
 RBS_ELEC_CIRCUIT_RATING_PARAM=None
 RBS_ELEC_CIRCUIT_START_SLOT=None
 RBS_ELEC_CIRCUIT_TYPE=None
 RBS_ELEC_CIRCUIT_WIRE_NUM_GROUNDS_PARAM=None
 RBS_ELEC_CIRCUIT_WIRE_NUM_HOTS_PARAM=None
 RBS_ELEC_CIRCUIT_WIRE_NUM_NEUTRALS_PARAM=None
 RBS_ELEC_CIRCUIT_WIRE_NUM_RUNS_PARAM=None
 RBS_ELEC_CIRCUIT_WIRE_SIZE_PARAM=None
 RBS_ELEC_CIRCUIT_WIRE_TYPE_PARAM=None
 RBS_ELEC_DEMANDFACTOR_DEMANDLOAD_PARAM=None
 RBS_ELEC_DEMANDFACTOR_LOADCLASSIFICATION_PARAM=None
 RBS_ELEC_DEMANDFACTOR_LOAD_PARAM=None
 RBS_ELEC_ENCLOSURE=None
 RBS_ELEC_LOADSUMMARY_CONNECTED_CURRENT_PARAM=None
 RBS_ELEC_LOADSUMMARY_CONNECTED_LOAD_PARAM=None
 RBS_ELEC_LOADSUMMARY_DEMAND_CURRENT_PARAM=None
 RBS_ELEC_LOADSUMMARY_DEMAND_FACTOR_PARAM=None
 RBS_ELEC_LOADSUMMARY_DEMAND_FACTOR_RULE_PARAM=None
 RBS_ELEC_LOADSUMMARY_DEMAND_LOAD_PARAM=None
 RBS_ELEC_LOADSUMMARY_LOADCLASSIFICATION_PARAM=None
 RBS_ELEC_LOAD_CLASSIFICATION=None
 RBS_ELEC_MAINS=None
 RBS_ELEC_MAX_POLE_BREAKERS=None
 RBS_ELEC_MODIFICATIONS=None
 RBS_ELEC_MOUNTING=None
 RBS_ELEC_NUMBER_OF_POLES=None
 RBS_ELEC_PANEL_BUSSING_PARAM=None
 RBS_ELEC_PANEL_CONFIGURATION_PARAM=None
 RBS_ELEC_PANEL_CURRENT_PHASEA_PARAM=None
 RBS_ELEC_PANEL_CURRENT_PHASEB_PARAM=None
 RBS_ELEC_PANEL_CURRENT_PHASEC_PARAM=None
 RBS_ELEC_PANEL_FEED_PARAM=None
 RBS_ELEC_PANEL_GROUND_BUS_PARAM=None
 RBS_ELEC_PANEL_LOCATION_PARAM=None
 RBS_ELEC_PANEL_MAINSTYPE_PARAM=None
 RBS_ELEC_PANEL_MCB_RATING_PARAM=None
 RBS_ELEC_PANEL_NAME=None
 RBS_ELEC_PANEL_NEUTRAL_BUS_PARAM=None
 RBS_ELEC_PANEL_NEUTRAL_RATING_PARAM=None
 RBS_ELEC_PANEL_NUMPHASES_PARAM=None
 RBS_ELEC_PANEL_NUMWIRES_PARAM=None
 RBS_ELEC_PANEL_SCHEDULE_FOOTER_NOTES_PARAM=None
 RBS_ELEC_PANEL_SCHEDULE_HEADER_NOTES_PARAM=None
 RBS_ELEC_PANEL_SUBFEED_LUGS_PARAM=None
 RBS_ELEC_PANEL_SUPPLY_FROM_PARAM=None
 RBS_ELEC_PANEL_TOTALESTLOAD_HVAC_PARAM=None
 RBS_ELEC_PANEL_TOTALESTLOAD_LIGHT_PARAM=None
 RBS_ELEC_PANEL_TOTALESTLOAD_OTHER_PARAM=None
 RBS_ELEC_PANEL_TOTALESTLOAD_PARAM=None
 RBS_ELEC_PANEL_TOTALESTLOAD_POWER_PARAM=None
 RBS_ELEC_PANEL_TOTALLOAD_HVAC_PARAM=None
 RBS_ELEC_PANEL_TOTALLOAD_LIGHT_PARAM=None
 RBS_ELEC_PANEL_TOTALLOAD_OTHER_PARAM=None
 RBS_ELEC_PANEL_TOTALLOAD_PARAM=None
 RBS_ELEC_PANEL_TOTALLOAD_POWER_PARAM=None
 RBS_ELEC_PANEL_TOTAL_CONNECTED_CURRENT_PARAM=None
 RBS_ELEC_PANEL_TOTAL_DEMAND_CURRENT_PARAM=None
 RBS_ELEC_PANEL_TOTAL_DEMAND_FACTOR_PARAM=None
 RBS_ELEC_POWER_FACTOR=None
 RBS_ELEC_POWER_FACTOR_STATE=None
 RBS_ELEC_ROOM_AVERAGE_ILLUMINATION=None
 RBS_ELEC_ROOM_CAVITY_RATIO=None
 RBS_ELEC_ROOM_LIGHTING_CALC_LUMINAIREPLANE=None
 RBS_ELEC_ROOM_LIGHTING_CALC_WORKPLANE=None
 RBS_ELEC_ROOM_REFLECTIVITY_CEILING=None
 RBS_ELEC_ROOM_REFLECTIVITY_FLOOR=None
 RBS_ELEC_ROOM_REFLECTIVITY_WALLS=None
 RBS_ELEC_SHORT_CIRCUIT_RATING=None
 RBS_ELEC_SWITCH_ID_PARAM=None
 RBS_ELEC_TRUE_CURRENT_PARAM=None
 RBS_ELEC_TRUE_CURRENT_PHASEA_PARAM=None
 RBS_ELEC_TRUE_CURRENT_PHASEB_PARAM=None
 RBS_ELEC_TRUE_CURRENT_PHASEC_PARAM=None
 RBS_ELEC_TRUE_LOAD=None
 RBS_ELEC_TRUE_LOAD_PHASE1=None
 RBS_ELEC_TRUE_LOAD_PHASE2=None
 RBS_ELEC_TRUE_LOAD_PHASE3=None
 RBS_ELEC_TRUE_LOAD_PHASEA=None
 RBS_ELEC_TRUE_LOAD_PHASEB=None
 RBS_ELEC_TRUE_LOAD_PHASEC=None
 RBS_ELEC_VOLTAGE=None
 RBS_ELEC_VOLTAGE_DROP_PARAM=None
 RBS_ELEC_WIRE_CIRCUITS=None
 RBS_ELEC_WIRE_ELEVATION=None
 RBS_ELEC_WIRE_GROUND_ADJUSTMENT=None
 RBS_ELEC_WIRE_HOT_ADJUSTMENT=None
 RBS_ELEC_WIRE_NEUTRAL_ADJUSTMENT=None
 RBS_ELEC_WIRE_SHARE_GROUND=None
 RBS_ELEC_WIRE_SHARE_NEUTRAL=None
 RBS_ELEC_WIRE_TICKMARK_STATE=None
 RBS_ELEC_WIRE_TYPE=None
 RBS_END_LEVEL_PARAM=None
 RBS_END_OFFSET_PARAM=None
 RBS_ENERGY_ANALYSIS_BUILDING_ENVELOPE_ANALYTICAL_GRID_CELL_SIZE=None
 RBS_ENERGY_ANALYSIS_BUILDING_ENVELOPE_ANALYTICAL_SPACE_INDENTIFICATION_RESOLUTION=None
 RBS_ENERGY_ANALYSIS_BUILDING_ENVELOPE_ANALYTICAL_SURFACE_INDENTIFICATION_RESOLUTION=None
 RBS_ENERGY_ANALYSIS_BUILDING_ENVELOPE_DETERMINATION_PARAM=None
 RBS_ENERGY_ANALYSIS_EXPORT_CATEGORY_PARAM=None
 RBS_ENERGY_ANALYSIS_EXPORT_COMPLEXITY_PARAM=None
 RBS_ENERGY_ANALYSIS_EXPORT_GBXML_DEFAULTS_PARAM=None
 RBS_ENERGY_ANALYSIS_GROUND_PLANE_PARAM=None
 RBS_ENERGY_ANALYSIS_INCLUDE_THERMAL_PROPERTIES=None
 RBS_ENERGY_ANALYSIS_MODE=None
 RBS_ENERGY_ANALYSIS_PROJECT_PHASE_PARAM=None
 RBS_ENERGY_ANALYSIS_SLIVER_SPACE_TOLERANCE=None
 RBS_ENERGY_ANALYSIS_SURFACE_ADJACENT_SPACE_ID1=None
 RBS_ENERGY_ANALYSIS_SURFACE_ADJACENT_SPACE_ID2=None
 RBS_ENERGY_ANALYSIS_SURFACE_AZIMUTH=None
 RBS_ENERGY_ANALYSIS_SURFACE_CADOBJECTID=None
 RBS_ENERGY_ANALYSIS_SURFACE_ORIGIN_X=None
 RBS_ENERGY_ANALYSIS_SURFACE_ORIGIN_Y=None
 RBS_ENERGY_ANALYSIS_SURFACE_ORIGIN_Z=None
 RBS_ENERGY_ANALYSIS_SURFACE_TILT=None
 RBS_ENERGY_ANALYSIS_VIEW_BUILDING_SHELL_MODE=None
 RBS_ENERGY_ANALYSIS_VIEW_COORD_AXIS_MODE=None
 RBS_ENERGY_ANALYSIS_VIEW_INNER_SHELL_MODE=None
 RBS_ENERGY_ANALYSIS_VIEW_OUTER_SHELL_MODE=None
 RBS_ENERGY_ANALYSIS_VIEW_RBE_MODE=None
 RBS_ENERGY_ANALYSIS_VIEW_SHADING_SURFACES_MODE=None
 RBS_ENERGY_ANALYSIS_VIEW_SURFACES_MODE=None
 RBS_ENERGY_ANALYSIS_VIEW_TRANSPARENT_MODE=None
 RBS_ENERGY_ANALYSIS_VIEW_UPDATE_SURFACES=None
 RBS_EQ_DIAMETER_PARAM=None
 RBS_FAMILY_CONTENT_ANNOTATION_DISPLAY=None
 RBS_FAMILY_CONTENT_DISTRIBUTION_SYSTEM=None
 RBS_FAMILY_CONTENT_OFFSET_HEIGHT=None
 RBS_FAMILY_CONTENT_OFFSET_WIDTH=None
 RBS_FAMILY_CONTENT_SECONDARY_DISTRIBSYS=None
 RBS_FAMILY_CONTENT_TAKEOFF_FIXED_LENGTH=None
 RBS_FAMILY_CONTENT_TAKEOFF_LENGTH=None
 RBS_FAMILY_CONTENT_TAKEOFF_PROJLENGTH=None
 RBS_FLEXDUCT_ROUNDTYPE_PARAM=None
 RBS_FLEX_DUCT_TYPE_PARAM=None
 RBS_FLEX_PATTERN_PARAM=None
 RBS_FLEX_PIPE_TYPE_PARAM=None
 RBS_FLOW_FACTOR_PARAM=None
 RBS_FLOW_OBSOLETE=None
 RBS_FP_SPRINKLER_COVERAGE_PARAM=None
 RBS_FP_SPRINKLER_K_FACTOR_PARAM=None
 RBS_FP_SPRINKLER_ORIFICE_PARAM=None
 RBS_FP_SPRINKLER_ORIFICE_SIZE_PARAM=None
 RBS_FP_SPRINKLER_PRESSURE_CLASS_PARAM=None
 RBS_FP_SPRINKLER_RESPONSE_PARAM=None
 RBS_FP_SPRINKLER_TEMPERATURE_RATING_PARAM=None
 RBS_FRICTION=None
 RBS_GBXML_OPENING_TYPE=None
 RBS_GBXML_SURFACE_AREA=None
 RBS_GBXML_SURFACE_NAME=None
 RBS_GBXML_SURFACE_TYPE=None
 RBS_HVACLOAD_DOOR_AREA_PARAM=None
 RBS_HVACLOAD_DOOR_COOLING_LOAD_PARAM=None
 RBS_HVACLOAD_FLOOR_AREA_PARAM=None
 RBS_HVACLOAD_PARTITION_AREA_PARAM=None
 RBS_HVACLOAD_PARTITION_COOLING_LOAD_PARAM=None
 RBS_HVACLOAD_PLENUM_COOLING_LOAD_PARAM=None
 RBS_HVACLOAD_ROOF_AREA_PARAM=None
 RBS_HVACLOAD_ROOF_COOLING_LOAD_PARAM=None
 RBS_HVACLOAD_SKYLIGHT_AREA_PARAM=None
 RBS_HVACLOAD_SKYLIGHT_COOLING_LOAD_PARAM=None
 RBS_HVACLOAD_WALL_AREA_PARAM=None
 RBS_HVACLOAD_WALL_COOLING_LOAD_PARAM=None
 RBS_HVACLOAD_WINDOW_AREA_PARAM=None
 RBS_HVACLOAD_WINDOW_COOLING_LOAD_PARAM=None
 RBS_HYDRAULIC_DIAMETER_PARAM=None
 RBS_INSULATION_LINING_VOLUME=None
 RBS_INSULATION_THICKNESS=None
 RBS_INSULATION_THICKNESS_FOR_DUCT=None
 RBS_INSULATION_THICKNESS_FOR_PIPE=None
 RBS_IS_CUSTOM_FITTING=None
 RBS_LINING_THICKNESS=None
 RBS_LINING_THICKNESS_FOR_DUCT=None
 RBS_LOAD_SUB_CLASSIFICATION_MOTOR=None
 RBS_LOOKUP_TABLE_NAME=None
 RBS_LOSS_COEFFICIENT=None
 RBS_MAX_FLOW=None
 RBS_MIN_FLOW=None
 RBS_OFFSET_PARAM=None
 RBS_PANEL_SCHEDULE_SHEET_APPEARANCE_INST_PARAM=None
 RBS_PANEL_SCHEDULE_SHEET_APPEARANCE_PARAM=None
 RBS_PARALLELCONDUITS_HORIZONTAL_NUMBER=None
 RBS_PARALLELCONDUITS_HORIZONTAL_OFFSET_VALUE=None
 RBS_PARALLELCONDUITS_VERTICAL_NUMBER=None
 RBS_PARALLELCONDUITS_VERTICAL_OFFSET_VALUE=None
 RBS_PARALLELPIPES_HORIZONTAL_NUMBER=None
 RBS_PARALLELPIPES_HORIZONTAL_OFFSET_VALUE=None
 RBS_PARALLELPIPES_VERTICAL_NUMBER=None
 RBS_PARALLELPIPES_VERTICAL_OFFSET_VALUE=None
 RBS_PART_TYPE=None
 RBS_PIPE_ADDITIONAL_FLOW_PARAM=None
 RBS_PIPE_CALCULATED_SIZE=None
 RBS_PIPE_CLASS_PARAM=None
 RBS_PIPE_CONNECTIONTYPE_PARAM=None
 RBS_PIPE_CONNECTOR_SYSTEM_CLASSIFICATION_PARAM=None
 RBS_PIPE_CWFU_PARAM=None
 RBS_PIPE_DIAMETER_PARAM=None
 RBS_PIPE_FITTING_LOSS_KFACTOR_PARAM=None
 RBS_PIPE_FITTING_LOSS_METHOD_PARAM=None
 RBS_PIPE_FITTING_LOSS_METHOD_SERVER_PARAM=None
 RBS_PIPE_FITTING_LOSS_METHOD_SETTINGS=None
 RBS_PIPE_FITTING_LOSS_TABLE_PARAM=None
 RBS_PIPE_FIXTURE_UNITS_PARAM=None
 RBS_PIPE_FLOW_CONFIGURATION_PARAM=None
 RBS_PIPE_FLOW_DIRECTION_PARAM=None
 RBS_PIPE_FLOW_PARAM=None
 RBS_PIPE_FLOW_STATE_PARAM=None
 RBS_PIPE_FLUID_DENSITY_PARAM=None
 RBS_PIPE_FLUID_TEMPERATURE_PARAM=None
 RBS_PIPE_FLUID_TYPE_PARAM=None
 RBS_PIPE_FLUID_VISCOSITY_PARAM=None
 RBS_PIPE_FRICTION_FACTOR_PARAM=None
 RBS_PIPE_FRICTION_PARAM=None
 RBS_PIPE_HWFU_PARAM=None
 RBS_PIPE_INNER_DIAM_PARAM=None
 RBS_PIPE_INSULATION_THICKNESS=None
 RBS_PIPE_INVERT_ELEVATION=None
 RBS_PIPE_JOINTTYPE_PARAM=None
 RBS_PIPE_MATERIAL_PARAM=None
 RBS_PIPE_OUTER_DIAMETER=None
 RBS_PIPE_PRESSUREDROP_PARAM=None
 RBS_PIPE_RELATIVE_ROUGHNESS_PARAM=None
 RBS_PIPE_REYNOLDS_NUMBER_PARAM=None
 RBS_PIPE_ROUGHNESS_PARAM=None
 RBS_PIPE_SEGMENT_PARAM=None
 RBS_PIPE_SIZE_FORMATTED_PARAM=None
 RBS_PIPE_SIZE_MAXIMUM=None
 RBS_PIPE_SIZE_MINIMUM=None
 RBS_PIPE_SLOPE=None
 RBS_PIPE_SLOPE_DEF_PARAM=None
 RBS_PIPE_STATIC_PRESSURE=None
 RBS_PIPE_SYSTEM_CALCULATION_PARAM=None
 RBS_PIPE_SYSTEM_FIXTURE_UNIT_PARAM=None
 RBS_PIPE_TYPE_FITTING_LOSS_KFACTOR_PARAM=None
 RBS_PIPE_TYPE_FITTING_LOSS_METHOD_PARAM=None
 RBS_PIPE_TYPE_FITTING_LOSS_TABLE_PARAM=None
 RBS_PIPE_TYPE_PARAM=None
 RBS_PIPE_TYPE_VALVE_LOSS_CVFACTOR_PARAM=None
 RBS_PIPE_VALVE_LOSS_CVFACTOR_PARAM=None
 RBS_PIPE_VELOCITY_PARAM=None
 RBS_PIPE_VOLUME_PARAM=None
 RBS_PIPE_WFU_PARAM=None
 RBS_PIPING_SYSTEM_TYPE_PARAM=None
 RBS_PRESSURE_DROP=None
 RBS_PROJECT_CONSTRUCTION_TYPE_SHADINGFACTOR_PARAM=None
 RBS_PROJECT_LOCATION_PARAM=None
 RBS_PROJECT_REPORTTYPE_PARAM=None
 RBS_REFERENCE_FREESIZE=None
 RBS_REFERENCE_INSULATION_THICKNESS=None
 RBS_REFERENCE_INSULATION_TYPE=None
 RBS_REFERENCE_LINING_THICKNESS=None
 RBS_REFERENCE_LINING_TYPE=None
 RBS_REFERENCE_OVERALLSIZE=None
 RBS_REYNOLDSNUMBER_PARAM=None
 RBS_ROOM_COEFFICIENT_UTILIZATION=None
 RBS_ROUTING_PREFERENCE_PARAM=None
 RBS_SECTION=None
 RBS_SEGMENT_DESCRIPTION_PARAM=None
 RBS_SERVICE_TYPE_PARAM=None
 RBS_SHOW_PROFILE_TYPE=None
 RBS_SIZE_LOCK=None
 RBS_START_LEVEL_PARAM=None
 RBS_START_OFFSET_PARAM=None
 RBS_SYSTEM_ABBREVIATION_PARAM=None
 RBS_SYSTEM_BASE_ELEMENT_PARAM=None
 RBS_SYSTEM_CLASSIFICATION_PARAM=None
 RBS_SYSTEM_FLOW_CONVERSION_METHOD_PARAM=None
 RBS_SYSTEM_NAME_PARAM=None
 RBS_SYSTEM_NUM_ELEMENTS_PARAM=None
 RBS_SYSTEM_OVERRIDE_GRAPHICS_PARAM=None
 RBS_SYSTEM_RISEDROP_1LINEDROPSYMBOL_PARAM=None
 RBS_SYSTEM_RISEDROP_1LINERISESYMBOL_PARAM=None
 RBS_SYSTEM_RISEDROP_1LINETEEDOWNSYMBOL_PARAM=None
 RBS_SYSTEM_RISEDROP_1LINETEEUPSYMBOL_PARAM=None
 RBS_SYSTEM_RISEDROP_2LINEDROPSYMBOL_PARAM=None
 RBS_SYSTEM_RISEDROP_2LINERISESYMBOL_PARAM=None
 RBS_SYSTEM_RISEDROP_PARAM=None
 RBS_VELOCITY=None
 RBS_VELOCITY_PRESSURE=None
 RBS_VOLTAGETYPE_MAXVOLTAGE_PARAM=None
 RBS_VOLTAGETYPE_MINVOLTAGE_PARAM=None
 RBS_VOLTAGETYPE_VOLTAGE_PARAM=None
 RBS_WIRE_CIRCUIT_DESCRIPTION=None
 RBS_WIRE_CIRCUIT_LOAD_NAME=None
 RBS_WIRE_CONDUIT_TYPE_PARAM=None
 RBS_WIRE_INSULATION_PARAM=None
 RBS_WIRE_MATERIAL_PARAM=None
 RBS_WIRE_MAX_CONDUCTOR_SIZE_PARAM=None
 RBS_WIRE_NEUTRAL_INCLUDED_IN_BALANCED_LOAD_PARAM=None
 RBS_WIRE_NEUTRAL_MODE_PARAM=None
 RBS_WIRE_NEUTRAL_MULTIPLIER_PARAM=None
 RBS_WIRE_NUM_CONDUCTORS_PARAM=None
 RBS_WIRE_TEMPERATURE_RATING_PARAM=None
 REBAR_BAR_ALLOWED_BAR_TYPES=None
 REBAR_BAR_DEFORMATION_TYPE=None
 REBAR_BAR_DIAMETER=None
 REBAR_BAR_HOOK_LENGTHS=None
 REBAR_BAR_MAXIMUM_BEND_RADIUS=None
 REBAR_BAR_STIRRUP_BEND_DIAMETER=None
 REBAR_BAR_STYLE=None
 REBAR_CONTAINER_BAR_TYPE=None
 REBAR_DISTRIBUTION_TYPE=None
 REBAR_ELEMENT_ROUNDING=None
 REBAR_ELEMENT_VISIBILITY=None
 REBAR_ELEM_BAR_SPACING=None
 REBAR_ELEM_ENDTREATMENT_END=None
 REBAR_ELEM_ENDTREATMENT_START=None
 REBAR_ELEM_HOOK_END_ORIENT=None
 REBAR_ELEM_HOOK_END_TYPE=None
 REBAR_ELEM_HOOK_START_ORIENT=None
 REBAR_ELEM_HOOK_START_TYPE=None
 REBAR_ELEM_HOOK_STYLE=None
 REBAR_ELEM_HOST_MARK=None
 REBAR_ELEM_LAYOUT_RULE=None
 REBAR_ELEM_LENGTH=None
 REBAR_ELEM_QUANTITY_OF_BARS=None
 REBAR_ELEM_SCHEDULE_MARK=None
 REBAR_ELEM_TOTAL_LENGTH=None
 REBAR_HOOK_ANGLE=None
 REBAR_HOOK_LINE_LEN_FACTOR=None
 REBAR_HOOK_STYLE=None
 REBAR_HOST_CATEGORY=None
 REBAR_INCLUDE_FIRST_BAR=None
 REBAR_INCLUDE_LAST_BAR=None
 REBAR_INSTANCE_BAR_DIAMETER=None
 REBAR_INSTANCE_BEND_DIAMETER=None
 REBAR_INSTANCE_STIRRUP_TIE_ATTACHMENT=None
 REBAR_INTERNAL_MULTIPLANAR=None
 REBAR_INTERNAL_MULTIPLANAR_DUPLICATE=None
 REBAR_INTERNAL_MULTIPLANAR_END_CONNECTOR=None
 REBAR_INTERNAL_MULTIPLANAR_START_CONNECTOR=None
 REBAR_MAXIM_SUFFIX=None
 REBAR_MAX_LENGTH=None
 REBAR_MINIM_SUFFIX=None
 REBAR_MIN_LENGTH=None
 REBAR_NUMBER=None
 REBAR_NUMBER_SUFFIX=None
 REBAR_QUANITY_BY_DISTRIB=None
 REBAR_SHAPE=None
 REBAR_SHAPE_ALLOWED_BAR_TYPES=None
 REBAR_SHAPE_ENDTREATMENT_END_TYPE=None
 REBAR_SHAPE_ENDTREATMENT_START_TYPE=None
 REBAR_SHAPE_END_HOOK_LENGTH=None
 REBAR_SHAPE_END_HOOK_OFFSET=None
 REBAR_SHAPE_HOOK_END_TYPE=None
 REBAR_SHAPE_HOOK_START_TYPE=None
 REBAR_SHAPE_HOOK_STYLE=None
 REBAR_SHAPE_IMAGE=None
 REBAR_SHAPE_OUT_OF_PLANE_BEND_DIAMETER=None
 REBAR_SHAPE_PARAM_END_HOOK_TAN_LEN=None
 REBAR_SHAPE_PARAM_START_HOOK_TAN_LEN=None
 REBAR_SHAPE_SPIRAL_BASE_FINISHING_TURNS=None
 REBAR_SHAPE_SPIRAL_HEIGHT=None
 REBAR_SHAPE_SPIRAL_PITCH=None
 REBAR_SHAPE_SPIRAL_TOP_FINISHING_TURNS=None
 REBAR_SHAPE_START_HOOK_LENGTH=None
 REBAR_SHAPE_START_HOOK_OFFSET=None
 REBAR_SHAPE_STIRRUP_TIE_ATTACHMENT=None
 REBAR_STANDARD_BEND_DIAMETER=None
 REBAR_STANDARD_HOOK_BEND_DIAMETER=None
 REBAR_SYSTEM_ACTIVE_BACK_DIR_1=None
 REBAR_SYSTEM_ACTIVE_BACK_DIR_2=None
 REBAR_SYSTEM_ACTIVE_BOTTOM_DIR_1=None
 REBAR_SYSTEM_ACTIVE_BOTTOM_DIR_1_GENERIC=None
 REBAR_SYSTEM_ACTIVE_BOTTOM_DIR_2=None
 REBAR_SYSTEM_ACTIVE_BOTTOM_DIR_2_GENERIC=None
 REBAR_SYSTEM_ACTIVE_FRONT_DIR_1=None
 REBAR_SYSTEM_ACTIVE_FRONT_DIR_2=None
 REBAR_SYSTEM_ACTIVE_TOP_DIR_1=None
 REBAR_SYSTEM_ACTIVE_TOP_DIR_1_GENERIC=None
 REBAR_SYSTEM_ACTIVE_TOP_DIR_2=None
 REBAR_SYSTEM_ACTIVE_TOP_DIR_2_GENERIC=None
 REBAR_SYSTEM_ADDL_BOTTOM_OFFSET=None
 REBAR_SYSTEM_ADDL_EXTERIOR_OFFSET=None
 REBAR_SYSTEM_ADDL_INTERIOR_OFFSET=None
 REBAR_SYSTEM_ADDL_TOP_OFFSET=None
 REBAR_SYSTEM_BAR_TYPE_BACK_DIR_1=None
 REBAR_SYSTEM_BAR_TYPE_BACK_DIR_2=None
 REBAR_SYSTEM_BAR_TYPE_BOTTOM_DIR_1=None
 REBAR_SYSTEM_BAR_TYPE_BOTTOM_DIR_1_GENERIC=None
 REBAR_SYSTEM_BAR_TYPE_BOTTOM_DIR_2=None
 REBAR_SYSTEM_BAR_TYPE_BOTTOM_DIR_2_GENERIC=None
 REBAR_SYSTEM_BAR_TYPE_FRONT_DIR_1=None
 REBAR_SYSTEM_BAR_TYPE_FRONT_DIR_2=None
 REBAR_SYSTEM_BAR_TYPE_TOP_DIR_1=None
 REBAR_SYSTEM_BAR_TYPE_TOP_DIR_1_GENERIC=None
 REBAR_SYSTEM_BAR_TYPE_TOP_DIR_2=None
 REBAR_SYSTEM_BAR_TYPE_TOP_DIR_2_GENERIC=None
 REBAR_SYSTEM_BOTTOM_MAJOR_MATCHES_BOTTOM_MINOR=None
 REBAR_SYSTEM_COVER_BOTTOM=None
 REBAR_SYSTEM_COVER_SIDE=None
 REBAR_SYSTEM_COVER_TOP=None
 REBAR_SYSTEM_HOOK_ORIENT_BACK_DIR_1=None
 REBAR_SYSTEM_HOOK_ORIENT_BACK_DIR_2=None
 REBAR_SYSTEM_HOOK_ORIENT_BOTTOM_DIR_1=None
 REBAR_SYSTEM_HOOK_ORIENT_BOTTOM_DIR_2=None
 REBAR_SYSTEM_HOOK_ORIENT_FRONT_DIR_1=None
 REBAR_SYSTEM_HOOK_ORIENT_FRONT_DIR_2=None
 REBAR_SYSTEM_HOOK_ORIENT_TOP_DIR_1=None
 REBAR_SYSTEM_HOOK_ORIENT_TOP_DIR_2=None
 REBAR_SYSTEM_HOOK_TYPE_BACK_DIR_1=None
 REBAR_SYSTEM_HOOK_TYPE_BACK_DIR_2=None
 REBAR_SYSTEM_HOOK_TYPE_BOTTOM_DIR_1=None
 REBAR_SYSTEM_HOOK_TYPE_BOTTOM_DIR_2=None
 REBAR_SYSTEM_HOOK_TYPE_FRONT_DIR_1=None
 REBAR_SYSTEM_HOOK_TYPE_FRONT_DIR_2=None
 REBAR_SYSTEM_HOOK_TYPE_TOP_DIR_1=None
 REBAR_SYSTEM_HOOK_TYPE_TOP_DIR_2=None
 REBAR_SYSTEM_LAYER_SUMMARY_BOTTOM_DIR_1_NO_SPACING=None
 REBAR_SYSTEM_LAYER_SUMMARY_BOTTOM_DIR_1_WITH_SPACING=None
 REBAR_SYSTEM_LAYER_SUMMARY_BOTTOM_DIR_2_NO_SPACING=None
 REBAR_SYSTEM_LAYER_SUMMARY_BOTTOM_DIR_2_WITH_SPACING=None
 REBAR_SYSTEM_LAYER_SUMMARY_DIR_1_NO_SPACING=None
 REBAR_SYSTEM_LAYER_SUMMARY_DIR_1_WITH_SPACING=None
 REBAR_SYSTEM_LAYER_SUMMARY_DIR_2_NO_SPACING=None
 REBAR_SYSTEM_LAYER_SUMMARY_DIR_2_WITH_SPACING=None
 REBAR_SYSTEM_LAYER_SUMMARY_NO_SPACING=None
 REBAR_SYSTEM_LAYER_SUMMARY_TOP_DIR_1_NO_SPACING=None
 REBAR_SYSTEM_LAYER_SUMMARY_TOP_DIR_1_WITH_SPACING=None
 REBAR_SYSTEM_LAYER_SUMMARY_TOP_DIR_2_NO_SPACING=None
 REBAR_SYSTEM_LAYER_SUMMARY_TOP_DIR_2_WITH_SPACING=None
 REBAR_SYSTEM_LAYER_SUMMARY_WITH_SPACING=None
 REBAR_SYSTEM_LAYOUT_RULE=None
 REBAR_SYSTEM_NUMBER_OF_LINES_BACK_DIR_1=None
 REBAR_SYSTEM_NUMBER_OF_LINES_BACK_DIR_2=None
 REBAR_SYSTEM_NUMBER_OF_LINES_BOTTOM_DIR_1=None
 REBAR_SYSTEM_NUMBER_OF_LINES_BOTTOM_DIR_1_GENERIC=None
 REBAR_SYSTEM_NUMBER_OF_LINES_BOTTOM_DIR_2=None
 REBAR_SYSTEM_NUMBER_OF_LINES_BOTTOM_DIR_2_GENERIC=None
 REBAR_SYSTEM_NUMBER_OF_LINES_FRONT_DIR_1=None
 REBAR_SYSTEM_NUMBER_OF_LINES_FRONT_DIR_2=None
 REBAR_SYSTEM_NUMBER_OF_LINES_TOP_DIR_1=None
 REBAR_SYSTEM_NUMBER_OF_LINES_TOP_DIR_1_GENERIC=None
 REBAR_SYSTEM_NUMBER_OF_LINES_TOP_DIR_2=None
 REBAR_SYSTEM_NUMBER_OF_LINES_TOP_DIR_2_GENERIC=None
 REBAR_SYSTEM_OVERRIDE=None
 REBAR_SYSTEM_SPACING_BACK_DIR_1=None
 REBAR_SYSTEM_SPACING_BACK_DIR_2=None
 REBAR_SYSTEM_SPACING_BOTTOM_DIR_1=None
 REBAR_SYSTEM_SPACING_BOTTOM_DIR_1_GENERIC=None
 REBAR_SYSTEM_SPACING_BOTTOM_DIR_2=None
 REBAR_SYSTEM_SPACING_BOTTOM_DIR_2_GENERIC=None
 REBAR_SYSTEM_SPACING_FRONT_DIR_1=None
 REBAR_SYSTEM_SPACING_FRONT_DIR_2=None
 REBAR_SYSTEM_SPACING_TOP_DIR_1=None
 REBAR_SYSTEM_SPACING_TOP_DIR_1_GENERIC=None
 REBAR_SYSTEM_SPACING_TOP_DIR_2=None
 REBAR_SYSTEM_SPACING_TOP_DIR_2_GENERIC=None
 REBAR_SYSTEM_SPANACTIVE_DIR_1=None
 REBAR_SYSTEM_SPANACTIVE_DIR_2=None
 REBAR_SYSTEM_SPANHOOK_BOTTOM_DIR_2=None
 REBAR_SYSTEM_SPANHOOK_LEFT_DIR_1=None
 REBAR_SYSTEM_SPANHOOK_RIGHT_DIR_1=None
 REBAR_SYSTEM_SPANHOOK_TOP_DIR_2=None
 REBAR_SYSTEM_TOP_MAJOR_MATCHES_BOTTOM_MAJOR=None
 REBAR_SYSTEM_TOP_MAJOR_MATCHES_TOP_MINOR=None
 REBAR_SYSTEM_TOP_MINOR_MATCHES_BOTTOM_MINOR=None
 RECT_MULLION_THICK=None
 RECT_MULLION_WIDTH1=None
 RECT_MULLION_WIDTH2=None
 REFERENCED_VIEW=None
 REFERENCE_OTHER_VIEW_UI_REF_VIEW=None
 REFERENCE_OTHER_VIEW_UI_TOGGLE=None
 REFERENCE_VIEWER_ATTR_TAG=None
 REFERENCE_VIEWER_TARGET_VIEW=None
 REFERENCE_VIEWER_UI_TARGET_FILTER=None
 REFERENCE_VIEWER_UI_TARGET_VIEW=None
 REF_TABLE_ELEM_NAME=None
 REF_TABLE_PARAM_NAME=None
 REINFORCEMENT_VOLUME=None
 REIN_EST_BAR_LENGTH=None
 REIN_EST_BAR_VOLUME=None
 REIN_EST_NUMBER_OF_BARS=None
 RELATED_TO_MASS=None
 RENDER_PLANT_HEIGHT=None
 RENDER_PLANT_NAME=None
 RENDER_PLANT_TRIM_HEIGHT=None
 RENDER_RPC_FILENAME=None
 RENDER_RPC_PROPERTIES=None
 REPEATING_DETAIL_ELEMENT=None
 REPEATING_DETAIL_INSIDE=None
 REPEATING_DETAIL_LAYOUT=None
 REPEATING_DETAIL_NUMBER=None
 REPEATING_DETAIL_ROTATION=None
 REPEATING_DETAIL_SPACING=None
 REVEAL_PROFILE_PARAM=None
 REVISION_CLOUD_REVISION=None
 REVISION_CLOUD_REVISION_DATE=None
 REVISION_CLOUD_REVISION_DESCRIPTION=None
 REVISION_CLOUD_REVISION_ISSUED_BY=None
 REVISION_CLOUD_REVISION_ISSUED_TO=None
 REVISION_CLOUD_REVISION_NUM=None
 REVOLUTION_END_ANGLE=None
 REVOLUTION_START_ANGLE=None
 RGB_B_PARAM=None
 RGB_G_PARAM=None
 RGB_R_PARAM=None
 ROOF_ATTR_DEFAULT_THICKNESS_PARAM=None
 ROOF_ATTR_THICKNESS_PARAM=None
 ROOF_BASE_LEVEL_PARAM=None
 ROOF_CONSTRAINT_LEVEL_PARAM=None
 ROOF_CONSTRAINT_OFFSET_PARAM=None
 ROOF_CURVE_HEIGHT_AT_WALL=None
 ROOF_CURVE_HEIGHT_OFFSET=None
 ROOF_CURVE_IS_SLOPE_DEFINING=None
 ROOF_EAVE_CUT_PARAM=None
 ROOF_FACES_LOCATION=None
 ROOF_LEVEL_OFFSET_PARAM=None
 ROOF_RAFTER_OR_TRUSS_PARAM=None
 ROOF_SLOPE=None
 ROOF_STRUCTURE_ID_PARAM=None
 ROOF_UPTO_LEVEL_OFFSET_PARAM=None
 ROOF_UPTO_LEVEL_PARAM=None
 ROOM_ACTUAL_EXHAUST_AIRFLOW_PARAM=None
 ROOM_ACTUAL_LIGHTING_LOAD_PARAM=None
 ROOM_ACTUAL_LIGHTING_LOAD_PER_AREA_PARAM=None
 ROOM_ACTUAL_POWER_LOAD_PARAM=None
 ROOM_ACTUAL_POWER_LOAD_PER_AREA_PARAM=None
 ROOM_ACTUAL_RETURN_AIRFLOW_PARAM=None
 ROOM_ACTUAL_SUPPLY_AIRFLOW_PARAM=None
 ROOM_AREA=None
 ROOM_AREA_PER_PERSON_PARAM=None
 ROOM_BASE_HEAT_LOAD_ON_PARAM=None
 ROOM_BASE_LIGHTING_LOAD_ON_PARAM=None
 ROOM_BASE_POWER_LOAD_ON_PARAM=None
 ROOM_BASE_RETURN_AIRFLOW_ON_PARAM=None
 ROOM_CALCULATED_COOLING_LOAD_PARAM=None
 ROOM_CALCULATED_COOLING_LOAD_PER_AREA_PARAM=None
 ROOM_CALCULATED_HEATING_LOAD_PARAM=None
 ROOM_CALCULATED_HEATING_LOAD_PER_AREA_PARAM=None
 ROOM_CALCULATED_SUPPLY_AIRFLOW_PARAM=None
 ROOM_CALCULATED_SUPPLY_AIRFLOW_PER_AREA_PARAM=None
 ROOM_CALCULATION_POINT=None
 ROOM_COMPUTATION_HEIGHT=None
 ROOM_COMPUTATION_METHOD=None
 ROOM_CONDITION_TYPE_PARAM=None
 ROOM_CONSTRUCTION_SET_PARAM=None
 ROOM_DEPARTMENT=None
 ROOM_DESIGN_COOLING_LOAD_PARAM=None
 ROOM_DESIGN_EXHAUST_AIRFLOW_PARAM=None
 ROOM_DESIGN_HEATING_LOAD_PARAM=None
 ROOM_DESIGN_LIGHTING_LOAD_PARAM=None
 ROOM_DESIGN_LIGHTING_LOAD_PER_AREA_PARAM=None
 ROOM_DESIGN_MECHANICAL_LOAD_PER_AREA_PARAM=None
 ROOM_DESIGN_OTHER_LOAD_PER_AREA_PARAM=None
 ROOM_DESIGN_POWER_LOAD_PARAM=None
 ROOM_DESIGN_POWER_LOAD_PER_AREA_PARAM=None
 ROOM_DESIGN_RETURN_AIRFLOW_PARAM=None
 ROOM_DESIGN_SUPPLY_AIRFLOW_PARAM=None
 ROOM_EDIT_ELECTRICAL_LOADS_PARAM=None
 ROOM_EDIT_PEOPLE_LOADS_PARAM=None
 ROOM_FINISH_BASE=None
 ROOM_FINISH_CEILING=None
 ROOM_FINISH_FLOOR=None
 ROOM_FINISH_WALL=None
 ROOM_HEIGHT=None
 ROOM_LEVEL_ID=None
 ROOM_LIGHTING_LOAD_UNITS_PARAM=None
 ROOM_LOWER_OFFSET=None
 ROOM_NAME=None
 ROOM_NUMBER=None
 ROOM_NUMBER_OF_PEOPLE_PARAM=None
 ROOM_OCCUPANCY=None
 ROOM_OCCUPANCY_UNIT_PARAM=None
 ROOM_PEOPLE_LATENT_HEAT_GAIN_PER_PERSON_PARAM=None
 ROOM_PEOPLE_SENSIBLE_HEAT_GAIN_PER_PERSON_PARAM=None
 ROOM_PEOPLE_TOTAL_HEAT_GAIN_PER_PERSON_PARAM=None
 ROOM_PERIMETER=None
 ROOM_PHASE=None
 ROOM_PHASE_ID=None
 ROOM_PLENUM_LIGHTING_PARAM=None
 ROOM_POWER_LOAD_UNITS_PARAM=None
 ROOM_SPACE_TYPE_PARAM=None
 ROOM_TAG_ORIENTATION_PARAM=None
 ROOM_UPPER_LEVEL=None
 ROOM_UPPER_OFFSET=None
 ROOM_VOLUME=None
 ROUTING_PREFERENCE_PARAM=None
 RVT_HOST_LEVEL=None
 RVT_LEVEL_OFFSET=None
 RVT_LINK_FILE_NAME_WITHOUT_EXT=None
 RVT_LINK_INSTANCE_NAME=None
 RVT_LINK_PHASE_MAP=None
 RVT_LINK_REFERENCE_TYPE=None
 RVT_SOURCE_LEVEL=None
 SCHEDULE_BASE_LEVEL_OFFSET_PARAM=None
 SCHEDULE_BASE_LEVEL_PARAM=None
 SCHEDULE_EMBEDDED_PARAM=None
 SCHEDULE_FIELDS_PARAM=None
 SCHEDULE_FILTER_PARAM=None
 SCHEDULE_FORMAT_PARAM=None
 SCHEDULE_GROUP_PARAM=None
 SCHEDULE_LEVEL_PARAM=None
 SCHEDULE_SHEET_APPEARANCE_PARAM=None
 SCHEDULE_TOP_LEVEL_OFFSET_PARAM=None
 SCHEDULE_TOP_LEVEL_PARAM=None
 SECTION_ATTR_HEAD_TAG=None
 SECTION_ATTR_TAIL_LENGTH=None
 SECTION_ATTR_TAIL_TAG=None
 SECTION_ATTR_TAIL_WIDTH=None
 SECTION_BROKEN_DISPLAY_STYLE=None
 SECTION_COARSER_SCALE_PULLDOWN_IMPERIAL=None
 SECTION_COARSER_SCALE_PULLDOWN_METRIC=None
 SECTION_PARENT_VIEW_NAME=None
 SECTION_SHOW_IN_ONE_VIEW_ONLY=None
 SECTION_TAG=None
 SEEK_ITEM_ID=None
 SHEET_APPROVED_BY=None
 SHEET_ASSEMBLY_ASSEMBLY_CODE=None
 SHEET_ASSEMBLY_ASSEMBLY_DESCRIPTION=None
 SHEET_ASSEMBLY_COST=None
 SHEET_ASSEMBLY_DESCRIPTION=None
 SHEET_ASSEMBLY_KEYNOTE=None
 SHEET_ASSEMBLY_MANUFACTURER=None
 SHEET_ASSEMBLY_MODEL=None
 SHEET_ASSEMBLY_NAME=None
 SHEET_ASSEMBLY_TYPE_COMMENTS=None
 SHEET_ASSEMBLY_TYPE_MARK=None
 SHEET_ASSEMBLY_URL=None
 SHEET_CHECKED_BY=None
 SHEET_CURRENT_REVISION=None
 SHEET_CURRENT_REVISION_DATE=None
 SHEET_CURRENT_REVISION_DESCRIPTION=None
 SHEET_CURRENT_REVISION_ISSUED=None
 SHEET_CURRENT_REVISION_ISSUED_BY=None
 SHEET_CURRENT_REVISION_ISSUED_TO=None
 SHEET_DATE=None
 SHEET_DESIGNED_BY=None
 SHEET_DRAWN_BY=None
 SHEET_FILE_PATH=None
 SHEET_GUIDE_GRID=None
 SHEET_HEIGHT=None
 SHEET_ISSUE_DATE=None
 SHEET_KEY_NUMBER=None
 SHEET_NAME=None
 SHEET_NUMBER=None
 SHEET_REVISIONS_ON_SHEET=None
 SHEET_SCALE=None
 SHEET_SCHEDULED=None
 SHEET_WIDTH=None
 SHOW_ARROWHEAD_TO_CUT_MARK=None
 SHOW_ICON_PARAM=None
 SHOW_TITLE=None
 SKETCH_GRID_SPACING_PARAM=None
 SKETCH_PLANE_PARAM=None
 SLAB_EDGE_MATERIAL_PARAM=None
 SLAB_EDGE_PROFILE_PARAM=None
 SLANTED_COLUMN_BASE_CUT_STYLE=None
 SLANTED_COLUMN_BASE_EXTENSION=None
 SLANTED_COLUMN_GEOMETRY_TREATMENT_BASE=None
 SLANTED_COLUMN_GEOMETRY_TREATMENT_TOP=None
 SLANTED_COLUMN_TOP_CUT_STYLE=None
 SLANTED_COLUMN_TOP_EXTENSION=None
 SLANTED_COLUMN_TYPE_PARAM=None
 SLOPE_ARROW_LEVEL_END=None
 SLOPE_ARROW_LEVEL_START=None
 SLOPE_END_HEIGHT=None
 SLOPE_START_HEIGHT=None
 SPACE_ASSOC_ROOM_NAME=None
 SPACE_ASSOC_ROOM_NUMBER=None
 SPACE_CARPETING_PARAM=None
 SPACE_ELEC_EQUIPMENT_RADIANT_PERCENTAGE_PARAM=None
 SPACE_INFILTRATION_PARAM=None
 SPACE_IS_OCCUPIABLE=None
 SPACE_IS_PLENUM=None
 SPACE_LIGHTING_SCHEDULE_PARAM=None
 SPACE_OCCUPANCY_SCHEDULE_PARAM=None
 SPACE_PEOPLE_ACTIVITY_LEVEL_PARAM=None
 SPACE_POWER_SCHEDULE_PARAM=None
 SPACE_ZONE_NAME=None
 SPACING_APPEND=None
 SPACING_JUSTIFICATION=None
 SPACING_JUSTIFICATION_1=None
 SPACING_JUSTIFICATION_2=None
 SPACING_JUSTIFICATION_HORIZ=None
 SPACING_JUSTIFICATION_U=None
 SPACING_JUSTIFICATION_V=None
 SPACING_JUSTIFICATION_VERT=None
 SPACING_LAYOUT=None
 SPACING_LAYOUT_1=None
 SPACING_LAYOUT_2=None
 SPACING_LAYOUT_HORIZ=None
 SPACING_LAYOUT_U=None
 SPACING_LAYOUT_V=None
 SPACING_LAYOUT_VERT=None
 SPACING_LENGTH=None
 SPACING_LENGTH_1=None
 SPACING_LENGTH_2=None
 SPACING_LENGTH_HORIZ=None
 SPACING_LENGTH_U=None
 SPACING_LENGTH_V=None
 SPACING_LENGTH_VERT=None
 SPACING_NUM_DIVISIONS=None
 SPACING_NUM_DIVISIONS_1=None
 SPACING_NUM_DIVISIONS_2=None
 SPACING_NUM_DIVISIONS_HORIZ=None
 SPACING_NUM_DIVISIONS_U=None
 SPACING_NUM_DIVISIONS_V=None
 SPACING_NUM_DIVISIONS_VERT=None
 SPAN_DIR_INST_PARAM_ANGLE=None
 SPAN_DIR_SYM_PARAM_BOTTOM=None
 SPAN_DIR_SYM_PARAM_LEFT=None
 SPAN_DIR_SYM_PARAM_RIGHT=None
 SPAN_DIR_SYM_PARAM_TOP=None
 SPATIAL_FIELD_MGR_CURRENT_NAME=None
 SPATIAL_FIELD_MGR_DESCRIPTION=None
 SPATIAL_FIELD_MGR_LEGEND_HEIGHT=None
 SPATIAL_FIELD_MGR_LEGEND_HOR_ORIGIN_GAP=None
 SPATIAL_FIELD_MGR_LEGEND_SHOW_CONFIG_NAME=None
 SPATIAL_FIELD_MGR_LEGEND_SHOW_DESCRIPTION=None
 SPATIAL_FIELD_MGR_LEGEND_TEXT_TYPE=None
 SPATIAL_FIELD_MGR_LEGEND_VERT_ORIGIN_GAP=None
 SPATIAL_FIELD_MGR_LEGEND_WIDTH=None
 SPATIAL_FIELD_MGR_RANGE=None
 SPATIAL_FIELD_MGR_RESULTS_VISIBILITY=None
 SPECIFY_SLOPE_OR_OFFSET=None
 SPOT_COORDINATE_BASE=None
 SPOT_COORDINATE_BOTTOM_PREFIX=None
 SPOT_COORDINATE_BOTTOM_SUFFIX=None
 SPOT_COORDINATE_ELEVATION_PREFIX=None
 SPOT_COORDINATE_ELEVATION_SUFFIX=None
 SPOT_COORDINATE_INCLUDE_ELEVATION=None
 SPOT_COORDINATE_TOP_PREFIX=None
 SPOT_COORDINATE_TOP_SUFFIX=None
 SPOT_DIM_LEADER=None
 SPOT_DIM_STYLE_SLOPE_UNITS=None
 SPOT_DIM_STYLE_SLOPE_UNITS_ALT=None
 SPOT_ELEV_BASE=None
 SPOT_ELEV_BEND_LEADER=None
 SPOT_ELEV_BOT_VALUE=None
 SPOT_ELEV_DISPLAY_ELEVATIONS=None
 SPOT_ELEV_FLIP_TEXT_VERT=None
 SPOT_ELEV_IND_BOTTOM=None
 SPOT_ELEV_IND_ELEVATION=None
 SPOT_ELEV_IND_EW=None
 SPOT_ELEV_IND_NS=None
 SPOT_ELEV_IND_TOP=None
 SPOT_ELEV_IND_TYPE=None
 SPOT_ELEV_IND_TYPE_BOTTOM=None
 SPOT_ELEV_IND_TYPE_ELEVATION=None
 SPOT_ELEV_IND_TYPE_TOP=None
 SPOT_ELEV_LEADER_ARROWHEAD=None
 SPOT_ELEV_LINE_PEN=None
 SPOT_ELEV_LOWER_PREFIX=None
 SPOT_ELEV_LOWER_SUFFIX=None
 SPOT_ELEV_LOWER_VALUE=None
 SPOT_ELEV_RELATIVE_BASE=None
 SPOT_ELEV_ROTATE_WITH_COMPONENT=None
 SPOT_ELEV_SINGLE_OR_UPPER_PREFIX=None
 SPOT_ELEV_SINGLE_OR_UPPER_SUFFIX=None
 SPOT_ELEV_SINGLE_OR_UPPER_VALUE=None
 SPOT_ELEV_SYMBOL=None
 SPOT_ELEV_TEXT_HORIZ_OFFSET=None
 SPOT_ELEV_TEXT_LOCATION=None
 SPOT_ELEV_TEXT_ORIENTATION=None
 SPOT_ELEV_TICK_MARK_PEN=None
 SPOT_ELEV_TOP_VALUE=None
 SPOT_SLOPE_LEADER_LENGTH=None
 SPOT_SLOPE_OFFSET_FROM_REFERENCE=None
 SPOT_SLOPE_PREFIX=None
 SPOT_SLOPE_SLOPE_DIRECTION=None
 SPOT_SLOPE_SLOPE_REPRESENTATION=None
 SPOT_SLOPE_SUFFIX=None
 SPOT_TEXT_FROM_LEADER=None
 STAIRSTYPE_CALCULATION_RULES=None
 STAIRSTYPE_CALC_RULE_MAX_RESULT=None
 STAIRSTYPE_CALC_RULE_MIN_RESULT=None
 STAIRSTYPE_CALC_RULE_RISER_MULTIPLIER=None
 STAIRSTYPE_CALC_RULE_TARGET_RESULT=None
 STAIRSTYPE_CALC_RULE_TREAD_MULTIPLIER=None
 STAIRSTYPE_CONSTRUCTION_METHOD=None
 STAIRSTYPE_CUTMARK_TYPE=None
 STAIRSTYPE_GEOMUNJOINED_END_CUT_STYLE=None
 STAIRSTYPE_HAS_INTERMEDIATE_SUPPORT=None
 STAIRSTYPE_HAS_LEFT_SUPPORT=None
 STAIRSTYPE_HAS_RIGHT_SUPPORT=None
 STAIRSTYPE_INTERMEDIATE_SUPPORT_TYPE=None
 STAIRSTYPE_IS_ASSEMBLED_STAIRS=None
 STAIRSTYPE_LANDING_TYPE=None
 STAIRSTYPE_LEFT_SIDE_SUPPORT_TYPE=None
 STAIRSTYPE_LEFT_SUPPORT_LATERAL_OFFSET=None
 STAIRSTYPE_MAXIMUM_RISER_HEIGHT=None
 STAIRSTYPE_MINIMUM_RUN_WIDTH=None
 STAIRSTYPE_MINIMUM_TREAD_DEPTH=None
 STAIRSTYPE_MINIMUM_TREAD_WIDTH_INSIDE_BOUNDARY=None
 STAIRSTYPE_NOTCH_CUSTOM_WIDTH=None
 STAIRSTYPE_NOTCH_EXTENSION=None
 STAIRSTYPE_NOTCH_HORIZONTAL_GAP=None
 STAIRSTYPE_NOTCH_THICKNESS=None
 STAIRSTYPE_NOTCH_VERTICAL_GAP=None
 STAIRSTYPE_NOTCH_WIDTH=None
 STAIRSTYPE_NUMBER_OF_INTERMEDIATE_SUPPORTS=None
 STAIRSTYPE_RIGHT_SIDE_SUPPORT_TYPE=None
 STAIRSTYPE_RIGHT_SUPPORT_LATERAL_OFFSET=None
 STAIRSTYPE_RUN_TYPE=None
 STAIRSTYPE_SHOW_CUTLINE=None
 STAIRSTYPE_SHOW_STAIR_PATH=None
 STAIRSTYPE_SHOW_UPDOWN=None
 STAIRSTYPE_WINDER_STEP_FRONT_MEASUREMENT=None
 STAIRS_ACTUAL_NUMBER_OF_RISERS=None
 STAIRS_ACTUAL_NUM_RISERS=None
 STAIRS_ACTUAL_RISER_HEIGHT=None
 STAIRS_ACTUAL_TREAD_DEPTH=None
 STAIRS_ATTR_BODY_MATERIAL=None
 STAIRS_ATTR_BREAK_SYM_IN_CUTLINE=None
 STAIRS_ATTR_CALC_ENABLED=None
 STAIRS_ATTR_CALC_MAX=None
 STAIRS_ATTR_CALC_MIN=None
 STAIRS_ATTR_EQ_RESULT=None
 STAIRS_ATTR_FIRST_RISER=None
 STAIRS_ATTR_LANDINGS_OVERLAPPING=None
 STAIRS_ATTR_LANDING_CARRIAGE=None
 STAIRS_ATTR_LAST_RISER=None
 STAIRS_ATTR_LEFT_SIDE_STRINGER=None
 STAIRS_ATTR_MAX_RISER_HEIGHT=None
 STAIRS_ATTR_MINIMUM_TREAD_DEPTH=None
 STAIRS_ATTR_MONOLITHIC_STAIRS=None
 STAIRS_ATTR_NOSING_LENGTH=None
 STAIRS_ATTR_NOSING_PLACEMENT=None
 STAIRS_ATTR_NUM_MID_STRINGERS=None
 STAIRS_ATTR_RIGHT_SIDE_STRINGER=None
 STAIRS_ATTR_RISERS_PRESENT=None
 STAIRS_ATTR_RISER_ANGLE=None
 STAIRS_ATTR_RISER_MATERIAL=None
 STAIRS_ATTR_RISER_MULT=None
 STAIRS_ATTR_RISER_THICKNESS=None
 STAIRS_ATTR_RISER_TREAD_CONNECT=None
 STAIRS_ATTR_RISER_TYPE=None
 STAIRS_ATTR_SIDE_STRINGER_TYPE_PARAM=None
 STAIRS_ATTR_STAIRS_BOTTOM=None
 STAIRS_ATTR_STAIRS_CUT_OFFSET=None
 STAIRS_ATTR_STAIR_CALCULATOR=None
 STAIRS_ATTR_STRINGER_CARRIAGE=None
 STAIRS_ATTR_STRINGER_HEIGHT=None
 STAIRS_ATTR_STRINGER_MATERIAL=None
 STAIRS_ATTR_STRINGER_OFFSET=None
 STAIRS_ATTR_STRINGER_THICKNESS=None
 STAIRS_ATTR_TEXT_FONT=None
 STAIRS_ATTR_TEXT_SIZE=None
 STAIRS_ATTR_TREAD_FRONT_PROFILE=None
 STAIRS_ATTR_TREAD_MATERIAL=None
 STAIRS_ATTR_TREAD_MULT=None
 STAIRS_ATTR_TREAD_THICKNESS=None
 STAIRS_ATTR_TREAD_WIDTH=None
 STAIRS_ATTR_TRIM_TOP=None
 STAIRS_BASE_LEVEL=None
 STAIRS_BASE_LEVEL_PARAM=None
 STAIRS_BASE_OFFSET=None
 STAIRS_CURVE_TYPE=None
 STAIRS_DBG_SHOW_ANNOTATION_CUT_MARK=None
 STAIRS_DBG_SHOW_BOUNDARY_2D=None
 STAIRS_DBG_SHOW_BOUNDARY_3D=None
 STAIRS_DBG_SHOW_LANDING_BOUNDARY=None
 STAIRS_DBG_SHOW_LANDING_FACES=None
 STAIRS_DBG_SHOW_LANDING_PATH=None
 STAIRS_DBG_SHOW_LEFT_RUN_BOUNDARY_2D=None
 STAIRS_DBG_SHOW_LEFT_RUN_BOUNDARY_3D=None
 STAIRS_DBG_SHOW_MONOLITHIC_SUPPORT_CORSE_GEOM=None
 STAIRS_DBG_SHOW_MONOLITHIC_SUPPORT_GEOM=None
 STAIRS_DBG_SHOW_RIGHT_RUN_BOUNDARY_2D=None
 STAIRS_DBG_SHOW_RIGHT_RUN_BOUNDARY_3D=None
 STAIRS_DBG_SHOW_RUN_CORSE_GEOM=None
 STAIRS_DBG_SHOW_RUN_GEOM=None
 STAIRS_DBG_SHOW_RUN_NOSING=None
 STAIRS_DBG_SHOW_RUN_OUTLINE_FOR_PLAN=None
 STAIRS_DBG_SHOW_RUN_PATH_2D=None
 STAIRS_DBG_SHOW_RUN_PATH_3D=None
 STAIRS_DBG_SHOW_RUN_RISER=None
 STAIRS_DBG_SHOW_SUPPORT_PATH=None
 STAIRS_DBG_SHOW_TREAD_FACES=None
 STAIRS_DBG_SHOW_TRISER_CORSE_GEOM=None
 STAIRS_DBG_SHOW_TRISER_GEOM=None
 STAIRS_DESIRED_NUMBER_OF_RISERS=None
 STAIRS_DESIRED_NUM_RISERS=None
 STAIRS_DOWN_TEXT=None
 STAIRS_ENABLE_CALCULATION_RULE_CHECKING=None
 STAIRS_INST_ALWAYS_UP=None
 STAIRS_INST_DOWN_ARROW_ON=None
 STAIRS_INST_DOWN_LABEL_ON=None
 STAIRS_INST_DOWN_LABEL_TEXT=None
 STAIRS_INST_UP_ARROW_ON=None
 STAIRS_INST_UP_LABEL_ON=None
 STAIRS_INST_UP_LABEL_TEXT=None
 STAIRS_LANDINGTYPE_HAS_MONOLITHIC_SUPPORT=None
 STAIRS_LANDINGTYPE_LANDING_MATERIAL=None
 STAIRS_LANDINGTYPE_STRUCTURE=None
 STAIRS_LANDINGTYPE_THICKNESS=None
 STAIRS_LANDINGTYPE_TREADRISER_TYPE=None
 STAIRS_LANDINGTYPE_USE_SAME_TRISER_AS_RUN=None
 STAIRS_LANDING_BASE_ELEVATION=None
 STAIRS_LANDING_OVERRIDDEN=None
 STAIRS_LANDING_STRUCTURAL=None
 STAIRS_LANDING_THICKNESS=None
 STAIRS_MIN_AUTOMATIC_LANDING_DEPTH=None
 STAIRS_MULTISTORY_TOP_LEVEL_PARAM=None
 STAIRS_MULTISTORY_UP_TO_LEVEL=None
 STAIRS_PATH_FULL_STEP_ARROW=None
 STAIRS_PATH_START_EXTENSION=None
 STAIRS_PATH_START_FROM_RISER=None
 STAIRS_RAILING_ANGLED_CONNECTION=None
 STAIRS_RAILING_BALUSTERS_PER_TREAD=None
 STAIRS_RAILING_BALUSTER_BOTTOM_ANGLE=None
 STAIRS_RAILING_BALUSTER_FAMILY=None
 STAIRS_RAILING_BALUSTER_HEIGHT=None
 STAIRS_RAILING_BALUSTER_IS_POST=None
 STAIRS_RAILING_BALUSTER_LENGTH=None
 STAIRS_RAILING_BALUSTER_OFFSET=None
 STAIRS_RAILING_BALUSTER_PLACEMENT=None
 STAIRS_RAILING_BALUSTER_SHAPE=None
 STAIRS_RAILING_BALUSTER_SLOPE_ANGLE=None
 STAIRS_RAILING_BALUSTER_SPACING=None
 STAIRS_RAILING_BALUSTER_SPACING_TYPE=None
 STAIRS_RAILING_BALUSTER_TOP_ANGLE=None
 STAIRS_RAILING_BALUSTER_WIDTH=None
 STAIRS_RAILING_BASE_LEVEL_PARAM=None
 STAIRS_RAILING_CONNECTION=None
 STAIRS_RAILING_HEIGHT=None
 STAIRS_RAILING_HEIGHT_OFFSET=None
 STAIRS_RAILING_HEIGHT_SHIFT_TYPE=None
 STAIRS_RAILING_HEIGHT_SHIFT_VAL=None
 STAIRS_RAILING_PLACEMENT_OFFSET=None
 STAIRS_RAILING_RAIL_HEIGHT=None
 STAIRS_RAILING_RAIL_NAME=None
 STAIRS_RAILING_RAIL_OFFSET=None
 STAIRS_RAILING_RAIL_STRUCTURE=None
 STAIRS_RAILING_SHAPE=None
 STAIRS_RAILING_TANGENT_CONNECTION=None
 STAIRS_RAILING_THICKNESS=None
 STAIRS_RAILING_WIDTH=None
 STAIRS_RUNTYPE_HAS_MONOLITHIC_SUPPORT=None
 STAIRS_RUNTYPE_RUN_MATERIAL=None
 STAIRS_RUNTYPE_STRUCTURAL_DEPTH=None
 STAIRS_RUNTYPE_STRUCTURE=None
 STAIRS_RUNTYPE_TOTAL_DEPTH=None
 STAIRS_RUNTYPE_UNDERSIDE_SURFACE_TYPE=None
 STAIRS_RUN_ACTUAL_NUMBER_OF_RISERS=None
 STAIRS_RUN_ACTUAL_NUMBER_OF_TREADS=None
 STAIRS_RUN_ACTUAL_RISER_HEIGHT=None
 STAIRS_RUN_ACTUAL_RUN_WIDTH=None
 STAIRS_RUN_ACTUAL_TREAD_DEPTH=None
 STAIRS_RUN_BEGIN_WITH_RISER=None
 STAIRS_RUN_BOTTOM_ELEVATION=None
 STAIRS_RUN_CCW=None
 STAIRS_RUN_CENTER_MARK_VISIBLE=None
 STAIRS_RUN_CREATE_AUTO_LANDING=None
 STAIRS_RUN_END_WITH_RISER=None
 STAIRS_RUN_EXTEND_BELOW_RISER_BASE=None
 STAIRS_RUN_EXTEND_BELOW_TREAD_BASE=None
 STAIRS_RUN_HEIGHT=None
 STAIRS_RUN_LOCATIONPATH_JUSTFICATION=None
 STAIRS_RUN_OVERRIDDEN=None
 STAIRS_RUN_STRUCTURAL=None
 STAIRS_RUN_TOP_ELEVATION=None
 STAIRS_RUN_WIDTH_MEASUREMENT=None
 STAIRS_RUN_WINDER_BEGIN_WITH_STRAIGHT=None
 STAIRS_RUN_WINDER_END_WITH_STRAIGHT=None
 STAIRS_SHOW_DOWN_TEXT=None
 STAIRS_SHOW_UP_TEXT=None
 STAIRS_STAIRS_HEIGHT=None
 STAIRS_STRINGERS_PRESENT=None
 STAIRS_SUPPORTTYPE_FLIP_SECTION_PROFILE=None
 STAIRS_SUPPORTTYPE_MATERIAL=None
 STAIRS_SUPPORTTYPE_SECTION_PROFILE=None
 STAIRS_SUPPORTTYPE_STRUCTURAL_DEPTH=None
 STAIRS_SUPPORTTYPE_STRUCTURAL_DEPTH_ON_LANDING=None
 STAIRS_SUPPORTTYPE_STRUCTURAL_DEPTH_ON_RUN=None
 STAIRS_SUPPORTTYPE_TOPSIDE_SURFACE=None
 STAIRS_SUPPORTTYPE_TOTAL_DEPTH=None
 STAIRS_SUPPORTTYPE_UNDERSIDE_SURFACE=None
 STAIRS_SUPPORTTYPE_WIDTH=None
 STAIRS_SUPPORT_HORIZONTAL_OFFSET=None
 STAIRS_SUPPORT_LANDINGSUPPORT_TYPE=None
 STAIRS_SUPPORT_LOWER_END_CUT=None
 STAIRS_SUPPORT_OVERRIDDEN=None
 STAIRS_SUPPORT_TRIM_SUPPORT_UPPER=None
 STAIRS_SUPPORT_UPPER_END_CUT=None
 STAIRS_SUPPORT_VERTICAL_OFFSET=None
 STAIRS_TEXT_ORIENTATION=None
 STAIRS_TEXT_TYPE=None
 STAIRS_TOP_LEVEL=None
 STAIRS_TOP_LEVEL_PARAM=None
 STAIRS_TOP_OFFSET=None
 STAIRS_TOTAL_NUMBER_OF_RISERS=None
 STAIRS_TOTAL_NUMBER_OF_TREADS=None
 STAIRS_TRISERTYPE_BACK_NOSING=None
 STAIRS_TRISERTYPE_FRONT_NOSING=None
 STAIRS_TRISERTYPE_LEFT_NOSING=None
 STAIRS_TRISERTYPE_NOSING_LENGTH=None
 STAIRS_TRISERTYPE_NOSING_PLACEMENT=None
 STAIRS_TRISERTYPE_NOSING_PROFILE=None
 STAIRS_TRISERTYPE_RIGHT_NOSING=None
 STAIRS_TRISERTYPE_RISER=None
 STAIRS_TRISERTYPE_RISER_IS_SLANTED=None
 STAIRS_TRISERTYPE_RISER_MATERIAL=None
 STAIRS_TRISERTYPE_RISER_PROFILE=None
 STAIRS_TRISERTYPE_RISER_STYLE=None
 STAIRS_TRISERTYPE_RISER_THICKNESS=None
 STAIRS_TRISERTYPE_RISER_TREAD_CONNECTION=None
 STAIRS_TRISERTYPE_TREAD=None
 STAIRS_TRISERTYPE_TREAD_MATERIAL=None
 STAIRS_TRISERTYPE_TREAD_PROFILE=None
 STAIRS_TRISERTYPE_TREAD_THICKNESS=None
 STAIRS_TRISER_IS_TYPE_OVERRIDDEN=None
 STAIRS_TRISER_NUMBER_BASE_INDEX=None
 STAIRS_TRISER_RISER_MARK=None
 STAIRS_TRISER_RISER_NUMBER=None
 STAIRS_TRISER_TREAD_MARK=None
 STAIRS_TRISER_TREAD_NUMBER=None
 STAIRS_UP_TEXT=None
 STAIRS_WINDERPATTERN_FILLET_INSIDE_CORNER=None
 STAIRS_WINDERPATTERN_MINIMUM_WIDTH_CORNER=None
 STAIRS_WINDERPATTERN_MINIMUM_WIDTH_INSIDE_WALKLINE=None
 STAIRS_WINDERPATTERN_NUMBER_OF_STRAIGHT_STEPS_AT_BEGIN=None
 STAIRS_WINDERPATTERN_NUMBER_OF_STRAIGHT_STEPS_AT_END=None
 STAIRS_WINDERPATTERN_RADIUS_INTERIOR=None
 STAIRS_WINDERPATTERN_STAIR_PATH_OFFSET=None
 STAIRS_WINDERPATTERN_WINDER_STYLE=None
 START_EXTENSION=None
 START_JOIN_CUTBACK=None
 START_SYMBOL_TYPE=None
 START_Y_JUSTIFICATION=None
 START_Y_OFFSET_VALUE=None
 START_Z_JUSTIFICATION=None
 START_Z_OFFSET_VALUE=None
 STRUCTURAL_ANALYTICAL_BEAM_HORIZONTAL_PROJECTION_PLANE=None
 STRUCTURAL_ANALYTICAL_BEAM_RIGID_LINK=None
 STRUCTURAL_ANALYTICAL_COLUMN_HORIZONTAL_PROJECTION_PLANE=None
 STRUCTURAL_ANALYTICAL_COLUMN_RIGID_LINK=None
 STRUCTURAL_ANALYTICAL_HARD_POINTS=None
 STRUCTURAL_ANALYTICAL_MODEL=None
 STRUCTURAL_ANALYTICAL_PROJECT_FLOOR_PLANE=None
 STRUCTURAL_ANALYTICAL_PROJECT_MEMBER_PLANE=None
 STRUCTURAL_ANALYTICAL_PROJECT_MEMBER_PLANE_COLUMN_BOTTOM=None
 STRUCTURAL_ANALYTICAL_PROJECT_MEMBER_PLANE_COLUMN_TOP=None
 STRUCTURAL_ANALYTICAL_TESSELLATE=None
 STRUCTURAL_ANALYTICAL_TESS_DEVIATION=None
 STRUCTURAL_ANALYZES_AS=None
 STRUCTURAL_ASSET_PARAM=None
 STRUCTURAL_ATTACHMENT_BASE_DISTANCE=None
 STRUCTURAL_ATTACHMENT_BASE_RATIO=None
 STRUCTURAL_ATTACHMENT_BASE_REFERENCEDEND=None
 STRUCTURAL_ATTACHMENT_BASE_TYPE=None
 STRUCTURAL_ATTACHMENT_END_LEVEL_REFERENCE=None
 STRUCTURAL_ATTACHMENT_END_REFELEMENT_END=None
 STRUCTURAL_ATTACHMENT_END_TYPE=None
 STRUCTURAL_ATTACHMENT_END_VALUE_DISTANCE=None
 STRUCTURAL_ATTACHMENT_END_VALUE_ELEVATION=None
 STRUCTURAL_ATTACHMENT_END_VALUE_RATIO=None
 STRUCTURAL_ATTACHMENT_START_LEVEL_REFERENCE=None
 STRUCTURAL_ATTACHMENT_START_REFELEMENT_END=None
 STRUCTURAL_ATTACHMENT_START_TYPE=None
 STRUCTURAL_ATTACHMENT_START_VALUE_DISTANCE=None
 STRUCTURAL_ATTACHMENT_START_VALUE_ELEVATION=None
 STRUCTURAL_ATTACHMENT_START_VALUE_RATIO=None
 STRUCTURAL_ATTACHMENT_TOP_DISTANCE=None
 STRUCTURAL_ATTACHMENT_TOP_RATIO=None
 STRUCTURAL_ATTACHMENT_TOP_REFERENCEDEND=None
 STRUCTURAL_ATTACHMENT_TOP_TYPE=None
 STRUCTURAL_BEAM_CUTBACK_FOR_COLUMN=None
 STRUCTURAL_BEAM_END0_ELEVATION=None
 STRUCTURAL_BEAM_END1_ELEVATION=None
 STRUCTURAL_BEAM_END_ATTACHMENT_DISTANCE=None
 STRUCTURAL_BEAM_END_ATTACHMENT_REFCOLUMN_END=None
 STRUCTURAL_BEAM_END_ATTACHMENT_TYPE=None
 STRUCTURAL_BEAM_END_SUPPORT=None
 STRUCTURAL_BEAM_ORIENTATION=None
 STRUCTURAL_BEAM_START_ATTACHMENT_DISTANCE=None
 STRUCTURAL_BEAM_START_ATTACHMENT_REFCOLUMN_END=None
 STRUCTURAL_BEAM_START_ATTACHMENT_TYPE=None
 STRUCTURAL_BEAM_START_SUPPORT=None
 STRUCTURAL_BEND_DIR_ANGLE=None
 STRUCTURAL_BOTTOM_RELEASE_FX=None
 STRUCTURAL_BOTTOM_RELEASE_FY=None
 STRUCTURAL_BOTTOM_RELEASE_FZ=None
 STRUCTURAL_BOTTOM_RELEASE_MX=None
 STRUCTURAL_BOTTOM_RELEASE_MY=None
 STRUCTURAL_BOTTOM_RELEASE_MZ=None
 STRUCTURAL_BOTTOM_RELEASE_TYPE=None
 STRUCTURAL_BRACE_REPRESENTATION=None
 STRUCTURAL_CAMBER=None
 STRUCTURAL_CONNECTION_APPROVAL_STATUS=None
 STRUCTURAL_CONNECTION_CODE_CHECKING_STATUS=None
 STRUCTURAL_CONNECTION_MODIFY_CONNECTION_PARAMETERS=None
 STRUCTURAL_CONNECTION_NOBLE_STATUS=None
 STRUCTURAL_CONNECTION_SYMBOL=None
 STRUCTURAL_COPING_DISTANCE=None
 STRUCTURAL_DISPLAY_IN_HIDDEN_VIEWS=None
 STRUCTURAL_DISPLAY_IN_HIDDEN_VIEWS_COLUMN=None
 STRUCTURAL_DISPLAY_IN_HIDDEN_VIEWS_FRAMING=None
 STRUCTURAL_ELEVATION_AT_BOTTOM=None
 STRUCTURAL_ELEVATION_AT_BOTTOM_CORE=None
 STRUCTURAL_ELEVATION_AT_BOTTOM_SURVEY=None
 STRUCTURAL_ELEVATION_AT_TOP=None
 STRUCTURAL_ELEVATION_AT_TOP_CORE=None
 STRUCTURAL_ELEVATION_AT_TOP_SURVEY=None
 STRUCTURAL_END_RELEASE_FX=None
 STRUCTURAL_END_RELEASE_FY=None
 STRUCTURAL_END_RELEASE_FZ=None
 STRUCTURAL_END_RELEASE_MX=None
 STRUCTURAL_END_RELEASE_MY=None
 STRUCTURAL_END_RELEASE_MZ=None
 STRUCTURAL_END_RELEASE_TYPE=None
 STRUCTURAL_FAMILY_CODE_NAME=None
 STRUCTURAL_FAMILY_NAME_KEY=None
 STRUCTURAL_FLOOR_ANALYZES_AS=None
 STRUCTURAL_FLOOR_CORE_THICKNESS=None
 STRUCTURAL_FOUNDATION_LENGTH=None
 STRUCTURAL_FOUNDATION_THICKNESS=None
 STRUCTURAL_FOUNDATION_WIDTH=None
 STRUCTURAL_FRAME_CUT_LENGTH=None
 STRUCTURAL_MATERIAL_PARAM=None
 STRUCTURAL_MATERIAL_TYPE=None
 STRUCTURAL_MEMBER_FORCES=None
 STRUCTURAL_NUMBER_OF_STUDS=None
 STRUCTURAL_REFERENCE_LEVEL_ELEVATION=None
 STRUCTURAL_SECTION_AREA=None
 STRUCTURAL_SECTION_BOTTOM_CUT_HEIGHT=None
 STRUCTURAL_SECTION_BOTTOM_CUT_WIDTH=None
 STRUCTURAL_SECTION_CANTILEVER_HEIGHT=None
 STRUCTURAL_SECTION_CANTILEVER_LENGTH=None
 STRUCTURAL_SECTION_COMMON_ALPHA=None
 STRUCTURAL_SECTION_COMMON_CENTROID_HORIZ=None
 STRUCTURAL_SECTION_COMMON_CENTROID_VERTICAL=None
 STRUCTURAL_SECTION_COMMON_DIAMETER=None
 STRUCTURAL_SECTION_COMMON_ELASTIC_MODULUS_STRONG_AXIS=None
 STRUCTURAL_SECTION_COMMON_ELASTIC_MODULUS_WEAK_AXIS=None
 STRUCTURAL_SECTION_COMMON_HEIGHT=None
 STRUCTURAL_SECTION_COMMON_MOMENT_OF_INERTIA_STRONG_AXIS=None
 STRUCTURAL_SECTION_COMMON_MOMENT_OF_INERTIA_WEAK_AXIS=None
 STRUCTURAL_SECTION_COMMON_NOMINAL_WEIGHT=None
 STRUCTURAL_SECTION_COMMON_PERIMETER=None
 STRUCTURAL_SECTION_COMMON_PLASTIC_MODULUS_STRONG_AXIS=None
 STRUCTURAL_SECTION_COMMON_PLASTIC_MODULUS_WEAK_AXIS=None
 STRUCTURAL_SECTION_COMMON_SHEAR_AREA_STRONG_AXIS=None
 STRUCTURAL_SECTION_COMMON_SHEAR_AREA_WEAK_AXIS=None
 STRUCTURAL_SECTION_COMMON_TORSIONAL_MODULUS=None
 STRUCTURAL_SECTION_COMMON_TORSIONAL_MOMENT_OF_INERTIA=None
 STRUCTURAL_SECTION_COMMON_WARPING_CONSTANT=None
 STRUCTURAL_SECTION_COMMON_WIDTH=None
 STRUCTURAL_SECTION_CPROFILE_FOLD_LENGTH=None
 STRUCTURAL_SECTION_HSS_INNERFILLET=None
 STRUCTURAL_SECTION_HSS_OUTERFILLET=None
 STRUCTURAL_SECTION_ISHAPE_BOLT_DIAMETER=None
 STRUCTURAL_SECTION_ISHAPE_BOLT_SPACING=None
 STRUCTURAL_SECTION_ISHAPE_BOLT_SPACING_BETWEEN_ROWS=None
 STRUCTURAL_SECTION_ISHAPE_BOLT_SPACING_TWO_ROWS=None
 STRUCTURAL_SECTION_ISHAPE_BOLT_SPACING_WEB=None
 STRUCTURAL_SECTION_ISHAPE_CLEAR_WEB_HEIGHT=None
 STRUCTURAL_SECTION_ISHAPE_FLANGEFILLET=None
 STRUCTURAL_SECTION_ISHAPE_FLANGETHICKNESS=None
 STRUCTURAL_SECTION_ISHAPE_FLANGE_TOE_OF_FILLET=None
 STRUCTURAL_SECTION_ISHAPE_WEBFILLET=None
 STRUCTURAL_SECTION_ISHAPE_WEBHEIGHT=None
 STRUCTURAL_SECTION_ISHAPE_WEBTHICKNESS=None
 STRUCTURAL_SECTION_ISHAPE_WEB_TOE_OF_FILLET=None
 STRUCTURAL_SECTION_IWELDED_BOTTOMFLANGETHICKNESS=None
 STRUCTURAL_SECTION_IWELDED_BOTTOMFLANGEWIDTH=None
 STRUCTURAL_SECTION_IWELDED_TOPFLANGETHICKNESS=None
 STRUCTURAL_SECTION_IWELDED_TOPFLANGEWIDTH=None
 STRUCTURAL_SECTION_LANGLE_BOLT_DIAMETER_LONGER_FLANGE=None
 STRUCTURAL_SECTION_LANGLE_BOLT_DIAMETER_SHORTER_FLANGE=None
 STRUCTURAL_SECTION_LANGLE_BOLT_SPACING_1_LONGER_FLANGE=None
 STRUCTURAL_SECTION_LANGLE_BOLT_SPACING_2_LONGER_FLANGE=None
 STRUCTURAL_SECTION_LANGLE_BOLT_SPACING_SHORTER_FLANGE=None
 STRUCTURAL_SECTION_LPROFILE_LIP_LENGTH=None
 STRUCTURAL_SECTION_NAME_KEY=None
 STRUCTURAL_SECTION_PIPESTANDARD_WALLDESIGNTHICKNESS=None
 STRUCTURAL_SECTION_PIPESTANDARD_WALLNOMINALTHICKNESS=None
 STRUCTURAL_SECTION_SHAPE=None
 STRUCTURAL_SECTION_SIGMA_PROFILE_BEND_WIDTH=None
 STRUCTURAL_SECTION_SIGMA_PROFILE_MIDDLE_BEND_WIDTH=None
 STRUCTURAL_SECTION_SIGMA_PROFILE_TOP_BEND_WIDTH=None
 STRUCTURAL_SECTION_TOP_CUT_HEIGHT=None
 STRUCTURAL_SECTION_TOP_CUT_WIDTH=None
 STRUCTURAL_SECTION_ZPROFILE_BOTTOM_FLANGE_LENGTH=None
 STRUCTURAL_START_RELEASE_FX=None
 STRUCTURAL_START_RELEASE_FY=None
 STRUCTURAL_START_RELEASE_FZ=None
 STRUCTURAL_START_RELEASE_MX=None
 STRUCTURAL_START_RELEASE_MY=None
 STRUCTURAL_START_RELEASE_MZ=None
 STRUCTURAL_START_RELEASE_TYPE=None
 STRUCTURAL_STICK_SYMBOL_LOCATION=None
 STRUCTURAL_TOP_RELEASE_FX=None
 STRUCTURAL_TOP_RELEASE_FY=None
 STRUCTURAL_TOP_RELEASE_FZ=None
 STRUCTURAL_TOP_RELEASE_MX=None
 STRUCTURAL_TOP_RELEASE_MY=None
 STRUCTURAL_TOP_RELEASE_MZ=None
 STRUCTURAL_TOP_RELEASE_TYPE=None
 STRUCTURAL_WALL_BOTTOM_PROJECTION_PLANE=None
 STRUCTURAL_WALL_PROJECTION_SURFACE=None
 STRUCTURAL_WALL_TOP_PROJECTION_PLANE=None
 STRUCT_CONNECTION_APPLY_TO=None
 STRUCT_CONNECTION_BEAM_END=None
 STRUCT_CONNECTION_BEAM_START=None
 STRUCT_CONNECTION_COLUMN_BASE=None
 STRUCT_CONNECTION_COLUMN_TOP=None
 STRUCT_CONNECTION_CUTBACK=None
 STRUCT_CONNECTION_TYPE_NAME=None
 STRUCT_FRAM_JOIN_STATUS=None
 SUPPORT_HAND_CLEARANCE=None
 SUPPORT_HEIGHT=None
 SURFACE_AREA=None
 SURFACE_PATTERN_ID_PARAM=None
 SURFACE_PERIMETER=None
 SWEEP_BASE_FLOOR_SUBCATEGORY_ID=None
 SWEEP_BASE_OFFSET=None
 SWEEP_BASE_ROOF_SUBCATEGORY_ID=None
 SWEEP_BASE_VERT_OFFSET=None
 SWEEP_MAX_SEG_ANGLE=None
 SWEEP_TRAJ_SEGMENTED=None
 SYMBOL_FAMILY_AND_TYPE_NAMES_PARAM=None
 SYMBOL_FAMILY_NAME_PARAM=None
 SYMBOL_ID_PARAM=None
 SYMBOL_NAME_PARAM=None
 TAG_LEADER_TYPE=None
 TAG_NO_BREAK_PARAM_STRINGS=None
 TAG_ORIENTATION_PARAM=None
 TAG_SAMPLE_TEXT=None
 TAG_TAG=None
 TEMPLATE_NAME=None
 TERMINATION_EXTENSION_LENGTH=None
 TEXT_ALIGNMENT=None
 TEXT_ALIGN_HORZ=None
 TEXT_ALIGN_VERT=None
 TEXT_BACKGROUND=None
 TEXT_BOX_VISIBILITY=None
 TEXT_COLOR=None
 TEXT_DIST_TO_LINE=None
 TEXT_FONT=None
 TEXT_POSITION=None
 TEXT_SIZE=None
 TEXT_STYLE_BOLD=None
 TEXT_STYLE_FONT=None
 TEXT_STYLE_ITALIC=None
 TEXT_STYLE_SIZE=None
 TEXT_STYLE_UNDERLINE=None
 TEXT_TAB_SIZE=None
 TEXT_TEXT=None
 TEXT_WIDTH_SCALE=None
 THERMAL_MATERIAL_PARAM_COMPRESSIBILITY=None
 THERMAL_MATERIAL_PARAM_ELECTRICAL_RESISTIVITY=None
 THERMAL_MATERIAL_PARAM_EMISSIVITY=None
 THERMAL_MATERIAL_PARAM_GAS_VISCOSITY=None
 THERMAL_MATERIAL_PARAM_LIQUID_VISCOSITY=None
 THERMAL_MATERIAL_PARAM_PERMEABILITY=None
 THERMAL_MATERIAL_PARAM_POROSITY=None
 THERMAL_MATERIAL_PARAM_REFLECTIVITY=None
 THERMAL_MATERIAL_PARAM_SPECIFIC_HEAT_OF_VAPORIZATION=None
 THERMAL_MATERIAL_PARAM_TRANSMITS_LIGHT=None
 THERMAL_MATERIAL_PARAM_VAPOR_PRESSURE=None
 TICK_MARK_PEN=None
 TILE_PATTERN_FAMREF_COMPONENT_EXTENTS=None
 TILE_PATTERN_GRID_CELLS_X=None
 TILE_PATTERN_GRID_CELLS_Y=None
 TILE_PATTERN_GRID_UNIT_X=None
 TILE_PATTERN_GRID_UNIT_Y=None
 TITLE_FONT=None
 TITLE_SIZE=None
 TITLE_STYLE_BOLD=None
 TITLE_STYLE_ITALIC=None
 TITLE_STYLE_UNDERLINE=None
 TRAP_MULL_WIDTH=None
 TRUSS_BEARING_CHORD_TOP_BOTTOM_PARAM=None
 TRUSS_ELEMENT_ANGLE_PARAM=None
 TRUSS_ELEMENT_BEARING_JUST_PARAM=None
 TRUSS_ELEMENT_CLASS_PARAM=None
 TRUSS_ELEMENT_CREATE_BOTTOM_PARAM=None
 TRUSS_ELEMENT_CREATE_TOP_PARAM=None
 TRUSS_ELEMENT_END0_ELEVATION=None
 TRUSS_ELEMENT_END1_ELEVATION=None
 TRUSS_ELEMENT_REFERENCE_LEVEL_PARAM=None
 TRUSS_ELEMENT_ROTATE_CHORDS_WITH_TRUSS=None
 TRUSS_ELEMENT_SPAN_PARAM=None
 TRUSS_ELEMENT_STICK_JUST_PARAM=None
 TRUSS_ELEMENT_TAG_NEW_MEMBERS_VIEW=None
 TRUSS_FAMILY_BOTTOM_CHORD_ANGLE_PARAM=None
 TRUSS_FAMILY_BOTTOM_CHORD_END_RELEASE_TYPE=None
 TRUSS_FAMILY_BOTTOM_CHORD_START_RELEASE_TYPE=None
 TRUSS_FAMILY_BOTTOM_CHORD_STRUCTURAL_TYPES_PARAM=None
 TRUSS_FAMILY_BOTTOM_CHORD_VERTICAL_PROJECTION_PARAM=None
 TRUSS_FAMILY_DIAG_WEB_ANGLE_PARAM=None
 TRUSS_FAMILY_DIAG_WEB_END_RELEASE_TYPE=None
 TRUSS_FAMILY_DIAG_WEB_START_RELEASE_TYPE=None
 TRUSS_FAMILY_DIAG_WEB_STRUCTURAL_TYPES_PARAM=None
 TRUSS_FAMILY_TOP_CHORD_ANGLE_PARAM=None
 TRUSS_FAMILY_TOP_CHORD_END_RELEASE_TYPE=None
 TRUSS_FAMILY_TOP_CHORD_START_RELEASE_TYPE=None
 TRUSS_FAMILY_TOP_CHORD_STRUCTURAL_TYPES_PARAM=None
 TRUSS_FAMILY_TOP_CHORD_VERTICAL_PROJECTION_PARAM=None
 TRUSS_FAMILY_TRANSFORMATION_PARAM=None
 TRUSS_FAMILY_VERT_WEB_ANGLE_PARAM=None
 TRUSS_FAMILY_VERT_WEB_END_RELEASE_TYPE=None
 TRUSS_FAMILY_VERT_WEB_START_RELEASE_TYPE=None
 TRUSS_FAMILY_VERT_WEB_STRUCTURAL_TYPES_PARAM=None
 TRUSS_FAMILY_WEBS_HAVE_SYMBOLIC_CUTBACK_PARAM=None
 TRUSS_HEIGHT=None
 TRUSS_LENGTH=None
 TRUSS_NON_BEARING_OFFSET_PARAM=None
 TYPE_WALL_CLOSURE=None
 UNIFORMAT_CODE=None
 UNIFORMAT_DESCRIPTION=None
 value__=None
 VIEWER3D_RENDER_SETTINGS=None
 VIEWER_ANNOTATION_CROP_ACTIVE=None
 VIEWER_BOUND_ACTIVE_BOTTOM=None
 VIEWER_BOUND_ACTIVE_FAR=None
 VIEWER_BOUND_ACTIVE_LEFT=None
 VIEWER_BOUND_ACTIVE_NEAR=None
 VIEWER_BOUND_ACTIVE_RIGHT=None
 VIEWER_BOUND_ACTIVE_TOP=None
 VIEWER_BOUND_FAR_CLIPPING=None
 VIEWER_BOUND_OFFSET_BOTTOM=None
 VIEWER_BOUND_OFFSET_FAR=None
 VIEWER_BOUND_OFFSET_LEFT=None
 VIEWER_BOUND_OFFSET_NEAR=None
 VIEWER_BOUND_OFFSET_RIGHT=None
 VIEWER_BOUND_OFFSET_TOP=None
 VIEWER_CROP_REGION=None
 VIEWER_CROP_REGION_DISABLED=None
 VIEWER_CROP_REGION_VISIBLE=None
 VIEWER_DETAIL_NUMBER=None
 VIEWER_EYE_ELEVATION=None
 VIEWER_IS_REFERENCE=None
 VIEWER_MODEL_CLIP_BOX_ACTIVE=None
 VIEWER_OPTION_VISIBILITY=None
 VIEWER_PERSPECTIVE=None
 VIEWER_PERSPECTIVE_DISABLED=None
 VIEWER_REFERENCE_LABEL=None
 VIEWER_REFERENCE_LABEL_TEXT=None
 VIEWER_SHEET_NUMBER=None
 VIEWER_SHOW_UNCROPPED=None
 VIEWER_TARGET_ELEVATION=None
 VIEWER_VOLUME_OF_INTEREST_CROP=None
 VIEWPORT_ATTR_LABEL_TAG=None
 VIEWPORT_ATTR_ORIENTATION_ON_SHEET=None
 VIEWPORT_ATTR_SHOW_BOX=None
 VIEWPORT_ATTR_SHOW_EXTENSION_LINE=None
 VIEWPORT_ATTR_SHOW_LABEL=None
 VIEWPORT_DETAIL_NUMBER=None
 VIEWPORT_SCALE=None
 VIEWPORT_SHEET_NAME=None
 VIEWPORT_SHEET_NUMBER=None
 VIEWPORT_VIEW_NAME=None
 VIEW_ANALYSIS_DISPLAY_STYLE=None
 VIEW_ANALYSIS_RESULTS_VISIBILITY=None
 VIEW_ASSOCIATED_ASSEMBLY_INSTANCE_ID=None
 VIEW_BACK_CLIPPING=None
 VIEW_CAMERA_ORIENTATION=None
 VIEW_CAMERA_POSITION=None
 VIEW_CLEAN_JOINS=None
 VIEW_DEPENDENCY=None
 VIEW_DEPTH=None
 VIEW_DESCRIPTION=None
 VIEW_DESIGN_OPTIONS_CONFIG=None
 VIEW_DETAIL_LEVEL=None
 VIEW_DISCIPLINE=None
 VIEW_FAMILY=None
 VIEW_FAMILY_AND_TYPE_SCHEDULES=None
 VIEW_FAMILY_SCHEDULES=None
 VIEW_FIXED_SKETCH_PLANE=None
 VIEW_GRAPH_SCHED_BOTTOM_LEVEL=None
 VIEW_GRAPH_SCHED_GRID_APPEARANCE=None
 VIEW_GRAPH_SCHED_GROUP_SIMILAR=None
 VIEW_GRAPH_SCHED_HIDDEN_LEVELS=None
 VIEW_GRAPH_SCHED_LEVEL_RELATIVE_BASE_TYPE=None
 VIEW_GRAPH_SCHED_LOCATIONS_HIGH=None
 VIEW_GRAPH_SCHED_LOCATIONS_LOW=None
 VIEW_GRAPH_SCHED_MATERIAL_TYPES=None
 VIEW_GRAPH_SCHED_NUMBER_COLUMNS=None
 VIEW_GRAPH_SCHED_OFF_GRID=None
 VIEW_GRAPH_SCHED_ROWS_COUNT=None
 VIEW_GRAPH_SCHED_ROWS_FROM=None
 VIEW_GRAPH_SCHED_TEXT_APPEARANCE=None
 VIEW_GRAPH_SCHED_TITLE=None
 VIEW_GRAPH_SCHED_TOP_LEVEL=None
 VIEW_GRAPH_SCHED_TOTAL_COLUMNS=None
 VIEW_GRAPH_SCHED_TOTAL_ROWS=None
 VIEW_GRAPH_SCHED_UNITS_FORMAT=None
 VIEW_GRAPH_SUN_PATH=None
 VIEW_GRAPH_SUN_PATH_SIZE=None
 VIEW_MODEL_DISPLAY_MODE=None
 VIEW_NAME=None
 VIEW_PARTS_VISIBILITY=None
 VIEW_PHASE=None
 VIEW_PHASE_FILTER=None
 VIEW_REFERENCING_DETAIL=None
 VIEW_REFERENCING_SHEET=None
 VIEW_SCALE=None
 VIEW_SCALE_CUSTOMNAME=None
 VIEW_SCALE_HAVENAME=None
 VIEW_SCALE_PULLDOWN_IMPERIAL=None
 VIEW_SCALE_PULLDOWN_METRIC=None
 VIEW_SCHEMA_SETTING_FOR_BUILDING=None
 VIEW_SCHEMA_SETTING_FOR_SYSTEM=None
 VIEW_SCHEMA_SETTING_FOR_SYSTEM_TEMPLATE=None
 VIEW_SHEET_VIEWPORT_INFO=None
 VIEW_SHOW_HIDDEN_LINES=None
 VIEW_SHOW_MASSING=None
 VIEW_SLANTED_COLUMN_SYMBOL_OFFSET=None
 VIEW_TEMPLATE=None
 VIEW_TEMPLATE_FOR_SCHEDULE=None
 VIEW_TYPE=None
 VIEW_TYPE_SCHEDULES=None
 VIEW_UNDERLAY_BOTTOM_ID=None
 VIEW_UNDERLAY_ORIENTATION=None
 VIEW_UNDERLAY_TOP_ID=None
 VIEW_VISIBLE_CATEGORIES=None
 VIS_GRAPHICS_ANALYTICAL_MODEL=None
 VIS_GRAPHICS_ANNOTATION=None
 VIS_GRAPHICS_DESIGNOPTIONS=None
 VIS_GRAPHICS_FILTERS=None
 VIS_GRAPHICS_IMPORT=None
 VIS_GRAPHICS_MODEL=None
 VIS_GRAPHICS_POINT_CLOUDS=None
 VIS_GRAPHICS_RVT_LINKS=None
 VIS_GRAPHICS_WORKSETS=None
 VOLUME_CUT=None
 VOLUME_FILL=None
 VOLUME_NET=None
 VOLUME_OF_INTEREST_NAME=None
 VOLUME_OF_INTEREST_VIEWS_VISIBLE=None
 WALKTHROUGH_FRAMES_COUNT=None
 WALL_ALIGN_KEY_REF_PARAM=None
 WALL_ATTR_DEFHEIGHT_PARAM=None
 WALL_ATTR_HEIGHT_PARAM=None
 WALL_ATTR_ROOM_BOUNDING=None
 WALL_ATTR_WIDTH_PARAM=None
 WALL_BASE_CONSTRAINT=None
 WALL_BASE_HEIGHT_PARAM=None
 WALL_BASE_OFFSET=None
 WALL_BOTTOM_EXTENSION_DIST_PARAM=None
 WALL_BOTTOM_IS_ATTACHED=None
 WALL_HEIGHT_TYPE=None
 WALL_KEY_REF_PARAM=None
 WALL_LOCATION_LINE_OFFSET_PARAM=None
 WALL_STRUCTURAL_SIGNIFICANT=None
 WALL_STRUCTURAL_USAGE_PARAM=None
 WALL_STRUCTURE_ID_PARAM=None
 WALL_SWEEP_CUTS_WALL_PARAM=None
 WALL_SWEEP_CUT_BY_INSERTS_PARAM=None
 WALL_SWEEP_DEFAULT_SETBACK_PARAM=None
 WALL_SWEEP_LEVEL_PARAM=None
 WALL_SWEEP_OFFSET_PARAM=None
 WALL_SWEEP_PROFILE_PARAM=None
 WALL_SWEEP_WALL_OFFSET_PARAM=None
 WALL_SWEEP_WALL_SUBCATEGORY_ID=None
 WALL_TOP_EXTENSION_DIST_PARAM=None
 WALL_TOP_IS_ATTACHED=None
 WALL_TOP_OFFSET=None
 WALL_USER_HEIGHT_PARAM=None
 WINDOW_CONSTRUCTION_TYPE=None
 WINDOW_HEIGHT=None
 WINDOW_INSET=None
 WINDOW_OPERATION_TYPE=None
 WINDOW_THICKNESS=None
 WINDOW_TYPE_ID=None
 WINDOW_WIDTH=None
 WITNS_LINE_EXTENSION=None
 WITNS_LINE_GAP_TO_ELT=None
 WITNS_LINE_TICK_MARK=None
 WRAPPING_AT_ENDS_PARAM=None
 WRAPPING_AT_INSERTS_PARAM=None
 YZ_JUSTIFICATION=None
 Y_JUSTIFICATION=None
 Y_OFFSET_VALUE=None
 ZONE_AIR_VOLUME_CALCULATION_TYPE_PARAM=None
 ZONE_AREA=None
 ZONE_AREA_GROSS=None
 ZONE_CALCULATED_AREA_PER_COOLING_LOAD_PARAM=None
 ZONE_CALCULATED_AREA_PER_HEATING_LOAD_PARAM=None
 ZONE_CALCULATED_COOLING_LOAD_PARAM=None
 ZONE_CALCULATED_COOLING_LOAD_PER_AREA_PARAM=None
 ZONE_CALCULATED_HEATING_LOAD_PARAM=None
 ZONE_CALCULATED_HEATING_LOAD_PER_AREA_PARAM=None
 ZONE_CALCULATED_SUPPLY_AIRFLOW_PARAM=None
 ZONE_CALCULATED_SUPPLY_AIRFLOW_PER_AREA_PARAM=None
 ZONE_COIL_BYPASS_PERCENTAGE_PARAM=None
 ZONE_COOLING_AIR_TEMPERATURE_PARAM=None
 ZONE_COOLING_INFORMATION_PARAM=None
 ZONE_COOLING_SET_POINT_PARAM=None
 ZONE_DEHUMIDIFICATION_SET_POINT_PARAM=None
 ZONE_HEATING_AIR_TEMPERATURE_PARAM=None
 ZONE_HEATING_INFORMATION_PARAM=None
 ZONE_HEATING_SET_POINT_PARAM=None
 ZONE_HUMIDIFICATION_SET_POINT_PARAM=None
 ZONE_LEVEL_ID=None
 ZONE_NAME=None
 ZONE_OA_RATE_PER_ACH_PARAM=None
 ZONE_OUTDOOR_AIR_INFORMATION_PARAM=None
 ZONE_OUTSIDE_AIR_PER_AREA_PARAM=None
 ZONE_OUTSIDE_AIR_PER_PERSON_PARAM=None
 ZONE_PERIMETER=None
 ZONE_PHASE=None
 ZONE_PHASE_ID=None
 ZONE_SERVICE_TYPE_PARAM=None
 ZONE_USE_AIR_CHANGES_PER_HOUR_PARAM=None
 ZONE_USE_DEHUMIDIFICATION_SETPOINT_PARAM=None
 ZONE_USE_HUMIDIFICATION_SETPOINT_PARAM=None
 ZONE_USE_OUTSIDE_AIR_PER_AREA_PARAM=None
 ZONE_USE_OUTSIDE_AIR_PER_PERSON_PARAM=None
 ZONE_VOLUME=None
 ZONE_VOLUME_GROSS=None
 Z_JUSTIFICATION=None
 Z_OFFSET_VALUE=None
class BuiltInParameterGroup(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 INVALID=None
 PG_ADSK_MODEL_PROPERTIES=None
 PG_AELECTRICAL=None
 PG_ANALYSIS_RESULTS=None
 PG_ANALYTICAL_ALIGNMENT=None
 PG_ANALYTICAL_MODEL=None
 PG_ANALYTICAL_PROPERTIES=None
 PG_AREA=None
 PG_CONCEPTUAL_ENERGY_DATA=None
 PG_CONCEPTUAL_ENERGY_DATA_BUILDING_SERVICES=None
 PG_CONSTRAINTS=None
 PG_CONSTRUCTION=None
 PG_CONTINUOUSRAIL_BEGIN_BOTTOM_EXTENSION=None
 PG_CONTINUOUSRAIL_END_TOP_EXTENSION=None
 PG_COUPLER_ARRAY=None
 PG_CURTAIN_GRID=None
 PG_CURTAIN_GRID_1=None
 PG_CURTAIN_GRID_2=None
 PG_CURTAIN_GRID_HORIZ=None
 PG_CURTAIN_GRID_U=None
 PG_CURTAIN_GRID_V=None
 PG_CURTAIN_GRID_VERT=None
 PG_CURTAIN_MULLION_1=None
 PG_CURTAIN_MULLION_2=None
 PG_CURTAIN_MULLION_HORIZ=None
 PG_CURTAIN_MULLION_VERT=None
 PG_DATA=None
 PG_DISPLAY=None
 PG_DIVISION_GEOMETRY=None
 PG_ELECTRICAL=None
 PG_ELECTRICAL_CIRCUITING=None
 PG_ELECTRICAL_LIGHTING=None
 PG_ELECTRICAL_LOADS=None
 PG_ENERGY_ANALYSIS=None
 PG_ENERGY_ANALYSIS_ADVANCED=None
 PG_ENERGY_ANALYSIS_BLDG_CONS_MTL_THERMAL_PROPS=None
 PG_ENERGY_ANALYSIS_BUILDING_DATA=None
 PG_ENERGY_ANALYSIS_CONCEPTUAL_MODEL=None
 PG_ENERGY_ANALYSIS_DETAILED_AND_CONCEPTUAL_MODELS=None
 PG_ENERGY_ANALYSIS_DETAILED_MODEL=None
 PG_ENERGY_ANALYSIS_ROOM_SPACE_DATA=None
 PG_FABRICATION_PRODUCT_DATA=None
 PG_FIRE_PROTECTION=None
 PG_FITTING=None
 PG_FLEXIBLE=None
 PG_FORCES=None
 PG_GENERAL=None
 PG_GEOMETRY=None
 PG_GEOMETRY_POSITIONING=None
 PG_GRAPHICS=None
 PG_GREEN_BUILDING=None
 PG_IDENTITY_DATA=None
 PG_IFC=None
 PG_INSULATION=None
 PG_LENGTH=None
 PG_LIGHT_PHOTOMETRICS=None
 PG_LINING=None
 PG_MATERIALS=None
 PG_MECHANICAL=None
 PG_MECHANICAL_AIRFLOW=None
 PG_MECHANICAL_LOADS=None
 PG_MOMENTS=None
 PG_NODES=None
 PG_OVERALL_LEGEND=None
 PG_PATTERN=None
 PG_PATTERN_APPLICATION=None
 PG_PHASING=None
 PG_PLUMBING=None
 PG_PRIMARY_END=None
 PG_PROFILE=None
 PG_PROFILE_1=None
 PG_PROFILE_2=None
 PG_RAILING_SYSTEM_FAMILY_HANDRAILS=None
 PG_RAILING_SYSTEM_FAMILY_SEGMENT_PATTERN=None
 PG_RAILING_SYSTEM_FAMILY_TOP_RAIL=None
 PG_RAILING_SYSTEM_SECONDARY_FAMILY_HANDRAILS=None
 PG_RAILING_SYSTEM_SEGMENT_PATTERN_REMAINDER=None
 PG_RAILING_SYSTEM_SEGMENT_PATTERN_REPEAT=None
 PG_RAILING_SYSTEM_SEGMENT_POSTS=None
 PG_RAILING_SYSTEM_SEGMENT_U_GRID=None
 PG_RAILING_SYSTEM_SEGMENT_V_GRID=None
 PG_REBAR_ARRAY=None
 PG_REBAR_SYSTEM_LAYERS=None
 PG_REFERENCE=None
 PG_RELEASES_MEMBER_FORCES=None
 PG_ROTATION_ABOUT=None
 PG_SECONDARY_END=None
 PG_SEGMENTS_FITTINGS=None
 PG_SLAB_SHAPE_EDIT=None
 PG_SPLIT_PROFILE_DIMENSIONS=None
 PG_STAIRS_CALCULATOR_RULES=None
 PG_STAIRS_OPEN_END_CONNECTION=None
 PG_STAIRS_SUPPORTS=None
 PG_STAIRS_TREADS_RISERS=None
 PG_STAIRS_WINDERS=None
 PG_STAIR_RISERS=None
 PG_STAIR_STRINGERS=None
 PG_STAIR_TREADS=None
 PG_STRUCTURAL=None
 PG_STRUCTURAL_ANALYSIS=None
 PG_SUPPORT=None
 PG_SYSTEMTYPE_RISEDROP=None
 PG_TERMINTATION=None
 PG_TEXT=None
 PG_TITLE=None
 PG_TRANSLATION_IN=None
 PG_TRUSS_FAMILY_BOTTOM_CHORD=None
 PG_TRUSS_FAMILY_DIAG_WEB=None
 PG_TRUSS_FAMILY_TOP_CHORD=None
 PG_TRUSS_FAMILY_VERT_WEB=None
 PG_UNDERLAY=None
 PG_VIEW_CAMERA=None
 PG_VIEW_EXTENTS=None
 PG_VISIBILITY=None
 value__=None
class CADExportOptions(object):
class CADLinkType(ElementType,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class CameraInfo(object,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 FarDistance=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Distance from eye point to far plane of view frustum along the view direction.
Get: FarDistance(self: CameraInfo) -> float
""" 
 HorizontalExtent=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Distance between left and right planes on the target plane.
Get: HorizontalExtent(self: CameraInfo) -> float
""" 
 IsPerspective=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies whether the projection is orthographic or perspective
Get: IsPerspective(self: CameraInfo) -> bool
""" 
 IsPespective=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies whether the projection is orthographic or perspective
Get: IsPespective(self: CameraInfo) -> bool
""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: CameraInfo) -> bool
""" 
 NearDistance=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Distance from eye point to near plane of view frustum along the view direction.
Get: NearDistance(self: CameraInfo) -> float
""" 
 RightOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Distance that the target plane is offset towards the right
   where right is normal to both Up direction and View direction.
   This offset shifts both left and right planes.
Get: RightOffset(self: CameraInfo) -> float
""" 
 TargetDistance=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Distance from eye point along view direction to target plane.
Get: TargetDistance(self: CameraInfo) -> float
""" 
 UpOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Distance that the target plane is offset in the direction of
   the Up direction. This offset shifts both top and bottom planes.
Get: UpOffset(self: CameraInfo) -> float
""" 
 VerticalExtent=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Distance between top and bottom planes on the target plane.
Get: VerticalExtent(self: CameraInfo) -> float
""" 
class CancellationListener(object,IDisposable):
 def Dispose(self):
  pass
 def IsCancelled(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: CancellationListener) -> bool
""" 
class CategoryNameMap(APIObject,IDisposable,IEnumerable):
 def Clear(self):
  pass
 def Contains(self,key):
  pass
 def Dispose(self):
  pass
 def Erase(self,key):
  pass
 def ForwardIterator(self):
  pass
 def GetEnumerator(self):
  pass
 def Insert(self,key,item):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def ReverseIterator(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __getitem__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 def __setitem__(self,*args):
  pass
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Test to see if the map is empty.
Get: IsEmpty(self: CategoryNameMap) -> bool
""" 
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the number of categories that are in the map.
Get: Size(self: CategoryNameMap) -> int
""" 
class Categories(CategoryNameMap,IDisposable,IEnumerable):
 def Contains(self,name):
  pass
 def Dispose(self):
  pass
 def ForwardIterator(self):
  pass
 def GetEnumerator(self):
  pass
 def Insert(self,key,item):
  pass
 def NewSubcategory(self,parentCategory,name):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def ReverseIterator(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __getitem__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 def __setitem__(self,*args):
  pass
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Whether or not the list of top-level categories is empty.
Get: IsEmpty(self: Categories) -> bool
""" 
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The total number of top-level categories in the document.
Get: Size(self: Categories) -> int
""" 
class Category(APIObject,IDisposable):
 def Dispose(self):
  pass
 @staticmethod
 def GetCategory(document,categoryId):
  pass
 def GetGraphicsStyle(self,graphicsStyleType):
  pass
 def GetHashCode(self):
  pass
 def GetLinePatternId(self,graphicsStyleType):
  pass
 def GetLineWeight(self,graphicsStyleType):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def SetLinePatternId(self,linePatternId,graphicsStyleType):
  pass
 def SetLineWeight(self,lineWeight,graphicsStyleType):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 AllowsBoundParameters=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """To check if the category can have project parameters.
Get: AllowsBoundParameters(self: Category) -> bool
""" 
 CanAddSubcategory=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Indicates if subcategories can be assigned to the category.
Get: CanAddSubcategory(self: Category) -> bool
""" 
 CategoryType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Gets the category type of this category.
Get: CategoryType(self: Category) -> CategoryType
""" 
 HasMaterialQuantities=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if elements of the category are able to report what materials they contain in what quantities.
Get: HasMaterialQuantities(self: Category) -> bool
""" 
 Id=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the category id associated with the category object.
Get: Id(self: Category) -> ElementId
""" 
 IsCuttable=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Indicates if the category is cuttable or not.
Get: IsCuttable(self: Category) -> bool
""" 
 IsTagCategory=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if the category is associated with a type of tag for a different category.
Get: IsTagCategory(self: Category) -> bool
""" 
 LineColor=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The color of lines shown for elements of this category.
Get: LineColor(self: Category) -> Color
Set: LineColor(self: Category) = value
""" 
 Material=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves or changes the material of the category.
Get: Material(self: Category) -> Material
Set: Material(self: Category) = value
""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The category name.
Get: Name(self: Category) -> str
""" 
 Parent=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the parent category of this category.
Get: Parent(self: Category) -> Category
""" 
 SubCategories=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns a map containing all of the subcategories of this category.
Get: SubCategories(self: Category) -> CategoryNameMap
""" 
class CategoryNameMapIterator(APIObject,IDisposable,IEnumerator):
 def Dispose(self):
  pass
 def MoveNext(self):
  pass
 def next(self,*args):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Reset(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 Current=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves the category that is the current focus of the iterator.
Get: Current(self: CategoryNameMapIterator) -> object
""" 
 Key=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves the category name that is the current focus of the iterator.
Get: Key(self: CategoryNameMapIterator) -> str
""" 
class CategorySet(APIObject,IDisposable,IEnumerable):
 def Clear(self):
  pass
 def Contains(self,item):
  pass
 def Dispose(self):
  pass
 def Erase(self,item):
  pass
 def ForwardIterator(self):
  pass
 def GetEnumerator(self):
  pass
 def Insert(self,item):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def ReverseIterator(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Test to see if the set is empty.
Get: IsEmpty(self: CategorySet) -> bool
""" 
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the number of categories that are in the set.
Get: Size(self: CategorySet) -> int
""" 
class CategorySetIterator(APIObject,IDisposable,IEnumerator):
 def Dispose(self):
  pass
 def MoveNext(self):
  pass
 def next(self,*args):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Reset(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 Current=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves the item that is the current focus of the iterator.
Get: Current(self: CategorySetIterator) -> object
""" 
class CategoryType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 AnalyticalModel=None
 Annotation=None
 Internal=None
 Invalid=None
 Model=None
 value__=None
class HostObject(Element,IDisposable):
 def Dispose(self):
  pass
 def FindInserts(self,addRectOpenings,includeShadows,includeEmbeddedWalls,includeSharedEmbeddedInserts):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class CeilingAndFloor(HostObject,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class Ceiling(CeilingAndFloor,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class CeilingType(HostObjAttributes,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 ThermalProperties=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The calculated and settable thermal properties of the CeilingType
Get: ThermalProperties(self: CeilingType) -> ThermalProperties
""" 
class CellType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 CalculatedValue=None
 CombinedParameter=None
 Graphic=None
 Inherited=None
 Parameter=None
 ParameterText=None
 Text=None
 value__=None
class ChangePriority(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Annotations=None
 Connections=None
 DetailComponents=None
 DoorsOpeningsWindows=None
 FloorsRoofsStructuralWalls=None
 FreeStandingComponents=None
 GridsLevelsReferencePlanes=None
 InteriorWalls=None
 Masses=None
 MEPAccessoriesFittingsSegmentsWires=None
 MEPCalculations=None
 MEPFixtures=None
 MEPSystems=None
 Rebar=None
 RoomsSpacesZones=None
 Structure=None
 value__=None
 Views=None
class ChangeType(object,IDisposable):
 @staticmethod
 def ConcatenateChangeTypes(changeType1,changeType2):
  pass
 def Contains(self,changeType):
  pass
 def Dispose(self):
  pass
 def IsIdentical(self,changeType):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ChangeType) -> bool
""" 
class CheckoutStatus(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 NotOwned=None
 OwnedByCurrentUser=None
 OwnedByOtherUser=None
 value__=None
class City(APIObject,IDisposable):
 def Dispose(self):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Latitude=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Latitude of the city
Get: Latitude(self: City) -> float
""" 
 Longitude=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Longitude of the city
Get: Longitude(self: City) -> float
""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The name of the city
Get: Name(self: City) -> str
""" 
 TimeZone=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Time-zone in which the city resides
Get: TimeZone(self: City) -> float
""" 
 WeatherStation=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """An identifier for the nearest weather station
Get: WeatherStation(self: City) -> str
""" 
class CitySet(APIObject,IDisposable,IEnumerable):
 def Clear(self):
  pass
 def Contains(self,item):
  pass
 def Dispose(self):
  pass
 def Erase(self,item):
  pass
 def ForwardIterator(self):
  pass
 def GetEnumerator(self):
  pass
 def Insert(self,item):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def ReverseIterator(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Test to see if the set is empty.
Get: IsEmpty(self: CitySet) -> bool
""" 
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the number of cities that are in the set.
Get: Size(self: CitySet) -> int
""" 
class CitySetIterator(APIObject,IDisposable,IEnumerator):
 def Dispose(self):
  pass
 def MoveNext(self):
  pass
 def next(self,*args):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Reset(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 Current=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves the item that is the current focus of the iterator.
Get: Current(self: CitySetIterator) -> object
""" 
class KeyBasedTreeEntries(object,IEnumerable[KeyBasedTreeEntry],IEnumerable,IDisposable):
 def Dispose(self):
  pass
 def FindEntry(self,key):
  pass
 def GetEnumerator(self):
  pass
 def GetKeyBasedTreeEntriesIterator(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __contains__(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: KeyBasedTreeEntries) -> bool
""" 
class ClassificationEntries(KeyBasedTreeEntries,IEnumerable[KeyBasedTreeEntry],IEnumerable,IDisposable):
 def Dispose(self):
  pass
 @staticmethod
 def LoadClassificationEntriesFromFile(filePath,loadContent):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
class KeyBasedTreeEntry(object,IDisposable):
 def Dispose(self):
  pass
 def GetChildrenKeys(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: KeyBasedTreeEntry) -> bool
""" 
 Key=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The key of this entry.
Get: Key(self: KeyBasedTreeEntry) -> str
""" 
 ParentKey=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The parent key of this entry.
Get: ParentKey(self: KeyBasedTreeEntry) -> str
""" 
class ClassificationEntry(KeyBasedTreeEntry,IDisposable):
 def Dispose(self):
  pass
 def HasBadCategoryId(self):
  pass
 def HasBadLevel(self):
  pass
 def HasInvalidKey(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,key,parentKey,description,level,categoryId):
  pass
 CategoryId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The id of the category associated with this entry.
Get: CategoryId(self: ClassificationEntry) -> ElementId
""" 
 Description=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The description associated with this entry.
Get: Description(self: ClassificationEntry) -> str
""" 
 Level=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The entry level in the classification table. The expected range is between 1 and 5 inclusive.
Get: Level(self: ClassificationEntry) -> int
""" 
class Color(APIObject,IDisposable):
 def Dispose(self):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,red,green,blue):
  pass
 Blue=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Get the blue channel of the color.  Setting a channel is obsolete in Autodesk Revit 2013.  Please create a new color instead.
Get: Blue(self: Color) -> Byte
Set: Blue(self: Color) = value
""" 
 Green=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Get the green channel of the color.  Setting a channel is obsolete in Autodesk Revit 2013.  Please create a new color instead.
Get: Green(self: Color) -> Byte
Set: Green(self: Color) = value
""" 
 IsValid=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if the color represents a valid color, or an uninitialized/invalid value.
Get: IsValid(self: Color) -> bool
""" 
 Red=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Get the red channel of the color.  Setting a channel is obsolete in Autodesk Revit 2013.  Please create a new color instead.
Get: Red(self: Color) -> Byte
Set: Red(self: Color) = value
""" 
 InvalidColorValue=None
class ColorBackgroundSettings(BackgroundSettings,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Color=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The color of the rendering background.
Get: Color(self: ColorBackgroundSettings) -> Color
Set: Color(self: ColorBackgroundSettings) = value
""" 
class ColorDepthType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 BlackLine=None
 Color=None
 GrayScale=None
 value__=None
class ColorWithTransparency(object,IDisposable):
 def Dispose(self):
  pass
 def GetBlue(self):
  pass
 def GetColor(self):
  pass
 def GetGreen(self):
  pass
 def GetRed(self):
  pass
 def GetTransparency(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def SetBlue(self,blue):
  pass
 def SetColor(self,color):
  pass
 def SetGreen(self,green):
  pass
 def SetRed(self,red):
  pass
 def SetTransparency(self,transparency):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,red=None,green=None,blue=None,transparency=None):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ColorWithTransparency) -> bool
""" 
class ColumnAttachment(object,IDisposable):
 @staticmethod
 def AddColumnAttachment(doc,column,target,baseOrTop,cutColumnStyle,justification,attachOffset):
  pass
 def Dispose(self):
  pass
 @staticmethod
 def GetColumnAttachment(column,*__args):
  pass
 @staticmethod
 def IsValidColumn(familyInstance):
  pass
 @staticmethod
 def IsValidTarget(*__args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 @staticmethod
 def RemoveColumnAttachment(column,*__args):
  pass
 def SetJustification(self,justification):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 AttachOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The offset of the column attachment.
Get: AttachOffset(self: ColumnAttachment) -> float
Set: AttachOffset(self: ColumnAttachment) = value
""" 
 BaseOrTop=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if this ColumnAttachment is at the base or top of the column.
Get: BaseOrTop(self: ColumnAttachment) -> int
""" 
 CutStyle=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies whether the column, or the attached element should be cut (or if neither should be cut).
Get: CutStyle(self: ColumnAttachment) -> ColumnAttachmentCutStyle
""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ColumnAttachment) -> bool
""" 
 Justification=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies the type of justification to apply to this ColumnAttachment.
Get: Justification(self: ColumnAttachment) -> ColumnAttachmentJustification
""" 
 TargetId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The id of the element that is attached to the column and is described by this ColumnAttachment.
Get: TargetId(self: ColumnAttachment) -> ElementId
""" 
class ColumnAttachmentCutStyle(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 CutColumn=None
 CutTarget=None
 None=None
 value__=None
class ColumnAttachmentJustification(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Maximum=None
 Midpoint=None
 Minimum=None
 Tangent=None
 value__=None
class CombinableElementArray(APIObject,IDisposable,IEnumerable):
 def Append(self,item):
  pass
 def Clear(self):
  pass
 def Dispose(self):
  pass
 def ForwardIterator(self):
  pass
 def GetEnumerator(self):
  pass
 def Insert(self,item,index):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def ReverseIterator(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __getitem__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 def __setitem__(self,*args):
  pass
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Test to see if the array is empty.
Get: IsEmpty(self: CombinableElementArray) -> bool
""" 
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the number of CombinableElements that are in the array.
Get: Size(self: CombinableElementArray) -> int
""" 
class CombinableElementArrayIterator(APIObject,IDisposable,IEnumerator):
 def Dispose(self):
  pass
 def MoveNext(self):
  pass
 def next(self,*args):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Reset(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 Current=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves the item that is the current focus of the iterator.
Get: Current(self: CombinableElementArrayIterator) -> object
""" 
class ComponentRepeater(Element,IDisposable,IEnumerable[ComponentRepeaterSlot],IEnumerable):
 @staticmethod
 def CanElementBeRepeated(ADoc,elementId):
  pass
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetEnumerator(self):
  pass
 def IsTypeValidForRepeater(self,typeId):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 @staticmethod
 def RemoveRepeaters(document,elementIds):
  pass
 @staticmethod
 def RepeatElements(document,elementIds):
  pass
 def setElementType(self,*args):
  pass
 def __contains__(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 DefaultFamilyType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The default family type for the component repeater.
Get: DefaultFamilyType(self: ComponentRepeater) -> ElementId
Set: DefaultFamilyType(self: ComponentRepeater) = value
""" 
 DimensionCount=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The dimension count of the component repeater.
Get: DimensionCount(self: ComponentRepeater) -> int
""" 
class ComponentRepeaterIterator(object,IEnumerator[ComponentRepeaterSlot],IDisposable,IEnumerator):
 def Dispose(self):
  pass
 def GetCurrent(self):
  pass
 def IsDone(self):
  pass
 def MoveNext(self):
  pass
 def next(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Reset(self):
  pass
 def __contains__(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 Current=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Gets the item at the current position of the iterator.
Get: Current(self: ComponentRepeaterIterator) -> ComponentRepeaterSlot
""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ComponentRepeaterIterator) -> bool
""" 
class ComponentRepeaterSlot(Element,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def IsTypeValidForSlot(self,typeId):
  pass
 def MakeDefault(self):
  pass
 def MakeEmpty(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 FamilyType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The id of the family type of the component in the slot, or invalid id if the slot is empty.
Get: FamilyType(self: ComponentRepeaterSlot) -> ElementId
Set: FamilyType(self: ComponentRepeaterSlot) = value
""" 
 IsDefault=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """A flag indicating whether the slot currently holds an instance of the default family type of the component repeater.
Get: IsDefault(self: ComponentRepeaterSlot) -> bool
""" 
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """A flag indicating whether the slot is currently empty.
Get: IsEmpty(self: ComponentRepeaterSlot) -> bool
""" 
class ComponentRotation(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Angle0=None
 Angle180=None
 Angle270=None
 Angle90=None
 value__=None
class CompoundStructure(object,IDisposable):
 def AddWallSweep(self,wallSweepInfo):
  pass
 def AssociateRegionWithLayer(self,regionId,layerIdx):
  pass
 def CanLayerBeStructuralMaterial(self,layerIndex):
  pass
 def CanLayerBeVariable(self,variableLayerIndex):
  pass
 def CanLayerWidthBeNonZero(self,layerIdx):
  pass
 def ChangeRegionWidth(self,regionId,newWidth):
  pass
 def ClearWallSweeps(self,wallSweepType):
  pass
 @staticmethod
 def CreateSimpleCompoundStructure(layers):
  pass
 @staticmethod
 def CreateSingleLayerCompoundStructure(*__args):
  pass
 def DeleteLayer(self,layerIdx):
  pass
 def Dispose(self):
  pass
 def FindEnclosingRegionAndSegments(self,gridUV,splitDirection,segmentId1,segmentId2):
  pass
 def GetAdjacentRegions(self,segmentId):
  pass
 def GetCoreBoundaryLayerIndex(self,shellLayerType):
  pass
 def GetDeckEmbeddingType(self,layerIdx):
  pass
 def GetDeckProfileId(self,layerIdx):
  pass
 def GetExtendableRegionIds(self,top):
  pass
 def GetFirstCoreLayerIndex(self):
  pass
 def GetLastCoreLayerIndex(self):
  pass
 def GetLayerAssociatedToRegion(self,regionId):
  pass
 def GetLayerFunction(self,layerIdx):
  pass
 def GetLayers(self):
  pass
 def GetLayerWidth(self,layerIdx):
  pass
 def GetMaterialId(self,layerIdx):
  pass
 @staticmethod
 def GetMinimumLayerThickness():
  pass
 def GetNumberOfShellLayers(self,shellLayerType):
  pass
 def GetOffsetForLocationLine(self,wallLocationLine):
  pass
 def GetPreviousNonZeroLayerIndex(self,thisIdx):
  pass
 def GetRegionEnvelope(self,regionId):
  pass
 def GetRegionIds(self):
  pass
 def GetRegionsAlongLevel(self,height):
  pass
 def GetRegionsAssociatedToLayer(self,layerIdx):
  pass
 def GetSegmentCoordinate(self,segmentId):
  pass
 def GetSegmentEndPoints(self,segmentId,regionId,end1,end2):
  pass
 def GetSegmentIds(self):
  pass
 def GetSegmentOrientation(self,segmentId):
  pass
 def GetSimpleCompoundStructure(self,wallHeight,distAboveBase):
  pass
 def GetWallSweepsInfo(self,wallSweepType):
  pass
 def GetWidth(self,regionId=None):
  pass
 def IsCoreLayer(self,layerIdx):
  pass
 def IsEqual(self,otherStructure):
  pass
 def IsLayerValid(self,layerIdx,layer):
  pass
 def IsRectangularRegion(self,regionId):
  pass
 def IsSimpleRegion(self,regionId):
  pass
 def IsStructuralDeck(self,layerIdx):
  pass
 def IsValid(self,doc,errMap,twoLayerErrorsMap):
  pass
 def IsValidRegionId(self,regionId):
  pass
 def IsValidSampleHeight(self,height):
  pass
 def IsValidSegmentId(self,segmentId):
  pass
 def IsVerticallyHomogeneous(self):
  pass
 def MergeRegionsAdjacentToSegment(self,segmentId,layerIdxForMergedRegion):
  pass
 def ParticipatesInWrapping(self,layerIdx):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def RemoveWallSweep(self,wallSweepType,id):
  pass
 def SetDeckEmbeddingType(self,layerIdx,embedType):
  pass
 def SetDeckProfileId(self,layerIdx,profileId):
  pass
 def SetExtendableRegionIds(self,top,regionIds):
  pass
 def SetLayer(self,layerIdx,layer):
  pass
 def SetLayerFunction(self,layerIdx,function):
  pass
 def SetLayers(self,layers):
  pass
 def SetLayerWidth(self,layerIdx,width):
  pass
 def SetMaterialId(self,layerIdx,materialId):
  pass
 def SetNumberOfShellLayers(self,shellLayerType,numLayers):
  pass
 def SetParticipatesInWrapping(self,layerIdx,participatesInWrapping):
  pass
 def SplitRegion(self,gridUV,splitDirection,newSegmentId=None):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 CutoffHeight=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Horizontal segments below or at the cutoff height have their distance to the wall bottom fixed, those above
   have their distance to the wall top fixed.
Get: CutoffHeight(self: CompoundStructure) -> float
Set: CutoffHeight(self: CompoundStructure) = value
""" 
 EndCap=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Indicates the end cap condition defining which shell layers will participate in end wrapping.
Get: EndCap(self: CompoundStructure) -> EndCapCondition
Set: EndCap(self: CompoundStructure) = value
""" 
 HasStructuralDeck=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Checks if the compound structure has a structural deck.
Get: HasStructuralDeck(self: CompoundStructure) -> bool
""" 
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Checks whether this CompoundStructure is empty.
Get: IsEmpty(self: CompoundStructure) -> bool
""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: CompoundStructure) -> bool
""" 
 IsVerticallyCompound=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if this CompoundStructure represents a layout that is more complicated than a simple set of parallel layers.
Get: IsVerticallyCompound(self: CompoundStructure) -> bool
""" 
 LayerCount=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the number of layers contained in this CompoundStructure.
Get: LayerCount(self: CompoundStructure) -> int
""" 
 MinimumSampleHeight=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The minimum sample height determined by the current sample height and the horizontal segments.
Get: MinimumSampleHeight(self: CompoundStructure) -> float
""" 
 OpeningWrapping=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Indicates the opening wrapping condition defining which shell layers of a wall, in plan view, wrap at inserts and openings.
Get: OpeningWrapping(self: CompoundStructure) -> OpeningWrappingCondition
Set: OpeningWrapping(self: CompoundStructure) = value
""" 
 SampleHeight=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The sample height is the presumed height of the wall to which the data in this CompoundStructure is applied.
Get: SampleHeight(self: CompoundStructure) -> float
Set: SampleHeight(self: CompoundStructure) = value
""" 
 StructuralMaterialIndex=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Indicates the layer whose material defines the structural properties of the type for the purposes of analysis.
Get: StructuralMaterialIndex(self: CompoundStructure) -> int
Set: StructuralMaterialIndex(self: CompoundStructure) = value
""" 
 VariableLayerIndex=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Indicates the index of the layer which is designated as variable.
Get: VariableLayerIndex(self: CompoundStructure) -> int
Set: VariableLayerIndex(self: CompoundStructure) = value
""" 
class CompoundStructureError(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 BadShellOrder=None
 BadShellsStructure=None
 CoreTooThin=None
 DeckCantBoundAbove=None
 DeckCantBoundBelow=None
 ExtensibleRegionsNotContiguousAlongBottom=None
 ExtensibleRegionsNotContiguousAlongTop=None
 InvalidMaterialId=None
 InvalidProfileId=None
 MembraneTooThick=None
 NonmembraneTooThin=None
 ThinOuterLayer=None
 value__=None
 VarThickLayerCantBeZero=None
 VerticalUnusedLayer=None
 VerticalWrongOrderCoreExterior=None
 VerticalWrongOrderCoreInterior=None
 VerticalWrongOrderLayer=None
 VerticalWrongOrderMembrane=None
class CompoundStructureLayer(object,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,*__args):
  pass
 def __repr__(self,*args):
  pass
 DeckEmbeddingType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Embedding type for structural deck - only for a layer whose function is StructuralDeck.
Get: DeckEmbeddingType(self: CompoundStructureLayer) -> StructDeckEmbeddingType
Set: DeckEmbeddingType(self: CompoundStructureLayer) = value
""" 
 DeckProfileId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The ElementId of the structural deck profile - only for a layer whose function is StructuralDeck.
Get: DeckProfileId(self: CompoundStructureLayer) -> ElementId
Set: DeckProfileId(self: CompoundStructureLayer) = value
""" 
 Function=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The function of the layer.
Get: Function(self: CompoundStructureLayer) -> MaterialFunctionAssignment
Set: Function(self: CompoundStructureLayer) = value
""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: CompoundStructureLayer) -> bool
""" 
 LayerCapFlag=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if the layer participates in wrapping at end caps and/or inserts.
Get: LayerCapFlag(self: CompoundStructureLayer) -> bool
Set: LayerCapFlag(self: CompoundStructureLayer) = value
""" 
 LayerId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The id of the layer - note that this may be different from the index in the array of layers in a CompoundStructure.
Get: LayerId(self: CompoundStructureLayer) -> int
""" 
 MaterialId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Id of the material assigned to this layer.
Get: MaterialId(self: CompoundStructureLayer) -> ElementId
Set: MaterialId(self: CompoundStructureLayer) = value
""" 
 Width=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Width of the layer.
Get: Width(self: CompoundStructureLayer) -> float
Set: Width(self: CompoundStructureLayer) = value
""" 
class ConfigurationReloadInfo(object,IDisposable):
 def Dispose(self):
  pass
 def GetConnectivityValidation(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 Disconnects=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The number of disconnections caused by the reload.
Get: Disconnects(self: ConfigurationReloadInfo) -> int
""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ConfigurationReloadInfo) -> bool
""" 
 ProfileNotAvailable=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The current profile is not available in the disk configuration.
Get: ProfileNotAvailable(self: ConfigurationReloadInfo) -> bool
""" 
class Face(GeometryObject,IDisposable):
 def ComputeDerivatives(self,point):
  pass
 def ComputeNormal(self,point):
  pass
 def ComputeSecondDerivatives(self,point):
  pass
 def Dispose(self):
  pass
 def Evaluate(self,params):
  pass
 def GetBoundingBox(self):
  pass
 def GetEdgesAsCurveLoops(self):
  pass
 def GetRegions(self):
  pass
 def Intersect(self,*__args):
  pass
 def IsInside(self,point,result=None):
  pass
 def Project(self,point):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Triangulate(self,levelOfDetail=None):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Area=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The area of this face.
Get: Area(self: Face) -> float
""" 
 EdgeLoops=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """A collection of edge loops.  Each edge loop represents one of the closed boundaries of the face.
Get: EdgeLoops(self: Face) -> EdgeArrayArray
""" 
 HasRegions=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if the face contains regions (which can be created, for example, by the Split Face command).
Get: HasRegions(self: Face) -> bool
""" 
 IsTwoSided=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Determines if a face is two-sided (degenerate).
Get: IsTwoSided(self: Face) -> bool
""" 
 MaterialElementId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The element ID of the material from which this face is composed.
Get: MaterialElementId(self: Face) -> ElementId
""" 
 Reference=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns a stable reference to the face.
Get: Reference(self: Face) -> Reference
""" 
class ConicalFace(Face,IDisposable):
 def Dispose(self):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Axis=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Axis of the surface.
Get: Axis(self: ConicalFace) -> XYZ
""" 
 HalfAngle=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Half angle of the surface.
Get: HalfAngle(self: ConicalFace) -> float
""" 
 Origin=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Origin of the surface.
Get: Origin(self: ConicalFace) -> XYZ
""" 
class Surface(object,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: Surface) -> bool
""" 
class ConicalSurface(Surface,IDisposable):
 @staticmethod
 def Create(frameOfReference,halfAngle):
  pass
 def Dispose(self):
  pass
 def GetFrameOfReference(self):
  pass
 @staticmethod
 def IsValidConeAngle(halfAngle):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Axis=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Axis of the cone. This is the Z axis of the local coordinate system associated with this cone.
Get: Axis(self: ConicalSurface) -> XYZ
""" 
 HalfAngle=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Cone angle.
Get: HalfAngle(self: ConicalSurface) -> float
""" 
 Origin=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Apex of the cone. This is the origin of the local coordinate system associated with this cone.
Get: Origin(self: ConicalSurface) -> XYZ
""" 
 XDir=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """X axis of the local coordinate system associated with this cone.
Get: XDir(self: ConicalSurface) -> XYZ
""" 
 YDir=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """X axis of the local coordinate system associated with this cone.
Get: YDir(self: ConicalSurface) -> XYZ
""" 
class ConnectionResolution(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Disconnected=None
 value__=None
class ConnectionValidationInfo(object,IDisposable):
 def Dispose(self):
  pass
 def GetWarning(self,index):
  pass
 def IsValidWarningIndex(self,index):
  pass
 def ManyWarnings(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ConnectionValidationInfo) -> bool
""" 
class ConnectionValidationWarning(object,IDisposable):
 def Dispose(self):
  pass
 def GetParts(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,resolution,reason,part1,part2):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ConnectionValidationWarning) -> bool
""" 
 Reason=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Enumeration for reason of warning.
Get: Reason(self: ConnectionValidationWarning) -> ConnectionWarning
""" 
 Resolution=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Enumeration for resolution that was applied.
Get: Resolution(self: ConnectionValidationWarning) -> ConnectionResolution
""" 
class ConnectionWarning(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Alignment=None
 Connectivity=None
 Shape=None
 Size=None
 Unknown=None
 value__=None
class Connector(object,IConnector,IDisposable):
 def ConnectTo(self,connector):
  pass
 def DisconnectFrom(self,connector):
  pass
 def Dispose(self):
  pass
 def GetFabricationConnectorInfo(self):
  pass
 def GetMEPConnectorInfo(self):
  pass
 def IsConnectedTo(self,connector):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 AllowsSlopeAdjustments=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Indicates if the connector allows the slope adjustment.
Get: AllowsSlopeAdjustments(self: Connector) -> bool
""" 
 AllRefs=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """All references of the connector.
Get: AllRefs(self: Connector) -> ConnectorSet
""" 
 Angle=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The angle of the Connector.
Get: Angle(self: Connector) -> float
Set: Angle(self: Connector) = value
""" 
 AssignedDuctFlowConfiguration=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The assigned duct flow configuration of the connector.
Get: AssignedDuctFlowConfiguration(self: Connector) -> DuctFlowConfigurationType
""" 
 AssignedDuctLossMethod=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The duct loss method of the connector.
Get: AssignedDuctLossMethod(self: Connector) -> DuctLossMethodType
""" 
 AssignedFixtureUnits=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The assigned fixture units of the connector.
Get: AssignedFixtureUnits(self: Connector) -> float
Set: AssignedFixtureUnits(self: Connector) = value
""" 
 AssignedFlow=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The assigned flow of the connector.
Get: AssignedFlow(self: Connector) -> float
Set: AssignedFlow(self: Connector) = value
""" 
 AssignedFlowDirection=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The assigned flow direction of the connector.
Get: AssignedFlowDirection(self: Connector) -> FlowDirectionType
""" 
 AssignedFlowFactor=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The assigned flow factor of this connector.
Get: AssignedFlowFactor(self: Connector) -> float
Set: AssignedFlowFactor(self: Connector) = value
""" 
 AssignedKCoefficient=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The assigned kCoefficient of the connector.
Get: AssignedKCoefficient(self: Connector) -> float
Set: AssignedKCoefficient(self: Connector) = value
""" 
 AssignedLossCoefficient=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The assigned loss coefficient of the connector.
Get: AssignedLossCoefficient(self: Connector) -> float
Set: AssignedLossCoefficient(self: Connector) = value
""" 
 AssignedPipeFlowConfiguration=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The pipe flow configuration type of the connector.
Get: AssignedPipeFlowConfiguration(self: Connector) -> PipeFlowConfigurationType
""" 
 AssignedPipeLossMethod=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The pipe loss method of the connector.
Get: AssignedPipeLossMethod(self: Connector) -> PipeLossMethodType
""" 
 AssignedPressureDrop=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The assigned pressure drop of the connector.
Get: AssignedPressureDrop(self: Connector) -> float
Set: AssignedPressureDrop(self: Connector) = value
""" 
 Coefficient=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The coefficient of the connector.
Get: Coefficient(self: Connector) -> float
""" 
 ConnectorManager=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The connector manager of the connector.
Get: ConnectorManager(self: Connector) -> ConnectorManager
""" 
 ConnectorType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The connector type of the connector.
Get: ConnectorType(self: Connector) -> ConnectorType
""" 
 CoordinateSystem=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The coordinate system of the connector.
Get: CoordinateSystem(self: Connector) -> Transform
""" 
 Demand=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The demand of the connector.
Get: Demand(self: Connector) -> float
""" 
 Description=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The description.
Get: Description(self: Connector) -> str
""" 
 Direction=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The direction of the connector.
Get: Direction(self: Connector) -> FlowDirectionType
""" 
 Domain=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The domain of the connector.
Get: Domain(self: Connector) -> Domain
""" 
 DuctSystemType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The duct system type of the connector.
Get: DuctSystemType(self: Connector) -> DuctSystemType
""" 
 ElectricalSystemType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The electrical system type of the connector.
Get: ElectricalSystemType(self: Connector) -> ElectricalSystemType
""" 
 EngagementLength=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Connector engagement length
Get: EngagementLength(self: Connector) -> float
""" 
 Flow=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The flow of the connector.
Get: Flow(self: Connector) -> float
""" 
 Height=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The height of the connector.
Get: Height(self: Connector) -> float
Set: Height(self: Connector) = value
""" 
 Id=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """A unique identifier to identify this connector.
Get: Id(self: Connector) -> int
""" 
 IsConnected=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if the connector is physically connected to a connector on another element.
Get: IsConnected(self: Connector) -> bool
""" 
 IsMovable=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """whether the connector can be moved.
Get: IsMovable(self: Connector) -> bool
""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: Connector) -> bool
""" 
 MEPSystem=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The system of the connector belong to.
Get: MEPSystem(self: Connector) -> MEPSystem
""" 
 Origin=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The location of the connector.
Get: Origin(self: Connector) -> XYZ
Set: Origin(self: Connector) = value
""" 
 Owner=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The host of the connector.
Get: Owner(self: Connector) -> Element
""" 
 PipeSystemType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The pipe system type of the connector.
Get: PipeSystemType(self: Connector) -> PipeSystemType
""" 
 PressureDrop=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The pressure drop of the connector.
Get: PressureDrop(self: Connector) -> float
""" 
 Radius=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The radius of the connector.
Get: Radius(self: Connector) -> float
Set: Radius(self: Connector) = value
""" 
 Shape=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The shape of the connector.
Get: Shape(self: Connector) -> ConnectorProfileType
""" 
 Utility=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Indicates if the connector is a utility connector.
Get: Utility(self: Connector) -> bool
""" 
 VelocityPressure=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The velocity pressure of the connector.
Get: VelocityPressure(self: Connector) -> float
""" 
 Width=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The width of the connector.
Get: Width(self: Connector) -> float
Set: Width(self: Connector) = value
""" 
class ConnectorDomainType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 CableTrayConduit=None
 Electrical=None
 Hvac=None
 Piping=None
 StructuralAnalytical=None
 Undefined=None
 value__=None
class ConnectorElement(Element,IDisposable,IConnector):
 def AssignAsPrimary(self):
  pass
 @staticmethod
 def CreateCableTrayConnector(document,planarFace,edge=None):
  pass
 @staticmethod
 def CreateConduitConnector(document,planarFace,edge=None):
  pass
 @staticmethod
 def CreateDuctConnector(document,ductSystemType,profileShape,planarFace,edge=None):
  pass
 @staticmethod
 def CreateElectricalConnector(document,electricalSystemType,planarFace,edge=None):
  pass
 @staticmethod
 def CreatePipeConnector(document,pipeSystemType,planarFace,edge=None):
  pass
 def Dispose(self):
  pass
 def FlipDirection(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetLinkedConnectorElement(self):
  pass
 def IsSystemClassificationValid(self,systemClassification):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def SetLinkedConnectorElement(self,otherConnector):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 CoordinateSystem=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The coordinate system of the connector.
Get: CoordinateSystem(self: ConnectorElement) -> Transform
""" 
 Direction=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Gets the direction of the connector element.
Get: Direction(self: ConnectorElement) -> XYZ
""" 
 Domain=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The domain of the connector.
Get: Domain(self: ConnectorElement) -> Domain
""" 
 Height=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The height of the connector.
Get: Height(self: ConnectorElement) -> float
""" 
 IsPrimary=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if this is the primary connector in the family.
Get: IsPrimary(self: ConnectorElement) -> bool
""" 
 Origin=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The location of the connector in family document.
Get: Origin(self: ConnectorElement) -> XYZ
""" 
 Radius=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The radius of the connector.
Get: Radius(self: ConnectorElement) -> float
""" 
 Shape=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The shape of the connector.
Get: Shape(self: ConnectorElement) -> ConnectorProfileType
""" 
 SystemClassification=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The system classification of the connector.
Get: SystemClassification(self: ConnectorElement) -> MEPSystemClassification
Set: SystemClassification(self: ConnectorElement) = value
""" 
 Width=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The width of the connector.
Get: Width(self: ConnectorElement) -> float
""" 
class ConnectorGenderType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Female=None
 Male=None
 Undefined=None
 value__=None
class ConnectorJointType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Flanged=None
 Glued=None
 Grooved=None
 Soldered=None
 Threaded=None
 Undefined=None
 value__=None
 Welded=None
class ConnectorManager(object,IDisposable):
 def Dispose(self):
  pass
 def Lookup(self,index):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 Connectors=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Return all the Connectors of the Connector Manager.
Get: Connectors(self: ConnectorManager) -> ConnectorSet
""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ConnectorManager) -> bool
""" 
 Owner=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """This property is used to retrieve the owner of the Connector Manager.
Get: Owner(self: ConnectorManager) -> Element
""" 
 UnusedConnectors=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Return all the unused Connectors of the Connector Manager.
Get: UnusedConnectors(self: ConnectorManager) -> ConnectorSet
""" 
class ConnectorProfileType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Invalid=None
 Oval=None
 Rectangular=None
 Round=None
 value__=None
class ConnectorSet(APIObject,IDisposable,IEnumerable):
 def Clear(self):
  pass
 def Contains(self,item):
  pass
 def Dispose(self):
  pass
 def Erase(self,item):
  pass
 def ForwardIterator(self):
  pass
 def GetEnumerator(self):
  pass
 def Insert(self,item):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def ReverseIterator(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Test to see if the set is empty.
Get: IsEmpty(self: ConnectorSet) -> bool
""" 
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the number of objects that are in the set.
Get: Size(self: ConnectorSet) -> int
""" 
class ConnectorSetIterator(APIObject,IDisposable,IEnumerator):
 def Dispose(self):
  pass
 def MoveNext(self):
  pass
 def next(self,*args):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Reset(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 Current=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves the item that is the current focus of the iterator.
Get: Current(self: ConnectorSetIterator) -> object
""" 
class ConnectorType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 AllModes=None
 AnyEnd=None
 BlankEnd=None
 Curve=None
 End=None
 EndSurface=None
 Family=None
 Invalid=None
 Logical=None
 MasterSurface=None
 NodeReference=None
 NonEnd=None
 Physical=None
 Reference=None
 Surface=None
 value__=None
class Construction(object):
 Id=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Get the id of the Construction.
Get: Id(self: Construction) -> str
""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Get the name of the Construction.
Get: Name(self: Construction) -> str
""" 
class RenderNode(object,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: RenderNode) -> bool
""" 
 NodeName=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """A readable name of the output node.
Get: NodeName(self: RenderNode) -> str
""" 
class ContentNode(RenderNode,IDisposable):
 def Dispose(self):
  pass
 def GetAsset(self):
  pass
 def GetTransform(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class Control(Element,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Origin=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The control origin.
Get: Origin(self: Control) -> XYZ
""" 
 Shape=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The control shape.
Get: Shape(self: Control) -> ControlShape
""" 
 View=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The view.
Get: View(self: Control) -> View
""" 
class ControlShape(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 DoubleHorizontalArrow=None
 DoubleVerticalArrow=None
 HorizontalArrow=None
 value__=None
 VerticalArrow=None
class CoordinatePlaneVisibility(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Always=None
 Never=None
 value__=None
 WhenSelected=None
class CopyPasteOptions(object,IDisposable):
 def Dispose(self):
  pass
 def GetDuplicateTypeNamesHandler(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def SetDuplicateTypeNamesHandler(self,handler):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: CopyPasteOptions) -> bool
""" 
class CurtainCell(APIObject,IDisposable):
 def Dispose(self):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 CurveLoops=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The cell boundaries on the reference face. The boundaries can have more than one CurveLoop. Each item in the returned array represents a CurveLoop containing 3 or more than 3 edges.
Get: CurveLoops(self: CurtainCell) -> CurveArrArray
""" 
 PlanarizedCurveLoops=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The planarized curve loops for cell boundaries. The boundaries can have more than one CurveLoop. Each item in the returned array represents a CurveLoop containing 3 or more than 3 edges.
Get: PlanarizedCurveLoops(self: CurtainCell) -> CurveArrArray
""" 
class CurtainGrid(APIObject,IDisposable):
 def AddGridLine(self,isUGridLine,position,oneSegmentOnly):
  pass
 def ChangePanelType(self,panel,newSymbol):
  pass
 def Dispose(self):
  pass
 def GetCell(self,uGridLineId,vGridLineId):
  pass
 def GetCurtainCells(self):
  pass
 def GetMullionIds(self):
  pass
 def GetPanel(self,uGridLineId,vGridLineId):
  pass
 def GetPanelIds(self):
  pass
 def GetUGridLineIds(self):
  pass
 def GetUnlockedMullionIds(self):
  pass
 def GetUnlockedPanelIds(self):
  pass
 def GetVGridLineIds(self):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Grid1Angle=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The angle for the U grid line pattern of the curtain grid.
Get: Grid1Angle(self: CurtainGrid) -> float
Set: Grid1Angle(self: CurtainGrid) = value
""" 
 Grid1Justification=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The justification for the U grid line pattern of the curtain grid.
Get: Grid1Justification(self: CurtainGrid) -> CurtainGridAlignType
Set: Grid1Justification(self: CurtainGrid) = value
""" 
 Grid1Offset=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The offset for the U grid line pattern of the curtain grid.
Get: Grid1Offset(self: CurtainGrid) -> float
Set: Grid1Offset(self: CurtainGrid) = value
""" 
 Grid2Angle=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The angle for V grid line pattern of the curtain grid.
Get: Grid2Angle(self: CurtainGrid) -> float
Set: Grid2Angle(self: CurtainGrid) = value
""" 
 Grid2Justification=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The justification for the V grid line pattern of the curtain grid.
Get: Grid2Justification(self: CurtainGrid) -> CurtainGridAlignType
Set: Grid2Justification(self: CurtainGrid) = value
""" 
 Grid2Offset=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The offset for V grid line pattern of the curtain grid.
Get: Grid2Offset(self: CurtainGrid) -> float
Set: Grid2Offset(self: CurtainGrid) = value
""" 
 NumPanels=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The number of panels.
Get: NumPanels(self: CurtainGrid) -> int
""" 
 NumULines=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Get the number of grid lines in the U direction.
Get: NumULines(self: CurtainGrid) -> int
""" 
 NumVLines=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Get the number of grid lines in the V direction.
Get: NumVLines(self: CurtainGrid) -> int
""" 
class CurtainGridAlignType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Beginning=None
 Center=None
 End=None
 NoJustify=None
 value__=None
class CurtainGridLine(HostObject,IDisposable):
 def AddAllSegments(self):
  pass
 def AddMullions(self,segment,mullionType,oneSegmentOnly):
  pass
 def AddSegment(self,curve):
  pass
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def RemoveSegment(self,curve):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 AllSegmentCurves=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieve the curves of all segments.
Get: AllSegmentCurves(self: CurtainGridLine) -> CurveArray
""" 
 ExistingSegmentCurves=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieve all the existing segment curves of the grid line.
Get: ExistingSegmentCurves(self: CurtainGridLine) -> CurveArray
""" 
 FullCurve=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieve the geometry curve of the curtain grid line.
Get: FullCurve(self: CurtainGridLine) -> Curve
""" 
 IsUGridLine=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieve the direction of a grid line.If it is true,we say it is a UGridLine,otherwise it is VGridLine
Get: IsUGridLine(self: CurtainGridLine) -> bool
""" 
 Lock=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves or changes the lock state of the curtain grid line.
Get: Lock(self: CurtainGridLine) -> bool
Set: Lock(self: CurtainGridLine) = value
""" 
 SkippedSegmentCurves=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieve all the removed segment curves of the grid line.
Get: SkippedSegmentCurves(self: CurtainGridLine) -> CurveArray
""" 
class CurtainGridSet(APIObject,IDisposable,IEnumerable):
 def Clear(self):
  pass
 def Contains(self,item):
  pass
 def Dispose(self):
  pass
 def Erase(self,item):
  pass
 def ForwardIterator(self):
  pass
 def GetEnumerator(self):
  pass
 def Insert(self,item):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def ReverseIterator(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Test to see if the set is empty.
Get: IsEmpty(self: CurtainGridSet) -> bool
""" 
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the number of objects that are in the set.
Get: Size(self: CurtainGridSet) -> int
""" 
class CurtainGridSetIterator(APIObject,IDisposable,IEnumerator):
 def Dispose(self):
  pass
 def MoveNext(self):
  pass
 def next(self,*args):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Reset(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 Current=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves the item that is the current focus of the iterator.
Get: Current(self: CurtainGridSetIterator) -> object
""" 
class CurtainSystemBase(HostObject,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class CurtainSystem(CurtainSystemBase,IDisposable):
 def AddCurtainGrid(self,face):
  pass
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def RemoveCurtainGrid(self,face):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 CurtainGrids=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Get all the CurtainGrid object of this CurtainSystem. Each CurtainGrid corresponds to one face.
Get: CurtainGrids(self: CurtainSystem) -> CurtainGridSet
""" 
 CurtainSystemType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """get or set the type of the CurtainSystem.
Get: CurtainSystemType(self: CurtainSystem) -> CurtainSystemType
Set: CurtainSystemType(self: CurtainSystem) = value
""" 
class CurtainSystemType(HostObjAttributes,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class CurveArrArray(APIObject,IDisposable,IEnumerable):
 def Append(self,item):
  pass
 def Clear(self):
  pass
 def Dispose(self):
  pass
 def ForwardIterator(self):
  pass
 def GetEnumerator(self):
  pass
 def Insert(self,item,index):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def ReverseIterator(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __getitem__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 def __setitem__(self,*args):
  pass
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Test to see if the array is empty.
Get: IsEmpty(self: CurveArrArray) -> bool
""" 
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the number of objects that are in the array.
Get: Size(self: CurveArrArray) -> int
""" 
class CurveArrArrayIterator(APIObject,IDisposable,IEnumerator):
 def Dispose(self):
  pass
 def MoveNext(self):
  pass
 def next(self,*args):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Reset(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 Current=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves the item that is the current focus of the iterator.
Get: Current(self: CurveArrArrayIterator) -> object
""" 
class CurveArray(APIObject,IDisposable,IEnumerable):
 def Append(self,item):
  pass
 def Clear(self):
  pass
 def Dispose(self):
  pass
 def ForwardIterator(self):
  pass
 def GetEnumerator(self):
  pass
 def Insert(self,item,index):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def ReverseIterator(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __getitem__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 def __setitem__(self,*args):
  pass
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Test to see if the array is empty.
Get: IsEmpty(self: CurveArray) -> bool
""" 
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the number of curves that are in the array.
Get: Size(self: CurveArray) -> int
""" 
class CurveArrayIterator(APIObject,IDisposable,IEnumerator):
 def Dispose(self):
  pass
 def MoveNext(self):
  pass
 def next(self,*args):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Reset(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 Current=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves the item that is the current focus of the iterator.
Get: Current(self: CurveArrayIterator) -> object
""" 
class CurveElement(Element,IDisposable):
 def Dispose(self):
  pass
 def GetAdjoinedCurveElements(self,end):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetLineStyleIds(self):
  pass
 def GetTangentLock(self,end,other):
  pass
 def HasTangentJoin(self,end,other):
  pass
 def HasTangentLocks(self,end):
  pass
 def IsAdjoinedCurveElement(self,end,other):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def SetGeometryCurve(self,curve,overrideJoins):
  pass
 def SetSketchPlaneAndCurve(self,sketchPlane,curve):
  pass
 def SetTangentLock(self,end,other,state):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 CenterPointReference=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Centerpoint reference of curve element.  Curves such as circles, arcs, ellipses, and partial ellipses support this property.
Get: CenterPointReference(self: CurveElement) -> Reference
""" 
 CurveElementType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Type of the curve element.
Get: CurveElementType(self: CurveElement) -> CurveElementType
""" 
 GeometryCurve=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Geometry curve of the curve element.
Get: GeometryCurve(self: CurveElement) -> Curve
Set: GeometryCurve(self: CurveElement) = value
""" 
 LineStyle=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The line style of this curve element.
Get: LineStyle(self: CurveElement) -> Element
Set: LineStyle(self: CurveElement) = value
""" 
 SketchPlane=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The sketch plane the curve element lies in.
Get: SketchPlane(self: CurveElement) -> SketchPlane
Set: SketchPlane(self: CurveElement) = value
""" 
 SupportsTangentLocks=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Indicates whether or not this curve element can have a locked tangent
   join at either of its end-points shared with another curve element.
Get: SupportsTangentLocks(self: CurveElement) -> bool
""" 
class CurveByPoints(CurveElement,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetPoints(self):
  pass
 def GetVisibility(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def SetPoints(self,points):
  pass
 def SetVisibility(self,visibility):
  pass
 @staticmethod
 def SortPoints(arr):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 IsReferenceLine=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Get: IsReferenceLine(self: CurveByPoints) -> bool
Set: IsReferenceLine(self: CurveByPoints) = value
""" 
 ReferenceType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Indicates the type of reference.
Get: ReferenceType(self: CurveByPoints) -> ReferenceType
Set: ReferenceType(self: CurveByPoints) = value
""" 
 SketchPlane=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Override the SketchPlane property of CurveElement.
Get: SketchPlane(self: CurveByPoints) -> SketchPlane
Set: SketchPlane(self: CurveByPoints) = value
""" 
 Subcategory=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The subcategory, or graphics style, of the CurveByPoints.
Get: Subcategory(self: CurveByPoints) -> GraphicsStyle
Set: Subcategory(self: CurveByPoints) = value
""" 
 Visible=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Whether the point is visible when the family is loaded
into a project.
Get: Visible(self: CurveByPoints) -> bool
Set: Visible(self: CurveByPoints) = value
""" 
class CurveByPointsArray(APIObject,IDisposable,IEnumerable):
 def Append(self,item):
  pass
 def Clear(self):
  pass
 def Dispose(self):
  pass
 def ForwardIterator(self):
  pass
 def GetEnumerator(self):
  pass
 def Insert(self,item,index):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def ReverseIterator(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __getitem__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 def __setitem__(self,*args):
  pass
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Test to see if the array is empty.
Get: IsEmpty(self: CurveByPointsArray) -> bool
""" 
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the number of curves that are in the array.
Get: Size(self: CurveByPointsArray) -> int
""" 
class CurveByPointsArrayIterator(APIObject,IDisposable,IEnumerator):
 def Dispose(self):
  pass
 def MoveNext(self):
  pass
 def next(self,*args):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Reset(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 Current=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves the item that is the current focus of the iterator.
Get: Current(self: CurveByPointsArrayIterator) -> object
""" 
class CurveByPointsUtils(object,IDisposable):
 @staticmethod
 def AddCurvesToFaceRegion(document,curveElemIds):
  pass
 @staticmethod
 def CreateArcThroughPoints(document,startPoint,endPoint,interiorPoint):
  pass
 @staticmethod
 def CreateRectangle(document,startPoint,endPoint,projectionType,boundaryReferenceLines,boundaryCurvesFollowSurface,createdCurvesIds,createdCornersIds):
  pass
 def Dispose(self):
  pass
 @staticmethod
 def GetFaceRegions(cda,referenceOfFace):
  pass
 @staticmethod
 def GetHostFace(curveElem):
  pass
 @staticmethod
 def GetProjectionType(curveElem):
  pass
 @staticmethod
 def GetSketchOnSurface(curveElem):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 @staticmethod
 def SetProjectionType(curveElem,value):
  pass
 @staticmethod
 def SetSketchOnSurface(curveElem,sketchOnSurface):
  pass
 @staticmethod
 def ValidateCurveElementIdArrayForFaceRegions(document,curveElemIds):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: CurveByPointsUtils) -> bool
""" 
class CurveElementFilter(ElementSlowFilter,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,curveElementType,inverted=None):
  pass
 CurveElementType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The curve element type.
Get: CurveElementType(self: CurveElementFilter) -> CurveElementType
""" 
class CurveElementType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 AreaSeparation=None
 Cloud=None
 CurveByPoints=None
 DetailCurve=None
 Insulation=None
 Invalid=None
 ModelCurve=None
 ReferenceLine=None
 RepeatingDetail=None
 RoomSeparation=None
 SpaceSeparation=None
 SymbolicCurve=None
 value__=None
class CurveExtents(object,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 EndParameter=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The end parameter of the curve extents.
Get: EndParameter(self: CurveExtents) -> float
""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: CurveExtents) -> bool
""" 
 StartParameter=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The start parameter of the curve extents.
Get: StartParameter(self: CurveExtents) -> float
""" 
class CurveLoop(object,IEnumerable[Curve],IEnumerable,IDisposable):
 def Append(self,curve):
  pass
 @staticmethod
 def Create(curves):
  pass
 @staticmethod
 def CreateViaCopy(original):
  pass
 @staticmethod
 def CreateViaOffset(original,offsetDist,normal):
  pass
 @staticmethod
 def CreateViaThicken(*__args):
  pass
 @staticmethod
 def CreateViaTransform(curveLoop,transform):
  pass
 def Dispose(self):
  pass
 def Flip(self):
  pass
 def GetCurveLoopIterator(self):
  pass
 def GetEnumerator(self):
  pass
 def GetExactLength(self):
  pass
 def GetPlane(self):
  pass
 def GetRectangularHeight(self,plane):
  pass
 def GetRectangularWidth(self,plane):
  pass
 def HasPlane(self):
  pass
 def IsCounterclockwise(self,normal):
  pass
 def IsOpen(self):
  pass
 def IsRectangular(self,plane):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Transform(self,transform):
  pass
 def __contains__(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: CurveLoop) -> bool
""" 
class CurveLoopIterator(object,IEnumerator[Curve],IDisposable,IEnumerator):
 def Dispose(self):
  pass
 def MoveNext(self):
  pass
 def next(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Reset(self):
  pass
 def __contains__(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 Current=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Gets the item at the current position of the iterator.
Get: Current(self: CurveLoopIterator) -> Curve
""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: CurveLoopIterator) -> bool
""" 
class SweepProfile(APIObject,IDisposable):
 def Dispose(self):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class CurveLoopsProfile(SweepProfile,IDisposable):
 def Dispose(self):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Profile=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the curve loops of the profile.
Get: Profile(self: CurveLoopsProfile) -> CurveArrArray
Set: Profile(self: CurveLoopsProfile) = value
""" 
class ModelCurveNode(RenderNode,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 LineProperties=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Access to the line (pen) properties of the curve being drawn
Get: LineProperties(self: ModelCurveNode) -> LineProperties
""" 
class CurveNode(ModelCurveNode,IDisposable):
 def Dispose(self):
  pass
 def GetCurve(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class CurveProjectionType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 FollowSurfaceUV=None
 FromTopDown=None
 ParallelToLevel=None
 value__=None
class CustomExporter(object,IDisposable):
 def Dispose(self):
  pass
 def Export(self,*__args):
  pass
 @staticmethod
 def IsRenderingSupported():
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,document,context):
  pass
 def __repr__(self,*args):
  pass
 IncludeGeometricObjects=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """This flag sets the exporter to either include or exclude
   output of geometric objects such as faces and curves
   when the model is being processed by the export context.
Get: IncludeGeometricObjects(self: CustomExporter) -> bool
Set: IncludeGeometricObjects(self: CustomExporter) = value
""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: CustomExporter) -> bool
""" 
 ShouldStopOnError=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """This flag instructs the exporting process to either stop or continue
   in case an error occurs during any of the exporting methods.
Get: ShouldStopOnError(self: CustomExporter) -> bool
Set: ShouldStopOnError(self: CustomExporter) = value
""" 
class CutFailureReason(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 CutAllowed=None
 CutAlreadyExists=None
 CutNotAppropriateForElements=None
 OppositeCutExists=None
 value__=None
class CylindricalFace(Face,IDisposable):
 def Dispose(self):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Axis=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Axis of the surface.
Get: Axis(self: CylindricalFace) -> XYZ
""" 
 Origin=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Origin of the surface.
Get: Origin(self: CylindricalFace) -> XYZ
""" 
class CylindricalHelix(Curve,IDisposable):
 @staticmethod
 def Create(basePoint,radius,xVector,zVector,pitch,startAngle,endAngle):
  pass
 def Dispose(self):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 BasePoint=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The base point of the axis of the cylindrical helix.
Get: BasePoint(self: CylindricalHelix) -> XYZ
""" 
 Height=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Height of the cylindrical helix.
Get: Height(self: CylindricalHelix) -> float
""" 
 IsRightHanded=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """True if the helix is right handed, false if the helix is left handed.
Get: IsRightHanded(self: CylindricalHelix) -> bool
""" 
 Pitch=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The pitch of the cylindrical helix.
Get: Pitch(self: CylindricalHelix) -> float
""" 
 Radius=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The radius of the cylindrical helix.
Get: Radius(self: CylindricalHelix) -> float
""" 
 XVector=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The X direction vector.
Get: XVector(self: CylindricalHelix) -> XYZ
""" 
 YVector=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The Y direction vector.
Get: YVector(self: CylindricalHelix) -> XYZ
""" 
 ZVector=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The Z direction vector, which is same as the axis direction vector.
Get: ZVector(self: CylindricalHelix) -> XYZ
""" 
class CylindricalSurface(Surface,IDisposable):
 @staticmethod
 def Create(frameOfReference,radius):
  pass
 def Dispose(self):
  pass
 def GetFrameOfReference(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Axis=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Axis of the cylinder. This is the Z axis of the local coordinate system associated with this cylinder.
Get: Axis(self: CylindricalSurface) -> XYZ
""" 
 Origin=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Center of the circle that defines the base of the cylinder. This is the origin of the local coordinate system associated with this cylinder.
Get: Origin(self: CylindricalSurface) -> XYZ
""" 
 Radius=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Radius of the circle that defines the base of this cylinder.
Get: Radius(self: CylindricalSurface) -> float
""" 
 XDir=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """X axis of the local coordinate system associated with this cylinder.
Get: XDir(self: CylindricalSurface) -> XYZ
""" 
 YDir=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """X axis of the local coordinate system associated with this cylinder.
Get: YDir(self: CylindricalSurface) -> XYZ
""" 
class DataConversionMonitorScope(object,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,IDCM):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: DataConversionMonitorScope) -> bool
""" 
class DataExchangeMessageId(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 EmptyObject=None
 GenericError=None
 InvalidDataSet=None
 InvalidRenderingStyle=None
 InvalidSourceObject=None
 None=None
 ObjectCreated=None
 ObjectNotConverted=None
 ObjectNotSupported=None
 UnexpectedResult=None
 UnitOfProgressCompleted=None
 value__=None
class DataExchangeMessageSeverity(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Error=None
 FatalError=None
 Info=None
 value__=None
 Warning=None
class DataExchangeMessageVerbosity(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Default=None
 Minimal=None
 value__=None
 Verbose=None
class DatumEnds(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 End0=None
 End1=None
 value__=None
class DatumExtentType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Model=None
 value__=None
 ViewSpecific=None
class DatumPlane(Element,IDisposable):
 def AddLeader(self,datumEnd,view):
  pass
 def CanBeVisibleInView(self,view):
  pass
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetCurvesInView(self,extentMode,view):
  pass
 def GetDatumExtentTypeInView(self,datumEnd,view):
  pass
 def GetLeader(self,datumEnd,view):
  pass
 def GetPropagationViews(self,view):
  pass
 def HasBubbleInView(self,datumEnd,view):
  pass
 def HideBubbleInView(self,datumEnd,view):
  pass
 def IsBubbleVisibleInView(self,datumEnd,view):
  pass
 def IsCurveValidInView(self,extentMode,view,curve):
  pass
 def IsLeaderValid(self,datumEnd,view,leader):
  pass
 def Maximize3DExtents(self):
  pass
 def PropagateToViews(self,view,parallelViews):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def SetCurveInView(self,extentMode,view,curve):
  pass
 def SetDatumExtentType(self,datumEnd,view,extentMode):
  pass
 def setElementType(self,*args):
  pass
 def SetLeader(self,datumEnd,view,pLeader):
  pass
 def ShowBubbleInView(self,datumEnd,view):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class DecimalSymbol(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Comma=None
 Dot=None
 value__=None
class DefaultDivideSettings(Element,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 @staticmethod
 def GetDefaultDivideSettings(cda):
  pass
 def GetSurfaceDistance(self,gridlines):
  pass
 def GetSurfaceLayout(self,gridlines):
  pass
 def GetSurfaceNumber(self,gridlines):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def SetSurfaceDistance(self,gridlines,distance):
  pass
 def SetSurfaceLayout(self,gridlines,layout):
  pass
 def SetSurfaceNumber(self,gridlines,number):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 PathDistance=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """A default Divided Path distance for a fixed, minimum, or maximum distance layout.
Get: PathDistance(self: DefaultDivideSettings) -> float
Set: PathDistance(self: DefaultDivideSettings) = value
""" 
 PathLayout=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """A default Divided Path layout.
Get: PathLayout(self: DefaultDivideSettings) -> SpacingRuleLayout
Set: PathLayout(self: DefaultDivideSettings) = value
""" 
 PathMeasurementType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """A default Divided Path measurement type for distance layouts.
Get: PathMeasurementType(self: DefaultDivideSettings) -> DividedPathMeasurementType
Set: PathMeasurementType(self: DefaultDivideSettings) = value
""" 
 PathNumber=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """A default Divided Path number for a fixed number layout.
Get: PathNumber(self: DefaultDivideSettings) -> int
Set: PathNumber(self: DefaultDivideSettings) = value
""" 
class Definition(object):
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The user visible name for the parameter.
Get: Name(self: Definition) -> str
""" 
 ParameterGroup=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the group ID of the parameter definition.
Get: ParameterGroup(self: Definition) -> BuiltInParameterGroup
""" 
 ParameterType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the user visible interpretation of the parameter data.
Get: ParameterType(self: Definition) -> ParameterType
""" 
 UnitType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the UnitType of the parameter definition.
Get: UnitType(self: Definition) -> UnitType
""" 
class DefinitionBindingMapIterator(APIObject,IDisposable,IEnumerator):
 def Dispose(self):
  pass
 def MoveNext(self):
  pass
 def next(self,*args):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Reset(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 Current=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves the binding that is the current focus of the iterator.
Get: Current(self: DefinitionBindingMapIterator) -> object
""" 
 Key=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves the definition that is the current focus of the iterator.
Get: Key(self: DefinitionBindingMapIterator) -> Definition
""" 
class DefinitionFile(APIObject,IDisposable):
 def Dispose(self):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Filename=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """This property returns the physical filename of the shared parameters file on disk.
Get: Filename(self: DefinitionFile) -> str
""" 
 Groups=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Return a map of shared parameter definition groups contained within the file.
Get: Groups(self: DefinitionFile) -> DefinitionGroups
""" 
class DefinitionGroup(APIObject,IDisposable):
 def Dispose(self):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Definitions=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The Definitions property returns an object that contains all the shared parameter
definitions within the group.
Get: Definitions(self: DefinitionGroup) -> Definitions
""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the name of the parameter group.
Get: Name(self: DefinitionGroup) -> str
""" 
class DefinitionGroups(object,IEnumerable[DefinitionGroup],IEnumerable,IDisposable):
 def Contains(self,definitionGroup):
  pass
 def Create(self,name):
  pass
 def Dispose(self):
  pass
 def GetEnumerator(self):
  pass
 def __contains__(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __getitem__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if the definition groups collection is empty.
Get: IsEmpty(self: DefinitionGroups) -> bool
""" 
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The number of definition groups in the collection.
Get: Size(self: DefinitionGroups) -> int
""" 
class Definitions(object,IEnumerable[Definition],IEnumerable,IDisposable):
 def Contains(self,definition):
  pass
 def Create(self,option):
  pass
 def Dispose(self):
  pass
 def GetEnumerator(self):
  pass
 def __contains__(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __getitem__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if the definitions collection is empty.
Get: IsEmpty(self: Definitions) -> bool
""" 
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The number of definitions in the collection.
Get: Size(self: Definitions) -> int
""" 
class FailureResolution(object,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FailureResolution) -> bool
""" 
class DeleteElements(FailureResolution,IDisposable):
 @staticmethod
 def Create(document,*__args):
  pass
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class DesignOption(Element,IDisposable):
 def Dispose(self):
  pass
 @staticmethod
 def GetActiveDesignOptionId(document):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 IsPrimary=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Determines whether this is a primary design option.
Get: IsPrimary(self: DesignOption) -> bool
""" 
class DetachFromCentralOption(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 ClearTransmittedSaveAsNewCentral=None
 DetachAndDiscardWorksets=None
 DetachAndPreserveWorksets=None
 DoNotDetach=None
 value__=None
class DetailCurve(CurveElement,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class DetailArc(DetailCurve,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class DetailCurveArray(APIObject,IDisposable,IEnumerable):
 def Append(self,item):
  pass
 def Clear(self):
  pass
 def Dispose(self):
  pass
 def ForwardIterator(self):
  pass
 def GetEnumerator(self):
  pass
 def Insert(self,item,index):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def ReverseIterator(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __getitem__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 def __setitem__(self,*args):
  pass
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Test to see if the array is empty.
Get: IsEmpty(self: DetailCurveArray) -> bool
""" 
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the number of objects that are in the array.
Get: Size(self: DetailCurveArray) -> int
""" 
class DetailCurveArrayIterator(APIObject,IDisposable,IEnumerator):
 def Dispose(self):
  pass
 def MoveNext(self):
  pass
 def next(self,*args):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Reset(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 Current=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves the item that is the current focus of the iterator.
Get: Current(self: DetailCurveArrayIterator) -> object
""" 
class DetailElementOrderUtils(object):
 @staticmethod
 def AreDetailElements(pDocument,pDBView,detailElementIds):
  pass
 @staticmethod
 def BringForward(pDocument,pDBView,*__args):
  pass
 @staticmethod
 def BringToFront(pDocument,pDBView,*__args):
  pass
 @staticmethod
 def IsDetailElement(pDocument,pDBView,detailElementId):
  pass
 @staticmethod
 def SendBackward(pDocument,pDBView,*__args):
  pass
 @staticmethod
 def SendToBack(pDocument,pDBView,*__args):
  pass
 __all__=['AreDetailElements','BringForward','BringToFront','IsDetailElement','SendBackward','SendToBack',]
class DetailEllipse(DetailCurve,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class DetailLine(DetailCurve,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class DetailNurbSpline(DetailCurve,IDisposable):
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class DGNExportOptions(BaseExportOptions,IDisposable):
 def Dispose(self):
  pass
 def GetExportLineweightTable(self):
  pass
 @staticmethod
 def GetPredefinedOptions(document,setup):
  pass
 @staticmethod
 def GetPredefinedSetupNames(document):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def SetExportLineweightTable(self,lineweightTable):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,option=None):
  pass
 FileVersion=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The DGN file version.
   Default value of fileVersion is DGNFileFormat.Default.
Get: FileVersion(self: DGNExportOptions) -> DGNFileFormat
Set: FileVersion(self: DGNExportOptions) = value
""" 
 MasterUnits=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The master units.
   Default value of masterUnits is true.
Get: MasterUnits(self: DGNExportOptions) -> bool
Set: MasterUnits(self: DGNExportOptions) = value
""" 
 MergedViews=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Whether to merge all views in one file (via XRefs).
   Default value of mergedViews is false.
Get: MergedViews(self: DGNExportOptions) -> bool
Set: MergedViews(self: DGNExportOptions) = value
""" 
 SeedName=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The name of the DGN seed.
   Default value of seedName is empty.
Get: SeedName(self: DGNExportOptions) -> str
Set: SeedName(self: DGNExportOptions) = value
""" 
class DGNFileFormat(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Default=None
 DGNVersion7=None
 DGNVersion8=None
 value__=None
class DGNImportOptions(BaseImportOptions,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,option=None):
  pass
 DGNModelViewName=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The model view name to be imported.
   Need user give a model view name to specify which model view need to be imported into Revit
Get: DGNModelViewName(self: DGNImportOptions) -> str
Set: DGNModelViewName(self: DGNImportOptions) = value
""" 
 IgnoreUnsupportedElementWarning=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """If true, ignore warning messages about unsupported elements in the DGN file.
   If false, the import process is aborted if imported dgn files have unsupported elements.
Get: IgnoreUnsupportedElementWarning(self: DGNImportOptions) -> bool
Set: IgnoreUnsupportedElementWarning(self: DGNImportOptions) = value
""" 
class DigitGroupingAmount(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Three=None
 Two=None
 value__=None
class DigitGroupingSymbol(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Apostrophe=None
 Comma=None
 Dot=None
 Space=None
 Tick=None
 value__=None
class DimensionSegment(APIObject,IDisposable):
 def Dispose(self):
  pass
 def IsTextPositionAdjustable(self):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def ResetTextPosition(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Above=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The text shown above the segment's value.
Get: Above(self: DimensionSegment) -> str
Set: Above(self: DimensionSegment) = value
""" 
 Below=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The text shown below the segment's value.
Get: Below(self: DimensionSegment) -> str
Set: Below(self: DimensionSegment) = value
""" 
 IsLocked=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Indicates if this segment is locked.
Get: IsLocked(self: DimensionSegment) -> bool
Set: IsLocked(self: DimensionSegment) = value
""" 
 LeaderEndPosition=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The position of the dimension leader end point.
Get: LeaderEndPosition(self: DimensionSegment) -> XYZ
Set: LeaderEndPosition(self: DimensionSegment) = value
""" 
 Origin=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The segment origin.
Get: Origin(self: DimensionSegment) -> XYZ
""" 
 Prefix=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The text shown before the segment's value.
Get: Prefix(self: DimensionSegment) -> str
Set: Prefix(self: DimensionSegment) = value
""" 
 Suffix=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The text shown after the segment's value.
Get: Suffix(self: DimensionSegment) -> str
Set: Suffix(self: DimensionSegment) = value
""" 
 TextPosition=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The position of the dimension text's drag point.
Get: TextPosition(self: DimensionSegment) -> XYZ
Set: TextPosition(self: DimensionSegment) = value
""" 
 Value=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The length of the segment.
Get: Value(self: DimensionSegment) -> Nullable[float]
""" 
 ValueOverride=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The text that replaces the segment's value.
Get: ValueOverride(self: DimensionSegment) -> str
Set: ValueOverride(self: DimensionSegment) = value
""" 
 ValueString=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The displayed value shown for the dimension segment.
Get: ValueString(self: DimensionSegment) -> str
""" 
class DimensionSegmentArray(APIObject,IDisposable,IEnumerable):
 def Append(self,item):
  pass
 def Clear(self):
  pass
 def Dispose(self):
  pass
 def ForwardIterator(self):
  pass
 def GetEnumerator(self):
  pass
 def Insert(self,item,index):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def ReverseIterator(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __getitem__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 def __setitem__(self,*args):
  pass
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Test to see if the array is empty.
Get: IsEmpty(self: DimensionSegmentArray) -> bool
""" 
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the number of objects that are in the array.
Get: Size(self: DimensionSegmentArray) -> int
""" 
class DimensionSegmentArrayIterator(APIObject,IDisposable,IEnumerator):
 def Dispose(self):
  pass
 def MoveNext(self):
  pass
 def next(self,*args):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Reset(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 Current=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves the item that is the current focus of the iterator.
Get: Current(self: DimensionSegmentArrayIterator) -> object
""" 
class DimensionShape(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Angular=None
 ArcLength=None
 Diameter=None
 Linear=None
 Radial=None
 Spot=None
 Unknown=None
 value__=None
class DimensionStyleType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Angular=None
 ArcLength=None
 Diameter=None
 Linear=None
 LinearFixed=None
 Radial=None
 SpotCoordinate=None
 SpotElevation=None
 SpotSlope=None
 value__=None
class DimensionType(ElementType,IDisposable):
 def Dispose(self):
  pass
 def GetAlternateUnitsFormatOptions(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def SetAlternateUnitsFormatOptions(self,formatOptions):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 AlternateUnits=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The alternate units display mode for this DimensionType.
Get: AlternateUnits(self: DimensionType) -> AlternateUnits
Set: AlternateUnits(self: DimensionType) = value
""" 
 AlternateUnitsPrefix=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The prefix text for the alternate units value.
Get: AlternateUnitsPrefix(self: DimensionType) -> str
Set: AlternateUnitsPrefix(self: DimensionType) = value
""" 
 AlternateUnitsSuffix=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The suffix text for the alternate units value.
Get: AlternateUnitsSuffix(self: DimensionType) -> str
Set: AlternateUnitsSuffix(self: DimensionType) = value
""" 
 StyleType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The dimension style type of this DimensionType.
Get: StyleType(self: DimensionType) -> DimensionStyleType
""" 
 UnitType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The unit type of this dimension style.
Get: UnitType(self: DimensionType) -> UnitType
""" 
class DirectShape(Element,IDisposable):
 def AppendShape(self,*__args):
  pass
 def AreOptionsValid(self,options):
  pass
 def AreOptionsValidForTransientDirectShape(self,options):
  pass
 @staticmethod
 def CreateElement(document,categoryId,applicationId=None,applicationDataId=None):
  pass
 @staticmethod
 def CreateElementInstance(document,typeId,categoryId,definitionId,trf,applicationId=None,applicationDataId=None):
  pass
 @staticmethod
 def CreateGeometryInstance(document,definition_id,trf):
  pass
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetOptions(self):
  pass
 @staticmethod
 def IsSupportedDocument(document):
  pass
 @staticmethod
 def IsValidCategoryId(categoryId,doc):
  pass
 def IsValidGeometry(self,Geom):
  pass
 def IsValidShape(self,shape,viewType=None):
  pass
 def IsValidTypeId(self,typeId):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def SetGUIDs(self,appGUID,appDataGUID):
  pass
 def SetName(self,name):
  pass
 def SetOptions(self,options):
  pass
 def SetShape(self,*__args):
  pass
 def SetTypeId(self,typeId):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 ApplicationDataId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """A text string that identifies the data to the creating application.
Get: ApplicationDataId(self: DirectShape) -> str
Set: ApplicationDataId(self: DirectShape) = value
""" 
 ApplicationId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """A text string that identifies the creating application.
Get: ApplicationId(self: DirectShape) -> str
Set: ApplicationId(self: DirectShape) = value
""" 
 TypeId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Element id of a DirectShapeType object that holds properties to be shared by this element. Optional.
Get: TypeId(self: DirectShape) -> ElementId
""" 
class DirectShapeLibrary(object,IDisposable):
 def AddDefinition(self,id,*__args):
  pass
 def AddDefinitionType(self,id,typeId):
  pass
 def Contains(self,id):
  pass
 def ContainsType(self,name):
  pass
 def Dispose(self):
  pass
 def FindDefinition(self,id):
  pass
 def FindDefinitionType(self,id):
  pass
 @staticmethod
 def GetDirectShapeLibrary(ADoc):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Reset(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: DirectShapeLibrary) -> bool
""" 
class DirectShapeOptions(object,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: DirectShapeOptions) -> bool
""" 
 ReferencingOption=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Whether or not the geometry stored in a DirectShape or DirectShapeType object may be referenced.
Get: ReferencingOption(self: DirectShapeOptions) -> DirectShapeReferencingOption
Set: ReferencingOption(self: DirectShapeOptions) = value
""" 
 RoomBoundingOption=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies whether the DirectShape supports an option for the "Room Bounding" parameter to permit participation in room boundary calculations.
Get: RoomBoundingOption(self: DirectShapeOptions) -> DirectShapeRoomBoundingOption
""" 
class DirectShapeReferencingOption(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 NotReferenceable=None
 Referenceable=None
 value__=None
class DirectShapeRoomBoundingOption(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 NotApplicable=None
 SetByParameter=None
 value__=None
class DirectShapeTargetViewType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Default=None
 Plan=None
 Undefined=None
 value__=None
class DirectShapeType(ElementType,IDisposable):
 def AppendShape(self,*__args):
  pass
 @staticmethod
 def Create(document,name,categoryId):
  pass
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def IsValidShape(self,shape,viewType=None):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def SetShape(self,*__args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class DisplacementElement(Element,IDisposable):
 @staticmethod
 def CanCategoryBeDisplaced(categoryId):
  pass
 def CanElementsBeAddedToDisplacementSet(self,toDisplace):
  pass
 @staticmethod
 def CanElementsBeDisplaced(view,elementIds,commonDisplacedElementId=None):
  pass
 @staticmethod
 def Create(document,elementsToDisplace,displacement,ownerDBView,parentDisplacementElement):
  pass
 def Dispose(self):
  pass
 def GetAbsoluteDisplacement(self):
  pass
 @staticmethod
 def GetAdditionalElementsToDisplace(document,view,idToDisplace):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetChildren(self):
  pass
 def GetDisplacedElementIds(self,view=None):
  pass
 def GetDisplacedElementIdsFromAllChildren(self):
  pass
 @staticmethod
 def GetDisplacementElementId(view,id):
  pass
 @staticmethod
 def GetDisplacementElementIds(view):
  pass
 def GetRelativeDisplacement(self):
  pass
 @staticmethod
 def IsAllowedAsDisplacedElement(element):
  pass
 @staticmethod
 def IsElementDisplacedInView(view,id):
  pass
 @staticmethod
 def IsNotEmpty(elementIds):
  pass
 @staticmethod
 def IsValidAsParentInView(view,parent):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def RemoveDisplacedElement(self,ElemToRemove):
  pass
 def ResetDisplacedElements(self):
  pass
 def SetDisplacedElementIds(self,displacedElemIds):
  pass
 def setElementType(self,*args):
  pass
 def SetRelativeDisplacement(self,displacement):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 ParentId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The element id of the parent DisplacementElement. This DisplacementElement's relative transform
   will be concatenated with the absolute transform of its parent.
Get: ParentId(self: DisplacementElement) -> ElementId
""" 
class DisplacementPath(Element,IDisposable):
 @staticmethod
 def Create(aDoc,displacementElement,reference,param):
  pass
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 @staticmethod
 def IsValidParam(param):
  pass
 @staticmethod
 def IsValidReference(displacementElement,reference):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def SetAnchorPoint(self,displacementElement,reference,param):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 AncestorIdx=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies the end point of the path.
Get: AncestorIdx(self: DisplacementPath) -> int
Set: AncestorIdx(self: DisplacementPath) = value
""" 
 PathStyle=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies the style of the path.
Get: PathStyle(self: DisplacementPath) -> DisplacementPathStyle
Set: PathStyle(self: DisplacementPath) = value
""" 
class DisplacementPathStyle(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Jogged=None
 Straight=None
 value__=None
class DisplayStyle(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 FlatColors=None
 HLR=None
 Raytrace=None
 Realistic=None
 RealisticWithEdges=None
 Rendering=None
 Shading=None
 ShadingWithEdges=None
 Undefined=None
 value__=None
 Wireframe=None
class DisplayUnit(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 IMPERIAL=None
 METRIC=None
 value__=None
class DisplayUnitType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 DUT_1_RATIO=None
 DUT_ACRES=None
 DUT_AMPERES=None
 DUT_ATMOSPHERES=None
 DUT_BARS=None
 DUT_BRITISH_THERMAL_UNITS=None
 DUT_BRITISH_THERMAL_UNITS_PER_HOUR=None
 DUT_BRITISH_THERMAL_UNITS_PER_HOUR_CUBIC_FOOT=None
 DUT_BRITISH_THERMAL_UNITS_PER_HOUR_FOOT_FAHRENHEIT=None
 DUT_BRITISH_THERMAL_UNITS_PER_HOUR_SQUARE_FOOT=None
 DUT_BRITISH_THERMAL_UNITS_PER_HOUR_SQUARE_FOOT_FAHRENHEIT=None
 DUT_BRITISH_THERMAL_UNITS_PER_POUND=None
 DUT_BRITISH_THERMAL_UNITS_PER_POUND_FAHRENHEIT=None
 DUT_BRITISH_THERMAL_UNITS_PER_SECOND=None
 DUT_BRITISH_THERMAL_UNIT_PER_FAHRENHEIT=None
 DUT_CALORIES=None
 DUT_CALORIES_PER_SECOND=None
 DUT_CANDELAS=None
 DUT_CANDELAS_PER_SQUARE_METER=None
 DUT_CANDLEPOWER=None
 DUT_CELSIUS=None
 DUT_CELSIUS_DIFFERENCE=None
 DUT_CENTIMETERS=None
 DUT_CENTIMETERS_PER_MINUTE=None
 DUT_CENTIMETERS_TO_THE_FOURTH_POWER=None
 DUT_CENTIMETERS_TO_THE_SIXTH_POWER=None
 DUT_CENTIPOISES=None
 DUT_CUBIC_CENTIMETERS=None
 DUT_CUBIC_FEET=None
 DUT_CUBIC_FEET_PER_KIP=None
 DUT_CUBIC_FEET_PER_MINUTE=None
 DUT_CUBIC_FEET_PER_MINUTE_CUBIC_FOOT=None
 DUT_CUBIC_FEET_PER_MINUTE_SQUARE_FOOT=None
 DUT_CUBIC_FEET_PER_MINUTE_TON_OF_REFRIGERATION=None
 DUT_CUBIC_INCHES=None
 DUT_CUBIC_METERS=None
 DUT_CUBIC_METERS_PER_HOUR=None
 DUT_CUBIC_METERS_PER_KILONEWTON=None
 DUT_CUBIC_METERS_PER_SECOND=None
 DUT_CUBIC_MILLIMETERS=None
 DUT_CUBIC_YARDS=None
 DUT_CURRENCY=None
 DUT_CUSTOM=None
 DUT_CYCLES_PER_SECOND=None
 DUT_DECANEWTONS=None
 DUT_DECANEWTONS_PER_METER=None
 DUT_DECANEWTONS_PER_SQUARE_METER=None
 DUT_DECANEWTON_METERS=None
 DUT_DECANEWTON_METERS_PER_METER=None
 DUT_DECIMAL_DEGREES=None
 DUT_DECIMAL_FEET=None
 DUT_DECIMAL_INCHES=None
 DUT_DECIMETERS=None
 DUT_DEGREES_AND_MINUTES=None
 DUT_FAHRENHEIT=None
 DUT_FAHRENHEIT_DIFFERENCE=None
 DUT_FEET_FRACTIONAL_INCHES=None
 DUT_FEET_OF_WATER=None
 DUT_FEET_OF_WATER_PER_100FT=None
 DUT_FEET_PER_KIP=None
 DUT_FEET_PER_MINUTE=None
 DUT_FEET_PER_SECOND=None
 DUT_FEET_PER_SECOND_SQUARED=None
 DUT_FEET_TO_THE_FOURTH_POWER=None
 DUT_FEET_TO_THE_SIXTH_POWER=None
 DUT_FIXED=None
 DUT_FOOTCANDLES=None
 DUT_FOOTLAMBERTS=None
 DUT_FRACTIONAL_INCHES=None
 DUT_GALLONS_US=None
 DUT_GALLONS_US_PER_HOUR=None
 DUT_GALLONS_US_PER_MINUTE=None
 DUT_GENERAL=None
 DUT_GRADS=None
 DUT_GRAINS_PER_HOUR_SQUARE_FOOT_INCH_MERCURY=None
 DUT_HECTARES=None
 DUT_HERTZ=None
 DUT_HORSEPOWER=None
 DUT_HOURS=None
 DUT_HOUR_SQUARE_FOOT_FAHRENHEIT_PER_BRITISH_THERMAL_UNIT=None
 DUT_INCHES_OF_MERCURY=None
 DUT_INCHES_OF_WATER=None
 DUT_INCHES_OF_WATER_PER_100FT=None
 DUT_INCHES_PER_SECOND_SQUARED=None
 DUT_INCHES_TO_THE_FOURTH_POWER=None
 DUT_INCHES_TO_THE_SIXTH_POWER=None
 DUT_INV_CELSIUS=None
 DUT_INV_FAHRENHEIT=None
 DUT_INV_KILONEWTONS=None
 DUT_INV_KIPS=None
 DUT_JOULES=None
 DUT_JOULES_PER_GRAM=None
 DUT_JOULES_PER_GRAM_CELSIUS=None
 DUT_JOULES_PER_KELVIN=None
 DUT_JOULES_PER_KILOGRAM_CELSIUS=None
 DUT_KELVIN=None
 DUT_KELVIN_DIFFERENCE=None
 DUT_KILOAMPERES=None
 DUT_KILOCALORIES=None
 DUT_KILOCALORIES_PER_SECOND=None
 DUT_KILOGRAMS_FORCE=None
 DUT_KILOGRAMS_FORCE_PER_METER=None
 DUT_KILOGRAMS_FORCE_PER_SQUARE_METER=None
 DUT_KILOGRAMS_MASS=None
 DUT_KILOGRAMS_MASS_PER_METER=None
 DUT_KILOGRAMS_MASS_PER_SQUARE_METER=None
 DUT_KILOGRAMS_PER_CUBIC_METER=None
 DUT_KILOGRAM_FORCE_METERS=None
 DUT_KILOGRAM_FORCE_METERS_PER_METER=None
 DUT_KILOJOULES=None
 DUT_KILOJOULES_PER_KELVIN=None
 DUT_KILOMETERS_PER_HOUR=None
 DUT_KILOMETERS_PER_SECOND_SQUARED=None
 DUT_KILONEWTONS=None
 DUT_KILONEWTONS_PER_CUBIC_METER=None
 DUT_KILONEWTONS_PER_METER=None
 DUT_KILONEWTONS_PER_SQUARE_CENTIMETER=None
 DUT_KILONEWTONS_PER_SQUARE_METER=None
 DUT_KILONEWTONS_PER_SQUARE_MILLIMETER=None
 DUT_KILONEWTON_METERS=None
 DUT_KILONEWTON_METERS_PER_DEGREE=None
 DUT_KILONEWTON_METERS_PER_DEGREE_PER_METER=None
 DUT_KILONEWTON_METERS_PER_METER=None
 DUT_KILOPASCALS=None
 DUT_KILOVOLTS=None
 DUT_KILOVOLT_AMPERES=None
 DUT_KILOWATTS=None
 DUT_KILOWATT_HOURS=None
 DUT_KIPS=None
 DUT_KIPS_PER_CUBIC_FOOT=None
 DUT_KIPS_PER_CUBIC_INCH=None
 DUT_KIPS_PER_FOOT=None
 DUT_KIPS_PER_INCH=None
 DUT_KIPS_PER_SQUARE_FOOT=None
 DUT_KIPS_PER_SQUARE_INCH=None
 DUT_KIP_FEET=None
 DUT_KIP_FEET_PER_DEGREE=None
 DUT_KIP_FEET_PER_DEGREE_PER_FOOT=None
 DUT_KIP_FEET_PER_FOOT=None
 DUT_LITERS=None
 DUT_LITERS_PER_MINUTE=None
 DUT_LITERS_PER_SECOND=None
 DUT_LITERS_PER_SECOND_CUBIC_METER=None
 DUT_LITERS_PER_SECOND_KILOWATTS=None
 DUT_LITERS_PER_SECOND_SQUARE_METER=None
 DUT_LUMENS=None
 DUT_LUMENS_PER_WATT=None
 DUT_LUX=None
 DUT_MEGANEWTONS=None
 DUT_MEGANEWTONS_PER_METER=None
 DUT_MEGANEWTONS_PER_SQUARE_METER=None
 DUT_MEGANEWTON_METERS=None
 DUT_MEGANEWTON_METERS_PER_METER=None
 DUT_MEGAPASCALS=None
 DUT_METERS=None
 DUT_METERS_CENTIMETERS=None
 DUT_METERS_PER_KILONEWTON=None
 DUT_METERS_PER_SECOND=None
 DUT_METERS_PER_SECOND_SQUARED=None
 DUT_METERS_TO_THE_FOURTH_POWER=None
 DUT_METERS_TO_THE_SIXTH_POWER=None
 DUT_MICROINCHES_PER_INCH_FAHRENHEIT=None
 DUT_MICROMETERS_PER_METER_CELSIUS=None
 DUT_MILES_PER_HOUR=None
 DUT_MILES_PER_SECOND_SQUARED=None
 DUT_MILISECONDS=None
 DUT_MILLIAMPERES=None
 DUT_MILLIMETERS=None
 DUT_MILLIMETERS_OF_MERCURY=None
 DUT_MILLIMETERS_TO_THE_FOURTH_POWER=None
 DUT_MILLIMETERS_TO_THE_SIXTH_POWER=None
 DUT_MILLIVOLTS=None
 DUT_MINUTES=None
 DUT_NANOGRAMS_PER_PASCAL_SECOND_SQUARE_METER=None
 DUT_NEWTONS=None
 DUT_NEWTONS_PER_METER=None
 DUT_NEWTONS_PER_SQUARE_METER=None
 DUT_NEWTONS_PER_SQUARE_MILLIMETER=None
 DUT_NEWTON_METERS=None
 DUT_NEWTON_METERS_PER_METER=None
 DUT_OHM_METERS=None
 DUT_PASCALS=None
 DUT_PASCALS_PER_METER=None
 DUT_PASCAL_SECONDS=None
 DUT_PERCENTAGE=None
 DUT_PER_MILLE=None
 DUT_POUNDS_FORCE=None
 DUT_POUNDS_FORCE_PER_CUBIC_FOOT=None
 DUT_POUNDS_FORCE_PER_FOOT=None
 DUT_POUNDS_FORCE_PER_SQUARE_FOOT=None
 DUT_POUNDS_FORCE_PER_SQUARE_INCH=None
 DUT_POUNDS_MASS=None
 DUT_POUNDS_MASS_PER_CUBIC_FOOT=None
 DUT_POUNDS_MASS_PER_CUBIC_INCH=None
 DUT_POUNDS_MASS_PER_FOOT=None
 DUT_POUNDS_MASS_PER_FOOT_HOUR=None
 DUT_POUNDS_MASS_PER_FOOT_SECOND=None
 DUT_POUNDS_MASS_PER_SQUARE_FOOT=None
 DUT_POUND_FORCE_FEET=None
 DUT_POUND_FORCE_FEET_PER_FOOT=None
 DUT_RADIANS=None
 DUT_RADIANS_PER_SECOND=None
 DUT_RANKINE=None
 DUT_RANKINE_DIFFERENCE=None
 DUT_RATIO_10=None
 DUT_RATIO_12=None
 DUT_RISE_OVER_10_FEET=None
 DUT_RISE_OVER_120_INCHES=None
 DUT_RISE_OVER_FOOT=None
 DUT_RISE_OVER_INCHES=None
 DUT_RISE_OVER_MMS=None
 DUT_SECONDS=None
 DUT_SLOPE_DEGREES=None
 DUT_SQUARE_CENTIMETERS=None
 DUT_SQUARE_CENTIMETERS_PER_METER=None
 DUT_SQUARE_FEET=None
 DUT_SQUARE_FEET_PER_FOOT=None
 DUT_SQUARE_FEET_PER_KIP=None
 DUT_SQUARE_FEET_PER_THOUSAND_BRITISH_THERMAL_UNITS_PER_HOUR=None
 DUT_SQUARE_FEET_PER_TON_OF_REFRIGERATION=None
 DUT_SQUARE_INCHES=None
 DUT_SQUARE_INCHES_PER_FOOT=None
 DUT_SQUARE_METERS=None
 DUT_SQUARE_METERS_PER_KILONEWTON=None
 DUT_SQUARE_METERS_PER_KILOWATTS=None
 DUT_SQUARE_METERS_PER_METER=None
 DUT_SQUARE_METER_KELVIN_PER_WATT=None
 DUT_SQUARE_MILLIMETERS=None
 DUT_SQUARE_MILLIMETERS_PER_METER=None
 DUT_THERMS=None
 DUT_TONNES_FORCE=None
 DUT_TONNES_FORCE_PER_METER=None
 DUT_TONNES_FORCE_PER_SQUARE_METER=None
 DUT_TONNES_MASS=None
 DUT_TONNE_FORCE_METERS=None
 DUT_TONNE_FORCE_METERS_PER_METER=None
 DUT_TON_OF_REFRIGERATION=None
 DUT_UNDEFINED=None
 DUT_USTONNES_FORCE=None
 DUT_USTONNES_MASS=None
 DUT_VOLTS=None
 DUT_VOLT_AMPERES=None
 DUT_WATTS=None
 DUT_WATTS_PER_CUBIC_FOOT=None
 DUT_WATTS_PER_CUBIC_METER=None
 DUT_WATTS_PER_METER_KELVIN=None
 DUT_WATTS_PER_SQUARE_FOOT=None
 DUT_WATTS_PER_SQUARE_METER=None
 DUT_WATTS_PER_SQUARE_METER_KELVIN=None
 value__=None
class DistanceMeasuredFrom(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Base=None
 Top=None
 value__=None
class DistributionOfNormals(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 AtEachPoint=None
 OnEachFacet=None
 OnePerFace=None
 value__=None
class DividedPath(Element,IDisposable):
 @staticmethod
 def AreCurveReferencesConnected(document,curveReferences):
  pass
 @staticmethod
 def Create(document,curveReferences,intersectors=None):
  pass
 def Dispose(self):
  pass
 def Flip(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetIntersectingElements(self):
  pass
 @staticmethod
 def IsCurveReferenceValid(document,curveReference):
  pass
 @staticmethod
 def IsIntersectorValidForCreation(document,intersector):
  pass
 def IsIntersectorValidForDividedPath(self,intersector):
  pass
 def IsValidBeginningIndent(self,beginningIndent):
  pass
 def IsValidEndIndent(self,endIndent):
  pass
 @staticmethod
 def IsValidFixedNumberOfPoints(fixedNumberOfPoints):
  pass
 def IsValidMeasurementType(self,measurementType):
  pass
 def IsValidSpacingRuleJustification(self,justification):
  pass
 def IsValidSpacingRuleLayout(self,layout):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 @staticmethod
 def SeparateReferencesIntoConnectedReferences(document,curveReferences):
  pass
 def setElementType(self,*args):
  pass
 def SetIntersectingElements(self,intersectors):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 BeginningIndent=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The beginningIndent is an offset distance from the beginning of the
   first curve that determines the beginning of the range over which
   the layout is applied.
   The measurement type determines how the distance is measured.
Get: BeginningIndent(self: DividedPath) -> float
Set: BeginningIndent(self: DividedPath) = value
""" 
 DisplayNodeNumbers=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Controls whether the node numbers are shown when the divided path is selected
Get: DisplayNodeNumbers(self: DividedPath) -> bool
Set: DisplayNodeNumbers(self: DividedPath) = value
""" 
 DisplayNodes=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Controls whether the points of the divided path are visible
Get: DisplayNodes(self: DividedPath) -> bool
Set: DisplayNodes(self: DividedPath) = value
""" 
 DisplayReferenceCurves=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Controls whether the curves in the path are visible
Get: DisplayReferenceCurves(self: DividedPath) -> bool
Set: DisplayReferenceCurves(self: DividedPath) = value
""" 
 Distance=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The distance between points that are distributed along the path according to the selected layout.
   When the layout is set to 'FixedDistance' this value can be set to desired distance.
   The measurement type determines how the distance is measured.
Get: Distance(self: DividedPath) -> float
Set: Distance(self: DividedPath) = value
""" 
 EndIndent=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The endIndent is an offset distance from the end of the
   last curve that determines the end of the range over which
   the layout is applied.
   The measurement type determines how the distance is measured.
Get: EndIndent(self: DividedPath) -> float
Set: EndIndent(self: DividedPath) = value
""" 
 FixedNumberOfPoints=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The number of points used when the layout is set to 'FixedNumber'.
Get: FixedNumberOfPoints(self: DividedPath) -> int
Set: FixedNumberOfPoints(self: DividedPath) = value
""" 
 Flipped=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """If the divided path is flipped the nodes are numbered in the reverse order.
   It also switches the ends from which beginningIndent and endIndent are measured from.
Get: Flipped(self: DividedPath) -> bool
""" 
 IsClosedLoop=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Whether or not the path forms a closed loop.
Get: IsClosedLoop(self: DividedPath) -> bool
""" 
 IsCyclical=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """True if the first and last point coincide
   False otherwise.
Get: IsCyclical(self: DividedPath) -> bool
""" 
 MaximumDistance=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The maximum distance is used when the layout is set to 'MaximumSpacing'.
   When that layout rule is used the distance between points will not exceed this value.
   The measurement type determines how the distance is measured.
Get: MaximumDistance(self: DividedPath) -> float
Set: MaximumDistance(self: DividedPath) = value
""" 
 MeasurementType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The measurement type determines how distances are calculated.
   Either along a straight line between two points ('ChordLength')
   or along the segment of the path that connects them. ('SegmentLength').
Get: MeasurementType(self: DividedPath) -> DividedPathMeasurementType
Set: MeasurementType(self: DividedPath) = value
""" 
 MinimumDistance=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The minimum distance is used when the layout is set to 'MinimumSpacing'.
   When that layout rule is used the distance between points will not fall below this value.
   The measurement type determines how the distance is measured.
Get: MinimumDistance(self: DividedPath) -> float
Set: MinimumDistance(self: DividedPath) = value
""" 
 NumberOfPoints=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The total number of points of the divided surface.
   This combines the layout points and the intersection points.
Get: NumberOfPoints(self: DividedPath) -> int
""" 
 SpacingRuleJustification=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """When the layout is set to 'FixedDistance' the points may not cover the
   entire range of the path.  The justification determines whether
   the points are centered on the range, or shifted towards the start or end of the range.
Get: SpacingRuleJustification(self: DividedPath) -> SpacingRuleJustification
Set: SpacingRuleJustification(self: DividedPath) = value
""" 
 SpacingRuleLayout=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The layout determines how points are distributed along the path.
Get: SpacingRuleLayout(self: DividedPath) -> SpacingRuleLayout
Set: SpacingRuleLayout(self: DividedPath) = value
""" 
 TotalPathLength=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The sum of the curve lengths.
Get: TotalPathLength(self: DividedPath) -> float
""" 
class DividedPathMeasurementType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 ChordLength=None
 SegmentLength=None
 value__=None
class DividedSurface(Element,IDisposable):
 def AddIntersectionElement(self,newIntersectionElemId):
  pass
 @staticmethod
 def CanBeDivided(document,reference):
  pass
 def CanBeIntersectionElement(self,id):
  pass
 @staticmethod
 def Create(document,faceReference):
  pass
 def Dispose(self):
  pass
 def GetAllIntersectionElements(self):
  pass
 def getBoundingBox(self,*args):
  pass
 @staticmethod
 def GetDividedSurfaceForReference(document,faceReference):
  pass
 def GetGridNodeLocation(self,gridNode):
  pass
 def GetGridNodeReference(self,gridNode):
  pass
 def GetGridNodeUV(self,gridNode):
  pass
 def GetGridSegmentReference(self,gridNode,gridSegmentDirection):
  pass
 @staticmethod
 def GetReferencesWithDividedSurfaces(host):
  pass
 def GetTileFamilyInstance(self,gridNode,tileIndex):
  pass
 def GetTileReference(self,gridNode,tileIndex):
  pass
 def IsSeedNode(self,gridNode):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def RemoveAllIntersectionElements(self):
  pass
 def RemoveIntersectionElement(self,referenceElemIdToRemove):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 AllGridRotation=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Angle of rotation applied to the U- and V- directions together.
Get: AllGridRotation(self: DividedSurface) -> float
Set: AllGridRotation(self: DividedSurface) = value
""" 
 BorderTile=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Determines the handling of tiles that overlap the surface's
boundary.
Get: BorderTile(self: DividedSurface) -> BorderTile
Set: BorderTile(self: DividedSurface) = value
""" 
 ComponentRotation=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The rotation of the pattern by a multiple
of 90 degrees.
Get: ComponentRotation(self: DividedSurface) -> ComponentRotation
Set: ComponentRotation(self: DividedSurface) = value
""" 
 Host=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The element whose surface has been divided.
Get: Host(self: DividedSurface) -> Element
""" 
 HostReference=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """A reference to the divided face on the host.
Get: HostReference(self: DividedSurface) -> Reference
""" 
 IsComponentFlipped=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Whether the pattern is flipped.
Get: IsComponentFlipped(self: DividedSurface) -> bool
Set: IsComponentFlipped(self: DividedSurface) = value
""" 
 IsComponentMirrored=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Whether the pattern is mirror-imaged.
Get: IsComponentMirrored(self: DividedSurface) -> bool
Set: IsComponentMirrored(self: DividedSurface) = value
""" 
 NumberOfUGridlines=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Get the number of U-gridlines used on the
surface.
Get: NumberOfUGridlines(self: DividedSurface) -> int
""" 
 NumberOfVGridlines=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Get the number of V-gridlines used on the
surface.
Get: NumberOfVGridlines(self: DividedSurface) -> int
""" 
 UPatternIndent=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The offset applied to the pattern by an
integral number of grid nodes in the U-direction.
Get: UPatternIndent(self: DividedSurface) -> int
Set: UPatternIndent(self: DividedSurface) = value
""" 
 USpacingRule=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Access to the rule for laying out the first series of equidistant
parallel lines on the surface.
Get: USpacingRule(self: DividedSurface) -> SpacingRule
""" 
 VPatternIndent=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The offset applied to the pattern by an 
integral number of grid nodes in the V-direction.
Get: VPatternIndent(self: DividedSurface) -> int
Set: VPatternIndent(self: DividedSurface) = value
""" 
 VSpacingRule=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Access to the rule for laying out the second series of equidistant
parallel lines on the surface.
Get: VSpacingRule(self: DividedSurface) -> SpacingRule
""" 
class Document(object,IDisposable):
 def AutoJoinElements(self):
  pass
 def CanEnableWorksharing(self):
  pass
 def Close(self,saveModified=None):
  pass
 def CombineElements(self,members):
  pass
 def ConvertDetailToModelCurves(self,view,detailCurves):
  pass
 def ConvertModelToDetailCurves(self,view,modelCurves):
  pass
 def ConvertModelToSymbolicCurves(self,view,modelCurves):
  pass
 def ConvertSymbolicToModelCurves(self,view,symbolicCurve):
  pass
 def Delete(self,*__args):
  pass
 def Dispose(self):
  pass
 def EditFamily(self,loadedFamily):
  pass
 def EnableWorksharing(self,worksetNameGridLevel,worksetName):
  pass
 def Equals(self,obj):
  pass
 def Export(self,folder,name,*__args):
  pass
 def ExportImage(self,options):
  pass
 def GetDefaultElementTypeId(self,defaultTypeId):
  pass
 def GetDefaultFamilyTypeId(self,familyCategoryId):
  pass
 def GetDocumentPreviewSettings(self):
  pass
 @staticmethod
 def GetDocumentVersion(doc):
  pass
 def GetElement(self,*__args):
  pass
 def GetHashCode(self):
  pass
 def GetPaintedMaterial(self,elementId,face):
  pass
 def GetPrintSettingIds(self):
  pass
 def GetRoomAtPoint(self,point,phase=None):
  pass
 def GetSpaceAtPoint(self,point,phase=None):
  pass
 def GetUnits(self):
  pass
 def GetWorksetId(self,id):
  pass
 def GetWorksetTable(self):
  pass
 def GetWorksharingCentralModelPath(self):
  pass
 def HasAllChangesFromCentral(self):
  pass
 def Import(self,file,options,*__args):
  pass
 def IsDefaultElementTypeIdValid(self,defaultTypeId,typeId):
  pass
 def IsDefaultFamilyTypeIdValid(self,familyCategoryId,familyTypeId):
  pass
 def IsPainted(self,elementId,face):
  pass
 def Link(self,file,options,pDBView=None,elementId=None):
  pass
 def LoadFamily(self,*__args):
  pass
 def LoadFamilySymbol(self,filename,name,*__args):
  pass
 def MakeTransientElements(self,maker):
  pass
 def Paint(self,elementId,face,*__args):
  pass
 def PostFailure(self,failure):
  pass
 def Print(self,views,*__args):
  pass
 def Regenerate(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources_(self,*args):
  pass
 def ReloadLatest(self,reloadOptions):
  pass
 def RemovePaint(self,elementId,face):
  pass
 def Save(self,options=None):
  pass
 def SaveAs(self,*__args):
  pass
 def SaveToProjectAsImage(self,options):
  pass
 def SeparateElements(self,members):
  pass
 def SetDefaultElementTypeId(self,defaultTypeId,typeId):
  pass
 def SetDefaultFamilyTypeId(self,familyCategoryId,familyTypeId):
  pass
 def SetUnits(self,units):
  pass
 def SynchronizeWithCentral(self,transactOptions,syncOptions):
  pass
 def UnpostFailure(self,messageKey):
  pass
 def __enter__(self,*args):
  pass
 def __eq__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 ActiveProjectLocation=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieve the active project location.
Get: ActiveProjectLocation(self: Document) -> ProjectLocation
Set: ActiveProjectLocation(self: Document) = value
""" 
 ActiveView=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The document's active view.
Get: ActiveView(self: Document) -> View
""" 
 Application=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the Application in which the Document resides.
Get: Application(self: Document) -> Application
""" 
 Create=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """An object that can be used to create new instances of Autodesk Revit API elements
within a project.
Get: Create(self: Document) -> Document
""" 
 DisplayUnitSystem=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Provides access to display unit type with in the document.
Get: DisplayUnitSystem(self: Document) -> DisplayUnit
""" 
 FamilyCreate=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """An object that can be used to create new instances of Autodesk Revit API elements
within a family document.
Get: FamilyCreate(self: Document) -> FamilyItemFactory
""" 
 FamilyManager=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The family manager object provides access to family types and parameters.
Get: FamilyManager(self: Document) -> FamilyManager
""" 
 IsDetached=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if a workshared document is detached.
   Also, see Autodesk.Revit.DB.Document.IsWorkshared
Get: IsDetached(self: Document) -> bool
""" 
 IsFamilyDocument=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if the current document is a family document.
Get: IsFamilyDocument(self: Document) -> bool
""" 
 IsLinked=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if a document is a linked RVT.
Get: IsLinked(self: Document) -> bool
""" 
 IsModifiable=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The document's state of modifiability.
Get: IsModifiable(self: Document) -> bool
""" 
 IsModified=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The state of changes made to the document.
Get: IsModified(self: Document) -> bool
""" 
 IsReadOnly=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if the document is read-only or can possibly be modified.
Get: IsReadOnly(self: Document) -> bool
""" 
 IsReadOnlyFile=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Signals whether the document was opened from a read-only file.
Get: IsReadOnlyFile(self: Document) -> bool
""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: Document) -> bool
""" 
 IsWorkshared=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if worksharing (i.e. editing permissions and multiple worksets) have been enabled in the document.
   Also, see Autodesk.Revit.DB.Document.IsDetached
Get: IsWorkshared(self: Document) -> bool
""" 
 MassDisplayTemporaryOverride=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """This setting controls temporary display in views of objects with mass category or subcategories.
Get: MassDisplayTemporaryOverride(self: Document) -> MassDisplayTemporaryOverrideType
Set: MassDisplayTemporaryOverride(self: Document) = value
""" 
 MullionTypes=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """This property is used to retrieve all the mullion types in current system.
Get: MullionTypes(self: Document) -> MullionTypeSet
""" 
 OwnerFamily=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Get the Family of this Family Document.
Get: OwnerFamily(self: Document) -> Family
""" 
 PanelTypes=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves a set of PanelType objects that contains all the panel types that are currently loaded into the
project.
Get: PanelTypes(self: Document) -> PanelTypeSet
""" 
 ParameterBindings=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves an object from which mappings between parameter definitions and categories can
be found.
Get: ParameterBindings(self: Document) -> BindingMap
""" 
 PathName=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The fully qualified path of the document's disk file.
Get: PathName(self: Document) -> str
""" 
 Phases=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves all the object that represent phases within the project.
Get: Phases(self: Document) -> PhaseArray
""" 
 PrintManager=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieve the PrintManager of current project.
Get: PrintManager(self: Document) -> PrintManager
""" 
 ProjectInformation=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Return the Project Information of the current project.
Get: ProjectInformation(self: Document) -> ProjectInfo
""" 
 ProjectLocations=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieve all the project locations associated with this project
Get: ProjectLocations(self: Document) -> ProjectLocationSet
""" 
 ReactionsAreUpToDate=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Reports if the analytical model has regenerated in a document with reaction loads.
Get: ReactionsAreUpToDate(self: Document) -> bool
""" 
 Settings=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Provides access to general application settings, such as Categories.
Get: Settings(self: Document) -> Settings
""" 
 SiteLocation=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the site location information.
Get: SiteLocation(self: Document) -> SiteLocation
""" 
 Title=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The document's title.
Get: Title(self: Document) -> str
""" 
 WorksharingCentralGUID=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The central GUID of the server-based model.
Get: WorksharingCentralGUID(self: Document) -> Guid
""" 
 DocumentClosing=None
 DocumentPrinted=None
 DocumentPrinting=None
 DocumentSaved=None
 DocumentSavedAs=None
 DocumentSaving=None
 DocumentSavingAs=None
 ViewPrinted=None
 ViewPrinting=None
class DocumentPreviewSettings(object,IDisposable):
 def Dispose(self):
  pass
 def ForceViewUpdate(self,forceViewUpdate):
  pass
 def IsViewIdValidForPreview(self,viewId):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: DocumentPreviewSettings) -> bool
""" 
 IsViewUpdateForced=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Identifies if Revit will update the preview view if necessary.
Get: IsViewUpdateForced(self: DocumentPreviewSettings) -> bool
""" 
 PreviewViewId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The view id that will be used to generate the preview.
Get: PreviewViewId(self: DocumentPreviewSettings) -> ElementId
Set: PreviewViewId(self: DocumentPreviewSettings) = value
""" 
class DocumentSet(APIObject,IDisposable,IEnumerable):
 def Clear(self):
  pass
 def Contains(self,item):
  pass
 def Dispose(self):
  pass
 def Erase(self,item):
  pass
 def ForwardIterator(self):
  pass
 def GetEnumerator(self):
  pass
 def Insert(self,item):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def ReverseIterator(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Test to see if the set is empty.
Get: IsEmpty(self: DocumentSet) -> bool
""" 
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the number of objects that are in the set.
Get: Size(self: DocumentSet) -> int
""" 
class DocumentSetIterator(APIObject,IDisposable,IEnumerator):
 def Dispose(self):
  pass
 def MoveNext(self):
  pass
 def next(self,*args):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Reset(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 Current=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves the item that is the current focus of the iterator.
Get: Current(self: DocumentSetIterator) -> object
""" 
class DocumentType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 BuildingComponent=None
 Family=None
 IFC=None
 Other=None
 Project=None
 Template=None
 value__=None
class DocumentValidation(object):
 @staticmethod
 def CanDeleteElement(document,elementId):
  pass
 __all__=['CanDeleteElement',]
class DocumentVersion(object,IDisposable):
 def Dispose(self):
  pass
 def IsEqual(self,other):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: DocumentVersion) -> bool
""" 
 NumberOfSaves=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The number of times the document has been saved. The save number and GUID
   are both necessary to uniquely identify a document version.
Get: NumberOfSaves(self: DocumentVersion) -> int
""" 
 VersionGUID=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The GUID portion of the DocumentVersion. The GUID is updated when changes
   are made to the document, but may not update with every change to the document.
   The GUID and save number are both necessary to uniquely identify a document version.
Get: VersionGUID(self: DocumentVersion) -> Guid
""" 
class Domain(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 DomainCableTrayConduit=None
 DomainElectrical=None
 DomainHvac=None
 DomainPiping=None
 DomainUndefined=None
 value__=None
class DoubleArray(APIObject,IDisposable,IEnumerable):
 def Append(self,item):
  pass
 def Clear(self):
  pass
 def Dispose(self):
  pass
 def ForwardIterator(self):
  pass
 def GetEnumerator(self):
  pass
 def Insert(self,item,index):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def ReverseIterator(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __getitem__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 def __setitem__(self,*args):
  pass
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Test to see if the array is empty.
Get: IsEmpty(self: DoubleArray) -> bool
""" 
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the number of doubles that are in the array.
Get: Size(self: DoubleArray) -> int
""" 
class DoubleArrayIterator(APIObject,IDisposable,IEnumerator):
 def Dispose(self):
  pass
 def MoveNext(self):
  pass
 def next(self,*args):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Reset(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 Current=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves the item that is the current focus of the iterator.
Get: Current(self: DoubleArrayIterator) -> object
""" 
class ParameterValue(object,IDisposable):
 def Copy(self):
  pass
 def Dispose(self):
  pass
 def IsEqual(self,other):
  pass
 def IsSameType(self,other):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ParameterValue) -> bool
""" 
class DoubleParameterValue(ParameterValue,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,value=None):
  pass
 Value=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The stored value
Get: Value(self: DoubleParameterValue) -> float
Set: Value(self: DoubleParameterValue) = value
""" 
class DuplicateTypeAction(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Abort=None
 UseDestinationTypes=None
 value__=None
class DuplicateTypeNamesHandlerArgs(object,IDisposable):
 def Dispose(self):
  pass
 def GetTypeIds(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 Document=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The document that contains the types with duplicate names.
Get: Document(self: DuplicateTypeNamesHandlerArgs) -> Document
""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: DuplicateTypeNamesHandlerArgs) -> bool
""" 
class DWFExportOptions(CADExportOptions):
 CropBoxVisible=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Whether to export crop box.
Get: CropBoxVisible(self: DWFExportOptions) -> bool
Set: CropBoxVisible(self: DWFExportOptions) = value
""" 
 ExportingAreas=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Whether to also export areas and rooms' geometry.
Get: ExportingAreas(self: DWFExportOptions) -> bool
Set: ExportingAreas(self: DWFExportOptions) = value
""" 
 ExportObjectData=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Whether to include properties associated with elements.
Get: ExportObjectData(self: DWFExportOptions) -> bool
Set: ExportObjectData(self: DWFExportOptions) = value
""" 
 ExportTexture=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Whether to export texture.
Get: ExportTexture(self: DWFExportOptions) -> bool
Set: ExportTexture(self: DWFExportOptions) = value
""" 
 ImageFormat=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Controls the compression level of images embedded.
Get: ImageFormat(self: DWFExportOptions) -> DWFImageFormat
Set: ImageFormat(self: DWFExportOptions) = value
""" 
 ImageQuality=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Image quality level when compressed raster format(JPEG) is used.
Get: ImageQuality(self: DWFExportOptions) -> DWFImageQuality
Set: ImageQuality(self: DWFExportOptions) = value
""" 
 MergedViews=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Whether to merge all views in one file.
Get: MergedViews(self: DWFExportOptions) -> bool
Set: MergedViews(self: DWFExportOptions) = value
""" 
 PaperFormat=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Standard paper format.
Get: PaperFormat(self: DWFExportOptions) -> ExportPaperFormat
Set: PaperFormat(self: DWFExportOptions) = value
""" 
 PortraitLayout=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Paper orientation - Portrait/Landscape.
Get: PortraitLayout(self: DWFExportOptions) -> bool
Set: PortraitLayout(self: DWFExportOptions) = value
""" 
 StopOnError=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Whether export process should stop when a view fails to export.
Get: StopOnError(self: DWFExportOptions) -> bool
Set: StopOnError(self: DWFExportOptions) = value
""" 
class DWFImageFormat(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Lossless=None
 Lossy=None
 value__=None
class DWFImageQuality(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Default=None
 High=None
 Low=None
 Medium=None
 value__=None
class DWFImportOptions(object,IDisposable):
 def Dispose(self):
  pass
 def GetSheetViews(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def SetSheetViews(self,sheetViews):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,*__args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: DWFImportOptions) -> bool
""" 
class DWFXExportOptions(DWFExportOptions):
class DWGExportOptions(ACADExportOptions,IDisposable):
 def Dispose(self):
  pass
 @staticmethod
 def GetPredefinedOptions(document,setup):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,option=None):
  pass
 MergedViews=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Whether to merge all views in one file (via XRefs).
   Default value is false for mergedViews.
Get: MergedViews(self: DWGExportOptions) -> bool
Set: MergedViews(self: DWGExportOptions) = value
""" 
class DWGImportOptions(BaseImportOptions,IDisposable):
 def Dispose(self):
  pass
 def GetLineWeights(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def SetLineWeights(self,lineWeight):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,option=None):
  pass
class DXFExportOptions(ACADExportOptions,IDisposable):
 def Dispose(self):
  pass
 @staticmethod
 def GetPredefinedOptions(document,setup):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,option=None):
  pass
class EaveCutterType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 PlumbCut=None
 TwoCutPlumb=None
 TwoCutSquare=None
 value__=None
class Edge(GeometryObject,IDisposable):
 def AsCurve(self):
  pass
 def AsCurveFollowingFace(self,faceForDir):
  pass
 def ComputeDerivatives(self,parameter):
  pass
 def Dispose(self):
  pass
 def Evaluate(self,param):
  pass
 def EvaluateOnFace(self,param,face):
  pass
 def GetEndPointReference(self,index):
  pass
 def GetFace(self,index):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Tessellate(self):
  pass
 def TessellateOnFace(self,face):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 ApproximateLength=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the approximate length of the edge.
Get: ApproximateLength(self: Edge) -> float
""" 
 Reference=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns a stable reference to the edge.
Get: Reference(self: Edge) -> Reference
""" 
class EdgeArray(APIObject,IDisposable,IEnumerable):
 def Append(self,item):
  pass
 def Clear(self):
  pass
 def Dispose(self):
  pass
 def ForwardIterator(self):
  pass
 def GetEnumerator(self):
  pass
 def Insert(self,item,index):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def ReverseIterator(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __getitem__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 def __setitem__(self,*args):
  pass
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Test to see if the array is empty.
Get: IsEmpty(self: EdgeArray) -> bool
""" 
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the number of edges that are in the array.
Get: Size(self: EdgeArray) -> int
""" 
class EdgeArrayArray(APIObject,IDisposable,IEnumerable):
 def Append(self,item):
  pass
 def Clear(self):
  pass
 def Dispose(self):
  pass
 def ForwardIterator(self):
  pass
 def GetEnumerator(self):
  pass
 def Insert(self,item,index):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def ReverseIterator(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __getitem__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 def __setitem__(self,*args):
  pass
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Test to see if the array is empty.
Get: IsEmpty(self: EdgeArrayArray) -> bool
""" 
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the number of edge arrays that are in the array.
Get: Size(self: EdgeArrayArray) -> int
""" 
class EdgeArrayArrayIterator(APIObject,IDisposable,IEnumerator):
 def Dispose(self):
  pass
 def MoveNext(self):
  pass
 def next(self,*args):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Reset(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 Current=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves the item that is the current focus of the iterator.
Get: Current(self: EdgeArrayArrayIterator) -> object
""" 
class EdgeArrayIterator(APIObject,IDisposable,IEnumerator):
 def Dispose(self):
  pass
 def MoveNext(self):
  pass
 def next(self,*args):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Reset(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 Current=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves the item that is the current focus of the iterator.
Get: Current(self: EdgeArrayIterator) -> object
""" 
class EditScope(object,IDisposable):
 def Cancel(self):
  pass
 def Commit(self,failurePreprocessor):
  pass
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsActive=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Tells if the EditScope is active. In other words, the EditScope has started but not committed/canceled yet.
Get: IsActive(self: EditScope) -> bool
""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: EditScope) -> bool
""" 
class ElementArray(APIObject,IDisposable,IEnumerable):
 def Append(self,item):
  pass
 def Clear(self):
  pass
 def Dispose(self):
  pass
 def ForwardIterator(self):
  pass
 def GetEnumerator(self):
  pass
 def Insert(self,item,index):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def ReverseIterator(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __getitem__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 def __setitem__(self,*args):
  pass
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Test to see if the array is empty.
Get: IsEmpty(self: ElementArray) -> bool
""" 
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the number of elements that are in the array.
Get: Size(self: ElementArray) -> int
""" 
class ElementArrayIterator(APIObject,IDisposable,IEnumerator):
 def Dispose(self):
  pass
 def MoveNext(self):
  pass
 def next(self,*args):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Reset(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 Current=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves the item that is the current focus of the iterator.
Get: Current(self: ElementArrayIterator) -> object
""" 
class ElementBinding(Binding,IDisposable):
 def Dispose(self):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Categories=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieve or set the categories to which a parameter definition will be bound.
Get: Categories(self: ElementBinding) -> CategorySet
Set: Categories(self: ElementBinding) = value
""" 
class ElementCategoryFilter(ElementQuickFilter,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,*__args):
  pass
 CategoryId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The category id.
Get: CategoryId(self: ElementCategoryFilter) -> ElementId
""" 
class ElementClassFilter(ElementQuickFilter,IDisposable):
 def Dispose(self):
  pass
 def GetElementClass(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,type,inverted=None):
  pass
class ElementDesignOptionFilter(ElementQuickFilter,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,designOptionId,inverted=None):
  pass
 DesignOptionId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The design option id.
Get: DesignOptionId(self: ElementDesignOptionFilter) -> ElementId
""" 
class ElementId(object):
 def Compare(self,id):
  pass
 def Equals(self,obj):
  pass
 def GetHashCode(self):
  pass
 def ToString(self):
  pass
 def __cmp__(self,*args):
  pass
 def __eq__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 @staticmethod 
 def __new__(self,*__args):
  pass
 def __ne__(self,*args):
  pass
 IntegerValue=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Provides the value of the element id as an integer.
Get: IntegerValue(self: ElementId) -> int
""" 
 InvalidElementId=None
class ElementIdParameterValue(ParameterValue,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,value=None):
  pass
 Value=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The stored value
Get: Value(self: ElementIdParameterValue) -> ElementId
Set: Value(self: ElementIdParameterValue) = value
""" 
class ElementIntersectsFilter(ElementSlowFilter,IDisposable):
 def Dispose(self):
  pass
 @staticmethod
 def IsCategorySupported(element):
  pass
 @staticmethod
 def IsElementSupported(element):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class ElementIntersectsElementFilter(ElementIntersectsFilter,IDisposable):
 def Dispose(self):
  pass
 def GetElement(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,element,inverted=None):
  pass
class ElementIntersectsSolidFilter(ElementIntersectsFilter,IDisposable):
 def Dispose(self):
  pass
 def GetSolid(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,solid,inverted=None):
  pass
class ElementIsCurveDrivenFilter(ElementQuickFilter,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,inverted=None):
  pass
class ElementIsElementTypeFilter(ElementQuickFilter,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,inverted=None):
  pass
class ElementLevelFilter(ElementSlowFilter,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,levelId,inverted=None):
  pass
 LevelId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The id of the level that will be matched to elements' associated level.
Get: LevelId(self: ElementLevelFilter) -> ElementId
""" 
class ElementLogicalFilter(ElementFilter,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class ElementMulticategoryFilter(ElementQuickFilter,IDisposable):
 def Dispose(self):
  pass
 def GetCategoryIds(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,*__args):
  pass
class ElementMulticlassFilter(ElementQuickFilter,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,typeList,inverted=None):
  pass
class ElementOnPhaseStatus(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Demolished=None
 Existing=None
 Future=None
 New=None
 None=None
 Past=None
 Temporary=None
 value__=None
class ElementOwnerViewFilter(ElementQuickFilter,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,viewId,inverted=None):
  pass
 ViewId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The view id.
Get: ViewId(self: ElementOwnerViewFilter) -> ElementId
""" 
class ElementParameterFilter(ElementSlowFilter,IDisposable):
 def Dispose(self):
  pass
 def GetRules(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,*__args):
  pass
class ElementPhaseStatusFilter(ElementSlowFilter,IDisposable):
 def Dispose(self):
  pass
 def GetPhaseStatuses(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,phaseId,*__args):
  pass
 PhaseId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The phase id.
Get: PhaseId(self: ElementPhaseStatusFilter) -> ElementId
""" 
class ElementRecord(object,IDisposable):
 def Dispose(self):
  pass
 def GetBoundingBox(self):
  pass
 def GetCategoryId(self):
  pass
 def GetDesignOptionId(self):
  pass
 def GetId(self):
  pass
 def GetOwnerViewId(self):
  pass
 def HasBoundingBox(self):
  pass
 def IsAnElementType(self):
  pass
 def IsCurveDriven(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ElementRecord) -> bool
""" 
 WorksetId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Get Id of the workset which owns the element.
Get: WorksetId(self: ElementRecord) -> WorksetId
""" 
class ElementReferenceType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 REFERENCE_TYPE_CUT_EDGE=None
 REFERENCE_TYPE_FOREIGN=None
 REFERENCE_TYPE_INSTANCE=None
 REFERENCE_TYPE_LINEAR=None
 REFERENCE_TYPE_MESH=None
 REFERENCE_TYPE_NONE=None
 REFERENCE_TYPE_SURFACE=None
 value__=None
class ElementSet(APIObject,IDisposable,IEnumerable):
 def Clear(self):
  pass
 def Contains(self,item):
  pass
 def Dispose(self):
  pass
 def Erase(self,item):
  pass
 def ForwardIterator(self):
  pass
 def GetEnumerator(self):
  pass
 def Insert(self,item):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def ReverseIterator(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Test to see if the set is empty.
Get: IsEmpty(self: ElementSet) -> bool
""" 
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the number of elements that are in the set.
Get: Size(self: ElementSet) -> int
""" 
class ElementSetIterator(APIObject,IDisposable,IEnumerator):
 def Dispose(self):
  pass
 def MoveNext(self):
  pass
 def next(self,*args):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Reset(self):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 Current=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Retrieves the item that is the current focus of the iterator.
Get: Current(self: ElementSetIterator) -> object
""" 
class ElementStructuralTypeFilter(ElementQuickFilter,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,structuralType,inverted=None):
  pass
 StructuralType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The structural type.
Get: StructuralType(self: ElementStructuralTypeFilter) -> StructuralType
""" 
class ElementTransformUtils(object):
 @staticmethod
 def CanMirrorElement(ADoc,elemId):
  pass
 @staticmethod
 def CanMirrorElements(ADoc,elemIds):
  pass
 @staticmethod
 def CopyElement(document,elementToCopy,translation):
  pass
 @staticmethod
 def CopyElements(*__args):
  pass
 @staticmethod
 def GetTransformFromViewToView(sourceView,destinationView):
  pass
 @staticmethod
 def MirrorElement(document,elementToMirror,plane):
  pass
 @staticmethod
 def MirrorElements(document,elementsToMirror,plane,mirrorCopies):
  pass
 @staticmethod
 def MoveElement(document,elementToMove,translation):
  pass
 @staticmethod
 def MoveElements(document,elementsToMove,translation):
  pass
 @staticmethod
 def RotateElement(document,elementToRotate,axis,angle):
  pass
 @staticmethod
 def RotateElements(document,elementsToRotate,axis,angle):
  pass
 __all__=['CanMirrorElement','CanMirrorElements','CopyElement','CopyElements','GetTransformFromViewToView','MirrorElement','MirrorElements','MoveElement','MoveElements','RotateElement','RotateElements',]
class ElementTypeGroup(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 AnalyticalLinkType=None
 AngularDimensionType=None
 ArcLengthDimensionType=None
 AreaLoadType=None
 AreaReinforcementType=None
 AttachedDetailGroupType=None
 BeamSystemType=None
 BuildingPadType=None
 CableTrayType=None
 CalloutType=None
 CeilingType=None
 ColorFillType=None
 ConduitType=None
 ContourLabelingType=None
 CorniceType=None
 CurtainSystemType=None
 DecalType=None
 DetailGroupType=None
 DiameterDimensionType=None
 DuctInsulationType=None
 DuctLiningType=None
 DuctType=None
 EdgeSlabType=None
 EndTreatmentType=None
 FabricAreaType=None
 FabricSheetType=None
 FasciaType=None
 FilledRegionType=None
 FlexDuctType=None
 FlexPipeType=None
 FloorType=None
 FootingSlabType=None
 GridType=None
 GutterType=None
 LevelType=None
 LinearDimensionType=None
 LineLoadType=None
 ModelGroupType=None
 ModelTextType=None
 MultiReferenceAnnotationType=None
 PathReinforcementType=None
 PipeInsulationType=None
 PipeType=None
 PointLoadType=None
 RadialDimensionType=None
 RailingsTypeForRamps=None
 RailingsTypeForStairs=None
 RampType=None
 RebarBarType=None
 RebarContainerType=None
 ReferenceViewerType=None
 RepeatingDetailType=None
 RevealType=None
 RoofSoffitType=None
 RoofType=None
 SpotCoordinateType=None
 SpotElevationType=None
 SpotSlopeType=None
 StairsBySketchType=None
 StairsRailingType=None
 StairsType=None
 StructuralConnectionHandlerType=None
 TagNoteType=None
 TextNoteType=None
 value__=None
 ViewportType=None
 ViewType3D=None
 ViewTypeCeilingPlan=None
 ViewTypeCostReport=None
 ViewTypeDetailView=None
 ViewTypeDrafting=None
 ViewTypeElevation=None
 ViewTypeFloorPlan=None
 ViewTypeGraphScheduleColumn=None
 ViewTypeLegend=None
 ViewTypeLoadsReport=None
 ViewTypePanelSchedule=None
 ViewTypePressureLossReport=None
 ViewTypeRendering=None
 ViewTypeSchedule=None
 ViewTypeSection=None
 ViewTypeSheet=None
 ViewTypeStructuralElevation=None
 ViewTypeStructuralPlan=None
 ViewTypeWalkthrough=None
 WallFoundationType=None
 WallType=None
 WireType=None
class ElementWorksetFilter(ElementQuickFilter,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,worksetId,inverted=None):
  pass
 WorksetId=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The workset id.
Get: WorksetId(self: ElementWorksetFilter) -> WorksetId
""" 
class ElevationMarker(Element,IDisposable):
 def CreateElevation(self,document,viewPlanId,index):
  pass
 @staticmethod
 def CreateElevationMarker(document,viewFamilyTypeId,origin,initialViewScale):
  pass
 def CreateReferenceElevation(self,document,index,viewIdToReference):
  pass
 @staticmethod
 def CreateReferenceElevationMarker(document,viewFamilyTypeId,origin,viewPlanId):
  pass
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetViewId(self,index):
  pass
 def HasElevations(self):
  pass
 def IsAvailableIndex(self,index):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 CurrentViewCount=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The current number of views hosted by this ElevationMarker.
Get: CurrentViewCount(self: ElevationMarker) -> int
""" 
 IsReference=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Indicates if this is a reference ElevationMarker.
   Only reference elevations can be hosted by reference ElevationMarkers.
Get: IsReference(self: ElevationMarker) -> bool
""" 
 MaximumViewCount=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The maximum number of views that can be hosted by this ElevationMarker.
Get: MaximumViewCount(self: ElevationMarker) -> int
""" 
class Ellipse(Curve,IDisposable):
 @staticmethod
 def Create(center,xRadius,yRadius,xAxis,yAxis,startParameter,endParameter):
  pass
 def Dispose(self):
  pass
 def ReleaseManagedResources(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 Center=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the center of the ellipse.
Get: Center(self: Ellipse) -> XYZ
""" 
 Normal=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the normal to the plane in which the ellipse is defined.
Get: Normal(self: Ellipse) -> XYZ
""" 
 RadiusX=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the X vector radius of the ellipse.
Get: RadiusX(self: Ellipse) -> float
""" 
 RadiusY=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Returns the Y vector radius of the ellipse.
Get: RadiusY(self: Ellipse) -> float
""" 
 XDirection=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The X direction.
Get: XDirection(self: Ellipse) -> XYZ
""" 
 YDirection=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The Y direction.
Get: YDirection(self: Ellipse) -> XYZ
""" 
class EndCapCondition(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 Exterior=None
 Interior=None
 NoEndCap=None
 None=None
 value__=None
class ExclusionFilter(ElementQuickFilter,IDisposable):
 def Dispose(self):
  pass
 def GetIdsToExclude(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,idsToExclude):
  pass
class ExportColorMode(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 IndexColors=None
 TrueColor=None
 value__=None
class ExportColumnHeaders(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 MultipleRows=None
 None=None
 OneRow=None
 value__=None
class ExportDGNSettings(Element,IDisposable):
 @staticmethod
 def Create(document,name,options=None):
  pass
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetDGNExportOptions(self):
  pass
 @staticmethod
 def ListNames(aDoc):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def SetDGNExportOptions(self,options):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class ExportDWGSettings(Element,IDisposable):
 @staticmethod
 def Create(document,name,options=None):
  pass
 def Dispose(self):
  pass
 def getBoundingBox(self,*args):
  pass
 def GetDWGExportOptions(self):
  pass
 def GetDXFExportOptions(self):
  pass
 @staticmethod
 def ListNames(aDoc):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def SetDWGExportOptions(self,options):
  pass
 def SetDXFExportOptions(self,options):
  pass
 def setElementType(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
class ExportEnergyModelType(Enum,IComparable,IFormattable,IConvertible):
 def __eq__(self,*args):
  pass
 def __format__(self,*args):
  pass
 def __ge__(self,*args):
  pass
 def __gt__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __le__(self,*args):
  pass
 def __lt__(self,*args):
  pass
 def __ne__(self,*args):
  pass
 def __reduce_ex__(self,*args):
  pass
 def __str__(self,*args):
  pass
 BuildingElement=None
 SpatialElement=None
 value__=None
class ExportFontInfo(object,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,*__args):
  pass
 def __repr__(self,*args):
  pass
 DestinationFontName=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The destination font name (the name of the font in the exported format).
Get: DestinationFontName(self: ExportFontInfo) -> str
Set: DestinationFontName(self: ExportFontInfo) = value
""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExportFontInfo) -> bool
""" 
class ExportFontKey(object,IDisposable):
 def Dispose(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 @staticmethod 
 def __new__(self,*__args):
  pass
 def __repr__(self,*args):
  pass
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExportFontKey) -> bool
""" 
 OriginalFontName=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The original font name.
Get: OriginalFontName(self: ExportFontKey) -> str
Set: OriginalFontName(self: ExportFontKey) = value
""" 
class ExportFontTable(object,IEnumerable[KeyValuePair[ExportFontKey,ExportFontInfo]],IEnumerable,IDisposable):
 def Add(self,exportFontKey,exportFontInfo):
  pass
 def Clear(self):
  pass
 def ContainsKey(self,exportfontKey):
  pass
 def Dispose(self):
  pass
 def GetEnumerator(self):
  pass
 def GetExportFontInfo(self,exportFontKey):
  pass
 def GetFontTableIterator(self):
  pass
 def GetKeys(self):
  pass
 def GetValues(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Remove(self,exportFontKey):
  pass
 def __add__(self,*args):
  pass
 def __contains__(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __getitem__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 def __setitem__(self,*args):
  pass
 Count=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Count of the items contained in the collection.
Get: Count(self: ExportFontTable) -> int
""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExportFontTable) -> bool
""" 
class ExportFontTableIterator(object,IEnumerator[KeyValuePair[ExportFontKey,ExportFontInfo]],IDisposable,IEnumerator):
 def Dispose(self):
  pass
 def IsDone(self):
  pass
 def MoveNext(self):
  pass
 def next(self,*args):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def Reset(self):
  pass
 def __contains__(self,*args):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __iter__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 Current=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Gets the item at the current position of the iterator.
Get: Current(self: ExportFontTableIterator) -> KeyValuePair[ExportFontKey, ExportFontInfo]
""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExportFontTableIterator) -> bool
""" 
class ExportLayerInfo(object,IDisposable):
 def AddCutLayerModifier(self,layerModifier):
  pass
 def AddLayerModifier(self,layerModifier):
  pass
 def ClearCutLayerModifiers(self):
  pass
 def ClearLayerModifiers(self):
  pass
 def Dispose(self):
  pass
 def GetCutLayerModifiers(self):
  pass
 def GetLayerModifiers(self):
  pass
 def ReleaseUnmanagedResources(self,*args):
  pass
 def RemoveCutLayerModifier(self,layerModifier):
  pass
 def RemoveLayerModifier(self,layerModifier):
  pass
 def SetCutLayerModifiers(self,cutLayermodifiers):
  pass
 def SetLayerModifiers(self,layermodifiers):
  pass
 def __enter__(self,*args):
  pass
 def __exit__(self,*args):
  pass
 def __init__(self,*args):
  pass
 def __repr__(self,*args):
  pass
 CategoryType=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The category type which this layer belongs to.
Get: CategoryType(self: ExportLayerInfo) -> LayerCategoryType
Set: CategoryType(self: ExportLayerInfo) = value
""" 
 ColorName=property(lambda self:object(),lambda self,v:None,lambda self:None) 
 """The color name stored in value.
   For IFC export, the naming is to match the "colornumber" setting -- really, this stores a string
   that generates the colorNumber (for formats that don't use the color but need a second entry.)Get: ColorName(self: ExportLayerInfo) -> strSet: ColorName(self: ExportLayerInfo) = value""" 
 ColorNumber=property(lambda self:object(),lambda self,v:None,lambda self:None) """The color number stored in value.
Get: ColorNumber(self: ExportLayerInfo) -> intSet: ColorNumber(self: ExportLayerInfo) = value""" 
 CutColorNumber=property(lambda self:object(),lambda self,v:None,lambda self:None) """The cut color number stored in value.
Get: CutColorNumber(self: ExportLayerInfo) -> intSet: CutColorNumber(self: ExportLayerInfo) = value""" 
 CutLayerName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The cut layer name stored in value.
Get: CutLayerName(self: ExportLayerInfo) -> strSet: CutLayerName(self: ExportLayerInfo) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExportLayerInfo) -> bool""" 
 LayerName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The layer name stored in value.
Get: LayerName(self: ExportLayerInfo) -> strSet: LayerName(self: ExportLayerInfo) = value""" 
class ExportLayerKey(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,categoryName=None,subCategoryName=None,num=None): pass def __repr__(self,*args): pass CategoryName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The category name.
Get: CategoryName(self: ExportLayerKey) -> strSet: CategoryName(self: ExportLayerKey) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExportLayerKey) -> bool""" 
 SpecialType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The special type for layer key.
Get: SpecialType(self: ExportLayerKey) -> SpecialTypeSet: SpecialType(self: ExportLayerKey) = value""" 
 SubCategoryName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The subcategrory Name.
Get: SubCategoryName(self: ExportLayerKey) -> strSet: SubCategoryName(self: ExportLayerKey) = value""" 
class ExportLayerTable(object,IEnumerable[KeyValuePair[ExportLayerKey,ExportLayerInfo]],IEnumerable,IDisposable): def Add(self,exportLayerKey,exportLayerInfo): pass def Clear(self): pass def ContainsKey(self,exportlayerKey): pass def Dispose(self): pass @staticmethod def GetAvaliableLayerModifierTypes(document,exportLayerKey): pass def GetEnumerator(self): pass def GetExportLayerInfo(self,exportLayerKey): pass def GetKeys(self): pass def GetLayerTableIterator(self): pass def GetValues(self): pass def ReleaseUnmanagedResources(self,*args): pass def Remove(self,exportLayerKey): pass def __add__(self,*args): pass def __contains__(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __getitem__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass def __repr__(self,*args): pass def __setitem__(self,*args): pass Count=property(lambda self:object(),lambda self,v:None,lambda self:None) """Count of the items contained in the collection.
Get: Count(self: ExportLayerTable) -> int"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExportLayerTable) -> bool""" 
class ExportLayerTableIterator(object,IEnumerator[KeyValuePair[ExportLayerKey,ExportLayerInfo]],IDisposable,IEnumerator): def Dispose(self): pass def IsDone(self): pass def MoveNext(self): pass def next(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __contains__(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass def __repr__(self,*args): pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the item at the current position of the iterator.
Get: Current(self: ExportLayerTableIterator) -> KeyValuePair[ExportLayerKey, ExportLayerInfo]"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExportLayerTableIterator) -> bool""" 
class ExportLinetypeInfo(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,*__args): pass def __repr__(self,*args): pass DestinationLinetypeName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The destination linetype name (the name of the linetype in the exported format).
Get: DestinationLinetypeName(self: ExportLinetypeInfo) -> strSet: DestinationLinetypeName(self: ExportLinetypeInfo) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExportLinetypeInfo) -> bool""" 
class ExportLinetypeKey(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,*__args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExportLinetypeKey) -> bool"""
 OriginalLinetypeName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The original linetype name.
Get: OriginalLinetypeName(self: ExportLinetypeKey) -> strSet: OriginalLinetypeName(self: ExportLinetypeKey) = value""" 
class ExportLinetypeTable(object,IEnumerable[KeyValuePair[ExportLinetypeKey,ExportLinetypeInfo]],IEnumerable,IDisposable): def Add(self,exportLinetypeKey,exportLinetypeInfo): pass def Clear(self): pass def ContainsKey(self,exportLinetypeKey): pass def Dispose(self): pass def GetEnumerator(self): pass def GetExportLinetypeInfo(self,exportLinetypeKey): pass def GetKeys(self): pass def GetLinetypeTableIterator(self): pass def GetValues(self): pass def ReleaseUnmanagedResources(self,*args): pass def Remove(self,exportLinetypeKey): pass def __add__(self,*args): pass def __contains__(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __getitem__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass def __repr__(self,*args): pass def __setitem__(self,*args): pass Count=property(lambda self:object(),lambda self,v:None,lambda self:None) """Count of the items contained in the collection.
Get: Count(self: ExportLinetypeTable) -> int"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExportLinetypeTable) -> bool""" 
class ExportLinetypeTableIterator(object,IEnumerator[KeyValuePair[ExportLinetypeKey,ExportLinetypeInfo]],IDisposable,IEnumerator): def Dispose(self): pass def IsDone(self): pass def MoveNext(self): pass def next(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __contains__(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass def __repr__(self,*args): pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the item at the current position of the iterator.
Get: Current(self: ExportLinetypeTableIterator) -> KeyValuePair[ExportLinetypeKey, ExportLinetypeInfo]"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExportLinetypeTableIterator) -> bool""" 
class ExportLineweightInfo(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,*__args): pass def __repr__(self,*args): pass DestinationLineweightName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The destination lineweight name (the name of the line weight in the exported format)
Get: DestinationLineweightName(self: ExportLineweightInfo) -> strSet: DestinationLineweightName(self: ExportLineweightInfo) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExportLineweightInfo) -> bool""" 
class ExportLineweightKey(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,*__args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExportLineweightKey) -> bool"""
 OriginalLineweight=property(lambda self:object(),lambda self,v:None,lambda self:None) """The original line weight.
Get: OriginalLineweight(self: ExportLineweightKey) -> intSet: OriginalLineweight(self: ExportLineweightKey) = value""" 
class ExportLineweightTable(object,IEnumerable[KeyValuePair[ExportLineweightKey,ExportLineweightInfo]],IEnumerable,IDisposable): def Add(self,exportLineweightKey,exportLineweightInfo): pass def Clear(self): pass def ContainsKey(self,exportLineweightKey): pass def Dispose(self): pass def GetEnumerator(self): pass def GetExportLineweightInfo(self,exportLineweightKey): pass def GetKeys(self): pass def GetLineweightTableIterator(self): pass def GetValues(self): pass def ReleaseUnmanagedResources(self,*args): pass def Remove(self,exportLineweightKey): pass def __add__(self,*args): pass def __contains__(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __getitem__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass def __repr__(self,*args): pass def __setitem__(self,*args): pass Count=property(lambda self:object(),lambda self,v:None,lambda self:None) """Count of the items contained in the collection.
Get: Count(self: ExportLineweightTable) -> int"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExportLineweightTable) -> bool""" 
class ExportLineweightTableIterator(object,IEnumerator[KeyValuePair[ExportLineweightKey,ExportLineweightInfo]],IDisposable,IEnumerator): def Dispose(self): pass def IsDone(self): pass def MoveNext(self): pass def next(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __contains__(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass def __repr__(self,*args): pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the item at the current position of the iterator.
Get: Current(self: ExportLineweightTableIterator) -> KeyValuePair[ExportLineweightKey, ExportLineweightInfo]"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExportLineweightTableIterator) -> bool""" 
class ExportPaperFormat(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass ANSI_A=None ANSI_B=None ANSI_C=None ANSI_D=None ANSI_E=None ARCH_A=None ARCH_B=None ARCH_C=None ARCH_D=None ARCH_E=None ARCH_E1=None ARCH_E2=None ARCH_E3=None Default=None ISO_A0=None ISO_A1=None ISO_A2=None ISO_A3=None ISO_A4=None ISO_B1=None ISO_B2=None ISO_B3=None ISO_B4=None value__=Noneclass ExportPatternInfo(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,*__args): pass def __repr__(self,*args): pass DestinationPatternName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The destination pattern name (the name of the pattern in the exported format).
Get: DestinationPatternName(self: ExportPatternInfo) -> strSet: DestinationPatternName(self: ExportPatternInfo) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExportPatternInfo) -> bool""" 
class ExportPatternKey(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,*__args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExportPatternKey) -> bool"""
 OriginalFillPatternName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The original FillPattern name.
Get: OriginalFillPatternName(self: ExportPatternKey) -> strSet: OriginalFillPatternName(self: ExportPatternKey) = value""" 
 OriginalFillPatternType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The original FillPattern type.
Get: OriginalFillPatternType(self: ExportPatternKey) -> FillPatternTargetSet: OriginalFillPatternType(self: ExportPatternKey) = value""" 
class ExportPatternTable(object,IEnumerable[KeyValuePair[ExportPatternKey,ExportPatternInfo]],IEnumerable,IDisposable): def Add(self,exportPatternKey,exportPatternInfo): pass def Clear(self): pass def ContainsKey(self,exportpatternKey): pass def Dispose(self): pass def GetEnumerator(self): pass def GetExportPatternInfo(self,exportPatternKey): pass def GetKeys(self): pass def GetPatternTableIterator(self): pass def GetValues(self): pass def ReleaseUnmanagedResources(self,*args): pass def Remove(self,exportPatternKey): pass def __add__(self,*args): pass def __contains__(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __getitem__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass def __repr__(self,*args): pass def __setitem__(self,*args): pass Count=property(lambda self:object(),lambda self,v:None,lambda self:None) """Count of the items contained in the collection.
Get: Count(self: ExportPatternTable) -> int"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExportPatternTable) -> bool""" 
class ExportPatternTableIterator(object,IEnumerator[KeyValuePair[ExportPatternKey,ExportPatternInfo]],IDisposable,IEnumerator): def Dispose(self): pass def IsDone(self): pass def MoveNext(self): pass def next(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __contains__(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass def __repr__(self,*args): pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the item at the current position of the iterator.
Get: Current(self: ExportPatternTableIterator) -> KeyValuePair[ExportPatternKey, ExportPatternInfo]"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExportPatternTableIterator) -> bool""" 
class ExportRange(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass CurrentView=None SetOfViews=None value__=None VisibleRegionOfCurrentView=Noneclass ExportSheetType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass ST_Current=None ST_Select=None ST_Visible=None value__=Noneclass ExportTextQualifier(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass DoubleQuote=None None=None Quote=None value__=Noneclass ExportUnit(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Centimeter=None Default=None Foot=None Inch=None Meter=None Millimeter=None value__=Noneclass ExportUtils(object): @staticmethod def GetExportId(document,elementId): pass @staticmethod def GetGBXMLDocumentId(document): pass @staticmethod def GetNurbsSurfaceDataForFace(face): pass __all__=[ 'GetExportId', 'GetGBXMLDocumentId', 'GetNurbsSurfaceDataForFace', ]class ExternalDBApplicationResult(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Failed=None Succeeded=None value__=Noneclass ExternalDefinition(Definition,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Description=property(lambda self:object(),lambda self,v:None,lambda self:None) """The description of the parameter. The description will be used as tooltip in the Revit UI including in the properties palette.
Get: Description(self: ExternalDefinition) -> str"""
 GUID=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the GUID associated with the shared parameter definition.
Get: GUID(self: ExternalDefinition) -> Guid""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExternalDefinition) -> bool""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """The user visible name for the parameter.
Get: Name(self: ExternalDefinition) -> str""" 
 OwnerGroup=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns or change the group ID of the external parameter definition.
Get: OwnerGroup(self: ExternalDefinition) -> DefinitionGroupSet: OwnerGroup(self: ExternalDefinition) = value""" 
 ParameterGroup=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the group ID of the parameter definition.
Get: ParameterGroup(self: ExternalDefinition) -> BuiltInParameterGroup""" 
 ParameterType=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the user visible interpretation of the parameter data.
Get: ParameterType(self: ExternalDefinition) -> ParameterType""" 
 UserModifiable=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether the parameter can be modified by the user interface.
Get: UserModifiable(self: ExternalDefinition) -> bool""" 
 Visible=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the parameter is visible in the Autodesk Revit user interface.
Get: Visible(self: ExternalDefinition) -> bool""" 
class ExternalDefinitionCreationOptions(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,name,type): pass def __repr__(self,*args): pass Description=property(lambda self:object(),lambda self,v:None,lambda self:None) """The description of the parameter definition to be created. The description will be used as tooltip in the
   Revit UI including in the properties palette.   The default is an empty string.Get: Description(self: ExternalDefinitionCreationOptions) -> strSet: Description(self: ExternalDefinitionCreationOptions) = value"""
 GUID=property(lambda self:object(),lambda self,v:None,lambda self:None) """The GUID to use for this parameter definition.
   If not explicitly set, a random GUID is used.Get: GUID(self: ExternalDefinitionCreationOptions) -> GuidSet: GUID(self: ExternalDefinitionCreationOptions) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExternalDefinitionCreationOptions) -> bool""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """The name of the parameter definition to be created.
Get: Name(self: ExternalDefinitionCreationOptions) -> strSet: Name(self: ExternalDefinitionCreationOptions) = value""" 
 Type=property(lambda self:object(),lambda self,v:None,lambda self:None) """The type of the parameter definition to be created.
Get: Type(self: ExternalDefinitionCreationOptions) -> ParameterTypeSet: Type(self: ExternalDefinitionCreationOptions) = value""" 
 UserModifiable=property(lambda self:object(),lambda self,v:None,lambda self:None) """This property indicates whether this parameter can be modified by UI user or not.
   True if the parameter will be modifiable by the user in the user interface, false if the parameter will display as read-only.   The default is true.Get: UserModifiable(self: ExternalDefinitionCreationOptions) -> boolSet: UserModifiable(self: ExternalDefinitionCreationOptions) = value""" 
 Visible=property(lambda self:object(),lambda self,v:None,lambda self:None) """True if the parameter is visible to the user, false if it is hidden and accessible only via the API.
   The default is true.Get: Visible(self: ExternalDefinitionCreationOptions) -> boolSet: Visible(self: ExternalDefinitionCreationOptions) = value""" 
class ExternalDefinitions(Definitions,IEnumerable[Definition],IEnumerable,IDisposable): def Dispose(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): passclass ExternalFileReference(object,IDisposable): def Dispose(self): pass def GetAbsolutePath(self): pass def GetLinkedFileStatus(self): pass def GetPath(self): pass def GetReferencingId(self): pass @staticmethod def IsValidExternalFileReference(data): pass def IsValidPathTypeForExternalFileReference(self,pathType): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass ExternalFileReferenceType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The type of external file which this object
   references.Get: ExternalFileReferenceType(self: ExternalFileReference) -> ExternalFileReferenceType"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExternalFileReference) -> bool""" 
 PathType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The path type of the link (relative, absolute, or server).
Get: PathType(self: ExternalFileReference) -> PathType""" 
class ExternalFileReferenceType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass AssemblyCodeTable=None CADLink=None Decal=None DWFMarkup=None KeynoteTable=None Material=None None=None RevitLink=None value__=Noneclass ExternalFileUtils(object): @staticmethod def GetAllExternalFileReferences(aDoc): pass @staticmethod def GetExternalFileReference(aDoc,elemId): pass @staticmethod def IsExternalFileReference(aDoc,elemId): pass __all__=[ 'GetAllExternalFileReferences', 'GetExternalFileReference', 'IsExternalFileReference', ]class ExternalResourceBrowserData(object,IDisposable): def AddResource(self,resourceName,*__args): pass def AddSubFolder(self,folderName): pass def CallingDocumentHasModelPath(self): pass def Dispose(self): pass def GetCallingDocumentModelPath(self): pass def GetMatchOptions(self): pass def GetResources(self): pass def GetSubFolders(self): pass def IsValidFolderName(self,folderName): pass def IsValidResouceName(self,resourceName): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,document,serverId,folderPath,matchOptions): pass def __repr__(self,*args): pass FolderPath=property(lambda self:object(),lambda self,v:None,lambda self:None) """The current folder path to which the new resources and sub folder belong.
Get: FolderPath(self: ExternalResourceBrowserData) -> str"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExternalResourceBrowserData) -> bool""" 
 ServerId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Id of IExternalResourceServer which handles the external resource load.
Get: ServerId(self: ExternalResourceBrowserData) -> Guid""" 
class ExternalResourceLoadContent(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExternalResourceLoadContent) -> bool"""
 LoadStatus=property(lambda self:object(),lambda self,v:None,lambda self:None) """A value to indicate the status of an external resource load operation.  IExternalResourceServers
   should set this in the LoadResource() method.Get: LoadStatus(self: ExternalResourceLoadContent) -> ExternalResourceLoadStatusSet: LoadStatus(self: ExternalResourceLoadContent) = value""" 
 Version=property(lambda self:object(),lambda self,v:None,lambda self:None) """The version of the external data that the server is providing in this object.
Get: Version(self: ExternalResourceLoadContent) -> strSet: Version(self: ExternalResourceLoadContent) = value""" 
class ExternalResourceLoadContext(object,IDisposable): def CallingDocumentHasModelPath(self): pass def Dispose(self): pass def GetCallingDocumentModelPath(self): pass def GetCurrentlyLoadedReference(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExternalResourceLoadContext) -> bool"""
 LoadOperationType=property(lambda self:object(),lambda self,v:None,lambda self:None) """An enum value indicating whether the resource load was triggered by an
   automatic event (such as file open) or an explicit user action.Get: LoadOperationType(self: ExternalResourceLoadContext) -> LoadOperationType""" 
class ExternalResourceLoadData(object,IDisposable): def Dispose(self): pass def GetExternalResourceReference(self): pass def GetLoadContent(self): pass def GetLoadContext(self): pass def GetLoadRequestId(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass ErrorsReported=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether the IExternalResourceUIServer has reported errors
   for this ExternalResourceLoadData. This value can be set by the   IExternalResourceUIServer in HandleLoadResourceResults().Get: ErrorsReported(self: ExternalResourceLoadData) -> boolSet: ErrorsReported(self: ExternalResourceLoadData) = value"""
 ExternalResourceType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The ExternalResourceType for which Revit is requesting data from the server.
Get: ExternalResourceType(self: ExternalResourceLoadData) -> ExternalResourceType""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExternalResourceLoadData) -> bool""" 
 LoadStatus=property(lambda self:object(),lambda self,v:None,lambda self:None) """The success or failure status of the load attempt.
Get: LoadStatus(self: ExternalResourceLoadData) -> ExternalResourceLoadStatus""" 
class ExternalResourceLoadStatus(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass CannotFindServer=None Failure=None ResourceAlreadyCurrent=None ServerThrewException=None Success=None Uninitialized=None value__=Noneclass ExternalResourceMatchOptions(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,resourceType): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExternalResourceMatchOptions) -> bool"""
 ResourceType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The desired resource type which external resources should match.
Get: ResourceType(self: ExternalResourceMatchOptions) -> ExternalResourceType""" 
class ExternalResourceReference(object,IDisposable): @staticmethod def CreateLocalResource(doc,resourceType,path,pathType): pass def Dispose(self): pass def GetReferenceInformation(self): pass def GetResourceShortDisplayName(self): pass def GetResourceVersionStatus(self): pass def HasValidDisplayPath(self): pass def IsValidReference(self,resourceType): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,*__args): pass def __repr__(self,*args): pass InSessionPath=property(lambda self:object(),lambda self,v:None,lambda self:None) """The path stores the full display path which includes the server name plus the path provided by ExternalResourceServer.The path that Revit will present for user recognizing and browsing to this resource during one session of Revit.This property allows ExternalResourceServers to handle cases where the path to a resource may vary between Revit sessions.
   For example, if this ExternalResourceReference refers to a resource in a folder,   this property can be used to store the current path of the resource. If the resource is moved to another folder later,   the ExternalResourceServer could calculate the correct path for the resource from resource identification information   when it is loaded and store it in this property,   so that it will work correctly even if the rvt file is opened in a different location.Get: InSessionPath(self: ExternalResourceReference) -> str"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExternalResourceReference) -> bool""" 
 ServerId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The id of the server that Revit is expecting to provide the external resource.
Get: ServerId(self: ExternalResourceReference) -> Guid""" 
 Version=property(lambda self:object(),lambda self,v:None,lambda self:None) """The version of the external data that was most recently loaded in Revit.
Get: Version(self: ExternalResourceReference) -> str""" 
class ExternalResourceServerExtensions(object,IDisposable): def Dispose(self): pass def GetRevitLinkOperations(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExternalResourceServerExtensions) -> bool"""
class ExternalResourceServerUtils(object): @staticmethod def IsValidShortName(serverId,serverName): pass @staticmethod def ServerSupportsAssemblyCodeData(extRef): pass @staticmethod def ServerSupportsKeynotes(extRef): pass @staticmethod def ServerSupportsRevitLinks(extRef): pass __all__=[ 'IsValidShortName', 'ServerSupportsAssemblyCodeData', 'ServerSupportsKeynotes', 'ServerSupportsRevitLinks', ]class ExternalResourceServiceUtils(object): @staticmethod def GetServersByType(type): pass __all__=[ 'GetServersByType', ]class GuidEnum(object): def Equals(self,obj): pass def GetHashCode(self): pass def __eq__(self,*args): pass @staticmethod def __new__(self,guid): pass def __ne__(self,*args): pass Guid=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Guid of GUID-based enum object.
Get: Guid(self: GuidEnum) -> Guid"""
class ExternalResourceType(GuidEnum): @staticmethod def __new__(self,guid): passclass ExternalResourceTypes(object): BuiltInExternalResourceTypes=None __all__=[ 'BuiltInExternalResourceTypes', ]class ExternalResourceUIBrowseResultType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass FolderNotFound=None ResourceNotFound=None Success=None value__=Noneclass ExternalResourceUtils(object): @staticmethod def GetAllExternalResourceReferences(document,resourceType=None): pass __all__=[ 'GetAllExternalResourceReferences', ]class Extrusion(GenericForm,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass EndOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) """The offset of the end of the extrusion relative to the sketch plane.
Get: EndOffset(self: Extrusion) -> floatSet: EndOffset(self: Extrusion) = value"""
 Sketch=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the Sketch of the Extrusion.
Get: Sketch(self: Extrusion) -> Sketch""" 
 StartOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) """The offset of the start of the extrusion relative to the sketch plane.
Get: StartOffset(self: Extrusion) -> floatSet: StartOffset(self: Extrusion) = value""" 
class ExtrusionAnalyzer(object,IDisposable): def CalculateFaceAlignment(self): pass @staticmethod def Create(solidGeometry,plane,direction): pass def Dispose(self): pass def GetExtrusionBase(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass EndParameter=property(lambda self:object(),lambda self,v:None,lambda self:None) """The end parameter (distance along the extrusion direction from the input plane) calculated by the extrusion analysis.
Get: EndParameter(self: ExtrusionAnalyzer) -> float"""
 ExtrusionDirection=property(lambda self:object(),lambda self,v:None,lambda self:None) """The direction of extrusion specified for the extrusion analysis.
Get: ExtrusionDirection(self: ExtrusionAnalyzer) -> XYZ""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ExtrusionAnalyzer) -> bool""" 
 StartParameter=property(lambda self:object(),lambda self,v:None,lambda self:None) """The start parameter (distance along the extrusion direction from the input plane) calculated by the extrusion analysis.
Get: StartParameter(self: ExtrusionAnalyzer) -> float""" 
class ExtrusionAnalyzerFaceAlignment(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass FullyAligned=None PartiallyAligned=None Unaligned=None value__=Noneclass RoofBase(HostObject,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass EaveCuts=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieve or set the EaveCutterType.
Get: EaveCuts(self: RoofBase) -> EaveCutterTypeSet: EaveCuts(self: RoofBase) = value"""
 FasciaDepth=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieve or set the FasciaDepth.
Get: FasciaDepth(self: RoofBase) -> floatSet: FasciaDepth(self: RoofBase) = value""" 
 RoofType=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieve or set the Type.
Get: RoofType(self: RoofBase) -> RoofTypeSet: RoofType(self: RoofBase) = value""" 
 SlabShapeEditor=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get the SlabShapeEditor used for slab shape editing.
Get: SlabShapeEditor(self: RoofBase) -> SlabShapeEditor""" 
class ExtrusionRoof(RoofBase,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def GetProfile(self): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass CurtainGrids=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieve all the CurtainGrid objects of a curtain Roof.
Get: CurtainGrids(self: ExtrusionRoof) -> CurtainGridSet"""
class FabricationConfiguration(Element,IDisposable): def CanBeSwapped(self): pass def Dispose(self): pass def GetAllFabricationConnectorDefinitions(self,domain,shape): pass def GetAllInsulationSpecifications(self,pFabPart): pass def GetAllLoadedServices(self): pass def GetAllMaterials(self,part): pass def GetAllServices(self): pass def GetAllSpecifications(self,part): pass def GetAllUsedServices(self): pass def getBoundingBox(self,*args): pass @staticmethod def GetFabricationConfiguration(doc): pass def GetFabricationConfigurationInfo(self): pass def GetFabricationConnectorDomain(self,fabricationConnectorId): pass def GetFabricationConnectorGroup(self,fabricationConnectorId): pass def GetFabricationConnectorName(self,fabricationConnectorId): pass def GetFabricationConnectorShape(self,fabricationConnectorId): pass def GetInsulationSpecificationAbbreviation(self,insulationSpecificationId): pass def GetInsulationSpecificationGroup(self,specId): pass def GetInsulationSpecificationName(self,specId): pass def GetMaterialAbbreviation(self,materialId): pass def GetMaterialGroup(self,materialId): pass def GetMaterialName(self,materialId): pass def GetMaterialThickness(self,materialId,gaugeId): pass def GetProfile(self): pass def GetService(self,serviceId): pass def GetSpecificationAbbreviation(self,specificationId): pass def GetSpecificationGroup(self,specId): pass def GetSpecificationName(self,specId): pass def HasValidConfiguration(self): pass def LoadServices(self,serviceIds): pass def LocateFabricationConnector(self,group,name,domain,shape): pass def LocateInsulationSpecification(self,group,name): pass def LocateMaterial(self,group,name): pass def LocateSpecification(self,group,name): pass def ReleaseUnmanagedResources(self,*args): pass def ReloadConfiguration(self): pass def SetConfiguration(self,fabricationConfigurationInfo,profile=None): pass def setElementType(self,*args): pass def UnloadServices(self,serviceIds): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass FabricationConfigurationInfo(object,IDisposable): def Dispose(self): pass @staticmethod def FindSourceFabricationConfiguration(fabricationConfiguration): pass @staticmethod def GetAllFabricationConfigurations(): pass def GetProfiles(self): pass def IsValid(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass Description=property(lambda self:object(),lambda self,v:None,lambda self:None) """The description of the fabrication configuration.
Get: Description(self: FabricationConfigurationInfo) -> str"""
 GUID=property(lambda self:object(),lambda self,v:None,lambda self:None) """The unique identification of the fabrication configuration.
Get: GUID(self: FabricationConfigurationInfo) -> Guid""" 
 IsLocked=property(lambda self:object(),lambda self,v:None,lambda self:None) """Checks whether the fabrication configuration is locked. If true, the configuration is locked and cannot be removed.
Get: IsLocked(self: FabricationConfigurationInfo) -> bool""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FabricationConfigurationInfo) -> bool""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """The name of the fabrication configuration.
Get: Name(self: FabricationConfigurationInfo) -> str""" 
 Path=property(lambda self:object(),lambda self,v:None,lambda self:None) """The path where the fabrication configuration is located.
Get: Path(self: FabricationConfigurationInfo) -> str""" 
 UnitSystem=property(lambda self:object(),lambda self,v:None,lambda self:None) """The unit system of the fabrication configuration. Units can be UnitSystem.Metric or UnitSystem.Imperial.
Get: UnitSystem(self: FabricationConfigurationInfo) -> UnitSystem""" 
 Version=property(lambda self:object(),lambda self,v:None,lambda self:None) """The version of the fabrication configuration.
Get: Version(self: FabricationConfigurationInfo) -> float""" 
class FabricationConnectorInfo(object,IDisposable): def Dispose(self): pass def HasDoubleWallConnector(self): pass def IsValid(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass BodyConnectorId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Fabrication body connector Id.
Get: BodyConnectorId(self: FabricationConnectorInfo) -> intSet: BodyConnectorId(self: FabricationConnectorInfo) = value"""
 DoubleWallConnectorId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Fabrication double wall connector Id.
Get: DoubleWallConnectorId(self: FabricationConnectorInfo) -> intSet: DoubleWallConnectorId(self: FabricationConnectorInfo) = value""" 
 FabricationIndex=property(lambda self:object(),lambda self,v:None,lambda self:None) """The index of the connector shown within the fabrication software.
Get: FabricationIndex(self: FabricationConnectorInfo) -> int""" 
 IsBodyConnectorLocked=property(lambda self:object(),lambda self,v:None,lambda self:None) """Fabrication body connector lock.
Get: IsBodyConnectorLocked(self: FabricationConnectorInfo) -> boolSet: IsBodyConnectorLocked(self: FabricationConnectorInfo) = value""" 
 IsDoubleWallConnectorLocked=property(lambda self:object(),lambda self,v:None,lambda self:None) """Fabrication double wall connector lock.
Get: IsDoubleWallConnectorLocked(self: FabricationConnectorInfo) -> boolSet: IsDoubleWallConnectorLocked(self: FabricationConnectorInfo) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FabricationConnectorInfo) -> bool""" 
class FabricationDimensionDefinition(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsModifiable=property(lambda self:object(),lambda self,v:None,lambda self:None) """If the fabrication dimension is modifiable by user.
Get: IsModifiable(self: FabricationDimensionDefinition) -> bool"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FabricationDimensionDefinition) -> bool""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """Fabrication dimension name.
Get: Name(self: FabricationDimensionDefinition) -> str""" 
 Type=property(lambda self:object(),lambda self,v:None,lambda self:None) """Fabrication dimension type.
Get: Type(self: FabricationDimensionDefinition) -> FabricationDimensionType""" 
 UnitType=property(lambda self:object(),lambda self,v:None,lambda self:None) """Fabrication dimension unit type.
Get: UnitType(self: FabricationDimensionDefinition) -> FabricationDimensionUnitType""" 
class FabricationDimensionType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Angle=None Depth=None Diameter=None Internal=None Length=None value__=None Width=Noneclass FabricationDimensionUnitType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Angular=None Linear=None NoUnits=None value__=Noneclass FabricationHostedInfo(object,IDisposable): def DisconnectFromHost(self): pass def Dispose(self): pass def GetBearerCenterline(self): pass def PlaceOnHost(self,hostId,hostConnector,distance): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass HostId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the Id of the host.
Get: HostId(self: FabricationHostedInfo) -> ElementId"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FabricationHostedInfo) -> bool""" 
class FabricationPart(Element,IDisposable): def AdjustEndLength(self,partConn,lengthToAdjust,totalLengthOnly): pass @staticmethod def AlignPartByConnectors(doc,partConn,toConn,axisRotation): pass def CanAdjustEndLength(self,partConn): pass @staticmethod def ConnectAndCouple(doc,partConn,toConn): pass @staticmethod def Create(document,button,*__args): pass @staticmethod def CreateHanger(document,button,*__args): pass def Dispose(self): pass def getBoundingBox(self,*args): pass def GetCalculatedDimensionValue(self,dim): pass def GetDimensionCalculatedOptions(self,dim): pass def GetDimensions(self): pass def GetDimensionValue(self,dim): pass def GetHostedInfo(self): pass def GetProductListEntryCount(self): pass def GetProductListEntryName(self,index): pass def GetRodInfo(self): pass def GetTransform(self): pass def IsAHanger(self): pass def IsAStraight(self): pass def IsATap(self): pass def IsDimensionCalculated(self,dim): pass def IsProductList(self): pass def IsProductListEntryCompatibleSize(self,productEntry): pass @staticmethod def OptimizeLengths(doc,partIds): pass @staticmethod def PlaceAsTap(doc,tapPartConn,hostPartConn,distance,axisRotation,secondaryAxisRotation): pass @staticmethod def PlaceFittingAsCutIn(doc,straightId,fittingId,position,fittingConn,axisRotation): pass def ReleaseUnmanagedResources(self,*args): pass @staticmethod def Reposition(doc,partId): pass @staticmethod def RotateConnectedPartByConnector(doc,conn,axisRotationBy): pass @staticmethod def RotateConnectedTap(doc,tap,primaryAxisRotateBy,secondaryAxisRotateBy): pass def SetCalculatedDimensionValue(self,dim,value): pass def SetDimensionValue(self,dim,newValue): pass def setElementType(self,*args): pass def SetPositionByEnd(self,connector,position): pass @staticmethod def StretchAndFit(document,stretchConnector,target,newPartIds): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Alias=property(lambda self:object(),lambda self,v:None,lambda self:None) """The alias of the fabrication part.
Get: Alias(self: FabricationPart) -> str"""
 BottomOfPartElevation=property(lambda self:object(),lambda self,v:None,lambda self:None) """The associated elevation to the bottom of fabrication part off of the current level.
Get: BottomOfPartElevation(self: FabricationPart) -> float""" 
 ConnectorManager=property(lambda self:object(),lambda self,v:None,lambda self:None) """The connector manager of the fabrication part.
Get: ConnectorManager(self: FabricationPart) -> ConnectorManager""" 
 CutType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The cut type of the fabrication part.
Get: CutType(self: FabricationPart) -> int""" 
 DomainType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The domain type for the fabrication part.
Get: DomainType(self: FabricationPart) -> ConnectorDomainType""" 
 DoubleWallMaterial=property(lambda self:object(),lambda self,v:None,lambda self:None) """The double wall material identifier of the fabrication part.
Get: DoubleWallMaterial(self: FabricationPart) -> int""" 
 DoubleWallMaterialArea=property(lambda self:object(),lambda self,v:None,lambda self:None) """The double wall material area of the fabrication part. If the fabrication part is not double walled, returns zero.
Get: DoubleWallMaterialArea(self: FabricationPart) -> float""" 
 DoubleWallMaterialThickness=property(lambda self:object(),lambda self,v:None,lambda self:None) """The double wall material thickness of the fabrication part. If the fabrication part is not double walled, returns zero.
Get: DoubleWallMaterialThickness(self: FabricationPart) -> float""" 
 HasDoubleWall=property(lambda self:object(),lambda self,v:None,lambda self:None) """True if the fabrication part is double walled.
Get: HasDoubleWall(self: FabricationPart) -> bool""" 
 HasInsulation=property(lambda self:object(),lambda self,v:None,lambda self:None) """True if the fabrication part is insulated.
Get: HasInsulation(self: FabricationPart) -> bool""" 
 HasLining=property(lambda self:object(),lambda self,v:None,lambda self:None) """True if the fabrication part is lined.
Get: HasLining(self: FabricationPart) -> bool""" 
 InsulationArea=property(lambda self:object(),lambda self,v:None,lambda self:None) """The insulation area of the fabrication part. If the fabrication part is not insulated, returns zero.
Get: InsulationArea(self: FabricationPart) -> float""" 
 InsulationSpecification=property(lambda self:object(),lambda self,v:None,lambda self:None) """The fabrication part insulation specification identifier.
Get: InsulationSpecification(self: FabricationPart) -> intSet: InsulationSpecification(self: FabricationPart) = value""" 
 InsulationThickness=property(lambda self:object(),lambda self,v:None,lambda self:None) """The insulation thickness of the fabrication part. If the fabrication part is not insulated, returns zero.
Get: InsulationThickness(self: FabricationPart) -> float""" 
 InsulationType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The insulation type of the fabrication part.
Get: InsulationType(self: FabricationPart) -> str""" 
 IsBoughtOut=property(lambda self:object(),lambda self,v:None,lambda self:None) """True if the fabrication part is bought out.
Get: IsBoughtOut(self: FabricationPart) -> bool""" 
 ItemCustomId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The item custom identifier for the fabrication part.
Get: ItemCustomId(self: FabricationPart) -> int""" 
 ItemNumber=property(lambda self:object(),lambda self,v:None,lambda self:None) """The item number that is used for identification, re-ordering from shop.
Get: ItemNumber(self: FabricationPart) -> strSet: ItemNumber(self: FabricationPart) = value""" 
 LevelOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) """The associated level offset that indicates the distance from the center of the fabrication part to the current level.
Get: LevelOffset(self: FabricationPart) -> float""" 
 LiningArea=property(lambda self:object(),lambda self,v:None,lambda self:None) """The lining area of the fabrication part. If the fabrication part is not lined, returns zero.
Get: LiningArea(self: FabricationPart) -> float""" 
 LiningThickness=property(lambda self:object(),lambda self,v:None,lambda self:None) """The lining thickness of the fabrication part. If the fabrication part is not lined, returns zero.
Get: LiningThickness(self: FabricationPart) -> float""" 
 LiningType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The lining type of the fabrication part.
Get: LiningType(self: FabricationPart) -> str""" 
 Material=property(lambda self:object(),lambda self,v:None,lambda self:None) """The fabrication material identifier.
Get: Material(self: FabricationPart) -> intSet: Material(self: FabricationPart) = value""" 
 MaterialThickness=property(lambda self:object(),lambda self,v:None,lambda self:None) """The material thickness of the fabrication part.
Get: MaterialThickness(self: FabricationPart) -> float""" 
 Notes=property(lambda self:object(),lambda self,v:None,lambda self:None) """The notes of the fabrication part.
Get: Notes(self: FabricationPart) -> strSet: Notes(self: FabricationPart) = value""" 
 Origin=property(lambda self:object(),lambda self,v:None,lambda self:None) """The origin of the fabrication part element.
Get: Origin(self: FabricationPart) -> XYZ""" 
 OverallSize=property(lambda self:object(),lambda self,v:None,lambda self:None) """The overall size of the fabrication part.
Get: OverallSize(self: FabricationPart) -> str""" 
 ProductCode=property(lambda self:object(),lambda self,v:None,lambda self:None) """The current database id of the part within the fabrication database.
Get: ProductCode(self: FabricationPart) -> str""" 
 ProductDataRange=property(lambda self:object(),lambda self,v:None,lambda self:None) """The product data range of the fabrication part.
Get: ProductDataRange(self: FabricationPart) -> str""" 
 ProductFinishDescription=property(lambda self:object(),lambda self,v:None,lambda self:None) """The product finish description of the fabrication part.
Get: ProductFinishDescription(self: FabricationPart) -> str""" 
 ProductInstallType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The product install type of the fabrication part.
Get: ProductInstallType(self: FabricationPart) -> str""" 
 ProductListEntry=property(lambda self:object(),lambda self,v:None,lambda self:None) """The product entry index of the fabrication part. A value of -1 indicates the fabrication part is not a product list.
Get: ProductListEntry(self: FabricationPart) -> intSet: ProductListEntry(self: FabricationPart) = value""" 
 ProductLongDescription=property(lambda self:object(),lambda self,v:None,lambda self:None) """The product long description of the fabrication part.
Get: ProductLongDescription(self: FabricationPart) -> str""" 
 ProductMaterialDescription=property(lambda self:object(),lambda self,v:None,lambda self:None) """The product material description of the fabrication part.
Get: ProductMaterialDescription(self: FabricationPart) -> str""" 
 ProductName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The product name of the fabrication part.
Get: ProductName(self: FabricationPart) -> str""" 
 ProductOriginalEquipmentManufacture=property(lambda self:object(),lambda self,v:None,lambda self:None) """The product original equipment manufacture (OEM) of the fabrication part.
Get: ProductOriginalEquipmentManufacture(self: FabricationPart) -> str""" 
 ProductShortDescription=property(lambda self:object(),lambda self,v:None,lambda self:None) """The product short description of the fabrication part.
Get: ProductShortDescription(self: FabricationPart) -> str""" 
 ProductSizeDescription=property(lambda self:object(),lambda self,v:None,lambda self:None) """The product size description of the fabrication part.
Get: ProductSizeDescription(self: FabricationPart) -> str""" 
 ProductSpecificationDescription=property(lambda self:object(),lambda self,v:None,lambda self:None) """The product specification description of the fabrication part.
Get: ProductSpecificationDescription(self: FabricationPart) -> str""" 
 ServiceAbbreviation=property(lambda self:object(),lambda self,v:None,lambda self:None) """The associated service abbreviation for the fabrication service.
Get: ServiceAbbreviation(self: FabricationPart) -> str""" 
 ServiceId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The fabrication part service identifier. The service can only be changed to compatible services.
Get: ServiceId(self: FabricationPart) -> int""" 
 ServiceName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The name of the service associated with the fabrication part.
Get: ServiceName(self: FabricationPart) -> str""" 
 SheetMetalArea=property(lambda self:object(),lambda self,v:None,lambda self:None) """The sheet metal area of the fabrication part.
Get: SheetMetalArea(self: FabricationPart) -> float""" 
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """The size of the fabrication part.
Get: Size(self: FabricationPart) -> str""" 
 Slope=property(lambda self:object(),lambda self,v:None,lambda self:None) """The slope for the straight fabrication part.
Get: Slope(self: FabricationPart) -> float""" 
 Specification=property(lambda self:object(),lambda self,v:None,lambda self:None) """The fabrication part specification identifier.
Get: Specification(self: FabricationPart) -> intSet: Specification(self: FabricationPart) = value""" 
 TopOfPartElevation=property(lambda self:object(),lambda self,v:None,lambda self:None) """The associated elevation to the top of fabrication part off of the current level.
Get: TopOfPartElevation(self: FabricationPart) -> float""" 
 ValidationStatus=property(lambda self:object(),lambda self,v:None,lambda self:None) """The validation status of the fabrication part.
Get: ValidationStatus(self: FabricationPart) -> ValidationStatus""" 
 Vendor=property(lambda self:object(),lambda self,v:None,lambda self:None) """The vendor of the fabrication part.
Get: Vendor(self: FabricationPart) -> str""" 
 VendorCode=property(lambda self:object(),lambda self,v:None,lambda self:None) """The vendor code of the fabrication part.
Get: VendorCode(self: FabricationPart) -> str""" 
 Weight=property(lambda self:object(),lambda self,v:None,lambda self:None) """The weight of the fabrication part.
Get: Weight(self: FabricationPart) -> float""" 
class FabricationPartType(ElementType,IDisposable): @staticmethod def Create(document,button,condition): pass def Dispose(self): pass def getBoundingBox(self,*args): pass @staticmethod def Lookup(document,button,condition): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass FabricationRodInfo(object,IDisposable): def AttachToHanger(self,hangerId,rodIndex,position): pass def AttachToStructure(self): pass def Dispose(self): pass def GetBearerExtension(self,rodIndex): pass def GetRodAttachedElementId(self,rodIndex): pass def GetRodEndPosition(self,rodIndex): pass def IsRodLockedWithHost(self,rodIndex): pass def ReleaseUnmanagedResources(self,*args): pass def SetBearerExtension(self,rodIndex,length): pass def SetRodEndPosition(self,rodIndex,position): pass def SetRodLockedWithHost(self,rodIndex,locked): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsAttachedToStructure=property(lambda self:object(),lambda self,v:None,lambda self:None) """Checks if the hanger is attached to structure.
Get: IsAttachedToStructure(self: FabricationRodInfo) -> bool"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FabricationRodInfo) -> bool""" 
 RodCount=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the number of rods.
Get: RodCount(self: FabricationRodInfo) -> int""" 
class FabricationService(object,IDisposable): def Dispose(self): pass def GetButton(self,groupIndex,buttonIndex): pass def GetButtonCount(self,group): pass def GetGroupName(self,group): pass def IsValidButtonIndex(self,groupIndex,buttonIndex): pass def IsValidGroupIndex(self,groupIndex): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass Abbreviation=property(lambda self:object(),lambda self,v:None,lambda self:None) """The short name of service.
Get: Abbreviation(self: FabricationService) -> str"""
 FabricationSystemName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The fabrication system name of the service.
Get: FabricationSystemName(self: FabricationService) -> str""" 
 GroupCount=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number of groups in the service.
Get: GroupCount(self: FabricationService) -> int""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FabricationService) -> bool""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """The name of the service.
Get: Name(self: FabricationService) -> str""" 
 ServiceId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The service identifier of the service.
Get: ServiceId(self: FabricationService) -> int""" 
class FabricationServiceButton(object,IDisposable): def ContainsFabricationPartType(self,partType): pass def Dispose(self): pass def GetConditionDescription(self,condition): pass def GetConditionImage(self,condition): pass def GetConditionLowerValue(self,condition): pass def GetConditionName(self,condition): pass def GetConditionUpperValue(self,condition): pass def GetImage(self): pass def IsUnrestrictedCondition(self,condition): pass def IsValid(self): pass @staticmethod def IsValidConditionIndex(button,condition): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass ButtonIndex=property(lambda self:object(),lambda self,v:None,lambda self:None) """The button index for this button.
Get: ButtonIndex(self: FabricationServiceButton) -> int"""
 Code=property(lambda self:object(),lambda self,v:None,lambda self:None) """The code of the button.
Get: Code(self: FabricationServiceButton) -> str""" 
 ConditionCount=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number of conditions.
Get: ConditionCount(self: FabricationServiceButton) -> int""" 
 GroupIndex=property(lambda self:object(),lambda self,v:None,lambda self:None) """The group index for this button.
Get: GroupIndex(self: FabricationServiceButton) -> int""" 
 IsAHanger=property(lambda self:object(),lambda self,v:None,lambda self:None) """Checks if the fabrication service button is hanger.
Get: IsAHanger(self: FabricationServiceButton) -> bool""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FabricationServiceButton) -> bool""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """The name of the button.
Get: Name(self: FabricationServiceButton) -> str""" 
 ServiceId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The fabrication service identifier for the fabrication service this button belongs to.
Get: ServiceId(self: FabricationServiceButton) -> int""" 
class FaceArray(APIObject,IDisposable,IEnumerable): def Append(self,item): pass def Clear(self): pass def Dispose(self): pass def ForwardIterator(self): pass def GetEnumerator(self): pass def Insert(self,item,index): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def ReverseIterator(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __getitem__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass def __setitem__(self,*args): pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the array is empty.
Get: IsEmpty(self: FaceArray) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of faces that are in the array.
Get: Size(self: FaceArray) -> int""" 
class FaceArrayIterator(APIObject,IDisposable,IEnumerator): def Dispose(self): pass def MoveNext(self): pass def next(self,*args): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: FaceArrayIterator) -> object"""
class FaceIntersectionFaceResult(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Intersecting=None NonIntersecting=None value__=Noneclass FaceNode(RenderNode,IDisposable): def Dispose(self): pass def GetFace(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass FaceSecondDerivatives(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FaceSecondDerivatives) -> bool"""
 MixedDerivative=property(lambda self:object(),lambda self,v:None,lambda self:None) """The mixed derivative.
Get: MixedDerivative(self: FaceSecondDerivatives) -> XYZ""" 
 UUDerivative=property(lambda self:object(),lambda self,v:None,lambda self:None) """The second derivative with respect to U.
Get: UUDerivative(self: FaceSecondDerivatives) -> XYZ""" 
 VVDerivative=property(lambda self:object(),lambda self,v:None,lambda self:None) """The second derivative with respect to V.
Get: VVDerivative(self: FaceSecondDerivatives) -> XYZ""" 
class FaceSplitter(Element,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass SplitElementId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The id of the element whose face is split by this element.
Get: SplitElementId(self: FaceSplitter) -> ElementId"""
class FacetingUtils(object): @staticmethod def ConvertTrianglesToQuads(triangulation): pass __all__=[ 'ConvertTrianglesToQuads', ]class FaceWall(HostObject,IDisposable): @staticmethod def Create(document,wallType,locationLine,faceReference): pass def Dispose(self): pass def getBoundingBox(self,*args): pass @staticmethod def IsValidFaceReferenceForFaceWall(document,faceReference): pass @staticmethod def IsWallTypeValidForFaceWall(document,wallType): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass FailureDefinition(object,IDisposable): def AddResolutionType(self,type,caption,classOfResolution): pass @staticmethod def CreateFailureDefinition(id,severity,messageString): pass def Dispose(self): pass def GetApplicableResolutionTypes(self): pass def GetDefaultResolutionType(self): pass def GetDescriptionText(self): pass def GetResolutionCaption(self,type): pass def HasResolutions(self): pass def IsResolutionApplicable(self,type): pass def ReleaseUnmanagedResources(self,*args): pass def SetDefaultResolutionType(self,type): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FailureDefinition) -> bool"""
 Severity=property(lambda self:object(),lambda self,v:None,lambda self:None) """The severity of the failure.
Get: Severity(self: FailureDefinition) -> FailureSeverity""" 
class FailureDefinitionAccessor(object,IDisposable): def Dispose(self): pass def GetApplicableResolutionTypes(self): pass def GetDefaultResolutionType(self): pass def GetDescriptionText(self): pass def GetId(self): pass def GetResolutionCaption(self,type): pass def GetSeverity(self): pass def HasResolutions(self): pass def IsResolutionApplicable(self,type): pass def ReleaseUnmanagedResources(self,*args): pass def SetDefaultResolutionType(self,type): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FailureDefinitionAccessor) -> bool"""
class FailureDefinitionId(GuidEnum): @staticmethod def __new__(self,guid): passclass FailureDefinitionRegistry(object,IDisposable): def Dispose(self): pass def FindFailureDefinition(self,id): pass def ListAllFailureDefinitions(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FailureDefinitionRegistry) -> bool"""
class FailureHandlingOptions(object,IDisposable): def Dispose(self): pass def GetClearAfterRollback(self): pass def GetDelayedMiniWarnings(self): pass def GetFailuresPreprocessor(self): pass def GetForcedModalHandling(self): pass def GetTransactionFinalizer(self): pass def ReleaseUnmanagedResources(self,*args): pass def SetClearAfterRollback(self,bFlag): pass def SetDelayedMiniWarnings(self,bFlag): pass def SetFailuresPreprocessor(self,preprocessor): pass def SetForcedModalHandling(self,bFlag): pass def SetTransactionFinalizer(self,finalizer): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FailureHandlingOptions) -> bool"""
class FailureMessage(object,IDisposable): def AddResolution(self,type,resolution): pass def Dispose(self): pass def GetAdditionalElements(self): pass def GetDefaultResolutionCaption(self): pass def GetDescriptionText(self): pass def GetFailingElements(self): pass def GetFailureDefinitionId(self): pass def GetSeverity(self): pass def HasResolutionOfType(self,type): pass def HasResolutions(self): pass def ReleaseUnmanagedResources(self,*args): pass def SetAdditionalElement(self,additionalElement): pass def SetAdditionalElements(self,additionalElements): pass def SetFailingElement(self,id): pass def SetFailingElements(self,idsToShow): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,id): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FailureMessage) -> bool"""
class FailureMessageAccessor(object,IDisposable): def CloneFailureMessage(self): pass def Dispose(self): pass def GetAdditionalElementIds(self): pass def GetCurrentResolutionType(self): pass def GetDefaultResolutionCaption(self): pass def GetDescriptionText(self): pass def GetFailingElementIds(self): pass def GetFailureDefinitionId(self): pass def GetNumberOfResolutions(self): pass def GetSeverity(self): pass def HasResolutionOfType(self,type): pass def HasResolutions(self): pass def ReleaseUnmanagedResources(self,*args): pass def SetCurrentResolutionType(self,resolutionType): pass def ShouldMergeWithMessage(self,messageToMergeWith): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FailureMessageAccessor) -> bool"""
class FailureMessageKey(object,IDisposable): def Dispose(self): pass def Equals(self,obj): pass def GetHashCode(self): pass def IsEqual(self,other): pass def IsValid(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __eq__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __ne__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FailureMessageKey) -> bool"""
class FailureProcessingResult(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Continue=None ProceedWithCommit=None ProceedWithRollBack=None value__=None WaitForUserInput=Noneclass FailureResolutionType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass CreateElements=None Default=None DeleteElements=None DetachElements=None FixElements=None Invalid=None MoveElements=None Others=None QuitEditMode=None SaveDocument=None SetValue=None ShowElements=None SkipElements=None UnlockConstraints=None value__=Noneclass FailuresAccessor(object,IDisposable): def CanCommitPendingTransaction(self): pass def CanRollBackPendingTransaction(self): pass def CommitPendingTransaction(self): pass def DeleteAllWarnings(self): pass def DeleteElements(self,idsToDelete): pass def DeleteWarning(self,failure): pass def Dispose(self): pass def GetAttemptedResolutionTypes(self,failure): pass def GetDocument(self): pass def GetFailureHandlingOptions(self): pass def GetFailureMessages(self,severity=None): pass def GetSeverity(self): pass def GetTransactionName(self): pass def IsActive(self): pass def IsElementsDeletionPermitted(self,idsToDelete=None,reason=None): pass def IsFailureResolutionPermitted(self,failure=None,resolutionType=None): pass def IsPending(self): pass def IsTransactionBeingCommitted(self): pass def JournalFailures(self,failures): pass def PostFailure(self,failure): pass def ReleaseUnmanagedResources(self,*args): pass def ReplaceFailures(self,failure): pass def ResolveFailure(self,failure): pass def ResolveFailures(self,failures): pass def RollBackPendingTransaction(self): pass def SetFailureHandlingOptions(self,options): pass def SetTransactionName(self,transactionName): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FailuresAccessor) -> bool"""
class FailureSeverity(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass DocumentCorruption=None Error=None None=None value__=None Warning=Noneclass Family(Element,IDisposable): def CanHaveStructuralSection(self): pass def Dispose(self): pass def ExtractPartAtom(self,xmlFilePath): pass def getBoundingBox(self,*args): pass def GetFamilySymbolIds(self): pass def GetFamilyTypeParameterValues(self,parameterId): pass def HasLargeSketches(self): pass def IsAppropriateCategoryId(self,categoryId): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass CurtainPanelHorizontalSpacing=property(lambda self:object(),lambda self,v:None,lambda self:None) """For Curtain Panel families, the horizontal spacing of the
driving mesh.Get: CurtainPanelHorizontalSpacing(self: Family) -> floatSet: CurtainPanelHorizontalSpacing(self: Family) = value"""
 CurtainPanelTilePattern=property(lambda self:object(),lambda self,v:None,lambda self:None) """For Curtain Panel families, the choice of tile pattern.
Get: CurtainPanelTilePattern(self: Family) -> TilePatternsBuiltIn""" 
 CurtainPanelVerticalSpacing=property(lambda self:object(),lambda self,v:None,lambda self:None) """For Curtain Panel families, the vertical spacing of the
driving mesh.Get: CurtainPanelVerticalSpacing(self: Family) -> floatSet: CurtainPanelVerticalSpacing(self: Family) = value""" 
 FamilyCategory=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves or sets a Category object that represents the category or sub category in which the elements
( this family could generate ) reside.Get: FamilyCategory(self: Family) -> CategorySet: FamilyCategory(self: Family) = value""" 
 FamilyCategoryId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The id of the category or sub category in which the elements that this family could generate reside.
Get: FamilyCategoryId(self: Family) -> ElementIdSet: FamilyCategoryId(self: Family) = value""" 
 FamilyPlacementType=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies the type of placement required by a given family.
Get: FamilyPlacementType(self: Family) -> FamilyPlacementType""" 
 IsConceptualMassFamily=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether the Family is a Conceptual Mass family.
Get: IsConceptualMassFamily(self: Family) -> bool""" 
 IsCurtainPanelFamily=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether the Family is a Curtain Panel family. Curtain Panel family
symbols are used as the ObjectTypes of Autodesk.Revit.DB.DividedSurface elements.Get: IsCurtainPanelFamily(self: Family) -> bool""" 
 IsEditable=property(lambda self:object(),lambda self,v:None,lambda self:None) """True if the family supports editing, false otherwise.
Get: IsEditable(self: Family) -> bool""" 
 IsInPlace=property(lambda self:object(),lambda self,v:None,lambda self:None) """True if the family is an in-place family, false if the family is a loadable family.
Get: IsInPlace(self: Family) -> bool""" 
 IsOwnerFamily=property(lambda self:object(),lambda self,v:None,lambda self:None) """True if the family is the owner family for its own editable document, false otherwise.
Get: IsOwnerFamily(self: Family) -> bool""" 
 IsParametric=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies whether the family contains parametric relations
   between some of its elements.Get: IsParametric(self: Family) -> bool""" 
 IsUserCreated=property(lambda self:object(),lambda self,v:None,lambda self:None) """Determine whether the family has been defined by the user.
Get: IsUserCreated(self: Family) -> bool""" 
 ShowSpatialElementCalculationPoint=property(lambda self:object(),lambda self,v:None,lambda self:None) """For families that can have a calculation point for spatial elements, 
hide or show the calculation point. Autodesk.Revit.DB.SpatialElementCalculationPoint elements.Get: ShowSpatialElementCalculationPoint(self: Family) -> boolSet: ShowSpatialElementCalculationPoint(self: Family) = value""" 
 StructuralCodeName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The family's structural code name.
Get: StructuralCodeName(self: Family) -> strSet: StructuralCodeName(self: Family) = value""" 
 StructuralFamilyNameKey=property(lambda self:object(),lambda self,v:None,lambda self:None) """The family's structural section shape name key.
Get: StructuralFamilyNameKey(self: Family) -> strSet: StructuralFamilyNameKey(self: Family) = value""" 
 StructuralMaterialType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The family's structural material type.
Get: StructuralMaterialType(self: Family) -> StructuralMaterialType""" 
 StructuralSectionShape=property(lambda self:object(),lambda self,v:None,lambda self:None) """The family's structural section shape.
Get: StructuralSectionShape(self: Family) -> StructuralSectionShapeSet: StructuralSectionShape(self: Family) = value""" 
class FamilyElementVisibility(APIObject,IDisposable): def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,visibilityType): pass IsShownInCoarse=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the instance is display with Coarse detail level in the view 
of project document.Get: IsShownInCoarse(self: FamilyElementVisibility) -> boolSet: IsShownInCoarse(self: FamilyElementVisibility) = value"""
 IsShownInFine=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the instance is display with Fine detail level in the view 
of project document.Get: IsShownInFine(self: FamilyElementVisibility) -> boolSet: IsShownInFine(self: FamilyElementVisibility) = value""" 
 IsShownInFrontBack=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the instance is display in Front/Back view of project document.
Get: IsShownInFrontBack(self: FamilyElementVisibility) -> boolSet: IsShownInFrontBack(self: FamilyElementVisibility) = value""" 
 IsShownInLeftRight=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the instance is display in Left/Right view of project document.
Get: IsShownInLeftRight(self: FamilyElementVisibility) -> boolSet: IsShownInLeftRight(self: FamilyElementVisibility) = value""" 
 IsShownInMedium=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the instance is display with Medium detail level in the view 
of project document.Get: IsShownInMedium(self: FamilyElementVisibility) -> boolSet: IsShownInMedium(self: FamilyElementVisibility) = value""" 
 IsShownInPlanRCPCut=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the instance is displayed when cut in Plan/RCP (if the category permits).
Get: IsShownInPlanRCPCut(self: FamilyElementVisibility) -> boolSet: IsShownInPlanRCPCut(self: FamilyElementVisibility) = value""" 
 IsShownInTopBottom=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the instance is display in Plan/RCP view of project document.
Get: IsShownInTopBottom(self: FamilyElementVisibility) -> boolSet: IsShownInTopBottom(self: FamilyElementVisibility) = value""" 
 IsShownOnlyWhenCut=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the instance is displayed only if it has been cut.
Get: IsShownOnlyWhenCut(self: FamilyElementVisibility) -> boolSet: IsShownOnlyWhenCut(self: FamilyElementVisibility) = value""" 
 VisibilityType=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the instance is Model or View specific.
Get: VisibilityType(self: FamilyElementVisibility) -> FamilyElementVisibilityType""" 
class FamilyElementVisibilityType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Model=None value__=None ViewSpecific=Noneclass FamilyHostingBehavior(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Ceiling=None Face=None Floor=None None=None Roof=None value__=None Wall=Noneclass FamilyInstanceFilter(ElementSlowFilter,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,document,familySymbolId): pass FamilySymbolId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The family symbol id.
Get: FamilySymbolId(self: FamilyInstanceFilter) -> ElementId"""
class FamilyManager(APIObject,IDisposable): def AddParameter(self,*__args): pass def AssociateElementParameterToFamilyParameter(self,elementParameter,familyParameter): pass def CanElementParameterBeAssociated(self,elementParameter): pass def DeleteCurrentType(self): pass def Dispose(self): pass def GetAssociatedFamilyParameter(self,elementParameter): pass def GetParameters(self): pass def IsParameterLockable(self,familyParameter): pass def IsParameterLocked(self,familyParameter): pass def IsUserAssignableParameterGroup(self,parameterGroup): pass def MakeInstance(self,familyParameter): pass def MakeNonReporting(self,familyParameter): pass def MakeReporting(self,familyParameter): pass def MakeType(self,familyParameter): pass def NewType(self,typeName): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def RemoveParameter(self,familyParameter): pass def RenameCurrentType(self,typeName): pass def RenameParameter(self,familyParameter,name): pass def ReorderParameters(self,parameters): pass def ReplaceParameter(self,currentParameter,*__args): pass def Set(self,familyParameter,value): pass def SetDescription(self,familyParameter,description): pass def SetFormula(self,familyParameter,formula): pass def SetParameterLocked(self,familyParameter,locked): pass def SetValueString(self,familyParameter,value): pass def SortParameters(self,order): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass CurrentType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The current family type.
Get: CurrentType(self: FamilyManager) -> FamilyTypeSet: CurrentType(self: FamilyManager) = value"""
 Parameters=property(lambda self:object(),lambda self,v:None,lambda self:None) """All family parameters in this family.
Get: Parameters(self: FamilyManager) -> FamilyParameterSet""" 
 Types=property(lambda self:object(),lambda self,v:None,lambda self:None) """All family types in the family.
Get: Types(self: FamilyManager) -> FamilyTypeSet""" 
class FamilyParameter(APIObject,IDisposable): def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass AssociatedParameters=property(lambda self:object(),lambda self,v:None,lambda self:None) """The parameters from elements in the family which are associated to this parameter.
Get: AssociatedParameters(self: FamilyParameter) -> ParameterSet"""
 CanAssignFormula=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if this parameter can be assigned a formula.
Get: CanAssignFormula(self: FamilyParameter) -> bool""" 
 Definition=property(lambda self:object(),lambda self,v:None,lambda self:None) """The definition.
Get: Definition(self: FamilyParameter) -> Definition""" 
 DisplayUnitType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The display unit type.
Get: DisplayUnitType(self: FamilyParameter) -> DisplayUnitType""" 
 Formula=property(lambda self:object(),lambda self,v:None,lambda self:None) """The formula.
Get: Formula(self: FamilyParameter) -> str""" 
 GUID=property(lambda self:object(),lambda self,v:None,lambda self:None) """The globally unique identifier
Get: GUID(self: FamilyParameter) -> Guid""" 
 Id=property(lambda self:object(),lambda self,v:None,lambda self:None) """The id of the family parameter.
Get: Id(self: FamilyParameter) -> ElementId""" 
 IsDeterminedByFormula=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the parameter is determined by formula.
Get: IsDeterminedByFormula(self: FamilyParameter) -> bool""" 
 IsInstance=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the parameter is instance or type.
Get: IsInstance(self: FamilyParameter) -> bool""" 
 IsReadOnly=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies if the object is read-only or modifiable.
Get: IsReadOnly(self: FamilyParameter) -> bool""" 
 IsReporting=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the parameter is a reporting parameter.
Get: IsReporting(self: FamilyParameter) -> bool""" 
 IsShared=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies if the parameter is a shared parameter.
Get: IsShared(self: FamilyParameter) -> bool""" 
 StorageType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The storage type describes the type that is used internally within the parameter to store its value.
Get: StorageType(self: FamilyParameter) -> StorageType""" 
 UserModifiable=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether the interactive user can modify the value of this parameter.
Get: UserModifiable(self: FamilyParameter) -> bool""" 
class FamilyParameterSet(APIObject,IDisposable,IEnumerable): def Clear(self): pass def Contains(self,item): pass def Dispose(self): pass def Erase(self,item): pass def ForwardIterator(self): pass def GetEnumerator(self): pass def Insert(self,item): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def ReverseIterator(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the set is empty.
Get: IsEmpty(self: FamilyParameterSet) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of objects that are in the set.
Get: Size(self: FamilyParameterSet) -> int""" 
class FamilyParameterSetIterator(APIObject,IDisposable,IEnumerator): def Dispose(self): pass def MoveNext(self): pass def next(self,*args): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: FamilyParameterSetIterator) -> object"""
class FamilyPlacementType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Adaptive=None CurveBased=None CurveBasedDetail=None CurveDrivenStructural=None Invalid=None OneLevelBased=None OneLevelBasedHosted=None TwoLevelsBased=None value__=None ViewBased=None WorkPlaneBased=Noneclass FamilyPointLocation(APIObject,IDisposable): def Dispose(self): pass def GetLocation(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FamilyPointLocation) -> bool"""
 Location=property(lambda self:object(),lambda self,v:None,lambda self:None) """The location of the point.
Get: Location(self: FamilyPointLocation) -> Transform""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """The name of the corresponding reference point in the Family document.
Get: Name(self: FamilyPointLocation) -> str""" 
class FamilyPointPlacementReference(APIObject,IDisposable): def Dispose(self): pass def getCDA(self,*args): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Location=property(lambda self:object(),lambda self,v:None,lambda self:None) """The location of the point.
Get: Location(self: FamilyPointPlacementReference) -> Transform"""
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """The name of the corresponding reference point in the Family document.
Get: Name(self: FamilyPointPlacementReference) -> str""" 
 PointReference=property(lambda self:object(),lambda self,v:None,lambda self:None) """The reference on which the point depends on.
Get: PointReference(self: FamilyPointPlacementReference) -> Reference""" 
class FamilySizeTable(object,IDisposable): def AsValueString(self,row,column): pass def Dispose(self): pass def GetColumnHeader(self,index): pass def IsValidColumnIndex(self,index): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FamilySizeTable) -> bool"""
 NumberOfColumns=property(lambda self:object(),lambda self,v:None,lambda self:None) """Number of columns in the table.
Get: NumberOfColumns(self: FamilySizeTable) -> int""" 
 NumberOfRows=property(lambda self:object(),lambda self,v:None,lambda self:None) """Number of rows in the table.
Get: NumberOfRows(self: FamilySizeTable) -> int""" 
class FamilySizeTableColumn(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass DisplayUnitType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Display unit type of the column.
Get: DisplayUnitType(self: FamilySizeTableColumn) -> DisplayUnitType"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FamilySizeTableColumn) -> bool""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """The column name.
Get: Name(self: FamilySizeTableColumn) -> str""" 
 UnitType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Unit type of the column.
Get: UnitType(self: FamilySizeTableColumn) -> UnitType""" 
class FamilySizeTableErrorInfo(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass FamilySizeTableErrorType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The error type.
Get: FamilySizeTableErrorType(self: FamilySizeTableErrorInfo) -> FamilySizeTableErrorType"""
 FilePath=property(lambda self:object(),lambda self,v:None,lambda self:None) """The path of the imported CSV file.
Get: FilePath(self: FamilySizeTableErrorInfo) -> str""" 
 InvalidColumnIndex=property(lambda self:object(),lambda self,v:None,lambda self:None) """The index of the invalid column.
Get: InvalidColumnIndex(self: FamilySizeTableErrorInfo) -> int""" 
 InvalidHeaderText=property(lambda self:object(),lambda self,v:None,lambda self:None) """The invalid header text.
Get: InvalidHeaderText(self: FamilySizeTableErrorInfo) -> str""" 
 InvalidRowIndex=property(lambda self:object(),lambda self,v:None,lambda self:None) """The index of the invalid row.
Get: InvalidRowIndex(self: FamilySizeTableErrorInfo) -> int""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FamilySizeTableErrorInfo) -> bool""" 
class FamilySizeTableErrorType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass CannotOpenFile=None CannotParseColumnHeader=None CannotReadFile=None FileNotFound=None IncorrectNumberOfColumns=None InvalidHeaderSeparator=None Undefined=None value__=Noneclass FamilySizeTableManager(object,IDisposable): @staticmethod def CreateFamilySizeTableManager(document,familyId): pass def Dispose(self): pass def ExportSizeTable(self,tableName,filePath): pass def GetAllSizeTableNames(self): pass @staticmethod def GetFamilySizeTableManager(document,familyId): pass def GetSizeTable(self,tableName): pass def HasSizeTable(self,tableName): pass def ImportSizeTable(self,document,filePath,errorInfo): pass def ReleaseUnmanagedResources(self,*args): pass def RemoveSizeTable(self,tableName): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FamilySizeTableManager) -> bool"""
 NumberOfSizeTables=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number of FamilySizeTables in a family.
Get: NumberOfSizeTables(self: FamilySizeTableManager) -> int""" 
class FamilySource(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Family=None Project=None value__=Noneclass FamilySymbolFilter(ElementQuickFilter,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,familyId): pass FamilyId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The family id.
Get: FamilyId(self: FamilySymbolFilter) -> ElementId"""
class FamilySymbolProfile(SweepProfile,IDisposable): def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Angle=property(lambda self:object(),lambda self,v:None,lambda self:None) """The angle of the rotation of the profile in radians.
Get: Angle(self: FamilySymbolProfile) -> floatSet: Angle(self: FamilySymbolProfile) = value"""
 IsFlipped=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the symbol profile is flipped or not.
Get: IsFlipped(self: FamilySymbolProfile) -> boolSet: IsFlipped(self: FamilySymbolProfile) = value""" 
 Profile=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the family symbol of the profile.
Get: Profile(self: FamilySymbolProfile) -> FamilySymbolSet: Profile(self: FamilySymbolProfile) = value""" 
 XOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) """The offset of the profile to the origin of the sketch plane in the X direction.
Get: XOffset(self: FamilySymbolProfile) -> floatSet: XOffset(self: FamilySymbolProfile) = value""" 
 YOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) """The offset of the profile to the origin of the sketch plane in the Y direction.
Get: YOffset(self: FamilySymbolProfile) -> floatSet: YOffset(self: FamilySymbolProfile) = value""" 
class FamilyThermalProperties(object,IDisposable): def Dispose(self): pass @staticmethod def Find(pADoc,constructionId): pass def IsValid(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass AnalyticConstructionName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The construction gbXML name.
   This value corresponds to the 'Name' property of a constructionType node in Constructions.xml.Get: AnalyticConstructionName(self: FamilyThermalProperties) -> str"""
 AnalyticConstructionTypeId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The construction gbXML type.
   This value corresponds to the 'id' property of a constructionType node in Constructions.xml.Get: AnalyticConstructionTypeId(self: FamilyThermalProperties) -> str""" 
 HeatTransferCoefficient=property(lambda self:object(),lambda self,v:None,lambda self:None) """The heat transfer coefficient value (U-Value).
   The units are watts per meter-squared kelvin (W/(m^2*K)).Get: HeatTransferCoefficient(self: FamilyThermalProperties) -> float""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FamilyThermalProperties) -> bool""" 
 SolarHeatGainCoefficient=property(lambda self:object(),lambda self,v:None,lambda self:None) """The solar heat gain coefficient.
Get: SolarHeatGainCoefficient(self: FamilyThermalProperties) -> float""" 
 ThermalResistance=property(lambda self:object(),lambda self,v:None,lambda self:None) """The calculated thermal resistance value (R-Value).
   The units are meter-squared kelvin per watt ((m^2*K)/Watt).Get: ThermalResistance(self: FamilyThermalProperties) -> float""" 
 VisualLightTransmittance=property(lambda self:object(),lambda self,v:None,lambda self:None) """The visual light transmittance.
Get: VisualLightTransmittance(self: FamilyThermalProperties) -> float""" 
class FamilyType(APIObject,IDisposable): def AsDouble(self,familyParameter): pass def AsElementId(self,familyParameter): pass def AsInteger(self,familyParameter): pass def AsString(self,familyParameter): pass def AsValueString(self,familyParameter): pass def Dispose(self): pass def HasValue(self,familyParameter): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """The name of the family type.
Get: Name(self: FamilyType) -> str"""
class FamilyTypeSet(APIObject,IDisposable,IEnumerable): def Clear(self): pass def Contains(self,item): pass def Dispose(self): pass def Erase(self,item): pass def ForwardIterator(self): pass def GetEnumerator(self): pass def Insert(self,item): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def ReverseIterator(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the set is empty.
Get: IsEmpty(self: FamilyTypeSet) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of objects that are in the set.
Get: Size(self: FamilyTypeSet) -> int""" 
class FamilyTypeSetIterator(APIObject,IDisposable,IEnumerator): def Dispose(self): pass def MoveNext(self): pass def next(self,*args): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: FamilyTypeSetIterator) -> object"""
class FamilyUtils(object): @staticmethod def ConvertFamilyToFaceHostBased(document,familyId): pass @staticmethod def FamilyCanConvertToFaceHostBased(document,familyId): pass @staticmethod def GetProfileSymbols(document,profileFamilyUsage,oneCurveLoopOnly): pass __all__=[ 'ConvertFamilyToFaceHostBased', 'FamilyCanConvertToFaceHostBased', 'GetProfileSymbols', ]class FBXExportOptions(object): LevelsOfDetailValue=property(lambda self:object(),lambda self,v:None,lambda self:None) """The value of the levels of detail.
Get: LevelsOfDetailValue(self: FBXExportOptions) -> intSet: LevelsOfDetailValue(self: FBXExportOptions) = value"""
 StopOnError=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether export process should stop when a view fails to export.
Get: StopOnError(self: FBXExportOptions) -> boolSet: StopOnError(self: FBXExportOptions) = value""" 
 UseLevelsOfDetail=property(lambda self:object(),lambda self,v:None,lambda self:None) """True to use levels of detail, false otherwise.
Get: UseLevelsOfDetail(self: FBXExportOptions) -> boolSet: UseLevelsOfDetail(self: FBXExportOptions) = value""" 
 WithoutBoundaryEdges=property(lambda self:object(),lambda self,v:None,lambda self:None) """True to export without boundary edges, false otherwise.
Get: WithoutBoundaryEdges(self: FBXExportOptions) -> boolSet: WithoutBoundaryEdges(self: FBXExportOptions) = value""" 
class ModelPath(object,IDisposable): def Compare(self,otherPath): pass def Dispose(self): pass def GetModelGUID(self): pass def GetProjectGUID(self): pass def ReleaseUnmanagedResources(self,*args): pass def __cmp__(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass CentralServerPath=property(lambda self:object(),lambda self,v:None,lambda self:None) """A path to the location of the central Revit server.
Get: CentralServerPath(self: ModelPath) -> str"""
 Empty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether this path is empty
Get: Empty(self: ModelPath) -> bool""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ModelPath) -> bool""" 
 ServerPath=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether this path is a server path (as opposed to a file path or cloud path)
Get: ServerPath(self: ModelPath) -> bool""" 
class FilePath(ModelPath,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,path): passclass FilledRegion(Element,IDisposable): @staticmethod def Create(document,typeId,viewId,boundaries): pass def Dispose(self): pass def GetBoundaries(self): pass def getBoundingBox(self,*args): pass @staticmethod def GetValidLineStyleIdsForFilledRegion(document): pass @staticmethod def IsValidFilledRegionTypeId(document,typeId): pass @staticmethod def IsValidLineStyleIdForFilledRegion(document,lineStyleId): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def SetLineStyleId(self,lineStyleId): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass IsMasking=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether the filled region is masking or not.
Get: IsMasking(self: FilledRegion) -> bool"""
class FilledRegionBackground(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Opaque=None Transparent=None value__=Noneclass LineAndTextAttrSymbol(ElementType,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass FilledRegionType(LineAndTextAttrSymbol,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass @staticmethod def IsValidLineWeight(lineWeight): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Background=property(lambda self:object(),lambda self,v:None,lambda self:None) """The background.
Get: Background(self: FilledRegionType) -> FilledRegionBackgroundSet: Background(self: FilledRegionType) = value"""
 Color=property(lambda self:object(),lambda self,v:None,lambda self:None) """The color of the fill pattern.
Get: Color(self: FilledRegionType) -> ColorSet: Color(self: FilledRegionType) = value""" 
 FillPatternId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The fill pattern Id.
Get: FillPatternId(self: FilledRegionType) -> ElementIdSet: FillPatternId(self: FilledRegionType) = value""" 
 LineWeight=property(lambda self:object(),lambda self,v:None,lambda self:None) """The line weight of the fill pattern.
Get: LineWeight(self: FilledRegionType) -> intSet: LineWeight(self: FilledRegionType) = value""" 
class FillGrid(object,IDisposable): def CalculateLengthPerArea(self): pass def CalculateLinesPerLength(self): pass def CalculateStrokesPerArea(self): pass def Dispose(self): pass def GetHatchingDirection(self): pass def GetPointLineZone(self,point,nearestPoint=None): pass def GetSegmentDirection(self): pass def GetSegments(self): pass def IsEqual(self,other): pass def ReleaseUnmanagedResources(self,*args): pass def SetSegments(self,segArr): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,*__args): pass def __repr__(self,*args): pass Angle=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets and sets the angle of the fill grid.
Get: Angle(self: FillGrid) -> floatSet: Angle(self: FillGrid) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FillGrid) -> bool""" 
 Offset=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets and sets the offset of the fill grid.
Get: Offset(self: FillGrid) -> floatSet: Offset(self: FillGrid) = value""" 
 Origin=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets and sets the origin of the fill grid.
Get: Origin(self: FillGrid) -> UVSet: Origin(self: FillGrid) = value""" 
 Shift=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets and sets the shift of the fill grid.
Get: Shift(self: FillGrid) -> floatSet: Shift(self: FillGrid) = value""" 
class FillPattern(object,IDisposable): def Dispose(self): pass def ExpandDots(self): pass def GetFillGrid(self,gridIdx): pass def GetFillGrids(self): pass def IsEqual(self,other): pass def ReleaseUnmanagedResources(self,*args): pass def SetFillGrid(self,gridIdx,fillGrid): pass def SetFillGrids(self,fillGrids): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,*__args): pass def __repr__(self,*args): pass GridCount=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the count of the fill grids in this fill pattern.
Get: GridCount(self: FillPattern) -> int"""
 HostOrientation=property(lambda self:object(),lambda self,v:None,lambda self:None) """Orientation to host layer.
Get: HostOrientation(self: FillPattern) -> FillPatternHostOrientationSet: HostOrientation(self: FillPattern) = value""" 
 IsSolidFill=property(lambda self:object(),lambda self,v:None,lambda self:None) """Check if the fill pattern is a solid fill pattern.
Get: IsSolidFill(self: FillPattern) -> bool""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FillPattern) -> bool""" 
 LengthPerArea=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets length of all lines that placed on unit area.
Get: LengthPerArea(self: FillPattern) -> float""" 
 LinesPerLength=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the number of solid lines that placed in unit length.
Get: LinesPerLength(self: FillPattern) -> float""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """The name of the fill pattern.
Get: Name(self: FillPattern) -> strSet: Name(self: FillPattern) = value""" 
 StrokesPerArea=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the number of strokes that placed on unit area.
Get: StrokesPerArea(self: FillPattern) -> float""" 
 Target=property(lambda self:object(),lambda self,v:None,lambda self:None) """Target of this fill pattern applied to.
Get: Target(self: FillPattern) -> FillPatternTargetSet: Target(self: FillPattern) = value""" 
class FillPatternElement(Element,IDisposable): @staticmethod def Create(document,fillPattern): pass def Dispose(self): pass def getBoundingBox(self,*args): pass def GetFillPattern(self): pass @staticmethod def GetFillPatternElementByName(document,target,name): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def SetFillPattern(self,newFillPattern): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass FillPatternHostOrientation(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass AsText=None ToHost=None ToView=None value__=Noneclass FillPatternTarget(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Drafting=None Model=None None=None value__=Noneclass FilterableValueProvider(object,IDisposable): def Dispose(self): pass def GetAssociatedGlobalParameterValue(self,element): pass def GetDoubleValue(self,element): pass def GetElementIdValue(self,element): pass def GetIntegerValue(self,element): pass def GetStringValue(self,element): pass def IsDoubleValueSupported(self,element): pass def IsElementIdValueSupported(self,element): pass def IsIntegerValueSupported(self,element): pass def IsStringValueSupported(self,element): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FilterableValueProvider) -> bool"""
class FilterRule(object,IDisposable): def Dispose(self): pass def ElementPasses(self,element): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FilterRule) -> bool"""
class FilterCategoryRule(FilterRule,IDisposable): @staticmethod def AllCategoriesFilterable(categories): pass def Dispose(self): pass def GetCategories(self): pass def ReleaseUnmanagedResources(self,*args): pass def SetCategories(self,categories): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,categories): passclass FilterValueRule(FilterRule,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass FilterNumericValueRule(FilterValueRule,IDisposable): def Dispose(self): pass def GetEvaluator(self): pass def ReleaseUnmanagedResources(self,*args): pass def SetEvaluator(self,evaluator): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass FilterDoubleRule(FilterNumericValueRule,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,valueProvider,evaluator,ruleValue,epsilon): pass Epsilon=property(lambda self:object(),lambda self,v:None,lambda self:None) """The tolerance within which two floating-point values may be considered equal.
Get: Epsilon(self: FilterDoubleRule) -> floatSet: Epsilon(self: FilterDoubleRule) = value"""
 RuleValue=property(lambda self:object(),lambda self,v:None,lambda self:None) """The user-supplied value against which values from a Revit document will be tested.
Get: RuleValue(self: FilterDoubleRule) -> floatSet: RuleValue(self: FilterDoubleRule) = value""" 
class FilteredElementCollector(object,IEnumerable[Element],IEnumerable,IDisposable): def ContainedInDesignOption(self,designOptionId): pass def Dispose(self): pass def Excluding(self,idsToExclude): pass def FirstElement(self): pass def FirstElementId(self): pass def GetElementCount(self): pass def GetElementIdIterator(self): pass def GetElementIterator(self): pass def GetEnumerator(self): pass def IntersectWith(self,other): pass @staticmethod def IsViewValidForElementIteration(document,viewId): pass def OfCategory(self,category): pass def OfCategoryId(self,categoryId): pass def OfClass(self,type): pass def OwnedByView(self,viewId): pass def ReleaseUnmanagedResources(self,*args): pass def ToElementIds(self): pass def ToElements(self): pass def UnionWith(self,other): pass def WhereElementIsCurveDriven(self): pass def WhereElementIsElementType(self): pass def WhereElementIsNotElementType(self): pass def WhereElementIsViewIndependent(self): pass def WherePasses(self,filter): pass def __contains__(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass @staticmethod def __new__(self,document,*__args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FilteredElementCollector) -> bool"""
class FilteredElementIdIterator(object,IEnumerator[ElementId],IDisposable,IEnumerator): def Dispose(self): pass def GetCurrent(self): pass def IsDone(self): pass def MoveNext(self): pass def next(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __contains__(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass def __repr__(self,*args): pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the item at the current position of the iterator.
Get: Current(self: FilteredElementIdIterator) -> ElementId"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FilteredElementIdIterator) -> bool""" 
class FilteredElementIterator(object,IEnumerator[Element],IDisposable,IEnumerator): def Dispose(self): pass def GetCurrent(self): pass def IsDone(self): pass def MoveNext(self): pass def next(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __contains__(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass def __repr__(self,*args): pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the item at the current position of the iterator.
Get: Current(self: FilteredElementIterator) -> Element"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FilteredElementIterator) -> bool""" 
class FilteredWorksetCollector(object,IEnumerable[Workset],IEnumerable,IDisposable): def Dispose(self): pass def FirstWorkset(self): pass def FirstWorksetId(self): pass def GetEnumerator(self): pass def GetWorksetIdIterator(self): pass def GetWorksetIterator(self): pass def OfKind(self,worksetKind): pass def ReleaseUnmanagedResources(self,*args): pass def ToWorksetIds(self): pass def ToWorksets(self): pass def WherePasses(self,filter): pass def __contains__(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass @staticmethod def __new__(self,document): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FilteredWorksetCollector) -> bool"""
class FilteredWorksetIdIterator(object,IEnumerator[WorksetId],IDisposable,IEnumerator): def Dispose(self): pass def GetCurrent(self): pass def IsDone(self): pass def MoveNext(self): pass def next(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __contains__(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass def __repr__(self,*args): pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the item at the current position of the iterator.
Get: Current(self: FilteredWorksetIdIterator) -> WorksetId"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FilteredWorksetIdIterator) -> bool""" 
class FilteredWorksetIterator(object,IEnumerator[Workset],IDisposable,IEnumerator): def Dispose(self): pass def GetCurrent(self): pass def IsDone(self): pass def MoveNext(self): pass def next(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __contains__(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass def __repr__(self,*args): pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the item at the current position of the iterator.
Get: Current(self: FilteredWorksetIterator) -> Workset"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FilteredWorksetIterator) -> bool""" 
class FilterElement(Element,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass @staticmethod def IsNameUnique(*__args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass FilterElementIdRule(FilterNumericValueRule,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,valueProvider,evaluator,ruleValue): pass RuleValue=property(lambda self:object(),lambda self,v:None,lambda self:None) """The user-supplied value against which values from a Revit document will be tested.
Get: RuleValue(self: FilterElementIdRule) -> ElementIdSet: RuleValue(self: FilterElementIdRule) = value"""
class FilterGlobalParameterAssociationRule(FilterNumericValueRule,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,valueProvider,evaluator,ruleValue): pass RuleValue=property(lambda self:object(),lambda self,v:None,lambda self:None) """The user-supplied global parameter value against which values from a Revit document will be tested.
Get: RuleValue(self: FilterGlobalParameterAssociationRule) -> ElementIdSet: RuleValue(self: FilterGlobalParameterAssociationRule) = value"""
class FilterIntegerRule(FilterNumericValueRule,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,valueProvider,evaluator,ruleValue): pass RuleValue=property(lambda self:object(),lambda self,v:None,lambda self:None) """The user-supplied value against which values from a Revit document will be tested.
Get: RuleValue(self: FilterIntegerRule) -> intSet: RuleValue(self: FilterIntegerRule) = value"""
class FilterInverseRule(FilterRule,IDisposable): def Dispose(self): pass def GetInnerRule(self): pass def ReleaseUnmanagedResources(self,*args): pass def SetInnerRule(self,innerRule): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,innerRule): passclass FilterNumericRuleEvaluator(object,IDisposable): def Dispose(self): pass def Evaluate(self,lhs,rhs,epsilon=None): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FilterNumericRuleEvaluator) -> bool"""
class FilterNumericEquals(FilterNumericRuleEvaluator,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass FilterNumericGreater(FilterNumericRuleEvaluator,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass FilterNumericGreaterOrEqual(FilterNumericRuleEvaluator,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass FilterNumericLess(FilterNumericRuleEvaluator,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass FilterNumericLessOrEqual(FilterNumericRuleEvaluator,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass FilterStringRuleEvaluator(object,IDisposable): def Dispose(self): pass def Evaluate(self,lhs,rhs,caseSensitive): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FilterStringRuleEvaluator) -> bool"""
class FilterStringBeginsWith(FilterStringRuleEvaluator,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass FilterStringContains(FilterStringRuleEvaluator,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass FilterStringEndsWith(FilterStringRuleEvaluator,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass FilterStringEquals(FilterStringRuleEvaluator,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass FilterStringGreater(FilterStringRuleEvaluator,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass FilterStringGreaterOrEqual(FilterStringRuleEvaluator,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass FilterStringLess(FilterStringRuleEvaluator,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass FilterStringLessOrEqual(FilterStringRuleEvaluator,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass FilterStringRule(FilterValueRule,IDisposable): def Dispose(self): pass def GetEvaluator(self): pass def ReleaseUnmanagedResources(self,*args): pass def SetEvaluator(self,evaluator): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,valueProvider,evaluator,ruleString,caseSensitive): pass RuleString=property(lambda self:object(),lambda self,v:None,lambda self:None) """The user-supplied string against which strings from a Revit document will be tested.
Get: RuleString(self: FilterStringRule) -> strSet: RuleString(self: FilterStringRule) = value"""
class FindReferenceTarget(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass All=None Curve=None Edge=None Element=None Face=None Mesh=None value__=Noneclass FitDirectionType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Horizontal=None value__=None Vertical=Noneclass FittingAndAccessoryCalculationType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass CalculateDefaultSettings=None CalculatePressureDrop=None Undefined=None ValidateCurrentSettings=None value__=Noneclass FittingAngleUsage(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass UseAnAngleIncrement=None UseAnyAngle=None UseSpecificAngles=None value__=Noneclass Floor(CeilingAndFloor,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def GetNormalAtVerticalProjectionPoint(self,modelLocation,floorFace): pass def GetSpanDirectionSymbolIds(self): pass def GetVerticalProjectionPoint(self,modelLocation,floorFace): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass FloorType=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves/set an object that represents the type of the floor.
Get: FloorType(self: Floor) -> FloorTypeSet: FloorType(self: Floor) = value"""
 SlabShapeEditor=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get the SlabShapeEditor used for slab shape editing.
Get: SlabShapeEditor(self: Floor) -> SlabShapeEditor""" 
 SpanDirectionAngle=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieve the span direction angle of the floor
Get: SpanDirectionAngle(self: Floor) -> floatSet: SpanDirectionAngle(self: Floor) = value""" 
class FloorFace(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Bottom=None Top=None value__=Noneclass FloorType(HostObjAttributes,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass IsFoundationSlab=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns whether the element FloorAttributes type is FoundationSlab.
Get: IsFoundationSlab(self: FloorType) -> bool"""
 StructuralMaterialId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the identifier of the material that defines the element's structural analysis properties.
Get: StructuralMaterialId(self: FloorType) -> ElementIdSet: StructuralMaterialId(self: FloorType) = value""" 
 ThermalProperties=property(lambda self:object(),lambda self,v:None,lambda self:None) """The calculated and settable thermal properties of the FloorType
Get: ThermalProperties(self: FloorType) -> ThermalProperties""" 
class FlowDirectionType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Bidirectional=None In=None Out=None value__=Noneclass FolderItemInfo(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass ElementId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The folder parameter Id
Get: ElementId(self: FolderItemInfo) -> ElementId"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FolderItemInfo) -> bool""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """The folder name
Get: Name(self: FolderItemInfo) -> str""" 
class FootPrintRoof(RoofBase,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def GetProfiles(self): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass CurtainGrids=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieve all the CurtainGrid objects of a FootPrintRoof.
Get: CurtainGrids(self: FootPrintRoof) -> CurtainGridSet"""
class Form(GenericForm,IDisposable): def AddEdge(self,*__args): pass def AddProfile(self,edgeReference,param): pass def CanManipulateProfile(self,profileIndex): pass def CanManipulateSubElement(self,subElementReference): pass def ConstrainProfiles(self,masterProfileIndex): pass def DeleteProfile(self,profileIndex): pass def DeleteSubElement(self,subElementReference): pass def Dispose(self): pass def getBoundingBox(self,*args): pass def GetControlPoints(self,curveOrEdgeOrFaceReference): pass def GetCurvesAndEdgesReference(self,pointReference): pass def GetPathCurveIndexByCurveReference(self,curveReference): pass def GetProfileAndCurveLoopIndexFromReference(self,curveOrEdgeReference,profileIndex,curveLoopIndex): pass def IsAutoCreaseEdge(self,edgeReference): pass def IsBeginningFace(self,faceReference): pass def IsConnectingEdge(self,edgeReference): pass def IsCurveReference(self,curveReference): pass def IsEdgeReference(self,edgeReference): pass def IsEndFace(self,faceReference): pass def IsFaceReference(self,faceReference): pass def IsProfileEdge(self,curveOrEdgeReference): pass def IsReferenceOnlyProfile(self,profileIndex): pass def IsSideFace(self,faceReference): pass def IsVertexReference(self,vertexReference): pass def MoveProfile(self,profileIndex,offset): pass def MoveSubElement(self,subElementReference,offset): pass def Rehost(self,*__args): pass def ReleaseUnmanagedResources(self,*args): pass def RotateProfile(self,profileIndex,axis,angle): pass def RotateSubElement(self,subElementReference,axis,angle): pass def ScaleProfile(self,profileIndex,factor,origin): pass def ScaleSubElement(self,subElementReference,factor,origin): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass AreProfilesConstrained=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get/set if the form's profiles are constrained.
Get: AreProfilesConstrained(self: Form) -> boolSet: AreProfilesConstrained(self: Form) = value"""
 BaseOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieve/set the base offset of the form object. It is only valid for locked form.
Get: BaseOffset(self: Form) -> floatSet: BaseOffset(self: Form) = value""" 
 HasOneOrMoreReferenceProfiles=property(lambda self:object(),lambda self,v:None,lambda self:None) """Tell if the form has any reference profile.
Get: HasOneOrMoreReferenceProfiles(self: Form) -> bool""" 
 HasOpenGeometry=property(lambda self:object(),lambda self,v:None,lambda self:None) """Tell if the form has an open geometry.
Get: HasOpenGeometry(self: Form) -> bool""" 
 IsInXRayMode=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get/set if the form is in X-Ray mode.
Get: IsInXRayMode(self: Form) -> boolSet: IsInXRayMode(self: Form) = value""" 
 PathCurveCount=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number of curves in the form path.
Get: PathCurveCount(self: Form) -> int""" 
 ProfileCount=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number of profiles in the form.
Get: ProfileCount(self: Form) -> int""" 
 TopOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieve/set the top offset of the form object. It is only valid for locked form.
Get: TopOffset(self: Form) -> floatSet: TopOffset(self: Form) = value""" 
class FormArray(APIObject,IDisposable,IEnumerable): def Append(self,item): pass def Clear(self): pass def Dispose(self): pass def ForwardIterator(self): pass def GetEnumerator(self): pass def Insert(self,item,index): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def ReverseIterator(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __getitem__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass def __setitem__(self,*args): pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the array is empty.
Get: IsEmpty(self: FormArray) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of forms that are in the array.
Get: Size(self: FormArray) -> int""" 
class FormArrayIterator(APIObject,IDisposable,IEnumerator): def Dispose(self): pass def MoveNext(self): pass def next(self,*args): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: FormArrayIterator) -> object"""
class FormatOptions(object,IDisposable): def CanHaveUnitSymbol(self,displayUnit=None): pass def CanSuppressLeadingZeros(self,displayUnit=None): pass def CanSuppressSpaces(self,displayUnit=None): pass def CanSuppressTrailingZeros(self,displayUnit=None): pass def CanUsePlusPrefix(self,displayUnit=None): pass def Dispose(self): pass def GetValidUnitSymbols(self,displayUnit=None): pass def IsValidAccuracy(self,*__args): pass def IsValidForUnitType(self,unitType): pass def IsValidUnitSymbol(self,*__args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,*__args): pass def __repr__(self,*args): pass Accuracy=property(lambda self:object(),lambda self,v:None,lambda self:None) """The accuracy to which values will be rounded.
Get: Accuracy(self: FormatOptions) -> floatSet: Accuracy(self: FormatOptions) = value"""
 DisplayUnits=property(lambda self:object(),lambda self,v:None,lambda self:None) """The units and display format used to format values.
Get: DisplayUnits(self: FormatOptions) -> DisplayUnitTypeSet: DisplayUnits(self: FormatOptions) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FormatOptions) -> bool""" 
 RoundingMethod=property(lambda self:object(),lambda self,v:None,lambda self:None) """The method used to round values: round to nearest, round up, or round down.
Get: RoundingMethod(self: FormatOptions) -> RoundingMethodSet: RoundingMethod(self: FormatOptions) = value""" 
 SuppressLeadingZeros=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if leading zeros should be suppressed in feet and fractional inches.
Get: SuppressLeadingZeros(self: FormatOptions) -> boolSet: SuppressLeadingZeros(self: FormatOptions) = value""" 
 SuppressSpaces=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if spaces around the dash should be suppressed in feet and fractional inches.
Get: SuppressSpaces(self: FormatOptions) -> boolSet: SuppressSpaces(self: FormatOptions) = value""" 
 SuppressTrailingZeros=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if trailing zeros after the decimal point should be
   suppressed.Get: SuppressTrailingZeros(self: FormatOptions) -> boolSet: SuppressTrailingZeros(self: FormatOptions) = value""" 
 UnitSymbol=property(lambda self:object(),lambda self,v:None,lambda self:None) """The unit symbol that should be displayed to indicate the units of the value.
Get: UnitSymbol(self: FormatOptions) -> UnitSymbolTypeSet: UnitSymbol(self: FormatOptions) = value""" 
 UseDefault=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether default or custom formatting should be used.
Get: UseDefault(self: FormatOptions) -> boolSet: UseDefault(self: FormatOptions) = value""" 
 UseDigitGrouping=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if digit grouping symbols should be displayed.
Get: UseDigitGrouping(self: FormatOptions) -> boolSet: UseDigitGrouping(self: FormatOptions) = value""" 
 UsePlusPrefix=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if a plus sign prefix should be displayed for positive and zero values.
Get: UsePlusPrefix(self: FormatOptions) -> boolSet: UsePlusPrefix(self: FormatOptions) = value""" 
class FormatStatus(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass All=None Mixed=None None=None value__=Noneclass FormattedText(object,IDisposable): def AsTextRange(self): pass def Dispose(self): pass def Find(self,searchString,startIndex,matchCase,matchWholeWord): pass def GetAllCapsStatus(self,textRange=None): pass def GetBoldStatus(self,textRange=None): pass def GetIndentLevel(self,textRange): pass def GetItalicStatus(self,textRange=None): pass def GetListStartNumber(self,textRange): pass def GetListType(self,textRange): pass def GetMaximumIndentLevel(self): pass def GetMaximumListStartNumber(self): pass def GetMinimumListStartNumber(self): pass def GetPlainText(self,textRange=None): pass def GetSubscriptStatus(self,textRange=None): pass def GetSuperscriptStatus(self,textRange=None): pass def GetUnderlineStatus(self,textRange=None): pass def ReleaseUnmanagedResources(self,*args): pass def SetAllCapsStatus(self,*__args): pass def SetBoldStatus(self,*__args): pass def SetIndentLevel(self,textRange,level): pass def SetItalicStatus(self,*__args): pass def SetListStartNumber(self,textRange,value): pass def SetListType(self,textRange,listType): pass def SetPlainText(self,*__args): pass def SetSubscriptStatus(self,*__args): pass def SetSuperscriptStatus(self,*__args): pass def SetUnderlineStatus(self,*__args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,plainText=None): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FormattedText) -> bool"""
class FormattedTextRun(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass BaselineStyle=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies the style of the text as related to the baseline position.
Get: BaselineStyle(self: FormattedTextRun) -> TextBaselineStyle"""
 Bold=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether this text run uses Bold text.
Get: Bold(self: FormattedTextRun) -> bool""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FormattedTextRun) -> bool""" 
 Italic=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether this text run uses Italic text.
Get: Italic(self: FormattedTextRun) -> bool""" 
 ListStyle=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies the style of a paragraph if the paragraph is a list.
Get: ListStyle(self: FormattedTextRun) -> TextListStyle""" 
 NewLine=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether this text run starts on a new line.
Get: NewLine(self: FormattedTextRun) -> bool""" 
 NewParagraph=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether this text run starts a new paragraph.
Get: NewParagraph(self: FormattedTextRun) -> bool""" 
 TabNumber=property(lambda self:object(),lambda self,v:None,lambda self:None) """For a text run that starts at a tab stop, this value indicates the number of the tab stop.
Get: TabNumber(self: FormattedTextRun) -> int""" 
 Text=property(lambda self:object(),lambda self,v:None,lambda self:None) """The text segment in this text run.
Get: Text(self: FormattedTextRun) -> str""" 
 Underlined=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether this text run uses Underlined text.
Get: Underlined(self: FormattedTextRun) -> bool""" 
class FormatUtils(object): @staticmethod def Format(document,unitType,value): pass __all__=[ 'Format', ]class FormatValueOptions(object,IDisposable): def Dispose(self): pass def GetFormatOptions(self): pass def ReleaseUnmanagedResources(self,*args): pass def SetFormatOptions(self,formatOptions): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass AppendUnitSymbol=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if a unit symbol should be appended regardless of the settings in the FormatOptions.
Get: AppendUnitSymbol(self: FormatValueOptions) -> boolSet: AppendUnitSymbol(self: FormatValueOptions) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: FormatValueOptions) -> bool""" 
class FormUtils(object): @staticmethod def CanBeDissolved(ADoc,elements): pass @staticmethod def DissolveForms(ADoc,elements,BondingPointSet=None): pass __all__=[ 'CanBeDissolved', 'DissolveForms', ]class Frame(object,IDisposable): @staticmethod def CanDefineRevitGeometry(frameOfReference): pass def Dispose(self): pass def IsOrthogonal(self): pass def IsOrthonormal(self): pass def IsRightHanded(self): pass def ReleaseUnmanagedResources(self,*args): pass def Transform(self,trf): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,origin=None,vec1=None,vec2=None,vec3=None): pass def __repr__(self,*args): pass BasisX=property(lambda self:object(),lambda self,v:None,lambda self:None) """The first basis vector of the frame.
Get: BasisX(self: Frame) -> XYZSet: BasisX(self: Frame) = value"""
 BasisY=property(lambda self:object(),lambda self,v:None,lambda self:None) """The second basis vector of the frame.
Get: BasisY(self: Frame) -> XYZSet: BasisY(self: Frame) = value""" 
 BasisZ=property(lambda self:object(),lambda self,v:None,lambda self:None) """The third basis vector of the frame.
Get: BasisZ(self: Frame) -> XYZSet: BasisZ(self: Frame) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: Frame) -> bool""" 
 Origin=property(lambda self:object(),lambda self,v:None,lambda self:None) """The frame's base point.
Get: Origin(self: Frame) -> XYZSet: Origin(self: Frame) = value""" 
class FreeFormElement(GenericForm,IDisposable): def CanOffsetFace(self,face): pass @staticmethod def Create(document,geometry): pass def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def SetFaceOffset(self,face,offset): pass def UpdateSolidGeometry(self,newGeometry): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass GBXMLExportOptions(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass ExportEnergyModelType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The energy model type from which gbXML will be exported.
Get: ExportEnergyModelType(self: GBXMLExportOptions) -> ExportEnergyModelTypeSet: ExportEnergyModelType(self: GBXMLExportOptions) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: GBXMLExportOptions) -> bool""" 
class GBXMLImportOptions(object):class GenericImportOptions(object): RefPoint=property(lambda self:object(),lambda self,v:None,lambda self:None) """Reference point (in Revit) to which the image is going to be inserted.
Get: RefPoint(self: GenericImportOptions) -> XYZSet: RefPoint(self: GenericImportOptions) = value"""
class GeomCombination(CombinableElement,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass AllMembers=property(lambda self:object(),lambda self,v:None,lambda self:None) """All elements that are joined in this geometry combination.
Get: AllMembers(self: GeomCombination) -> CombinableElementArray"""
class GeomCombinationSet(APIObject,IDisposable,IEnumerable): def Clear(self): pass def Contains(self,item): pass def Dispose(self): pass def Erase(self,item): pass def ForwardIterator(self): pass def GetEnumerator(self): pass def Insert(self,item): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def ReverseIterator(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the set is empty.
Get: IsEmpty(self: GeomCombinationSet) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of GeomCombinations that are in the set.
Get: Size(self: GeomCombinationSet) -> int""" 
class GeomCombinationSetIterator(APIObject,IDisposable,IEnumerator): def Dispose(self): pass def MoveNext(self): pass def next(self,*args): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: GeomCombinationSetIterator) -> object"""
class GeometryCreationUtilities(object): @staticmethod def CreateBlendGeometry(firstLoop,secondLoop,vertexPairs,solidOptions=None): pass @staticmethod def CreateExtrusionGeometry(profileLoops,extrusionDir,extrusionDist,solidOptions=None): pass @staticmethod def CreateFixedReferenceSweptGeometry(sweepPath,pathAttachmentCrvIdx,pathAttachmentParam,profileLoops,fixedReferenceDirection,solidOptions=None): pass @staticmethod def CreateLoftGeometry(profileLoops,solidOptions): pass @staticmethod def CreateRevolvedGeometry(coordinateFrame,profileLoops,startAngle,endAngle,solidOptions=None): pass @staticmethod def CreateSweptBlendGeometry(pathCurve,pathParams,profileLoops,vertexPairs,solidOptions=None): pass @staticmethod def CreateSweptGeometry(sweepPath,pathAttachmentCrvIdx,pathAttachmentParam,profileLoops,solidOptions=None): pass __all__=[ 'CreateBlendGeometry', 'CreateExtrusionGeometry', 'CreateFixedReferenceSweptGeometry', 'CreateLoftGeometry', 'CreateRevolvedGeometry', 'CreateSweptBlendGeometry', 'CreateSweptGeometry', ]class GeometryElement(GeometryObject,IDisposable,IEnumerable[GeometryObject],IEnumerable): def Dispose(self): pass def GetBoundingBox(self): pass def GetEnumerator(self): pass def GetTransformed(self,transform): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __contains__(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass MaterialElement=property(lambda self:object(),lambda self,v:None,lambda self:None) """Element describing the material from which this element is composed.
Get: MaterialElement(self: GeometryElement) -> Material"""
class GeometryInstance(GeometryObject,IDisposable): def Dispose(self): pass def GetInstanceGeometry(self,transform=None): pass def GetSymbolGeometry(self,transform=None): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Symbol=property(lambda self:object(),lambda self,v:None,lambda self:None) """The symbol element that this object is referring to.
Get: Symbol(self: GeometryInstance) -> Element"""
 SymbolGeometry=property(lambda self:object(),lambda self,v:None,lambda self:None) """The geometric representation of the symbol which generates this instance.
Get: SymbolGeometry(self: GeometryInstance) -> GeometryElement""" 
 Transform=property(lambda self:object(),lambda self,v:None,lambda self:None) """The affine transformation from the local coordinate space of the symbol into the
coordinate space of the instance.Get: Transform(self: GeometryInstance) -> Transform""" 
class ParameterElement(Element,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def GetDefinition(self): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass GlobalParameter(ParameterElement,IDisposable): def CanChangeReporting(self): pass def CanLabelDimension(self,dimensionId): pass @staticmethod def Create(document,name,datatype): pass def Dispose(self): pass def GetAffectedElements(self): pass def GetAffectedGlobalParameters(self): pass def getBoundingBox(self,*args): pass def GetFormula(self): pass def GetLabeledDimensions(self): pass def GetLabelName(self): pass def GetValue(self): pass def HasValidTypeForReporting(self): pass @staticmethod def IsValidDataType(datatype): pass def IsValidFormula(self,expression): pass def LabelDimension(self,dimensionId): pass def ReleaseUnmanagedResources(self,*args): pass def SetDrivingDimension(self,dimensionId): pass def setElementType(self,*args): pass def SetFormula(self,expression): pass def SetValue(self,value): pass def UnlabelDimension(self,dimensionId): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass IsDrivenByDimension=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether this parameter is driven by a dimension or not.
Get: IsDrivenByDimension(self: GlobalParameter) -> bool"""
 IsDrivenByFormula=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether this parameter is driven by a formula or not.
Get: IsDrivenByFormula(self: GlobalParameter) -> bool""" 
 IsReporting=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether this is a reporting global parameter or not.
Get: IsReporting(self: GlobalParameter) -> boolSet: IsReporting(self: GlobalParameter) = value""" 
class GlobalParametersManager(object,IDisposable): @staticmethod def AreGlobalParametersAllowed(document): pass def Dispose(self): pass @staticmethod def FindByName(document,name): pass @staticmethod def GetAllGlobalParameters(document): pass @staticmethod def GetGlobalParametersOrdered(document): pass @staticmethod def IsUniqueName(document,name): pass @staticmethod def IsValidGlobalParameter(document,parameterId): pass @staticmethod def MoveParameterDownOrder(document,parameterId): pass @staticmethod def MoveParameterUpOrder(document,parameterId): pass def ReleaseUnmanagedResources(self,*args): pass @staticmethod def SortParameters(document,order): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: GlobalParametersManager) -> bool"""
class GradientBackgroundSettings(BackgroundSettings,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass GroundColor=property(lambda self:object(),lambda self,v:None,lambda self:None) """The color of the ground.
Get: GroundColor(self: GradientBackgroundSettings) -> ColorSet: GroundColor(self: GradientBackgroundSettings) = value"""
 HorizonColor=property(lambda self:object(),lambda self,v:None,lambda self:None) """The color of the horizon.
Get: HorizonColor(self: GradientBackgroundSettings) -> ColorSet: HorizonColor(self: GradientBackgroundSettings) = value""" 
 SkyColor=property(lambda self:object(),lambda self,v:None,lambda self:None) """The color of the top of the sky.
Get: SkyColor(self: GradientBackgroundSettings) -> ColorSet: SkyColor(self: GradientBackgroundSettings) = value""" 
class GraphicsStyle(Element,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass GraphicsStyleCategory=property(lambda self:object(),lambda self,v:None,lambda self:None) """The graphics style category.
Get: GraphicsStyleCategory(self: GraphicsStyle) -> Category"""
 GraphicsStyleType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The graphics style type.
Get: GraphicsStyleType(self: GraphicsStyle) -> GraphicsStyleType""" 
class GraphicsStyleType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Cut=None Projection=None value__=Noneclass Grid(DatumPlane,IDisposable): @staticmethod def Create(document,*__args): pass def Dispose(self): pass def getBoundingBox(self,*args): pass def GetExtents(self): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def SetVerticalExtents(self,bottom,top): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Curve=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves an object that represents the geometry of the grid line.
Get: Curve(self: Grid) -> Curve"""
 IsCurved=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies if the grid line is curved or straight.
Get: IsCurved(self: Grid) -> bool""" 
class GridNode(object): @staticmethod def __new__(self,uIndex,vIndex): pass UIndex=property(lambda self:object(),lambda self,v:None,lambda self:None) """The node's index along the U axis.
Get: UIndex(self: GridNode) -> intSet: UIndex(self: GridNode) = value"""
 VIndex=property(lambda self:object(),lambda self,v:None,lambda self:None) """The node's index along the V axis.
Get: VIndex(self: GridNode) -> intSet: VIndex(self: GridNode) = value""" 
class GridNodeLocation(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Boundary=None Exterior=None Interior=None value__=Noneclass GridSegmentDirection(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass NegativeU=None NegativeV=None PositiveU=None PositiveV=None value__=Noneclass GridType(LineAndTextAttrSymbol,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass Group(Element,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def GetMemberIds(self): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def UngroupMembers(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass GroupType=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get or set the type of the group.
Get: GroupType(self: Group) -> GroupTypeSet: GroupType(self: Group) = value"""
 Location=property(lambda self:object(),lambda self,v:None,lambda self:None) """This property is used to find the physical location of a group within project.
Get: Location(self: Group) -> Location""" 
class GroupNode(RenderNode,IDisposable): def Dispose(self): pass def GetSymbolId(self): pass def GetTransform(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass GroupSet(APIObject,IDisposable,IEnumerable): def Clear(self): pass def Contains(self,item): pass def Dispose(self): pass def Erase(self,item): pass def ForwardIterator(self): pass def GetEnumerator(self): pass def Insert(self,item): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def ReverseIterator(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the set is empty.
Get: IsEmpty(self: GroupSet) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of groups that are in the set.
Get: Size(self: GroupSet) -> int""" 
class GroupSetIterator(APIObject,IDisposable,IEnumerator): def Dispose(self): pass def MoveNext(self): pass def next(self,*args): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: GroupSetIterator) -> object"""
class GroupType(ElementType,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Groups=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieve a set of all the groups that have this type.
Get: Groups(self: GroupType) -> GroupSet"""
class HermiteFace(Face,IDisposable): def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass MixedDerivs=property(lambda self:object(),lambda self,v:None,lambda self:None) """Mixed derivatives of the surface.
Get: MixedDerivs(self: HermiteFace) -> IList[XYZ]"""
 Points=property(lambda self:object(),lambda self,v:None,lambda self:None) """Interpolation points of the surface.
Get: Points(self: HermiteFace) -> IList[XYZ]""" 
class HermiteSpline(Curve,IDisposable): @staticmethod def Create(controlPoints,periodic,tangents=None): pass def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass ControlPoints=property(lambda self:object(),lambda self,v:None,lambda self:None) """The control points of the Hermite spline.
Get: ControlPoints(self: HermiteSpline) -> IList[XYZ]Set: ControlPoints(self: HermiteSpline) = value"""
 IsPeriodic=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns whether the Hermite spline is periodic or not.
Get: IsPeriodic(self: HermiteSpline) -> bool""" 
 Parameters=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the params of the Hermite spline.
Get: Parameters(self: HermiteSpline) -> DoubleArray""" 
 Tangents=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the tangents of the Hermite spline.
Get: Tangents(self: HermiteSpline) -> IList[XYZ]""" 
class HermiteSplineTangents(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass EndTangent=property(lambda self:object(),lambda self,v:None,lambda self:None) """The tangent vector at the end of the curve.
Get: EndTangent(self: HermiteSplineTangents) -> XYZSet: EndTangent(self: HermiteSplineTangents) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: HermiteSplineTangents) -> bool""" 
 StartTangent=property(lambda self:object(),lambda self,v:None,lambda self:None) """The tangent vector at the start of the curve.
Get: StartTangent(self: HermiteSplineTangents) -> XYZSet: StartTangent(self: HermiteSplineTangents) = value""" 
class HermiteSurface(Surface,IDisposable): @staticmethod def Create(nU,nV,points,periodicU=None,periodicV=None): pass def Dispose(self): pass def IsValid(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass HiddenLineViewsType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass RasterProcessing=None value__=None VectorProcessing=Noneclass HomeCamera(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,other): pass def __repr__(self,*args): pass BottomAngleOfFieldOfView=property(lambda self:object(),lambda self,v:None,lambda self:None) """The bottom angle of the field of view.
Get: BottomAngleOfFieldOfView(self: HomeCamera) -> float"""
 Center=property(lambda self:object(),lambda self,v:None,lambda self:None) """The zoom or orbit center.
Get: Center(self: HomeCamera) -> XYZ""" 
 EyePosition=property(lambda self:object(),lambda self,v:None,lambda self:None) """The eye position point.
Get: EyePosition(self: HomeCamera) -> XYZ""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: HomeCamera) -> bool""" 
 LeftAngleOfFieldOfView=property(lambda self:object(),lambda self,v:None,lambda self:None) """The left angle of the field of view.
Get: LeftAngleOfFieldOfView(self: HomeCamera) -> float""" 
 OrthogonalProjectionHeight=property(lambda self:object(),lambda self,v:None,lambda self:None) """The height of orthogonal projection view volume.
Get: OrthogonalProjectionHeight(self: HomeCamera) -> float""" 
 OrthogonalProjectionWidth=property(lambda self:object(),lambda self,v:None,lambda self:None) """The width of orthogonal projection view volume.
Get: OrthogonalProjectionWidth(self: HomeCamera) -> float""" 
 Pivot=property(lambda self:object(),lambda self,v:None,lambda self:None) """The pivot point.
Get: Pivot(self: HomeCamera) -> XYZ""" 
 RightAngleOfFieldOfView=property(lambda self:object(),lambda self,v:None,lambda self:None) """The right angle of the field of view.
Get: RightAngleOfFieldOfView(self: HomeCamera) -> float""" 
 TopAngleOfFieldOfView=property(lambda self:object(),lambda self,v:None,lambda self:None) """The top angle of the field of view.
Get: TopAngleOfFieldOfView(self: HomeCamera) -> float""" 
 UpDirection=property(lambda self:object(),lambda self,v:None,lambda self:None) """The up direction vector.
Get: UpDirection(self: HomeCamera) -> XYZ""" 
 ViewId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The id of the view which is associated to this document's Home view orientation.
Get: ViewId(self: HomeCamera) -> ElementId""" 
class HorizontalAlign(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Center=None Left=None Right=None value__=Noneclass HorizontalAlignmentStyle(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Center=None Left=None Right=None value__=Noneclass HorizontalTextAlignment(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Center=None Left=None Right=None value__=Noneclass HostedSweep(HostObject,IDisposable): def AddSegment(self,targetRef): pass def Dispose(self): pass def getBoundingBox(self,*args): pass def GetEndPointParameter(self,targetRef,endIdx): pass def HorizontalFlip(self): pass def ReleaseUnmanagedResources(self,*args): pass def RemoveSegment(self,targetRef): pass def setElementType(self,*args): pass def SetEndPointParameter(self,targetRef,endIdx,param): pass def VerticalFlip(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Angle=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieve/set the angle of the  hosted sweep object relative its references (Unit : Radian).
Get: Angle(self: HostedSweep) -> floatSet: Angle(self: HostedSweep) = value"""
 HorizontalFlipped=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieve the horizontal flip status of the hosted sweep object.
Get: HorizontalFlipped(self: HostedSweep) -> bool""" 
 HorizontalOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieve/set the horizontal offset of the hosted sweep object.
Get: HorizontalOffset(self: HostedSweep) -> floatSet: HorizontalOffset(self: HostedSweep) = value""" 
 Length=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieve the length of the hosted sweep object.
Get: Length(self: HostedSweep) -> float""" 
 VerticalFlipped=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieve the vertical flip status of the hosted sweep object.
Get: VerticalFlipped(self: HostedSweep) -> bool""" 
 VerticalOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieve/set the vertical offset of the hosted sweep object.
Get: VerticalOffset(self: HostedSweep) -> floatSet: VerticalOffset(self: HostedSweep) = value""" 
class HostedSweepType(HostObjAttributes,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass HostObjectUtils(object): @staticmethod def GetBottomFaces(hostObject): pass @staticmethod def GetSideFaces(hostObject,side): pass @staticmethod def GetTopFaces(hostObject): pass __all__=[ 'GetBottomFaces', 'GetSideFaces', 'GetTopFaces', ]class ICentralLockedCallback: def ShouldWaitForLockAvailability(self): pass def __init__(self,*args): passclass IConnector: def __init__(self,*args): pass CoordinateSystem=property(lambda self:object(),lambda self,v:None,lambda self:None) """The coordinate system of the connector.
Get: CoordinateSystem(self: IConnector) -> Transform"""
 Domain=property(lambda self:object(),lambda self,v:None,lambda self:None) """The domain of the connector.
Get: Domain(self: IConnector) -> Domain""" 
 Height=property(lambda self:object(),lambda self,v:None,lambda self:None) """The height of the connector.
Get: Height(self: IConnector) -> float""" 
 Origin=property(lambda self:object(),lambda self,v:None,lambda self:None) """The location of the connector in family document.
Get: Origin(self: IConnector) -> XYZ""" 
 Radius=property(lambda self:object(),lambda self,v:None,lambda self:None) """The radius of the connector.
Get: Radius(self: IConnector) -> float""" 
 Shape=property(lambda self:object(),lambda self,v:None,lambda self:None) """The shape of the connector.
Get: Shape(self: IConnector) -> ConnectorProfileType""" 
 Width=property(lambda self:object(),lambda self,v:None,lambda self:None) """The width of the connector.
Get: Width(self: IConnector) -> float""" 
class IDataConversionMonitor: def GetVerbosity(self): pass def ProcessMessage(self,messageId,messageSeverity,entityIds): pass def __init__(self,*args): passclass IDuplicateTypeNamesHandler: def OnDuplicateTypeNamesFound(self,args): pass def __init__(self,*args): passclass IExportContext: def Finish(self): pass def IsCanceled(self): pass def OnElementBegin(self,elementId): pass def OnElementEnd(self,elementId): pass def OnFaceBegin(self,node): pass def OnFaceEnd(self,node): pass def OnInstanceBegin(self,node): pass def OnInstanceEnd(self,node): pass def OnLight(self,node): pass def OnLinkBegin(self,node): pass def OnLinkEnd(self,node): pass def OnMaterial(self,node): pass def OnPolymesh(self,node): pass def OnRPC(self,node): pass def OnViewBegin(self,node): pass def OnViewEnd(self,elementId): pass def Start(self): pass def __init__(self,*args): passclass IExtension: def __init__(self,*args): passclass IExternalDBApplication: def OnShutdown(self,application): pass def OnStartup(self,application): pass def __init__(self,*args): passclass IExternalResourceServer(IExternalServer): def AreSameResources(self,reference1,reference2): pass def GetIconPath(self): pass def GetInformationLink(self): pass def GetInSessionPath(self,reference,originalDisplayPath): pass def GetResourceVersionStatus(self,reference): pass def GetShortName(self): pass def GetTypeSpecificServerOperations(self,extensions): pass def IsResourceWellFormed(self,extRef): pass def LoadResource(self,loadRequestId,resourceType,desiredResource,loadContext,loadResults): pass def SetupBrowserData(self,browseData): pass def SupportsExternalResourceType(self,type): pass def __init__(self,*args): passclass IFailuresPreprocessor: def PreprocessFailures(self,failuresAccessor): pass def __init__(self,*args): passclass IFailuresProcessor: def Dismiss(self,document): pass def ProcessFailures(self,data): pass def __init__(self,*args): passclass IFamilyLoadOptions: def OnFamilyFound(self,familyInUse,overwriteParameterValues): pass def OnSharedFamilyFound(self,sharedFamily,familyInUse,source,overwriteParameterValues): pass def __init__(self,*args): passclass IFCExportOptions(object,IDisposable): def AddOption(self,name,value): pass def Assign(self,sourceOptions): pass def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,from=None): pass def __repr__(self,*args): pass ExportBaseQuantities=property(lambda self:object(),lambda self,v:None,lambda self:None) """Option to export IFC standard quantities currently supported by Revit.
Get: ExportBaseQuantities(self: IFCExportOptions) -> boolSet: ExportBaseQuantities(self: IFCExportOptions) = value"""
 FamilyMappingFile=property(lambda self:object(),lambda self,v:None,lambda self:None) """Path to a file containing family mapping.
Get: FamilyMappingFile(self: IFCExportOptions) -> strSet: FamilyMappingFile(self: IFCExportOptions) = value""" 
 FileVersion=property(lambda self:object(),lambda self,v:None,lambda self:None) """IFC file version.
Get: FileVersion(self: IFCExportOptions) -> IFCVersionSet: FileVersion(self: IFCExportOptions) = value""" 
 FilterViewId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Id of the view whose visibility settings will govern the contents in the exported IFC file.
Get: FilterViewId(self: IFCExportOptions) -> ElementIdSet: FilterViewId(self: IFCExportOptions) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: IFCExportOptions) -> bool""" 
 SpaceBoundaryLevel=property(lambda self:object(),lambda self,v:None,lambda self:None) """Level of space boundaries exported in IFC file.
Get: SpaceBoundaryLevel(self: IFCExportOptions) -> intSet: SpaceBoundaryLevel(self: IFCExportOptions) = value""" 
 WallAndColumnSplitting=property(lambda self:object(),lambda self,v:None,lambda self:None) """Option to allow division of multi-level walls and columns by levels.
Get: WallAndColumnSplitting(self: IFCExportOptions) -> boolSet: WallAndColumnSplitting(self: IFCExportOptions) = value""" 
class IFCVersion(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Default=None IFC2x2=None IFC2x3=None IFC2x3BFM=None IFC2x3CV2=None IFC2x3FM=None IFC4=None IFC4DTV=None IFC4RV=None IFCBCA=None IFCCOBIE=None value__=Noneclass IGetLocalPathForOpenCallback: def GetLocalPathForOpen(self,desiredResource): pass def __init__(self,*args): passclass ImageBackgroundSettings(BackgroundSettings,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass BackgroundImageFit=property(lambda self:object(),lambda self,v:None,lambda self:None) """The background image fit type.
Get: BackgroundImageFit(self: ImageBackgroundSettings) -> BackgroundImageFitSet: BackgroundImageFit(self: ImageBackgroundSettings) = value"""
 FilePath=property(lambda self:object(),lambda self,v:None,lambda self:None) """File path of the image for the rendering background.
Get: FilePath(self: ImageBackgroundSettings) -> strSet: FilePath(self: ImageBackgroundSettings) = value""" 
 OffsetHeight=property(lambda self:object(),lambda self,v:None,lambda self:None) """The vertical offset of the rendering image to the rendering region.
Get: OffsetHeight(self: ImageBackgroundSettings) -> floatSet: OffsetHeight(self: ImageBackgroundSettings) = value""" 
 OffsetWidth=property(lambda self:object(),lambda self,v:None,lambda self:None) """The horizontal offset of the rendering image to the rendering region.
Get: OffsetWidth(self: ImageBackgroundSettings) -> floatSet: OffsetWidth(self: ImageBackgroundSettings) = value""" 
class ImageExportOptions(object,IDisposable): def Dispose(self): pass @staticmethod def GetFileName(aDoc,dbViewId): pass def GetViewsAndSheets(self): pass @staticmethod def IsValidFileName(filePath): pass @staticmethod def IsValidForSaveToProjectAsImage(options,doc): pass def ReleaseUnmanagedResources(self,*args): pass def SetViewsAndSheets(self,viewsAndSheets): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass ExportRange=property(lambda self:object(),lambda self,v:None,lambda self:None) """The export range defining which view(s) will be exported.
Get: ExportRange(self: ImageExportOptions) -> ExportRangeSet: ExportRange(self: ImageExportOptions) = value"""
 FilePath=property(lambda self:object(),lambda self,v:None,lambda self:None) """The file name and path for the exported file.
Get: FilePath(self: ImageExportOptions) -> strSet: FilePath(self: ImageExportOptions) = value""" 
 FitDirection=property(lambda self:object(),lambda self,v:None,lambda self:None) """The fit direction.  Used only if ZoomType is FitToPage.
Get: FitDirection(self: ImageExportOptions) -> FitDirectionTypeSet: FitDirection(self: ImageExportOptions) = value""" 
 HLRandWFViewsFileType=property(lambda self:object(),lambda self,v:None,lambda self:None) """File type for exported HLR and wireframe views.
Get: HLRandWFViewsFileType(self: ImageExportOptions) -> ImageFileTypeSet: HLRandWFViewsFileType(self: ImageExportOptions) = value""" 
 ImageResolution=property(lambda self:object(),lambda self,v:None,lambda self:None) """The image resolution in dots per inch.
Get: ImageResolution(self: ImageExportOptions) -> ImageResolutionSet: ImageResolution(self: ImageExportOptions) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ImageExportOptions) -> bool""" 
 PixelSize=property(lambda self:object(),lambda self,v:None,lambda self:None) """The pixel size of an image in one direction.  Used only if ZoomType is FitToPage.
Get: PixelSize(self: ImageExportOptions) -> intSet: PixelSize(self: ImageExportOptions) = value""" 
 ShadowViewsFileType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The file type for exported shadow views.
Get: ShadowViewsFileType(self: ImageExportOptions) -> ImageFileTypeSet: ShadowViewsFileType(self: ImageExportOptions) = value""" 
 ShouldCreateWebSite=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether or not to create a web site with a page for each export.  Used only when ExportRange is SetOfViews.
Get: ShouldCreateWebSite(self: ImageExportOptions) -> boolSet: ShouldCreateWebSite(self: ImageExportOptions) = value""" 
 ViewName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The name of the view to be created.
Get: ViewName(self: ImageExportOptions) -> strSet: ViewName(self: ImageExportOptions) = value""" 
 Zoom=property(lambda self:object(),lambda self,v:None,lambda self:None) """The value for Zoom (as a percentage).   Used only when ZoomType is Zoom.
Get: Zoom(self: ImageExportOptions) -> intSet: Zoom(self: ImageExportOptions) = value""" 
 ZoomType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The zoom type, which defines how the image size is determined.
Get: ZoomType(self: ImageExportOptions) -> ZoomFitTypeSet: ZoomType(self: ImageExportOptions) = value""" 
class ImageFileType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass BMP=None JPEGLossless=None JPEGMedium=None JPEGSmallest=None PNG=None TARGA=None TIFF=None value__=Noneclass ImageImportOptions(GenericImportOptions): Placement=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies which point of the image will be aligned to the placement point Autodesk.Revit.DB.GenericImportOptions.RefPoint.
Get: Placement(self: ImageImportOptions) -> BoxPlacementSet: Placement(self: ImageImportOptions) = value"""
 Resolution=property(lambda self:object(),lambda self,v:None,lambda self:None) """Resolution to use (in dpi) for the image to be imported.
Get: Resolution(self: ImageImportOptions) -> UInt16Set: Resolution(self: ImageImportOptions) = value""" 
class ImageResolution(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass DPI_150=None DPI_300=None DPI_600=None DPI_72=None value__=Noneclass ImageType(ElementType,IDisposable): @staticmethod def Create(document,imagePath): pass def Dispose(self): pass def getBoundingBox(self,*args): pass def GetImage(self): pass def IsLoadedFromFile(self): pass def ReleaseUnmanagedResources(self,*args): pass def Reload(self): pass def ReloadFrom(self,imagePath): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Path=property(lambda self:object(),lambda self,v:None,lambda self:None) """The original image file path used if the image is loaded from a disk file, or empty if the image
   is generated by Revit internally, such as the images created by "Save to Project as Image".Get: Path(self: ImageType) -> str"""
class View(Element,IDisposable): def AddFilter(self,filterElementId): pass def AllowsAnalysisDisplay(self): pass def ApplyViewTemplateParameters(self,otherView): pass def AreGraphicsOverridesAllowed(self): pass def CanCategoryBeHidden(self,elementId): pass def CanCategoryBeHiddenTemporary(self,elementId): pass def CanEnableTemporaryViewPropertiesMode(self): pass def CanModifyDetailLevel(self): pass def CanModifyDisplayStyle(self): pass def CanModifyViewDiscipline(self): pass def CanUseDepthCueing(self): pass def CanUseTemporaryVisibilityModes(self): pass def CanViewBeDuplicated(self,duplicateOption): pass def ConvertTemporaryHideIsolateToPermanent(self): pass def ConvertToIndependent(self): pass def DisableTemporaryViewMode(self,mode): pass def Dispose(self): pass def Duplicate(self,duplicateOption): pass def EnableRevealHiddenMode(self): pass def EnableTemporaryViewPropertiesMode(self,viewTemplateId): pass def GetBackground(self): pass def getBoundingBox(self,*args): pass def GetCategoryHidden(self,categoryId): pass def GetCategoryOverrides(self,categoryId): pass def GetCropRegionShapeManager(self): pass @staticmethod def GetCropRegionShapeManagerForReferenceCallout(doc,callout): pass def GetDependentViewIds(self): pass def GetDepthCueing(self): pass def GetElementOverrides(self,elementId): pass def GetFilterOverrides(self,filterElementId): pass def GetFilters(self): pass def GetFilterVisibility(self,filterElementId): pass def GetNonControlledTemplateParameterIds(self): pass def GetPointCloudOverrides(self): pass def GetPrimaryViewId(self): pass def GetReferenceCallouts(self): pass def GetReferenceElevations(self): pass def GetReferenceSections(self): pass def GetSketchyLines(self): pass def GetTemplateParameterIds(self): pass def GetTemporaryViewPropertiesId(self): pass def GetTemporaryViewPropertiesName(self): pass def GetViewDisplayModel(self): pass def GetVisibility(self,category): pass def GetWorksetVisibility(self,worksetId): pass def GetWorksharingDisplayMode(self): pass def HasDetailLevel(self): pass def HasDisplayStyle(self): pass def HasViewDiscipline(self): pass def HideActiveWorkPlane(self): pass def HideCategoriesTemporary(self,elementIds): pass def HideCategoryTemporary(self,elementId): pass def HideElements(self,elementIdSet): pass def HideElementsTemporary(self,elementIdSet): pass def HideElementTemporary(self,elementId): pass def IsCategoryOverridable(self,categoryId): pass def IsElementVisibleInTemporaryViewMode(self,mode,id): pass def IsFilterApplied(self,filterElementId): pass def IsInTemporaryViewMode(self,mode): pass def IsolateCategoriesTemporary(self,elementIds): pass def IsolateCategoryTemporary(self,elementId): pass def IsolateElementsTemporary(self,elementIds): pass def IsolateElementTemporary(self,elementId): pass def IsTemporaryHideIsolateActive(self): pass def IsTemporaryViewPropertiesModeEnabled(self): pass @staticmethod def IsValidViewScale(viewScale): pass def IsValidViewTemplate(self,templateId): pass def IsWorksetVisible(self,worksetId): pass def Print(self,*__args): pass def ReleaseUnmanagedResources(self,*args): pass def RemoveFilter(self,filterElementId): pass def SetBackground(self,background): pass def SetCategoryHidden(self,categoryId,hide): pass def SetCategoryOverrides(self,categoryId,overrideGraphicSettings): pass def SetDepthCueing(self,depthCueing): pass def SetElementOverrides(self,elementId,overrideGraphicSettings): pass def setElementType(self,*args): pass def SetFilterOverrides(self,filterElementId,overrideGraphicSettings): pass def SetFilterVisibility(self,filterElementId,visibility): pass def SetNonControlledTemplateParameterIds(self,newSet): pass def SetSketchyLines(self,sketchyLines): pass def SetViewDisplayModel(self,viewDisplayModel): pass def SetVisibility(self,category,visible): pass def SetWorksetVisibility(self,worksetId,visible): pass def SetWorksharingDisplayMode(self,displayMode): pass def ShowActiveWorkPlane(self): pass def SupportsRevealConstraints(self): pass def SupportsWorksharingDisplayMode(self,mode): pass def UnhideElements(self,elementIdSet): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass AnalysisDisplayStyleId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Element id of Analysis Display Style associated with the view.
Get: AnalysisDisplayStyleId(self: View) -> ElementIdSet: AnalysisDisplayStyleId(self: View) = value"""
 AreAnalyticalModelCategoriesHidden=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if analytical model categories are currently hidden in the view.
Get: AreAnalyticalModelCategoriesHidden(self: View) -> boolSet: AreAnalyticalModelCategoriesHidden(self: View) = value""" 
 AreAnnotationCategoriesHidden=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if annotation categories are currently hidden in the view.
Get: AreAnnotationCategoriesHidden(self: View) -> boolSet: AreAnnotationCategoriesHidden(self: View) = value""" 
 AreImportCategoriesHidden=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if import categories are currently hidden in the view.
Get: AreImportCategoriesHidden(self: View) -> boolSet: AreImportCategoriesHidden(self: View) = value""" 
 AreModelCategoriesHidden=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if model categories are currently hidden in the view.
Get: AreModelCategoriesHidden(self: View) -> boolSet: AreModelCategoriesHidden(self: View) = value""" 
 ArePointCloudsHidden=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if point clouds are currently hidden in the view.
Get: ArePointCloudsHidden(self: View) -> boolSet: ArePointCloudsHidden(self: View) = value""" 
 AssociatedAssemblyInstanceId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Id of the assembly instance that owns the assembly view.
Get: AssociatedAssemblyInstanceId(self: View) -> ElementId""" 
 CanBePrinted=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test whether the view can be printed.
Get: CanBePrinted(self: View) -> bool""" 
 CropBox=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Crop Box applied to the view, or an outline encompassing the crop region applied to the view.
Get: CropBox(self: View) -> BoundingBoxXYZSet: CropBox(self: View) = value""" 
 CropBoxActive=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether or not the Crop Box/Region is active for the view.
Get: CropBoxActive(self: View) -> boolSet: CropBoxActive(self: View) = value""" 
 CropBoxVisible=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether or not the Crop Box/Region is visible for the view.
Get: CropBoxVisible(self: View) -> boolSet: CropBoxVisible(self: View) = value""" 
 DetailLevel=property(lambda self:object(),lambda self,v:None,lambda self:None) """The detail level of this view.
Get: DetailLevel(self: View) -> ViewDetailLevelSet: DetailLevel(self: View) = value""" 
 Discipline=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Discipline of the view.
Get: Discipline(self: View) -> ViewDisciplineSet: Discipline(self: View) = value""" 
 DisplayStyle=property(lambda self:object(),lambda self,v:None,lambda self:None) """The DisplayStyle of the view.
   Returns DisplayStyle.Wireframe if the view has no display style.Get: DisplayStyle(self: View) -> DisplayStyleSet: DisplayStyle(self: View) = value""" 
 GenLevel=property(lambda self:object(),lambda self,v:None,lambda self:None) """The level for the view.
Get: GenLevel(self: View) -> Level""" 
 IsAssemblyView=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the view is assembly view.
Get: IsAssemblyView(self: View) -> bool""" 
 IsTemplate=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test whether the view is a view template.
Get: IsTemplate(self: View) -> bool""" 
 Origin=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the origin of the screen.
Get: Origin(self: View) -> XYZ""" 
 Outline=property(lambda self:object(),lambda self,v:None,lambda self:None) """The bounds of the view in paper space (in inches).
Get: Outline(self: View) -> BoundingBoxUV""" 
 PartsVisibility=property(lambda self:object(),lambda self,v:None,lambda self:None) """The visibility setting for parts in this view.
Get: PartsVisibility(self: View) -> PartsVisibilitySet: PartsVisibility(self: View) = value""" 
 RevealConstraintsMode=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether the Reveal Constraints mode is activated in the view.
Get: RevealConstraintsMode(self: View) -> boolSet: RevealConstraintsMode(self: View) = value""" 
 RightDirection=property(lambda self:object(),lambda self,v:None,lambda self:None) """The direction towards the right side of the screen.
Get: RightDirection(self: View) -> XYZ""" 
 Scale=property(lambda self:object(),lambda self,v:None,lambda self:None) """The scale of the view.
Get: Scale(self: View) -> intSet: Scale(self: View) = value""" 
 ShadowIntensity=property(lambda self:object(),lambda self,v:None,lambda self:None) """The intesity of cast shadows - 0 = no shadows, 100 = black.
Get: ShadowIntensity(self: View) -> intSet: ShadowIntensity(self: View) = value""" 
 SketchPlane=property(lambda self:object(),lambda self,v:None,lambda self:None) """The sketch plane assigned to the view for model curve creation.
Get: SketchPlane(self: View) -> SketchPlaneSet: SketchPlane(self: View) = value""" 
 SunAndShadowSettings=property(lambda self:object(),lambda self,v:None,lambda self:None) """The sun and shadow settings assigned to the view for shadow calculation and rendering.
Get: SunAndShadowSettings(self: View) -> SunAndShadowSettings""" 
 SunlightIntensity=property(lambda self:object(),lambda self,v:None,lambda self:None) """The intensity of the simulated (directional) sunlight.  0 = no directional light; maximum value is 100.
Get: SunlightIntensity(self: View) -> intSet: SunlightIntensity(self: View) = value""" 
 TemporaryViewModes=property(lambda self:object(),lambda self,v:None,lambda self:None) """Data of temporary view modes associated with this view.
Get: TemporaryViewModes(self: View) -> TemporaryViewModes""" 
 Title=property(lambda self:object(),lambda self,v:None,lambda self:None) """The view title. This consists of the view name plus other modifiers, such as the view type,
   sheet number, area scheme, and/or assembly type, depending on the specifics of the view.Get: Title(self: View) -> str""" 
 UpDirection=property(lambda self:object(),lambda self,v:None,lambda self:None) """The direction towards the top of the screen.
Get: UpDirection(self: View) -> XYZ""" 
 ViewDirection=property(lambda self:object(),lambda self,v:None,lambda self:None) """The direction towards the viewer.
Get: ViewDirection(self: View) -> XYZ""" 
 ViewName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The name of the view.
Get: ViewName(self: View) -> strSet: ViewName(self: View) = value""" 
 ViewTemplateId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The id of the template view that controls this view's parameters.
Get: ViewTemplateId(self: View) -> ElementIdSet: ViewTemplateId(self: View) = value""" 
 ViewType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The type of the view.
Get: ViewType(self: View) -> ViewType""" 
class ViewDrafting(View,IDisposable): @staticmethod def Create(document,viewFamilyTypeId): pass def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass ImageView(ViewDrafting,IDisposable): @staticmethod def Create(document,imageFileName): pass def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass ImageInstanceId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Id of the image in the view.
Get: ImageInstanceId(self: ImageView) -> ElementId"""
class IModelExportContext(IExportContext): def OnCurve(self,node): pass def OnLineSegment(self,segment): pass def OnPoint(self,node): pass def OnPolyline(self,node): pass def OnPolylineSegments(self,segments): pass def OnText(self,node): pass def __init__(self,*args): passclass ImportColorMode(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass BlackAndWhite=None Inverted=None Preserved=None value__=Noneclass ImportExportFileFormat(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Civil3D=None DGN=None DWF=None DWFX=None DWG=None DXF=None FBX=None GBXML=None IFC=None Image=None Inventor=None NWC=None SAT=None value__=Noneclass ImportInstance(Instance,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def GetVisibility(self): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def SetVisibility(self,visibility): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass IsLinked=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies whether this instance is a linked object rather than imported one.
Get: IsLinked(self: ImportInstance) -> bool"""
class ImportPlacement(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Centered=None Origin=None Shared=None Site=None value__=Noneclass ImportUnit(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Centimeter=None Custom=None Decimeter=None Default=None Foot=None Inch=None Meter=None Millimeter=None value__=Noneclass INavisworksExporter(IExternalServer): def Export(self,document,folder,name,options): pass def ValidateExportOptions(self,document,folder,name,options,exceptionMessage): pass def __init__(self,*args): passclass IndependentTag(Element,IDisposable): def CanLeaderEndConditionBeAssigned(self,leaderEndCondition): pass def Dispose(self): pass def getBoundingBox(self,*args): pass def GetTaggedLocalElement(self): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass HasLeader=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether the tag has a leader or not.
Get: HasLeader(self: IndependentTag) -> boolSet: HasLeader(self: IndependentTag) = value"""
 IsMaterialTag=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies if it is a material tag or not.
Get: IsMaterialTag(self: IndependentTag) -> bool""" 
 IsMulticategoryTag=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies if it is a multi-category tag or not.
Get: IsMulticategoryTag(self: IndependentTag) -> bool""" 
 IsOrphaned=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies if the tag is orphaned or not.
Get: IsOrphaned(self: IndependentTag) -> bool""" 
 LeaderElbow=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the position of the elbow of leader.
Get: LeaderElbow(self: IndependentTag) -> XYZSet: LeaderElbow(self: IndependentTag) = value""" 
 LeaderEnd=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the position of the end of leader.
Get: LeaderEnd(self: IndependentTag) -> XYZSet: LeaderEnd(self: IndependentTag) = value""" 
 LeaderEndCondition=property(lambda self:object(),lambda self,v:None,lambda self:None) """The leader end condition of the tag.
Get: LeaderEndCondition(self: IndependentTag) -> LeaderEndConditionSet: LeaderEndCondition(self: IndependentTag) = value""" 
 MultiReferenceAnnotationId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The multi-reference annotation which owns this tag.
Get: MultiReferenceAnnotationId(self: IndependentTag) -> ElementId""" 
 TaggedElementId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The LinkElementId of the tagged element.
Get: TaggedElementId(self: IndependentTag) -> LinkElementId""" 
 TaggedLocalElementId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The id of the tagged local element if any.
Get: TaggedLocalElementId(self: IndependentTag) -> ElementId""" 
 TagHeadPosition=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the position of the head of tag.
Get: TagHeadPosition(self: IndependentTag) -> XYZSet: TagHeadPosition(self: IndependentTag) = value""" 
 TagOrientation=property(lambda self:object(),lambda self,v:None,lambda self:None) """The tag orientation of the tag.
Get: TagOrientation(self: IndependentTag) -> TagOrientationSet: TagOrientation(self: IndependentTag) = value""" 
 TagText=property(lambda self:object(),lambda self,v:None,lambda self:None) """The text associated with the tag. If there are several strings assiciated with the tag, the strings will be returned concatenated.
Get: TagText(self: IndependentTag) -> str""" 
class InSessionPrintSetting(object,IPrintSetting,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass PrintParameters=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the Parameters of Print Setup.
Get: PrintParameters(self: InSessionPrintSetting) -> PrintParameters"""
class InSessionViewSheetSet(object,IViewSheetSet,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass Views=property(lambda self:object(),lambda self,v:None,lambda self:None) """The views.
Get: Views(self: InSessionViewSheetSet) -> ViewSetSet: Views(self: InSessionViewSheetSet) = value"""
class InstanceBinding(ElementBinding,IDisposable): def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,categories=None): passclass InstanceNode(GroupNode,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass InstanceVoidCutUtils(object): @staticmethod def AddInstanceVoidCut(document,element,cuttingInstance): pass @staticmethod def CanBeCutWithVoid(element): pass @staticmethod def GetCuttingVoidInstances(element): pass @staticmethod def GetElementsBeingCut(cuttingInstance): pass @staticmethod def InstanceVoidCutExists(element,cuttingInstance): pass @staticmethod def IsVoidInstanceCuttingElement(element): pass @staticmethod def RemoveInstanceVoidCut(document,element,cuttingInstance): pass __all__=[ 'AddInstanceVoidCut', 'CanBeCutWithVoid', 'GetCuttingVoidInstances', 'GetElementsBeingCut', 'InstanceVoidCutExists', 'IsVoidInstanceCuttingElement', 'RemoveInstanceVoidCut', ]class MEPCurve(HostObject,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass ConnectorManager=property(lambda self:object(),lambda self,v:None,lambda self:None) """The connector manager of this MEP curve.
Get: ConnectorManager(self: MEPCurve) -> ConnectorManager"""
 Diameter=property(lambda self:object(),lambda self,v:None,lambda self:None) """The diameter of the MEP curve.
Get: Diameter(self: MEPCurve) -> float""" 
 Height=property(lambda self:object(),lambda self,v:None,lambda self:None) """The height of the MEP curve.
Get: Height(self: MEPCurve) -> float""" 
 LevelOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) """The offset of the MEP curve.
Get: LevelOffset(self: MEPCurve) -> floatSet: LevelOffset(self: MEPCurve) = value""" 
 MEPSystem=property(lambda self:object(),lambda self,v:None,lambda self:None) """The system of the MEP curve.
Get: MEPSystem(self: MEPCurve) -> MEPSystem""" 
 ReferenceLevel=property(lambda self:object(),lambda self,v:None,lambda self:None) """The reference level of the MEP curve.
Get: ReferenceLevel(self: MEPCurve) -> LevelSet: ReferenceLevel(self: MEPCurve) = value""" 
 Width=property(lambda self:object(),lambda self,v:None,lambda self:None) """The width of the MEP curve.
Get: Width(self: MEPCurve) -> float""" 
class InsulationLiningBase(MEPCurve,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass @staticmethod def GetInsulationIds(document,elemId): pass @staticmethod def GetLiningIds(document,elemId): pass @staticmethod def IsValidThickness(thickness): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass HostElementId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The id of the host element for the insulation or lining element.
Get: HostElementId(self: InsulationLiningBase) -> ElementId"""
 Thickness=property(lambda self:object(),lambda self,v:None,lambda self:None) """Thickness of the insulation or lining element.
Get: Thickness(self: InsulationLiningBase) -> floatSet: Thickness(self: InsulationLiningBase) = value""" 
class IntegerParameterValue(ParameterValue,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,value=None): pass Value=property(lambda self:object(),lambda self,v:None,lambda self:None) """The stored value
Get: Value(self: IntegerParameterValue) -> intSet: Value(self: IntegerParameterValue) = value"""
class IntegerRange(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass High=property(lambda self:object(),lambda self,v:None,lambda self:None) """The upper limit of the range
Get: High(self: IntegerRange) -> int"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: IntegerRange) -> bool""" 
 Low=property(lambda self:object(),lambda self,v:None,lambda self:None) """The lower limit of the range
Get: Low(self: IntegerRange) -> int""" 
class InternalDefinition(Definition,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def SetAllowVaryBetweenGroups(self,document,allowVaryBetweenGroups): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass BuiltInParameter=property(lambda self:object(),lambda self,v:None,lambda self:None) """Tests whether this definition identifies a built-in parameter or not.
Get: BuiltInParameter(self: InternalDefinition) -> BuiltInParameter"""
 Id=property(lambda self:object(),lambda self,v:None,lambda self:None) """The id of the parameter.
Get: Id(self: InternalDefinition) -> ElementId""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: InternalDefinition) -> bool""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """The user-visible name for the parameter.
Get: Name(self: InternalDefinition) -> str""" 
 ParameterGroup=property(lambda self:object(),lambda self,v:None,lambda self:None) """Id of a built-in parameter group to which the parameter defined by this definition belongs.
Get: ParameterGroup(self: InternalDefinition) -> BuiltInParameterGroupSet: ParameterGroup(self: InternalDefinition) = value""" 
 ParameterType=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the user-visible interpretation of the parameter data.
Get: ParameterType(self: InternalDefinition) -> ParameterType""" 
 VariesAcrossGroups=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether or not the parameter values can vary across group members.
Get: VariesAcrossGroups(self: InternalDefinition) -> bool""" 
 Visible=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the parameter is visible in the Autodesk Revit user interface.
Get: Visible(self: InternalDefinition) -> bool""" 
class InternalDefinitions(Definitions,IEnumerable[Definition],IEnumerable,IDisposable): def Dispose(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): passclass IntersectionResult(APIObject,IDisposable): def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Distance=property(lambda self:object(),lambda self,v:None,lambda self:None) """Distance from the original object to located point.
Get: Distance(self: IntersectionResult) -> float"""
 EdgeObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Edge of the face close to the point of intersection.
Get: EdgeObject(self: IntersectionResult) -> Edge""" 
 EdgeParameter=property(lambda self:object(),lambda self,v:None,lambda self:None) """Parameter of a point on the edge closest to the point of intersection.
Get: EdgeParameter(self: IntersectionResult) -> float""" 
 Parameter=property(lambda self:object(),lambda self,v:None,lambda self:None) """1d parameter of the point of intersection.
Get: Parameter(self: IntersectionResult) -> float""" 
 UVPoint=property(lambda self:object(),lambda self,v:None,lambda self:None) """2d (or two 1d) parameters of the point of intersection.
Get: UVPoint(self: IntersectionResult) -> UV""" 
 XYZPoint=property(lambda self:object(),lambda self,v:None,lambda self:None) """Point of intersection in local 3d coordinates.
Get: XYZPoint(self: IntersectionResult) -> XYZ""" 
class IntersectionResultArray(APIObject,IDisposable,IEnumerable): def Append(self,item): pass def Clear(self): pass def Dispose(self): pass def ForwardIterator(self): pass def GetEnumerator(self): pass def Insert(self,item,index): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def ReverseIterator(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __getitem__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass def __setitem__(self,*args): pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the array is empty.
Get: IsEmpty(self: IntersectionResultArray) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of objects that are in the array.
Get: Size(self: IntersectionResultArray) -> int""" 
class IntersectionResultArrayIterator(APIObject,IDisposable,IEnumerator): def Dispose(self): pass def MoveNext(self): pass def next(self,*args): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: IntersectionResultArrayIterator) -> object"""
class IOnLocalLinkSharedCoordinatesSavedCallback: def OnLocalLinkSharedCoordinatesSaved(self,changedResource): pass def __init__(self,*args): passclass IPerformanceAdviserRule: def ExecuteElementCheck(self,document,element): pass def FinalizeCheck(self,document): pass def GetDescription(self): pass def GetElementFilter(self,document): pass def GetName(self): pass def InitCheck(self,document): pass def WillCheckElements(self): pass def __init__(self,*args): passclass IPhotoRenderContext(IExportContext): def __init__(self,*args): passclass IPrintSetting: def __init__(self,*args): pass PrintParameters=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the Parameters of Print Setup.
Get: PrintParameters(self: IPrintSetting) -> PrintParameters"""
class ISaveSharedCoordinatesCallback: def GetSaveModifiedLinksOption(self,link): pass def __init__(self,*args): passclass ISaveSharedCoordinatesCallbackForUnloadLocally: def GetSaveModifiedLinksOptionForUnloadLocally(self,link): pass def __init__(self,*args): passclass ITransactionFinalizer: def OnCommitted(self,document,strTransactionName): pass def OnRolledBack(self,document,strTransactionName): pass def __init__(self,*args): passclass ITransientElementMaker: def Execute(self): pass def __init__(self,*args): passclass IUpdater: def Execute(self,data): pass def GetAdditionalInformation(self): pass def GetChangePriority(self): pass def GetUpdaterId(self): pass def GetUpdaterName(self): pass def __init__(self,*args): passclass IViewSheetSet: def __init__(self,*args): pass Views=property(lambda self:object(),lambda self,v:None,lambda self:None) """The views.
Get: Views(self: IViewSheetSet) -> ViewSetSet: Views(self: IViewSheetSet) = value"""
class JoinGeometryUtils(object): @staticmethod def AreElementsJoined(document,firstElement,secondElement): pass @staticmethod def GetJoinedElements(document,element): pass @staticmethod def IsCuttingElementInJoin(document,firstElement,secondElement): pass @staticmethod def JoinGeometry(document,firstElement,secondElement): pass @staticmethod def SwitchJoinOrder(document,firstElement,secondElement): pass @staticmethod def UnjoinGeometry(document,firstElement,secondElement): pass __all__=[ 'AreElementsJoined', 'GetJoinedElements', 'IsCuttingElementInJoin', 'JoinGeometry', 'SwitchJoinOrder', 'UnjoinGeometry', ]class JoinType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Abut=None Extension=None Miter=None None=None SquareOff=None value__=Noneclass JunctionType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Tap=None Tee=None value__=Noneclass KeyBasedTreeEntriesIterator(object,IEnumerator[KeyBasedTreeEntry],IDisposable,IEnumerator): def Dispose(self): pass def IsDone(self): pass def MoveNext(self): pass def next(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __contains__(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass def __repr__(self,*args): pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the item at the current position of the iterator.
Get: Current(self: KeyBasedTreeEntriesIterator) -> KeyBasedTreeEntry"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: KeyBasedTreeEntriesIterator) -> bool""" 
class KeyBasedTreeEntriesLoadContent(ExternalResourceLoadContent,IDisposable): def AddEntry(self,entry): pass def BuildEntries(self): pass def CanAddEntry(self,entry): pass def Dispose(self): pass def GetEntries(self): pass def GetLoadResults(self): pass @staticmethod def IsEntriesBuilt(content): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass KeyBasedTreeEntriesLoadResults(object,IDisposable): def Dispose(self): pass def GetFailureMessages(self): pass def GetFileReadErrors(self): pass def GetFileSyntaxErrors(self): pass def GetKeyBasedTreeEntryErrors(self,type=None): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: KeyBasedTreeEntriesLoadResults) -> bool"""
class KeyBasedTreeEntryError(object,IDisposable): def Dispose(self): pass def GetEntry(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass ErrorType=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates which of possible types of problems with loading and/or building
   a KeyBasedTreeEntries that this KeyBasedTreeEntryError represents.Get: ErrorType(self: KeyBasedTreeEntryError) -> KeyBasedTreeEntryErrorType"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: KeyBasedTreeEntryError) -> bool""" 
class KeyBasedTreeEntryErrorType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass BadClassificationCategoryId=None BadClassificationLevel=None CircularParentage=None DuplicateEntry=None InvalidClassificationCode=None MissingParent=None value__=Noneclass KeynoteEntries(KeyBasedTreeEntries,IEnumerable[KeyBasedTreeEntry],IEnumerable,IDisposable): def Dispose(self): pass @staticmethod def LoadKeynoteEntriesFromFile(filePath,keynoteContent): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): passclass KeynoteEntry(KeyBasedTreeEntry,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,key,*__args): pass KeynoteText=property(lambda self:object(),lambda self,v:None,lambda self:None) """The text associated with this KeynoteEntry.
Get: KeynoteText(self: KeynoteEntry) -> str"""
class KeynoteTable(KeyBasedTreeEntryTable,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass @staticmethod def GetKeynoteTable(aDoc): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass LabelUtils(object,IDisposable): def Dispose(self): pass @staticmethod def GetLabelFor(*__args): pass @staticmethod def GetStructuralSectionShapeName(shape): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: LabelUtils) -> bool"""
class LayerCategoryType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass AnalyticalModel=None Annotation=None Imported=None Model=None Modifier=None Unsorted=None value__=Noneclass LayerModifier(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,modifierType=None,separator=None): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: LayerModifier) -> bool"""
 ModifierType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The modifier type.
Get: ModifierType(self: LayerModifier) -> ModifierTypeSet: ModifierType(self: LayerModifier) = value""" 
 Separator=property(lambda self:object(),lambda self,v:None,lambda self:None) """The separator string that will follow this modifier in the export layer name.
Get: Separator(self: LayerModifier) -> strSet: Separator(self: LayerModifier) = value""" 
class LayoutRule(APIObject,IDisposable): def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass LayoutRuleClearSpacing(LayoutRule,IDisposable): def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,spacing,justifyType): pass JustifyType=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get or set the type of justification.
Get: JustifyType(self: LayoutRuleClearSpacing) -> BeamSystemJustifyTypeSet: JustifyType(self: LayoutRuleClearSpacing) = value"""
 Spacing=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get or set the spacing of the beam system.
Get: Spacing(self: LayoutRuleClearSpacing) -> floatSet: Spacing(self: LayoutRuleClearSpacing) = value""" 
class LayoutRuleFixedDistance(LayoutRule,IDisposable): def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,spacing,justifyType): pass JustifyType=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get or set the type of justification.
Get: JustifyType(self: LayoutRuleFixedDistance) -> BeamSystemJustifyTypeSet: JustifyType(self: LayoutRuleFixedDistance) = value"""
 Spacing=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get or set spacing of the Beam System.
Get: Spacing(self: LayoutRuleFixedDistance) -> floatSet: Spacing(self: LayoutRuleFixedDistance) = value""" 
class LayoutRuleFixedNumber(LayoutRule,IDisposable): def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,numberOfLines): pass NumberOfLines=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get or set the number of the beams in a beam system.
Get: NumberOfLines(self: LayoutRuleFixedNumber) -> intSet: NumberOfLines(self: LayoutRuleFixedNumber) = value"""
class LayoutRuleMaximumSpacing(LayoutRule,IDisposable): def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,spacing): pass Spacing=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get or set the spacing of the beam system.
Get: Spacing(self: LayoutRuleMaximumSpacing) -> floatSet: Spacing(self: LayoutRuleMaximumSpacing) = value"""
class Leader(APIObject,IDisposable): def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Anchor=property(lambda self:object(),lambda self,v:None,lambda self:None) """Anchor point of the Leader
Get: Anchor(self: Leader) -> XYZ"""
 Elbow=property(lambda self:object(),lambda self,v:None,lambda self:None) """Elbow point of the Leader.
Get: Elbow(self: Leader) -> XYZSet: Elbow(self: Leader) = value""" 
 End=property(lambda self:object(),lambda self,v:None,lambda self:None) """End point of the Leader.
Get: End(self: Leader) -> XYZSet: End(self: Leader) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: Leader) -> bool""" 
 LeaderShape=property(lambda self:object(),lambda self,v:None,lambda self:None) """Geometric style of the leader
Get: LeaderShape(self: Leader) -> LeaderShape""" 
class LeaderArray(APIObject,IDisposable,IEnumerable): def Append(self,item): pass def Clear(self): pass def Dispose(self): pass def ForwardIterator(self): pass def GetEnumerator(self): pass def Insert(self,item,index): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def ReverseIterator(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __getitem__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass def __setitem__(self,*args): pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the array is empty.
Get: IsEmpty(self: LeaderArray) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of objects that are in the array.
Get: Size(self: LeaderArray) -> int""" 
class LeaderArrayIterator(APIObject,IDisposable,IEnumerator): def Dispose(self): pass def MoveNext(self): pass def next(self,*args): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: LeaderArrayIterator) -> object"""
class LeaderAtachement(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass BottomLine=None Midpoint=None TopLine=None value__=Noneclass LeaderEndCondition(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Attached=None Free=None value__=Noneclass LeaderShape(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Arc=None Kinked=None Straight=None value__=Noneclass Level(DatumPlane,IDisposable): @staticmethod def Create(document,elevation): pass def Dispose(self): pass def getBoundingBox(self,*args): pass def GetPlaneReference(self): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Elevation=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves or changes the elevation above or below the ground level.
Get: Elevation(self: Level) -> floatSet: Elevation(self: Level) = value"""
 ProjectElevation=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the elevation relative to project origin, no matter
   what values of the Elevation Base parameter is set.Get: ProjectElevation(self: Level) -> float""" 
class LevelType(LineAndTextAttrSymbol,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass LightAndMaterialAccuracyMode(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Advanced=None Simplified=None value__=Noneclass LightingSource(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass ExteriorArtificial=None ExteriorSun=None ExteriorSunAndArtificial=None InteriorArtificial=None InteriorSun=None InteriorSunAndArtificial=None value__=Noneclass LightNode(ContentNode,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass Line(Curve,IDisposable): @staticmethod def CreateBound(endpoint1,endpoint2): pass @staticmethod def CreateUnbound(origin,direction): pass def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Direction=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the direction of the line.
Get: Direction(self: Line) -> XYZ"""
 Origin=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the origin of the line.
Get: Origin(self: Line) -> XYZ""" 
class LinearArray(BaseArray,IDisposable): @staticmethod def ArrayElementsWithoutAssociation(aDoc,dBView,ids,count,translationToAnchorMember,anchorMember): pass @staticmethod def ArrayElementWithoutAssociation(aDoc,dBView,id,count,translationToAnchorMember,anchorMember): pass @staticmethod def Create(aDoc,dBView,*__args): pass def Dispose(self): pass def getBoundingBox(self,*args): pass def GetCopiedMemberIds(self): pass def GetOriginalMemberIds(self): pass @staticmethod def IsElementArrayable(aDoc,id): pass @staticmethod def IsValidArraySize(count): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass NumMembers=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves or changes the number of the arrayed members.
Get: NumMembers(self: LinearArray) -> intSet: NumMembers(self: LinearArray) = value"""
class LinePattern(object,IDisposable): def Dispose(self): pass def GetSegments(self): pass def ReleaseUnmanagedResources(self,*args): pass def SetSegments(self,lineSegs): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,name=None): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: LinePattern) -> bool"""
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """Line pattern name.
Get: Name(self: LinePattern) -> strSet: Name(self: LinePattern) = value""" 
class LinePatternElement(Element,IDisposable): @staticmethod def Create(document,linePattern): pass def Dispose(self): pass def getBoundingBox(self,*args): pass @staticmethod def GetLinePattern(document=None,elementId=None): pass @staticmethod def GetLinePatternElementByName(document,name): pass @staticmethod def GetSolidPatternId(): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def SetLinePattern(self,newLinePattern): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass LinePatternSegment(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,type=None,length=None): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: LinePatternSegment) -> bool"""
 Length=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets and sets the length of the segment.
Get: Length(self: LinePatternSegment) -> floatSet: Length(self: LinePatternSegment) = value""" 
 Type=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets and sets the type of the segment.
Get: Type(self: LinePatternSegment) -> LinePatternSegmentTypeSet: Type(self: LinePatternSegment) = value""" 
class LinePatternSegmentType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Dash=None Dot=None Invalid=None Space=None value__=Noneclass LineProperties(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass Color=property(lambda self:object(),lambda self,v:None,lambda self:None) """The current color used when drawing lines/curves.
Get: Color(self: LineProperties) -> Color"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: LineProperties) -> bool""" 
 LineWidth=property(lambda self:object(),lambda self,v:None,lambda self:None) """The current width (thickness) of the pen stroke when drawing lines/curves.
Get: LineWidth(self: LineProperties) -> float""" 
 PatternId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Id of the current Line pattern element used when drawing lines/curves.
Get: PatternId(self: LineProperties) -> ElementId""" 
 Transparency=property(lambda self:object(),lambda self,v:None,lambda self:None) """The current transparency level to be applied to the current color.
Get: Transparency(self: LineProperties) -> int""" 
class LineScaling(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass ModelSpace=None PaperSpace=None value__=None ViewScale=Noneclass LineSegment(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass EndParameter=property(lambda self:object(),lambda self,v:None,lambda self:None) """Parameter associated with the end point.
Get: EndParameter(self: LineSegment) -> float"""
 EndPoint=property(lambda self:object(),lambda self,v:None,lambda self:None) """End point of the line segment.
Get: EndPoint(self: LineSegment) -> XYZ""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: LineSegment) -> bool""" 
 LineProperties=property(lambda self:object(),lambda self,v:None,lambda self:None) """Access to the line (pen) properties of the line
Get: LineProperties(self: LineSegment) -> LineProperties""" 
 StartParameter=property(lambda self:object(),lambda self,v:None,lambda self:None) """Parameter associated with the start point.
Get: StartParameter(self: LineSegment) -> float""" 
 StartPoint=property(lambda self:object(),lambda self,v:None,lambda self:None) """Start point of the line segment.
Get: StartPoint(self: LineSegment) -> XYZ""" 
class LinkConversionData(object,IDisposable): def Dispose(self): pass def GetOptions(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: LinkConversionData) -> bool"""
 Path=property(lambda self:object(),lambda self,v:None,lambda self:None) """The path to the source data used to generate the model.
Get: Path(self: LinkConversionData) -> str""" 
 ServerId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The service responsible for converting the data into a Revit file.
Get: ServerId(self: LinkConversionData) -> Guid""" 
class LinkedFileStatus(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass CanBeUpgraded=None Imported=None InClosedWorkset=None Invalid=None Loaded=None LocallyUnloaded=None NotFound=None Unloaded=None value__=Noneclass LinkElementId(object): def Equals(self,obj): pass def __eq__(self,*args): pass @staticmethod def __new__(self,*__args): pass def __ne__(self,*args): pass HostElementId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The id of the element in the host, or invalidElementId if there is a link.
Get: HostElementId(self: LinkElementId) -> ElementId"""
 LinkedElementId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The id of the element in the link, or invalidElementId if no link.
Get: LinkedElementId(self: LinkElementId) -> ElementId""" 
 LinkInstanceId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The id of the link, or invalidElementId if no link.
Get: LinkInstanceId(self: LinkElementId) -> ElementId""" 
class LinkLoadContent(ExternalResourceLoadContent,IDisposable): def Dispose(self): pass def GetLinkDataPath(self): pass def GetLinkLoadResult(self): pass def ReleaseUnmanagedResources(self,*args): pass def SetLinkDataPath(self,linkPath): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass LinkNode(GroupNode,IDisposable): def Dispose(self): pass def GetDocument(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass ListType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass ArabicNumbers=None Bullet=None LowerCaseLetters=None Mixed=None None=None UpperCaseLetters=None value__=Noneclass LoadOperationType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Automatic=None Explicit=None value__=Noneclass Location(APIObject,IDisposable): def Dispose(self): pass def Move(self,translation): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Rotate(self,axis,angle): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass LocationCurve(Location,IDisposable): def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Curve=property(lambda self:object(),lambda self,v:None,lambda self:None) """Provides the ability to get and set the curve of a curve based element.
Get: Curve(self: LocationCurve) -> CurveSet: Curve(self: LocationCurve) = value"""
class LocationPoint(Location,IDisposable): def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Point=property(lambda self:object(),lambda self,v:None,lambda self:None) """The physical location of the element.
Get: Point(self: LocationPoint) -> XYZSet: Point(self: LocationPoint) = value"""
 Rotation=property(lambda self:object(),lambda self,v:None,lambda self:None) """The angle of rotation around the insertion point, in radians.
Get: Rotation(self: LocationPoint) -> float""" 
class LogicalAndFilter(ElementLogicalFilter,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,*__args): passclass LogicalOrFilter(ElementLogicalFilter,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,*__args): passclass MarginType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass NoMargin=None PrinterLimit=None UserDefined=None value__=Noneclass MassDisplayTemporaryOverrideType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass ShowMassByViewSettings=None ShowMassFormAndFloors=None ShowMassSurfaceTypes=None ShowMassZonesAndShades=None value__=Noneclass MassInstanceUtils(object,IDisposable): @staticmethod def AddMassLevelDataToMassInstance(document,massInstanceId,levelId): pass def Dispose(self): pass @staticmethod def GetGrossFloorArea(document,massInstanceId): pass @staticmethod def GetGrossSurfaceArea(document,massInstanceId): pass @staticmethod def GetGrossVolume(document,massInstanceId): pass @staticmethod def GetJoinedElementIds(document,massInstanceId): pass @staticmethod def GetMassLevelDataIds(document,massInstanceId): pass @staticmethod def GetMassLevelIds(document,massInstanceId): pass def ReleaseUnmanagedResources(self,*args): pass @staticmethod def RemoveMassLevelDataFromMassInstance(document,massInstanceId,levelId): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: MassInstanceUtils) -> bool"""
class Material(Element,IDisposable): def ClearMaterialAspect(self,aspect): pass @staticmethod def Create(document,name): pass def Dispose(self): pass def Duplicate(self,name): pass def getBoundingBox(self,*args): pass @staticmethod def IsMaterialOrValidDefault(pElem,materialId): pass @staticmethod def IsNameUnique(aDocument,name): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def SetMaterialAspectByPropertySet(self,aspect,propertySetId): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass AppearanceAssetId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The ElementId of the AppearanceAssetElement.
Get: AppearanceAssetId(self: Material) -> ElementIdSet: AppearanceAssetId(self: Material) = value"""
 Color=property(lambda self:object(),lambda self,v:None,lambda self:None) """The color of the material.
Get: Color(self: Material) -> ColorSet: Color(self: Material) = value""" 
 CutPatternColor=property(lambda self:object(),lambda self,v:None,lambda self:None) """The color of the material cut pattern.
Get: CutPatternColor(self: Material) -> ColorSet: CutPatternColor(self: Material) = value""" 
 CutPatternId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The id of the FillPatternElement associated to cut views of faces with this material.
Get: CutPatternId(self: Material) -> ElementIdSet: CutPatternId(self: Material) = value""" 
 Glow=property(lambda self:object(),lambda self,v:None,lambda self:None) """The option for glow.
Get: Glow(self: Material) -> boolSet: Glow(self: Material) = value""" 
 MaterialCategory=property(lambda self:object(),lambda self,v:None,lambda self:None) """The name of the material category, e.g. 'Wood'
Get: MaterialCategory(self: Material) -> strSet: MaterialCategory(self: Material) = value""" 
 MaterialClass=property(lambda self:object(),lambda self,v:None,lambda self:None) """The name of the general material type, e.g. 'Wood.'
Get: MaterialClass(self: Material) -> strSet: MaterialClass(self: Material) = value""" 
 Shininess=property(lambda self:object(),lambda self,v:None,lambda self:None) """The shininess of the material.
Get: Shininess(self: Material) -> intSet: Shininess(self: Material) = value""" 
 Smoothness=property(lambda self:object(),lambda self,v:None,lambda self:None) """The smoothness of the material.
Get: Smoothness(self: Material) -> intSet: Smoothness(self: Material) = value""" 
 StructuralAssetId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The ElementId of the structural PropertySetElement.
Get: StructuralAssetId(self: Material) -> ElementIdSet: StructuralAssetId(self: Material) = value""" 
 SurfacePatternColor=property(lambda self:object(),lambda self,v:None,lambda self:None) """The color of the material surface pattern.
Get: SurfacePatternColor(self: Material) -> ColorSet: SurfacePatternColor(self: Material) = value""" 
 SurfacePatternId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The id of the FillPatternElement associated to normal views of faces with this material.
Get: SurfacePatternId(self: Material) -> ElementIdSet: SurfacePatternId(self: Material) = value""" 
 ThermalAssetId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The ElementId of the thermal PropertySetElement.
Get: ThermalAssetId(self: Material) -> ElementIdSet: ThermalAssetId(self: Material) = value""" 
 Transparency=property(lambda self:object(),lambda self,v:None,lambda self:None) """The transparency of the material.
Get: Transparency(self: Material) -> intSet: Transparency(self: Material) = value""" 
 UseRenderAppearanceForShading=property(lambda self:object(),lambda self,v:None,lambda self:None) """True to use the render appearance settings for shaded view appearance;
   false to use the material's color and transparency value for shaded view appearance.Get: UseRenderAppearanceForShading(self: Material) -> boolSet: UseRenderAppearanceForShading(self: Material) = value""" 
class MaterialAspect(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Structural=None Thermal=None value__=Noneclass MaterialFunctionAssignment(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Finish1=None Finish2=None Insulation=None Membrane=None None=None StructuralDeck=None Structure=None Substrate=None value__=Noneclass MaterialNode(RenderNode,IDisposable):def Dispose(self):pass def GetAppearance(self):pass def GetAppearanceOverride(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass Color=property(lambda self:object(),lambda self,v:None,lambda self:None) """The color the material is being rendered at
Get: Color(self: MaterialNode) -> Color"""
 Glossiness=property(lambda self:object(),lambda self,v:None,lambda self:None) """The level of glossiness of the material
Get: Glossiness(self: MaterialNode) -> int""" 
 HasOverriddenAppearance=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies if the default rendering appearance the material has is being overridden.
Get: HasOverriddenAppearance(self: MaterialNode) -> bool""" 
 MaterialId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Id of the element assocated with this material in the model.
Get: MaterialId(self: MaterialNode) -> ElementId""" 
 Smoothness=property(lambda self:object(),lambda self,v:None,lambda self:None) """The level of smoothness of the material.
Get: Smoothness(self: MaterialNode) -> int""" 
 ThumbnailFile=property(lambda self:object(),lambda self,v:None,lambda self:None) """The path if a file that contains a thumbnail image of the material.
Get: ThumbnailFile(self: MaterialNode) -> str""" 
 Transparency=property(lambda self:object(),lambda self,v:None,lambda self:None) """The value of transparency the material is being rendered with
Get: Transparency(self: MaterialNode) -> float""" 
class MaterialPropertyPathType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Bump=None Cutouts=None FinishBumps=None General=None ReliefPattern=None Transparency=None value__=None Weathering=Noneclass MEPCalculationServerInfo(object,IDisposable):def Dispose(self):pass@staticmethod def GetMEPCalculationServerInfo(famInst):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,*__args):pass def __repr__(self,*args):pass Description=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Description of the server.
Get: Description(self: MEPCalculationServerInfo) -> strSet: Description(self: MEPCalculationServerInfo) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: MEPCalculationServerInfo) -> bool""" 
 ServerId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Id of the server.
Get: ServerId(self: MEPCalculationServerInfo) -> GuidSet: ServerId(self: MEPCalculationServerInfo) = value""" 
 ServerName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Name of the server.
Get: ServerName(self: MEPCalculationServerInfo) -> strSet: ServerName(self: MEPCalculationServerInfo) = value""" 
 PipeUseDefinitionOnTypeGUID=Noneclass MEPConnectorInfo(object,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass IsPrimary=property(lambda self:object(),lambda self,v:None,lambda self:None) """True if this is the primary connector.
Get: IsPrimary(self: MEPConnectorInfo) -> bool""" 
 IsSecondary=property(lambda self:object(),lambda self,v:None,lambda self:None) """True if this is the secondary connector.
Get: IsSecondary(self: MEPConnectorInfo) -> bool""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: MEPConnectorInfo) -> bool""" 
 LinkedConnector=property(lambda self:object(),lambda self,v:None,lambda self:None) """The linked connector or ll if there is no linked connector
Get: LinkedConnector(self: MEPConnectorInfo) -> Connector""" 
class MEPCurveType(HostObjAttributes,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass Cross=property(lambda self:object(),lambda self,v:None,lambda self:None) """The default cross fitting of the MEP curve type.
Get: Cross(self: MEPCurveType) -> FamilySymbolSet: Cross(self: MEPCurveType) = value"""
 Elbow=property(lambda self:object(),lambda self,v:None,lambda self:None) """The default elbow fitting of the MEP curve type.
Get: Elbow(self: MEPCurveType) -> FamilySymbolSet: Elbow(self: MEPCurveType) = value""" 
 MultiShapeTransition=property(lambda self:object(),lambda self,v:None,lambda self:None) """The default multi shape transition fitting of the MEP curve type.
Get: MultiShapeTransition(self: MEPCurveType) -> FamilySymbolSet: MultiShapeTransition(self: MEPCurveType) = value""" 
 PreferredJunctionType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The preferred junction type of the MEP curve type.
Get: PreferredJunctionType(self: MEPCurveType) -> JunctionTypeSet: PreferredJunctionType(self: MEPCurveType) = value""" 
 Roughness=property(lambda self:object(),lambda self,v:None,lambda self:None) """The roughness of the MEP curve type.  For PipeTypes, please use Segment::Roughness
Get: Roughness(self: MEPCurveType) -> floatSet: Roughness(self: MEPCurveType) = value""" 
 RoutingPreferenceManager=property(lambda self:object(),lambda self,v:None,lambda self:None) """The RoutingPreferenceManager for the MEPCurveType
Get: RoutingPreferenceManager(self: MEPCurveType) -> RoutingPreferenceManager""" 
 Tap=property(lambda self:object(),lambda self,v:None,lambda self:None) """The default tap fitting of the MEP curve type.
Get: Tap(self: MEPCurveType) -> FamilySymbolSet: Tap(self: MEPCurveType) = value""" 
 Tee=property(lambda self:object(),lambda self,v:None,lambda self:None) """The default tee fitting of the MEP curve type.
Get: Tee(self: MEPCurveType) -> FamilySymbolSet: Tee(self: MEPCurveType) = value""" 
 Transition=property(lambda self:object(),lambda self,v:None,lambda self:None) """The default transition fitting of the MEP curve type.
Get: Transition(self: MEPCurveType) -> FamilySymbolSet: Transition(self: MEPCurveType) = value""" 
 Union=property(lambda self:object(),lambda self,v:None,lambda self:None) """The default union fitting of the MEP curve type.
Get: Union(self: MEPCurveType) -> FamilySymbolSet: Union(self: MEPCurveType) = value""" 
class MEPFamilyConnectorInfo(MEPConnectorInfo,IDisposable):def Dispose(self):pass def GetAssociateFamilyParameterId(self,connectorParameterId):pass def GetConnectorParameterValue(self,connectorParameterId):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass MEPModel(APIObject,IDisposable):def Dispose(self):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass AssignedElectricalSystems=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the electrical systems this electrical panel currently is assigned to.
Get: AssignedElectricalSystems(self: MEPModel) -> ElectricalSystemSet"""
 ConnectorManager=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the Connector Manager from this MEPModel.
Get: ConnectorManager(self: MEPModel) -> ConnectorManager""" 
 ElectricalSystems=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the electrical systems that are currently created using this MEPModel.
Get: ElectricalSystems(self: MEPModel) -> ElectricalSystemSet""" 
class MEPSize(object,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,nominalDiameter,innerDiameter,outerDiameter,usedInSizeLists,usedInSizing):pass def __repr__(self,*args):pass InnerDiameter=property(lambda self:object(),lambda self,v:None,lambda self:None) """Inner diameter
Get: InnerDiameter(self: MEPSize) -> float"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: MEPSize) -> bool""" 
 NominalDiameter=property(lambda self:object(),lambda self,v:None,lambda self:None) """Nominal diameter
Get: NominalDiameter(self: MEPSize) -> float""" 
 OuterDiameter=property(lambda self:object(),lambda self,v:None,lambda self:None) """Outer diameter
Get: OuterDiameter(self: MEPSize) -> float""" 
 UsedInSizeLists=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether it is used in size lists.
Get: UsedInSizeLists(self: MEPSize) -> bool""" 
 UsedInSizing=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether is used in sizing.
Get: UsedInSizing(self: MEPSize) -> bool""" 
class MEPSystem(Element,IDisposable):def Add(self,connectors):pass def Dispose(self):pass def DivideSystem(self,ADoc):pass def getBoundingBox(self,*args):pass def GetCriticalPathSectionNumbers(self):pass def getElementsInNetwork(self,*args):pass def getFlow(self,*args):pass def GetPhysicalNetworksNumber(self):pass def GetSectionByIndex(self,index):pass def GetSectionByNumber(self,sectionNumber):pass def getStaticPressure(self,*args):pass def IsSystemDividable(self):pass def ReleaseUnmanagedResources(self,*args):pass def Remove(self,*__args):pass def setElementType(self,*args):pass def __add__(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass BaseEquipment=property(lambda self:object(),lambda self,v:None,lambda self:None) """The base panel or equipment of the system.
Get: BaseEquipment(self: MEPSystem) -> FamilyInstance"""
 BaseEquipmentConnector=property(lambda self:object(),lambda self,v:None,lambda self:None) """The connector within base equipment which is used to connect with system.
Get: BaseEquipmentConnector(self: MEPSystem) -> Connector""" 
 ConnectorManager=property(lambda self:object(),lambda self,v:None,lambda self:None) """Connector manager of the system.
Get: ConnectorManager(self: MEPSystem) -> ConnectorManager""" 
 Elements=property(lambda self:object(),lambda self,v:None,lambda self:None) """Terminal elements in the system.
Get: Elements(self: MEPSystem) -> ElementSet""" 
 HasDesignParts=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the system has one or more design parts.
Get: HasDesignParts(self: MEPSystem) -> bool""" 
 HasFabricationParts=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the system has one or more fabrication parts.
Get: HasFabricationParts(self: MEPSystem) -> bool""" 
 HasPlaceholders=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the system has one or more placeholders.
Get: HasPlaceholders(self: MEPSystem) -> bool""" 
 IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the system is empty or not.
Get: IsEmpty(self: MEPSystem) -> bool""" 
 IsMultipleNetwork=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the system is well connected or not. The flag will enable the "Divide System" button.
Get: IsMultipleNetwork(self: MEPSystem) -> bool""" 
 IsValid=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the system is valid or not.
 atom AtomValidateSystem default falseGet: IsValid(self: MEPSystem) -> bool""" 
 PressureLossOfCriticalPath=property(lambda self:object(),lambda self,v:None,lambda self:None) """The total pressure loss of the sections in critical path.
Get: PressureLossOfCriticalPath(self: MEPSystem) -> float""" 
 SectionsCount=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number of sections.
Get: SectionsCount(self: MEPSystem) -> int""" 
class MEPSystemClassification(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass CableTrayConduit=None Communication=None CondensateDrain=None Controls=None DataCircuit=None DomesticColdWater=None DomesticHotWater=None ExhaustAir=None FireAlarm=None FireProtectDry=None FireProtectOther=None FireProtectPreaction=None FireProtectWet=None Fitting=None Global=None NurseCall=None OtherAir=None OtherPipe=None PowerBalanced=None PowerCircuit=None PowerUnBalanced=None Recirculation=None ReturnAir=None ReturnHydronic=None Sanitary=None Security=None Storm=None SupplyAir=None SupplyHydronic=None SwitchTopology=None Telephone=None UndefinedSystemClassification=None value__=None Vent=Noneclass MEPSystemType(ElementType,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass Abbreviation=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies the abbreviation, the short name, for the system type
Get: Abbreviation(self: MEPSystemType) -> strSet: Abbreviation(self: MEPSystemType) = value"""
 CalculationLevel=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies the calculation level for the system type.
Get: CalculationLevel(self: MEPSystemType) -> SystemCalculationLevelSet: CalculationLevel(self: MEPSystemType) = value""" 
 LineColor=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates the color that should override the line color for all components in the system.
Get: LineColor(self: MEPSystemType) -> ColorSet: LineColor(self: MEPSystemType) = value""" 
 LinePatternId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates the line pattern color that should override the line color for all components in the system.
Get: LinePatternId(self: MEPSystemType) -> ElementIdSet: LinePatternId(self: MEPSystemType) = value""" 
 LineWeight=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates the weight that should override the line weight for all components in the system.
Get: LineWeight(self: MEPSystemType) -> intSet: LineWeight(self: MEPSystemType) = value""" 
 MaterialId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates the material id that should override the material for all components in the system.
Get: MaterialId(self: MEPSystemType) -> ElementIdSet: MaterialId(self: MEPSystemType) = value""" 
 SystemClassification=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies the classification for the system type
Get: SystemClassification(self: MEPSystemType) -> MEPSystemClassification""" 
class Mesh(GeometryObject,IDisposable):def Dispose(self):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass MaterialElementId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Element ID of the material from which this mesh is composed.
Get: MaterialElementId(self: Mesh) -> ElementId"""
 NumTriangles=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number of triangles that the mesh contains.
Get: NumTriangles(self: Mesh) -> int""" 
 Vertices=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves all vertices used to define this mesh. Intended for indexed access.
Get: Vertices(self: Mesh) -> IList[XYZ]""" 
class MeshFromGeometryOperationIssue(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass AllFine=None CurveLoopsWithoutCurvesInInput=None EmptyCurveLoopsInInput=None InputCurveLoopProblemWithFallback=None InputCurveLoopWrongOpenFlag=None InternalError=None InternalMissingError=None InternalUtilityError=None MissingCurveLoopsInInput=None MissingCurvesInInputLoop=None NonContinuousInputCurveLoop=None NonPlanarProfileLoop=None NotSetYet=None NoUsableCurveLoopsInInput=None NumberOfIssueTypes=None value__=Noneclass MeshFromGeometryOperationResult(object,IDisposable):def Dispose(self):pass def GetIssues(self):pass def GetMesh(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass HasInvalidData=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether the provided data for which this result was
 obtained were internally inconsistent and could not be used in its entirety. For example, for extrusion operation, profile loops were degenerate or improperly oriented with respect to the extrsuion direction.Get: HasInvalidData(self: MeshFromGeometryOperationResult) -> bool"""
 IsMeshAvailable=property(lambda self:object(),lambda self,v:None,lambda self:None) """Shows whether the result still contains the mesh
 which was constructed, if any, or whether it has been relinquished by 'getMesh'. The former is true, the later is false.Get: IsMeshAvailable(self: MeshFromGeometryOperationResult) -> bool""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: MeshFromGeometryOperationResult) -> bool""" 
 Tessellated=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether while constructing a mesh, it was necessary
 to extrude polylines instead of non-linear curves from the profile loops.Get: Tessellated(self: MeshFromGeometryOperationResult) -> bool""" 
class MeshTriangle(object):class ModelCurve(CurveElement,IDisposable):def ChangeToReferenceLine(self):pass def Dispose(self):pass def getBoundingBox(self,*args):pass def GetVisibility(self):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def SetVisibility(self,visibility):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass IsReferenceLine=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if this curve is a reference curve.
Get: IsReferenceLine(self: ModelCurve) -> bool"""
 Subcategory=property(lambda self:object(),lambda self,v:None,lambda self:None) """The subcategory.
Get: Subcategory(self: ModelCurve) -> GraphicsStyleSet: Subcategory(self: ModelCurve) = value""" 
 TrussCurveType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The truss curve type of this model curve.
Get: TrussCurveType(self: ModelCurve) -> TrussCurveTypeSet: TrussCurveType(self: ModelCurve) = value""" 
class ModelArc(ModelCurve,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass ModelCurveArrArray(APIObject,IDisposable,IEnumerable):def Append(self,item):pass def Clear(self):pass def Dispose(self):pass def ForwardIterator(self):pass def GetEnumerator(self):pass def Insert(self,item,index):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def ReverseIterator(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __getitem__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass def __setitem__(self,*args):pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the array is empty.
Get: IsEmpty(self: ModelCurveArrArray) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of objects that are in the array.
Get: Size(self: ModelCurveArrArray) -> int""" 
class ModelCurveArrArrayIterator(APIObject,IDisposable,IEnumerator):def Dispose(self):pass def MoveNext(self):pass def next(self,*args):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def Reset(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: ModelCurveArrArrayIterator) -> object"""
class ModelCurveArray(APIObject,IDisposable,IEnumerable):def Append(self,item):pass def Clear(self):pass def Dispose(self):pass def ForwardIterator(self):pass def GetEnumerator(self):pass def Insert(self,item,index):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def ReverseIterator(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __getitem__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass def __setitem__(self,*args):pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the array is empty.
Get: IsEmpty(self: ModelCurveArray) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of model curves that are in the array.
Get: Size(self: ModelCurveArray) -> int""" 
class ModelCurveArrayIterator(APIObject,IDisposable,IEnumerator):def Dispose(self):pass def MoveNext(self):pass def next(self,*args):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def Reset(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: ModelCurveArrayIterator) -> object"""
class ModelEllipse(ModelCurve,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass ModelHermiteSpline(ModelCurve,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass ModelLine(ModelCurve,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass ModelNurbSpline(ModelCurve,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass ModelPathUtils(object):@staticmethod def ConvertModelPathToUserVisiblePath(path):pass@staticmethod def ConvertUserVisiblePathToModelPath(strPath):pass@staticmethod def IsValidUserVisibleFullServerPath(strPath):pass __all__=['ConvertModelPathToUserVisiblePath','ConvertUserVisiblePathToModelPath','IsValidUserVisibleFullServerPath',]class ModelText(Element,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def GetVisibility(self):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def SetVisibility(self,visibility):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass Depth=property(lambda self:object(),lambda self,v:None,lambda self:None) """The depth of the model text.
Get: Depth(self: ModelText) -> floatSet: Depth(self: ModelText) = value"""
 HorizontalAlignment=property(lambda self:object(),lambda self,v:None,lambda self:None) """The horizontal alignment.
Get: HorizontalAlignment(self: ModelText) -> HorizontalAlignSet: HorizontalAlignment(self: ModelText) = value""" 
 Location=property(lambda self:object(),lambda self,v:None,lambda self:None) """This property is used to find the physical location of an instance within project.
Get: Location(self: ModelText) -> Location""" 
 ModelTextType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The type for the model text.
Get: ModelTextType(self: ModelText) -> ModelTextTypeSet: ModelTextType(self: ModelText) = value""" 
 Subcategory=property(lambda self:object(),lambda self,v:None,lambda self:None) """The subcategory.
Get: Subcategory(self: ModelText) -> CategorySet: Subcategory(self: ModelText) = value""" 
 Text=property(lambda self:object(),lambda self,v:None,lambda self:None) """The text string in the model text.
Get: Text(self: ModelText) -> strSet: Text(self: ModelText) = value""" 
class ModelTextType(ElementType,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass ModelUpdatesStatus(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass CurrentWithCentral=None DeletedInCentral=None NotYetInCentral=None UpdatedInCentral=None value__=Noneclass ModifierType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass AnalyzesAs=None Category=None Custom1=None Custom2=None Custom3=None DomainType=None FabricationService=None FireRating=None Function=None Level=None PhaseCreated=None PhaseDemolished=None PhaseStatus=None StructuralMaterialType=None StructuralUsage=None SystemClassification=None SystemName=None SystemType=None Underlay=None UnknownType=None value__=None ViewType=None Workset=Noneclass Mullion(FamilyInstance,IDisposable):def BreakMullion(self):pass def Dispose(self):pass def getBoundingBox(self,*args):pass def JoinMullion(self):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass LocationCurve=property(lambda self:object(),lambda self,v:None,lambda self:None) """This method get the curve location of the current Mullion.
Get: LocationCurve(self: Mullion) -> Curve"""
 Lock=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get - to get whether the Mullion line is locked.
 Set - Lock/unlock the Mullion.Get: Lock(self: Mullion) -> boolSet: Lock(self: Mullion) = value""" 
 Lockable=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get - to get whether the Mullion can be lock or unlock.
Get: Lockable(self: Mullion) -> bool""" 
 MullionType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The MullionType style of this Mullion. 
Get - to access type of mullionSet - change type of mullion. If the mullion is locked, InvalidOperationException exception will be thrown.Get: MullionType(self: Mullion) -> MullionTypeSet: MullionType(self: Mullion) = value""" 
class MullionType(FamilySymbol,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass MullionTypeSet(APIObject,IDisposable,IEnumerable):def Clear(self):pass def Contains(self,item):pass def Dispose(self):pass def Erase(self,item):pass def ForwardIterator(self):pass def GetEnumerator(self):pass def Insert(self,item):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def ReverseIterator(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the set is empty.
Get: IsEmpty(self: MullionTypeSet) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of mullion types that are in the set.
Get: Size(self: MullionTypeSet) -> int""" 
class MullionTypeSetIterator(APIObject,IDisposable,IEnumerator):def Dispose(self):pass def MoveNext(self):pass def next(self,*args):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def Reset(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: MullionTypeSetIterator) -> object"""
class MultiReferenceAnnotation(Element,IDisposable):@staticmethod def AreReferencesValidForLinearDimension(document,ownerViewId,options):pass@staticmethod def AreReferencesValidForLinearFixedDimension(document,ownerViewId,options):pass@staticmethod def Create(document,ownerViewId,options):pass def Dispose(self):pass def getBoundingBox(self,*args):pass@staticmethod def IsLinearFixedDimensionDirectionValid(document,viewId,options):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass DimensionId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The child dimension owned by this multi-reference annotation.
Get: DimensionId(self: MultiReferenceAnnotation) -> ElementId"""
 TagId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The child IndependentTag owned by this multi-reference annotation.
Get: TagId(self: MultiReferenceAnnotation) -> ElementId""" 
class MultiReferenceAnnotationOptions(object,IDisposable):def Dispose(self):pass def ElementsMatchReferenceCategory(self,elements):pass def GetElementsToDimension(self):pass def IsAllowedDimensionStyleType(self,dimensionStyleType):pass def ReleaseUnmanagedResources(self,*args):pass def SetElementsToDimension(self,elementsToDimension):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,multiReferenceAnnotationType):pass def __repr__(self,*args):pass DimensionLineDirection=property(lambda self:object(),lambda self,v:None,lambda self:None) """The direction vector of the dimension line.
Get: DimensionLineDirection(self: MultiReferenceAnnotationOptions) -> XYZSet: DimensionLineDirection(self: MultiReferenceAnnotationOptions) = value"""
 DimensionLineOrigin=property(lambda self:object(),lambda self,v:None,lambda self:None) """The origin point for the dimension line.
Get: DimensionLineOrigin(self: MultiReferenceAnnotationOptions) -> XYZSet: DimensionLineOrigin(self: MultiReferenceAnnotationOptions) = value""" 
 DimensionPlaneNormal=property(lambda self:object(),lambda self,v:None,lambda self:None) """The normal vector to the dimension plane.
Get: DimensionPlaneNormal(self: MultiReferenceAnnotationOptions) -> XYZSet: DimensionPlaneNormal(self: MultiReferenceAnnotationOptions) = value""" 
 DimensionStyleType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The dimension style type to be used by the new MultiReferenceAnnotation.
Get: DimensionStyleType(self: MultiReferenceAnnotationOptions) -> DimensionStyleTypeSet: DimensionStyleType(self: MultiReferenceAnnotationOptions) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: MultiReferenceAnnotationOptions) -> bool""" 
 MultiReferenceAnnotationType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The MultiReferenceAnnotationType to be used by the new MultiReferenceAnnotation.
Get: MultiReferenceAnnotationType(self: MultiReferenceAnnotationOptions) -> MultiReferenceAnnotationType""" 
 TagHasLeader=property(lambda self:object(),lambda self,v:None,lambda self:None) """When true the tag will be created with an attached leader.
 When false the tag will be created without a leader.Get: TagHasLeader(self: MultiReferenceAnnotationOptions) -> boolSet: TagHasLeader(self: MultiReferenceAnnotationOptions) = value""" 
 TagHeadPosition=property(lambda self:object(),lambda self,v:None,lambda self:None) """The position for the tag's head.
Get: TagHeadPosition(self: MultiReferenceAnnotationOptions) -> XYZSet: TagHeadPosition(self: MultiReferenceAnnotationOptions) = value""" 
class MultiReferenceAnnotationType(ElementType,IDisposable):@staticmethod def CreateDefault(document):pass def Dispose(self):pass def GetAllowedTagCategory(self):pass def getBoundingBox(self,*args):pass def IsAllowedDimensionStyle(self,dimensionStyleId):pass def IsAllowedReferenceCategory(self,referenceCategoryId):pass@staticmethod def IsAllowedTagCategory(tagCategoryId):pass def IsAllowedTagType(self,tagTypeId):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass DimensionStyleId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The dimension style which will be used by the child dimension of the multi-reference annotation.
Get: DimensionStyleId(self: MultiReferenceAnnotationType) -> ElementIdSet: DimensionStyleId(self: MultiReferenceAnnotationType) = value"""
 GroupTagHeads=property(lambda self:object(),lambda self,v:None,lambda self:None) """Controls if parameter values for the annotation's references will be reported in one grouped tag head
 or if every reference will get its own tag head.Get: GroupTagHeads(self: MultiReferenceAnnotationType) -> boolSet: GroupTagHeads(self: MultiReferenceAnnotationType) = value""" 
 ReferenceCategoryId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The category of elements to which this annotation applies.
Get: ReferenceCategoryId(self: MultiReferenceAnnotationType) -> ElementId""" 
 ShowDimensionText=property(lambda self:object(),lambda self,v:None,lambda self:None) """Controls if text from the multi-reference annotation's dimension will be shown.
Get: ShowDimensionText(self: MultiReferenceAnnotationType) -> boolSet: ShowDimensionText(self: MultiReferenceAnnotationType) = value""" 
 TagTypeId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The tag type which will be used by the child tag the multi-reference annotation.
Get: TagTypeId(self: MultiReferenceAnnotationType) -> ElementIdSet: TagTypeId(self: MultiReferenceAnnotationType) = value""" 
class MultiSegmentGrid(Element,IDisposable):@staticmethod def AreGridsInSameMultiSegmentGrid(grid1,grid2):pass@staticmethod def Create(document,typeId,curveLoop,sketchPlaneId):pass def Dispose(self):pass def getBoundingBox(self,*args):pass def GetGridIds(self):pass@staticmethod def GetMultiSegementGridId(grid):pass@staticmethod def IsValidCurveLoop(curveLoop):pass@staticmethod def IsValidSketchPlaneId(document,elemId):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass Text=property(lambda self:object(),lambda self,v:None,lambda self:None) """name shared by grids in this MultiSegmentGrid
Get: Text(self: MultiSegmentGrid) -> strSet: Text(self: MultiSegmentGrid) = value"""
class NamingUtils(object):@staticmethod def CompareNames(nameA,nameB):pass@staticmethod def IsValidName(string):pass __all__=['CompareNames','IsValidName',]class NavisworksCoordinates(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Internal=None Shared=None value__=Noneclass NavisworksExportOptions(object,IDisposable):def Dispose(self):pass def GetSelectedElementIds(self):pass def ReleaseUnmanagedResources(self,*args):pass def SetSelectedElementIds(self,ids):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass ConvertElementProperties=property(lambda self:object(),lambda self,v:None,lambda self:None) """True to convert element properties, false otherwise.
 Default value is false.Get: ConvertElementProperties(self: NavisworksExportOptions) -> boolSet: ConvertElementProperties(self: NavisworksExportOptions) = value"""
 Coordinates=property(lambda self:object(),lambda self,v:None,lambda self:None) """Options which specifies the coordinates of Navisworks Exporter.
 Default value is Shared.Get: Coordinates(self: NavisworksExportOptions) -> NavisworksCoordinatesSet: Coordinates(self: NavisworksExportOptions) = value""" 
 DivideFileIntoLevels=property(lambda self:object(),lambda self,v:None,lambda self:None) """True to divide file into levels, false otherwise.
 Default value is true.Get: DivideFileIntoLevels(self: NavisworksExportOptions) -> boolSet: DivideFileIntoLevels(self: NavisworksExportOptions) = value""" 
 ExportElementIds=property(lambda self:object(),lambda self,v:None,lambda self:None) """True to export Revit element ids, false to skip these values.
 Default value is true.Get: ExportElementIds(self: NavisworksExportOptions) -> boolSet: ExportElementIds(self: NavisworksExportOptions) = value""" 
 ExportLinks=property(lambda self:object(),lambda self,v:None,lambda self:None) """True to export Revit links found in the main model, false to skip links.
 Default value is false.Get: ExportLinks(self: NavisworksExportOptions) -> boolSet: ExportLinks(self: NavisworksExportOptions) = value""" 
 ExportParts=property(lambda self:object(),lambda self,v:None,lambda self:None) """True to export Revit part elements, false to export the original parent elements.
 Default value is false.Get: ExportParts(self: NavisworksExportOptions) -> boolSet: ExportParts(self: NavisworksExportOptions) = value""" 
 ExportRoomAsAttribute=property(lambda self:object(),lambda self,v:None,lambda self:None) """True to export data for each room converts into a single shared room attribute, false otherwise.
 Default value is true.Get: ExportRoomAsAttribute(self: NavisworksExportOptions) -> boolSet: ExportRoomAsAttribute(self: NavisworksExportOptions) = value""" 
 ExportRoomGeometry=property(lambda self:object(),lambda self,v:None,lambda self:None) """True to export Revit room geometry, false otherwise.
 Default value is true.Get: ExportRoomGeometry(self: NavisworksExportOptions) -> boolSet: ExportRoomGeometry(self: NavisworksExportOptions) = value""" 
 ExportScope=property(lambda self:object(),lambda self,v:None,lambda self:None) """Options which specifies the export scope of Navisworks Exporter.
 Default value is Model.Get: ExportScope(self: NavisworksExportOptions) -> NavisworksExportScopeSet: ExportScope(self: NavisworksExportOptions) = value""" 
 ExportUrls=property(lambda self:object(),lambda self,v:None,lambda self:None) """True to export URL parameters, false otherwise.
 Default value is true.Get: ExportUrls(self: NavisworksExportOptions) -> boolSet: ExportUrls(self: NavisworksExportOptions) = value""" 
 FindMissingMaterials=property(lambda self:object(),lambda self,v:None,lambda self:None) """True if the file exporter looks for a match for the materials missing from the export, false otherwise.
 Default value is true.Get: FindMissingMaterials(self: NavisworksExportOptions) -> boolSet: FindMissingMaterials(self: NavisworksExportOptions) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: NavisworksExportOptions) -> bool""" 
 Parameters=property(lambda self:object(),lambda self,v:None,lambda self:None) """Options which specifies the parameter conversion of Navisworks Exporter.
 Default value is All.Get: Parameters(self: NavisworksExportOptions) -> NavisworksParametersSet: Parameters(self: NavisworksExportOptions) = value""" 
 ViewId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The element id of the view to export. InvalidElementId by default. Used only when ExportScope = View.
Get: ViewId(self: NavisworksExportOptions) -> ElementIdSet: ViewId(self: NavisworksExportOptions) = value""" 
class NavisworksExportScope(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Model=None SelectedElements=None value__=None View=Noneclass NavisworksParameters(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass All=None Elements=None None=None value__=Noneclass NestedFamilyTypeReference(Element,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass CategoryId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Category Id of the referenced family
Get: CategoryId(self: NestedFamilyTypeReference) -> ElementId"""
 FamilyName=property(lambda self:object(),lambda self,v:None,lambda self:None) """Name of the referenced family
Get: FamilyName(self: NestedFamilyTypeReference) -> str""" 
 TypeName=property(lambda self:object(),lambda self,v:None,lambda self:None) """Type of the referenced family
Get: TypeName(self: NestedFamilyTypeReference) -> str""" 
class NullParameterValue(ParameterValue,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass NumberingSchema(Element,IDisposable):def AppendSequence(self,fromPartition,toPartition):pass def AssignElementsToSequence(self,elementIds,partitionName):pass def ChangeNumber(self,partition,fromNumber,toNumber):pass def Dispose(self):pass def getBoundingBox(self,*args):pass@staticmethod def GetMinimumNumberOfDigits(document):pass@staticmethod def GetNumberingSchema(document,schemaType):pass def GetNumberingSequences(self):pass def GetNumbers(self,partition):pass@staticmethod def GetSchemasInDocument(document):pass@staticmethod def IsValidPartitionName(name,message):pass def MergeSequences(self,sourcePartitions,newPartition):pass def MoveSequence(self,fromPartition,newPartition):pass def ReleaseUnmanagedResources(self,*args):pass def RemoveGaps(self,partition):pass def setElementType(self,*args):pass@staticmethod def SetMinimumNumberOfDigits(document,value):pass def ShiftNumbers(self,partition,firstNumber):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass NumberingParameterId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Id of the parameter that stores values of the numbers on enumerated elements.
Get: NumberingParameterId(self: NumberingSchema) -> ElementId"""
 SchemaType=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies the kind of elements/objects this numbering schema is used for.
Get: SchemaType(self: NumberingSchema) -> NumberingSchemaType""" 
 MaximumStartingNumber=1073741822class NumberingSchemaType(GuidEnum):@staticmethod def __new__(self,guid):passclass NumberingSchemaTypes(object):StructuralNumberingSchemas=None __all__=['StructuralNumberingSchemas',]class NumberSystem(Element,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def GetReferencePick(self):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def SetReferencePick(self,referencePick):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass JustifyOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) """The offset to the justification curve.
Get: JustifyOffset(self: NumberSystem) -> floatSet: JustifyOffset(self: NumberSystem) = value""" 
 JustifyOption=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number justify option of number system.
Get: JustifyOption(self: NumberSystem) -> NumberSystemJustifyOptionSet: JustifyOption(self: NumberSystem) = value""" 
 NumberDisplayRule=property(lambda self:object(),lambda self,v:None,lambda self:None) """The display rule of the number system.
Get: NumberDisplayRule(self: NumberSystem) -> NumberSystemDisplayRuleSet: NumberDisplayRule(self: NumberSystem) = value""" 
 NumberedElementId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The LinkElementId of the numbered host element.
Get: NumberedElementId(self: NumberSystem) -> LinkElementId""" 
 NumberOrientation=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number orientation of number system.
Get: NumberOrientation(self: NumberSystem) -> TagOrientationSet: NumberOrientation(self: NumberSystem) = value""" 
 ReferenceOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) """The offset to the reference curve.
Get: ReferenceOffset(self: NumberSystem) -> floatSet: ReferenceOffset(self: NumberSystem) = value""" 
class NumberSystemDisplayRule(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass All=None Even=None Odd=None StartAndEnd=None value__=Noneclass NumberSystemJustifyOption(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Back=None Center=None Front=None value__=Noneclass NumericRevisionSettings(object,IDisposable):def Dispose(self):pass def IsEqual(self,other):pass def IsValid(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,*__args):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: NumericRevisionSettings) -> bool"""
 Prefix=property(lambda self:object(),lambda self,v:None,lambda self:None) """The prefix string that will be prepended to the number of each revision with Numeric RevisionNumberingType.
Get: Prefix(self: NumericRevisionSettings) -> strSet: Prefix(self: NumericRevisionSettings) = value""" 
 StartNumber=property(lambda self:object(),lambda self,v:None,lambda self:None) """The start number for the sequence.
Get: StartNumber(self: NumericRevisionSettings) -> intSet: StartNumber(self: NumericRevisionSettings) = value""" 
 Suffix=property(lambda self:object(),lambda self,v:None,lambda self:None) """The suffix string that will be appended to the number of each revision with Numeric RevisionNumberingType.
Get: Suffix(self: NumericRevisionSettings) -> strSet: Suffix(self: NumericRevisionSettings) = value""" 
class NurbSpline(Curve,IDisposable):@staticmethod def Create(*__args):pass@staticmethod def CreateCurve(*__args):pass def Dispose(self):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def SetControlPointsAndWeights(self,ctrlPoints,weights):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass CtrlPoints=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the control points of the nurb spline.
Get: CtrlPoints(self: NurbSpline) -> IList[XYZ]"""
 Degree=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the degree of the nurb spline.
Get: Degree(self: NurbSpline) -> int""" 
 isClosed=property(lambda self:object(),lambda self,v:None,lambda self:None) """Return/set the nurb spline's isClosed property.
Get: isClosed(self: NurbSpline) -> boolSet: isClosed(self: NurbSpline) = value""" 
 isRational=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns whether the nurb spline is rational or not.
Get: isRational(self: NurbSpline) -> bool""" 
 Knots=property(lambda self:object(),lambda self,v:None,lambda self:None) """Return/set the knots of the nurb spline.
Get: Knots(self: NurbSpline) -> DoubleArraySet: Knots(self: NurbSpline) = value""" 
 Weights=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the weights of the nurb spline.
Get: Weights(self: NurbSpline) -> DoubleArray""" 
class NurbsSurfaceData(object,IDisposable):@staticmethod def Create(degreeU,degreeV,knotsU,knotsV,controlPoints,weights,bReverseOrientation):pass def Dispose(self):pass def GetControlPoints(self):pass def GetKnotsU(self):pass def GetKnotsV(self):pass def GetWeights(self):pass def IsValid(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,other):pass def __repr__(self,*args):pass DegreeU=property(lambda self:object(),lambda self,v:None,lambda self:None) """The degree of the spline in the u-direction.
Get: DegreeU(self: NurbsSurfaceData) -> int"""
 DegreeV=property(lambda self:object(),lambda self,v:None,lambda self:None) """The degree of the spline in the v-direction.
Get: DegreeV(self: NurbsSurfaceData) -> int""" 
 IsRational=property(lambda self:object(),lambda self,v:None,lambda self:None) """Tells if the spline is rational or not.
 If it is true (rational), then the NURBS is a piecewise rational polynomial function. If it is false (non-rational), then the NURBS is a piecewise polynomial function.Get: IsRational(self: NurbsSurfaceData) -> bool""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: NurbsSurfaceData) -> bool""" 
 ReverseOrientation=property(lambda self:object(),lambda self,v:None,lambda self:None) """If true, the surface's orientation is opposite to the canonical parametric orientation, otherwise it is the same.
 The canonical parametric orientation is a counter-clockwise sense of rotation in the uv-parameter plane. Extrinsically, the oriented normal vector for the canonical parametric orientation points in the direction of the cross product dS/du x dS/dv, which S(u, v) is the parameterized surface.Get: ReverseOrientation(self: NurbsSurfaceData) -> bool""" 
class Opening(Element,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass BoundaryCurves=property(lambda self:object(),lambda self,v:None,lambda self:None) """The geometry information for non-rectangular openings in project documents, 
or for all openings in family documents.Get: BoundaryCurves(self: Opening) -> CurveArray"""
 BoundaryRect=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the geometry information if the opening boundary is a rect.
Get: BoundaryRect(self: Opening) -> IList[XYZ]""" 
 Host=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the host element of this opening.
Get: Host(self: Opening) -> Element""" 
 IsRectBoundary=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the information whether the opening has a rectangular boundary.
Get: IsRectBoundary(self: Opening) -> bool""" 
 IsTransparentIn3D=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the opening is transparent in 3D view when loaded into the project.
Get: IsTransparentIn3D(self: Opening) -> boolSet: IsTransparentIn3D(self: Opening) = value""" 
 IsTransparentInElevation=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the opening is transparent in elevation view when loaded into the project.
Get: IsTransparentInElevation(self: Opening) -> boolSet: IsTransparentInElevation(self: Opening) = value""" 
class OpeningWrappingCondition(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Exterior=None ExteriorAndInterior=None Interior=None None=None value__=Noneclass OpenOptions(object,IDisposable):def Dispose(self):pass def GetOpenWorksetsConfiguration(self):pass def ReleaseUnmanagedResources(self,*args):pass def SetOpenWorksetsConfiguration(self,openConfiguration):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass AllowOpeningLocalByWrongUser=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether a local file is allowed to be opened as read-only by a user other than its owner.
Get: AllowOpeningLocalByWrongUser(self: OpenOptions) -> boolSet: AllowOpeningLocalByWrongUser(self: OpenOptions) = value"""
 Audit=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether to expand all elements in order to check for corruption.
Get: Audit(self: OpenOptions) -> boolSet: Audit(self: OpenOptions) = value""" 
 DetachFromCentralOption=property(lambda self:object(),lambda self,v:None,lambda self:None) """An option that specifies whether or not a workset-enabled document is detached from its central document.
Get: DetachFromCentralOption(self: OpenOptions) -> DetachFromCentralOptionSet: DetachFromCentralOption(self: OpenOptions) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: OpenOptions) -> bool""" 
class OptionalFunctionalityUtils(object):@staticmethod def IsDGNExportAvailable():pass@staticmethod def IsDGNImportLinkAvailable():pass@staticmethod def IsDWFExportAvailable():pass@staticmethod def IsDWGExportAvailable():pass@staticmethod def IsDWGImportLinkAvailable():pass@staticmethod def IsDXFExportAvailable():pass@staticmethod def IsFBXExportAvailable():pass@staticmethod def IsGraphicsAvailable():pass@staticmethod def IsIFCAvailable():pass@staticmethod def IsNavisworksExporterAvailable():pass@staticmethod def IsSATImportLinkAvailable():pass@staticmethod def IsShapeImporterAvailable():pass@staticmethod def IsSKPImportLinkAvailable():pass __all__=['IsDGNExportAvailable','IsDGNImportLinkAvailable','IsDWFExportAvailable','IsDWGExportAvailable','IsDWGImportLinkAvailable','IsDXFExportAvailable','IsFBXExportAvailable','IsGraphicsAvailable','IsIFCAvailable','IsNavisworksExporterAvailable','IsSATImportLinkAvailable','IsShapeImporterAvailable','IsSKPImportLinkAvailable',]class Options(APIObject,IDisposable):def Dispose(self):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,pOptions=None):pass ComputeReferences=property(lambda self:object(),lambda self,v:None,lambda self:None) """Determines whether or not references to geometric objects are computed.
Get: ComputeReferences(self: Options) -> bool Checks whether references to geometric objects are computed.Set: ComputeReferences(self: Options) Enables computing of references to geometric objects. = value"""
 DetailLevel=property(lambda self:object(),lambda self,v:None,lambda self:None) """The detail level for the geometry extracted with these options.
Get: DetailLevel(self: Options) -> ViewDetailLevel Returns the preferred detail level.Set: DetailLevel(self: Options) Sets the preferred detail level. = value""" 
 IncludeNonVisibleObjects=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether to extract element geometry objects not set as Visible.  The default is false.
Get: IncludeNonVisibleObjects(self: Options) -> boolSet: IncludeNonVisibleObjects(self: Options) = value""" 
 View=property(lambda self:object(),lambda self,v:None,lambda self:None) """The view used for geometry extraction.
Get: View(self: Options) -> View Retrieves the view that was set for this object.Set: View(self: Options) Sets the view that drives extraction of geometry. = value""" 
class Outline(object,IDisposable):def AddPoint(self,point):pass def Contains(self,point,tolerance):pass def ContainsOtherOutline(self,otherOutline,tolerance):pass def Dispose(self):pass def GetDiagonalLength(self):pass def Intersects(self,outline,tolerance):pass def IsScaleValid(self,scale):pass def ReleaseUnmanagedResources(self,*args):pass def Scale(self,scale):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,*__args):pass def __repr__(self,*args):pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies if the outline represents an empty outline.
Get: IsEmpty(self: Outline) -> bool"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: Outline) -> bool""" 
 MaximumPoint=property(lambda self:object(),lambda self,v:None,lambda self:None) """The maximum point of the bounding box.
Get: MaximumPoint(self: Outline) -> XYZSet: MaximumPoint(self: Outline) = value""" 
 MinimumPoint=property(lambda self:object(),lambda self,v:None,lambda self:None) """The minimum point of the bounding box.
Get: MinimumPoint(self: Outline) -> XYZSet: MinimumPoint(self: Outline) = value""" 
class OverrideGraphicSettings(object,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def SetCutFillColor(self,color):pass def SetCutFillPatternId(self,fillPatternId):pass def SetCutFillPatternVisible(self,cutFillPatternVisible):pass def SetCutLineColor(self,color):pass def SetCutLinePatternId(self,linePatternId):pass def SetCutLineWeight(self,lineWeight):pass def SetDetailLevel(self,detailLevel):pass def SetHalftone(self,halftone):pass def SetProjectionFillColor(self,color):pass def SetProjectionFillPatternId(self,fillPatternId):pass def SetProjectionFillPatternVisible(self,projectFillPatternVisible):pass def SetProjectionLineColor(self,color):pass def SetProjectionLinePatternId(self,linePatternId):pass def SetProjectionLineWeight(self,lineWeight):pass def SetSurfaceTransparency(self,transparency):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,overrideGraphicSettings=None):pass def __repr__(self,*args):pass CutFillColor=property(lambda self:object(),lambda self,v:None,lambda self:None) """Cut surface fill color.
Get: CutFillColor(self: OverrideGraphicSettings) -> Color"""
 CutFillPatternId=property(lambda self:object(),lambda self,v:None,lambda self:None) """ElementId of the cut surface fill pattern.
Get: CutFillPatternId(self: OverrideGraphicSettings) -> ElementId""" 
 CutLineColor=property(lambda self:object(),lambda self,v:None,lambda self:None) """Cut surface line color.
Get: CutLineColor(self: OverrideGraphicSettings) -> Color""" 
 CutLinePatternId=property(lambda self:object(),lambda self,v:None,lambda self:None) """ElementId of the cut surface line pattern.
Get: CutLinePatternId(self: OverrideGraphicSettings) -> ElementId""" 
 CutLineWeight=property(lambda self:object(),lambda self,v:None,lambda self:None) """Cut surface line weight.
Get: CutLineWeight(self: OverrideGraphicSettings) -> int""" 
 DetailLevel=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Detail Level.
Get: DetailLevel(self: OverrideGraphicSettings) -> ViewDetailLevel""" 
 Halftone=property(lambda self:object(),lambda self,v:None,lambda self:None) """Value of the halftone override.
Get: Halftone(self: OverrideGraphicSettings) -> bool""" 
 IsCutFillPatternVisible=property(lambda self:object(),lambda self,v:None,lambda self:None) """Visibility of the cut surface fill pattern.
Get: IsCutFillPatternVisible(self: OverrideGraphicSettings) -> bool""" 
 IsProjectionFillPatternVisible=property(lambda self:object(),lambda self,v:None,lambda self:None) """The visibility of the projection surface fill pattern.
Get: IsProjectionFillPatternVisible(self: OverrideGraphicSettings) -> bool""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: OverrideGraphicSettings) -> bool""" 
 ProjectionFillColor=property(lambda self:object(),lambda self,v:None,lambda self:None) """Projection surface fill color.
Get: ProjectionFillColor(self: OverrideGraphicSettings) -> Color""" 
 ProjectionFillPatternId=property(lambda self:object(),lambda self,v:None,lambda self:None) """ElementId of the projection surface fill pattern.
Get: ProjectionFillPatternId(self: OverrideGraphicSettings) -> ElementId""" 
 ProjectionLineColor=property(lambda self:object(),lambda self,v:None,lambda self:None) """Projection surface line color.
Get: ProjectionLineColor(self: OverrideGraphicSettings) -> Color""" 
 ProjectionLinePatternId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Id of the projection surface line pattern.
Get: ProjectionLinePatternId(self: OverrideGraphicSettings) -> ElementId""" 
 ProjectionLineWeight=property(lambda self:object(),lambda self,v:None,lambda self:None) """The projection surface line weight.
Get: ProjectionLineWeight(self: OverrideGraphicSettings) -> int""" 
 Transparency=property(lambda self:object(),lambda self,v:None,lambda self:None) """Transparency of surfaces.
Get: Transparency(self: OverrideGraphicSettings) -> int""" 
 InvalidPenNumber=-1class OverridePermissions(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass CutFills=None CutLines=None Halftone=None ProjectionFills=None ProjectionLines=None Surfaces=None value__=None ViewDetailLevel=Noneclass PageOrientationType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Landscape=None Portrait=None value__=Noneclass Panel(FamilyInstance,IDisposable):def Dispose(self):pass def FindHostPanel(self):pass def getBoundingBox(self,*args):pass def GetRefGridLines(self,uGridLineId,vGridLineId):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass Lockable=property(lambda self:object(),lambda self,v:None,lambda self:None) """This property is used to know whether a panel can be locked.
Get: Lockable(self: Panel) -> bool""" 
 PanelType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Panel style of this Panel.
Get: PanelType(self: Panel) -> PanelTypeSet: PanelType(self: Panel) = value""" 
 Transform=property(lambda self:object(),lambda self,v:None,lambda self:None) """This property is used to find the transform of a curtain panel within project.
Get: Transform(self: Panel) -> Transform""" 
class PanelType(FamilySymbol,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass PanelTypeSet(APIObject,IDisposable,IEnumerable):def Clear(self):pass def Contains(self,item):pass def Dispose(self):pass def Erase(self,item):pass def ForwardIterator(self):pass def GetEnumerator(self):pass def Insert(self,item):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def ReverseIterator(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the set is empty.
Get: IsEmpty(self: PanelTypeSet) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of panel types that are in the set.
Get: Size(self: PanelTypeSet) -> int""" 
class PanelTypeSetIterator(APIObject,IDisposable,IEnumerator):def Dispose(self):pass def MoveNext(self):pass def next(self,*args):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def Reset(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: PanelTypeSetIterator) -> object"""
class PaperPlacementType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Center=None Margins=None value__=Noneclass PaperSize(APIObject,IDisposable):def Dispose(self):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieve the paper size name of current project.
Get: Name(self: PaperSize) -> str"""
class PaperSizeSet(APIObject,IDisposable,IEnumerable):def Clear(self):pass def Contains(self,item):pass def Dispose(self):pass def Erase(self,item):pass def ForwardIterator(self):pass def GetEnumerator(self):pass def Insert(self,item):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def ReverseIterator(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the set is empty.
Get: IsEmpty(self: PaperSizeSet) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of objects that are in the set.
Get: Size(self: PaperSizeSet) -> int""" 
class PaperSizeSetIterator(APIObject,IDisposable,IEnumerator):def Dispose(self):pass def MoveNext(self):pass def next(self,*args):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def Reset(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: PaperSizeSetIterator) -> object"""
class PaperSource(APIObject,IDisposable):def Dispose(self):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieve the paper source name of current project.
Get: Name(self: PaperSource) -> str"""
class PaperSourceSet(APIObject,IDisposable,IEnumerable):def Clear(self):pass def Contains(self,item):pass def Dispose(self):pass def Erase(self,item):pass def ForwardIterator(self):pass def GetEnumerator(self):pass def Insert(self,item):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def ReverseIterator(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the set is empty.
Get: IsEmpty(self: PaperSourceSet) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of objects that are in the set.
Get: Size(self: PaperSourceSet) -> int""" 
class PaperSourceSetIterator(APIObject,IDisposable,IEnumerator):def Dispose(self):pass def MoveNext(self):pass def next(self,*args):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def Reset(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: PaperSourceSetIterator) -> object"""
class Parameter(APIObject,IDisposable):def AsDouble(self):pass def AsElementId(self):pass def AsInteger(self):pass def AssociateWithGlobalParameter(self,gpId):pass def AsString(self):pass def AsValueString(self,formatOptions=None):pass def CanBeAssociatedWithGlobalParameter(self,gpId):pass def CanBeAssociatedWithGlobalParameters(self):pass def Dispose(self):pass def DissociateFromGlobalParameter(self):pass def GetAssociatedGlobalParameter(self):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def Set(self,value):pass def SetValueString(self,valueString):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass Definition=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the Definition object that describes the data type, name and other details of the
parameter.Get: Definition(self: Parameter) -> Definition"""
 DisplayUnitType=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get the display unit type of the parameter object.
Get: DisplayUnitType(self: Parameter) -> DisplayUnitType""" 
 Element=property(lambda self:object(),lambda self,v:None,lambda self:None) """The element to which this parameter belongs.
Get: Element(self: Parameter) -> Element""" 
 GUID=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Guid for a shared parameter.
Get: GUID(self: Parameter) -> Guid""" 
 HasValue=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies if the parameter has an assigned value.
Get: HasValue(self: Parameter) -> bool""" 
 Id=property(lambda self:object(),lambda self,v:None,lambda self:None) """The id of the parameter.
Get: Id(self: Parameter) -> ElementId""" 
 IsReadOnly=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get the readonly property of the parameter.
Get: IsReadOnly(self: Parameter) -> bool""" 
 IsShared=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies if the parameter is a shared parameter.
Get: IsShared(self: Parameter) -> bool""" 
 StorageType=property(lambda self:object(),lambda self,v:None,lambda self:None) """Describes the type that is used internally within the parameter to store its value.
Get: StorageType(self: Parameter) -> StorageType""" 
 UserModifiable=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether the interactive user can modify the value of this parameter.
Get: UserModifiable(self: Parameter) -> bool""" 
class ParameterFilterElement(FilterElement,IDisposable):@staticmethod def AllRuleParametersApplicable(*__args):pass def ClearRules(self):pass@staticmethod def Create(aDocument,name,categories,rules=None):pass def Dispose(self):pass def getBoundingBox(self,*args):pass def GetCategories(self):pass@staticmethod def GetRuleParameter(rule):pass def GetRuleParameters(self):pass def GetRules(self):pass def ReleaseUnmanagedResources(self,*args):pass def SetCategories(self,categories):pass def setElementType(self,*args):pass def SetRules(self,rules):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass ParameterFilterRuleFactory(object,IDisposable):@staticmethod def CreateBeginsWithRule(parameter,value,caseSensitive):pass@staticmethod def CreateContainsRule(parameter,value,caseSensitive):pass@staticmethod def CreateEndsWithRule(parameter,value,caseSensitive):pass@staticmethod def CreateEqualsRule(parameter,value,*__args):pass@staticmethod def CreateGreaterOrEqualRule(parameter,value,*__args):pass@staticmethod def CreateGreaterRule(parameter,value,*__args):pass@staticmethod def CreateIsAssociatedWithGlobalParameterRule(parameter,value):pass@staticmethod def CreateIsNotAssociatedWithGlobalParameterRule(parameter,value):pass@staticmethod def CreateLessOrEqualRule(parameter,value,*__args):pass@staticmethod def CreateLessRule(parameter,value,*__args):pass@staticmethod def CreateNotBeginsWithRule(parameter,value,caseSensitive):pass@staticmethod def CreateNotContainsRule(parameter,value,caseSensitive):pass@staticmethod def CreateNotEndsWithRule(parameter,value,caseSensitive):pass@staticmethod def CreateNotEqualsRule(parameter,value,*__args):pass@staticmethod def CreateSharedParameterApplicableRule(parameterName):pass def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ParameterFilterRuleFactory) -> bool"""
class ParameterFilterUtilities(object):@staticmethod def GetAllFilterableCategories():pass@staticmethod def GetFilterableParametersInCommon(aDoc,categories):pass@staticmethod def GetInapplicableParameters(aDoc,categories,parameters):pass@staticmethod def IsParameterApplicable(element,parameter):pass@staticmethod def RemoveUnfilterableCategories(categories):pass __all__=['GetAllFilterableCategories','GetFilterableParametersInCommon','GetInapplicableParameters','IsParameterApplicable','RemoveUnfilterableCategories',]class ParameterMap(APIObject,IDisposable,IEnumerable):def Clear(self):pass def Contains(self,key):pass def Dispose(self):pass def Erase(self,key):pass def ForwardIterator(self):pass def GetEnumerator(self):pass def Insert(self,key,item):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def ReverseIterator(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __getitem__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass def __setitem__(self,*args):pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the map is empty.
Get: IsEmpty(self: ParameterMap) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of objects that are in the map.
Get: Size(self: ParameterMap) -> int""" 
class ParameterMapIterator(APIObject,IDisposable,IEnumerator):def Dispose(self):pass def MoveNext(self):pass def next(self,*args):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def Reset(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: ParameterMapIterator) -> object"""
 Key=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the key that is the current focus of the iterator.
Get: Key(self: ParameterMapIterator) -> str""" 
class ParameterSet(APIObject,IDisposable,IEnumerable):def Clear(self):pass def Contains(self,item):pass def Dispose(self):pass def Erase(self,item):pass def ForwardIterator(self):pass def GetEnumerator(self):pass def Insert(self,item):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def ReverseIterator(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the set is empty.
Get: IsEmpty(self: ParameterSet) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of parameters that are in the set.
Get: Size(self: ParameterSet) -> int""" 
class ParameterSetIterator(APIObject,IDisposable,IEnumerator):def Dispose(self):pass def MoveNext(self):pass def next(self,*args):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def Reset(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: ParameterSetIterator) -> object"""
class ParametersOrder(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Ascending=None Descending=None value__=Noneclass ParameterType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Acceleration=None Angle=None Area=None AreaForce=None AreaForcePerLength=None BarDiameter=None ColorTemperature=None CrackWidth=None Currency=None DisplacementDeflection=None ElectricalApparentPower=None ElectricalCableTraySize=None ElectricalConduitSize=None ElectricalCurrent=None ElectricalDemandFactor=None ElectricalEfficacy=None ElectricalFrequency=None ElectricalIlluminance=None ElectricalLuminance=None ElectricalLuminousFlux=None ElectricalLuminousIntensity=None ElectricalPotential=None ElectricalPower=None ElectricalPowerDensity=None ElectricalResistivity=None ElectricalTemperature=None ElectricalTemperatureDifference=None ElectricalWattage=None Energy=None FamilyType=None FixtureUnit=None Force=None ForceLengthPerAngle=None ForcePerLength=None HVACAirflow=None HVACAirflowDensity=None HVACAirflowDividedByCoolingLoad=None HVACAirflowDividedByVolume=None HVACAreaDividedByCoolingLoad=None HVACAreaDividedByHeatingLoad=None HVACCoefficientOfHeatTransfer=None HVACCoolingLoad=None HVACCoolingLoadDividedByArea=None HVACCoolingLoadDividedByVolume=None HVACCrossSection=None HVACDensity=None HVACDuctInsulationThickness=None HVACDuctLiningThickness=None HVACDuctSize=None HVACEnergy=None HVACFactor=None HVACFriction=None HVACHeatGain=None HVACHeatingLoad=None HVACHeatingLoadDividedByArea=None HVACHeatingLoadDividedByVolume=None HVACPermeability=None HVACPower=None HVACPowerDensity=None HVACPressure=None HVACRoughness=None HVACSlope=None HVACSpecificHeat=None HVACSpecificHeatOfVaporization=None HVACTemperature=None HVACTemperatureDifference=None HVACThermalConductivity=None HVACThermalMass=None HVACThermalResistance=None HVACVelocity=None HVACViscosity=None Image=None Integer=None Invalid=None Length=None LinearForce=None LinearForceLengthPerAngle=None LinearForcePerLength=None LinearMoment=None LoadClassification=None Mass=None MassDensity=None MassPerUnitArea=None MassPerUnitLength=None Material=None Moment=None MomentOfInertia=None MultilineText=None Number=None NumberOfPoles=None Period=None PipeDimension=None PipeInsulationThickness=None PipeMass=None PipeMassPerUnitLength=None PipeSize=None PipingDensity=None PipingFlow=None PipingFriction=None PipingPressure=None PipingRoughness=None PipingSlope=None PipingTemperature=None PipingTemperatureDifference=None PipingVelocity=None PipingViscosity=None PipingVolume=None Pulsation=None ReinforcementArea=None ReinforcementAreaPerUnitLength=None ReinforcementCover=None ReinforcementLength=None ReinforcementSpacing=None ReinforcementVolume=None Rotation=None SectionArea=None SectionDimension=None SectionModulus=None SectionProperty=None Slope=None Stress=None StructuralFrequency=None StructuralVelocity=None SurfaceArea=None Text=None ThermalExpansion=None UnitWeight=None URL=None value__=None Volume=None WarpingConstant=None Weight=None WeightPerUnitLength=None WireSize=None YesNo=Noneclass ParameterValueProvider(FilterableValueProvider,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,parameter):pass Parameter=property(lambda self:object(),lambda self,v:None,lambda self:None) """The parameter used to provide a string, integer, double-precision, or ElementId
 value on request for a given element.Get: Parameter(self: ParameterValueProvider) -> ElementIdSet: Parameter(self: ParameterValueProvider) = value"""
class Part(Element,IDisposable):def CanOffsetFace(self,face):pass def Dispose(self):pass def getBoundingBox(self,*args):pass def GetSourceElementIds(self):pass def GetSourceElementOriginalCategoryIds(self):pass def ReleaseUnmanagedResources(self,*args):pass def ResetPartShape(self):pass def setElementType(self,*args):pass def SetFaceOffset(self,face,offset):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass Excluded=property(lambda self:object(),lambda self,v:None,lambda self:None) """True if the part is excluded, false otherwise
Get: Excluded(self: Part) -> boolSet: Excluded(self: Part) = value"""
 OriginalCategoryId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The category Id of the original element corresponding to this Part.
Get: OriginalCategoryId(self: Part) -> ElementIdSet: OriginalCategoryId(self: Part) = value""" 
 PartMaker=property(lambda self:object(),lambda self,v:None,lambda self:None) """The PartMaker that created this Part.
Get: PartMaker(self: Part) -> PartMaker""" 
class PartEdgeConditionOrientation(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Complement=None Mirrored=None MirroredAndRotated=None value__=Noneclass PartMaker(Element,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def GetSourceElementIds(self):pass def IsSourceElement(self,elemId):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def SetSourceElementIds(self,sourceElementIds):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass PartMakerMethodToDivideVolumes(object,IDisposable):def AddIntersectingReference(self,intersectingReference,offset):pass@staticmethod def AreElementsValidIntersectingReferences(*__args):pass def CanBeDivisionProfile(self,familyId,familyDocument=None):pass def Dispose(self):pass def GetOffsetForIntersectingReference(self,intersectingReference):pass def GetPlaneOfSketch(self):pass def GetSketchCurves(self,curveArray):pass def GetSplitRefsOffsets(self):pass@staticmethod def IsElementValidIntersectingReference(*__args):pass@staticmethod def IsValidSketchPlane(document,sketchPlaneId):pass def ReleaseUnmanagedResources(self,*args):pass def RemoveIntersectingReference(self,intersectingReference):pass def SetOffsetForIntersectingReference(self,intersectingReference,offset):pass def UsesReference(self,intersectingReference):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass DivisionGap=property(lambda self:object(),lambda self,v:None,lambda self:None) """The gap which is created between matching profiles of parts.
Get: DivisionGap(self: PartMakerMethodToDivideVolumes) -> floatSet: DivisionGap(self: PartMakerMethodToDivideVolumes) = value"""
 DivisionPatternMirror=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether pattern defined by the division rule should be mirrored before application
 Mirroring is similar to changing indices of u-const gridlines.Get: DivisionPatternMirror(self: PartMakerMethodToDivideVolumes) -> boolSet: DivisionPatternMirror(self: PartMakerMethodToDivideVolumes) = value""" 
 DivisionRotationAngle=property(lambda self:object(),lambda self,v:None,lambda self:None) """Angle by which both u- and v- gridlines of the division are rotated with respect
 to the natural u/v-const directions of the sketch plane.Get: DivisionRotationAngle(self: PartMakerMethodToDivideVolumes) -> floatSet: DivisionRotationAngle(self: PartMakerMethodToDivideVolumes) = value""" 
 DivisionRuleId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Id of the 'DivisionRule' which is used to augment the cutting sketch.
Get: DivisionRuleId(self: PartMakerMethodToDivideVolumes) -> ElementIdSet: DivisionRuleId(self: PartMakerMethodToDivideVolumes) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: PartMakerMethodToDivideVolumes) -> bool""" 
 ProfileFlipAcross=property(lambda self:object(),lambda self,v:None,lambda self:None) """True if the corresponding left/upper parts profile are mirrored with respect
 to the division line. False if the profile of left/upper parts are defined directly by the profile family.Get: ProfileFlipAcross(self: PartMakerMethodToDivideVolumes) -> boolSet: ProfileFlipAcross(self: PartMakerMethodToDivideVolumes) = value""" 
 ProfileFlipAlong=property(lambda self:object(),lambda self,v:None,lambda self:None) """True if the corresponding left/upper parts profile are mirrored with respect
 to the center line of the hosts to be divided. False if the profile of left/upper parts are defined directly by the profile family.Get: ProfileFlipAlong(self: PartMakerMethodToDivideVolumes) -> boolSet: ProfileFlipAlong(self: PartMakerMethodToDivideVolumes) = value""" 
 ProfileMatch=property(lambda self:object(),lambda self,v:None,lambda self:None) """Determines how two profiles match.
Get: ProfileMatch(self: PartMakerMethodToDivideVolumes) -> PartEdgeConditionOrientationSet: ProfileMatch(self: PartMakerMethodToDivideVolumes) = value""" 
 ProfileOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) """The offset which is applied to a family-defined profile in the
 direction away from the division line and toward left/upper part to obtain its profile.Get: ProfileOffset(self: PartMakerMethodToDivideVolumes) -> floatSet: ProfileOffset(self: PartMakerMethodToDivideVolumes) = value""" 
 ProfileType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The id of the profile family applied to boundaries between parts.
Get: ProfileType(self: PartMakerMethodToDivideVolumes) -> ElementIdSet: ProfileType(self: PartMakerMethodToDivideVolumes) = value""" 
 UConstDivisionIndent=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indentation for the application of division rule's pattern across u-const gridlines
 (i.e., similar to changing indices of u-const gridlines).Get: UConstDivisionIndent(self: PartMakerMethodToDivideVolumes) -> intSet: UConstDivisionIndent(self: PartMakerMethodToDivideVolumes) = value""" 
 VConstDivisionIndent=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indentation for the application of division rule's pattern across v-const gridlines
 (i.e., similar to changing indices of v-const gridlines).Get: VConstDivisionIndent(self: PartMakerMethodToDivideVolumes) -> intSet: VConstDivisionIndent(self: PartMakerMethodToDivideVolumes) = value""" 
class PartsVisibility(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass ShowOriginalOnly=None ShowPartsAndOriginal=None ShowPartsOnly=None Unset=None value__=Noneclass PartType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass AttachesTo=None BreaksInto=None Cap=None ChannelCableTrayCross=None ChannelCableTrayElbow=None ChannelCableTrayMultiPort=None ChannelCableTrayOffset=None ChannelCableTrayTee=None ChannelCableTrayTransition=None ChannelCableTrayUnion=None ChannelCableTrayVerticalElbow=None Cross=None Damper=None DuctMounted=None Elbow=None EndCap=None EquipmentSwitch=None HandrailBracketHardware=None Handrails=None InlineSensor=None JunctionBox=None JunctionBoxCross=None JunctionBoxElbow=None JunctionBoxTee=None LadderCableTrayCross=None LadderCableTrayElbow=None LadderCableTrayMultiPort=None LadderCableTrayOffset=None LadderCableTrayTee=None LadderCableTrayTransition=None LadderCableTrayUnion=None LadderCableTrayVerticalElbow=None LateralCross=None LateralTee=None MultiPort=None Normal=None Offset=None OtherPanel=None PanelBoard=None PanelBracketHardware=None Pants=None PipeFlange=None PipeMechanicalCoupling=None Rails=None Sensor=None SpudAdjustable=None SpudPerpendicular=None Switch=None SwitchBoard=None TapAdjustable=None TapPerpendicular=None Tee=None TerminationHardware=None TopRails=None Transformer=None Transition=None Undefined=None Union=None value__=None ValveBreaksInto=None ValveNormal=None Wye=Noneclass PartUtils(object):@staticmethod def AreElementsValidForCreateParts(document,elementIds):pass@staticmethod def ArePartsValidForDivide(document,elementIdsToDivide):pass@staticmethod def ArePartsValidForMerge(document,partIds):pass@staticmethod def CreateMergedPart(document,partIds):pass@staticmethod def CreateParts(document,*__args):pass@staticmethod def DivideParts(document,elementIdsToDivide,intersectingReferenceIds,curveArray,sketchPlaneId):pass@staticmethod def FindMergeableClusters(doc,partIds):pass@staticmethod def GetAssociatedPartMaker(hostDocument,*__args):pass@staticmethod def GetAssociatedParts(hostDocument,*__args):pass@staticmethod def GetChainLengthToOriginal(part):pass@staticmethod def GetMergedParts(part):pass@staticmethod def GetPartMakerMethodToDivideVolumeFW(partMaker):pass@staticmethod def HasAssociatedParts(hostDocument,*__args):pass@staticmethod def IsMergedPart(part):pass@staticmethod def IsPartDerivedFromLink(dPart):pass@staticmethod def IsValidForCreateParts(document,hostOrLinkElementId):pass __all__=['AreElementsValidForCreateParts','ArePartsValidForDivide','ArePartsValidForMerge','CreateMergedPart','CreateParts','DivideParts','FindMergeableClusters','GetAssociatedPartMaker','GetAssociatedParts','GetChainLengthToOriginal','GetMergedParts','GetPartMakerMethodToDivideVolumeFW','HasAssociatedParts','IsMergedPart','IsPartDerivedFromLink','IsValidForCreateParts',]class SketchBase(Element,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass Path3d(SketchBase,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass AllCurveLoops=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get all the Curve Loops of Path3d.
Get: AllCurveLoops(self: Path3d) -> CurveArrArray"""
 NumCurveLoops=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get the Number of Curve Loops of Path3d.
Get: NumCurveLoops(self: Path3d) -> int""" 
class PathType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Absolute=None Content=None Relative=None Server=None value__=Noneclass PerformanceAdviser(object,IDisposable):def AddRule(self,id,rule):pass def DeleteRule(self,id):pass def Dispose(self):pass def ExecuteAllRules(self,document):pass def ExecuteRules(self,document,rules):pass def GetAllRuleIds(self):pass def GetElementFilterFromRule(self,*__args):pass def GetNumberOfRules(self):pass@staticmethod def GetPerformanceAdviser():pass def GetRuleDescription(self,*__args):pass def GetRuleId(self,index):pass def GetRuleName(self,*__args):pass def IsRuleEnabled(self,*__args):pass def PostWarning(self,message):pass def ReleaseUnmanagedResources(self,*args):pass def SetRuleEnabled(self,*__args):pass def WillRuleCheckElements(self,*__args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: PerformanceAdviser) -> bool"""
class PerformanceAdviserRuleId(GuidEnum):@staticmethod def __new__(self,guid):passclass PerformanceAdviserRules(object):__all__=[]class Phase(Element,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass PhaseArray(APIObject,IDisposable,IEnumerable):def Append(self,item):pass def Clear(self):pass def Dispose(self):pass def ForwardIterator(self):pass def GetEnumerator(self):pass def Insert(self,item,index):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def ReverseIterator(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __getitem__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass def __setitem__(self,*args):pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the array is empty.
Get: IsEmpty(self: PhaseArray) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of phases that are in the array.
Get: Size(self: PhaseArray) -> int""" 
class PhaseArrayIterator(APIObject,IDisposable,IEnumerator):def Dispose(self):pass def MoveNext(self):pass def next(self,*args):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def Reset(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: PhaseArrayIterator) -> object"""
class PhaseFilter(Element,IDisposable):@staticmethod def Create(document,name):pass def Dispose(self):pass def getBoundingBox(self,*args):pass def GetPhaseStatusPresentation(self,status):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def SetPhaseStatusPresentation(self,status,presentation):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass IsDefault=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether this filter is the default one.
Get: IsDefault(self: PhaseFilter) -> bool"""
class PhaseStatusPresentation(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass DontShow=None ShowByCategory=None ShowOverriden=None value__=Noneclass PlanarFace(Face,IDisposable):def Dispose(self):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass FaceNormal=property(lambda self:object(),lambda self,v:None,lambda self:None) """Normal of the planar face.
Get: FaceNormal(self: PlanarFace) -> XYZ"""
 Origin=property(lambda self:object(),lambda self,v:None,lambda self:None) """Origin of the surface.
Get: Origin(self: PlanarFace) -> XYZ""" 
 XVector=property(lambda self:object(),lambda self,v:None,lambda self:None) """The X-vector of the planar face.
Get: XVector(self: PlanarFace) -> XYZ""" 
 YVector=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Y-vector of the planar face.
Get: YVector(self: PlanarFace) -> XYZ""" 
class PlanCircuit(APIObject,IDisposable):def Dispose(self):pass def GetPointInside(self):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass Area=property(lambda self:object(),lambda self,v:None,lambda self:None) """The enclosed area of the circuit.
Get: Area(self: PlanCircuit) -> float"""
 IsRoomLocated=property(lambda self:object(),lambda self,v:None,lambda self:None) """Reports whether there is a room located in this circuit.
Get: IsRoomLocated(self: PlanCircuit) -> bool""" 
 SideNum=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number of sides in the circuit.
Get: SideNum(self: PlanCircuit) -> int""" 
class PlanCircuitSet(APIObject,IDisposable,IEnumerable):def Clear(self):pass def Contains(self,item):pass def Dispose(self):pass def Erase(self,item):pass def ForwardIterator(self):pass def GetEnumerator(self):pass def Insert(self,item):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def ReverseIterator(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the set is empty.
Get: IsEmpty(self: PlanCircuitSet) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of objects that are in the set.
Get: Size(self: PlanCircuitSet) -> int""" 
class PlanCircuitSetIterator(APIObject,IDisposable,IEnumerator):def Dispose(self):pass def MoveNext(self):pass def next(self,*args):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def Reset(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: PlanCircuitSetIterator) -> object"""
class Plane(Surface,IDisposable):@staticmethod def Create(frameOfReference):pass@staticmethod def CreateByNormalAndOrigin(normal,origin):pass@staticmethod def CreateByOriginAndBasis(origin,basisX,basisY):pass@staticmethod def CreateByThreePoints(point1,point2,point3):pass def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,*__args):pass Normal=property(lambda self:object(),lambda self,v:None,lambda self:None) """Plane normal.
Get: Normal(self: Plane) -> XYZ"""
 Origin=property(lambda self:object(),lambda self,v:None,lambda self:None) """Plane origin.
Get: Origin(self: Plane) -> XYZ""" 
 XVec=property(lambda self:object(),lambda self,v:None,lambda self:None) """Axis defining the first parametric direction of the plane.
Get: XVec(self: Plane) -> XYZ""" 
 YVec=property(lambda self:object(),lambda self,v:None,lambda self:None) """Axis defining the second parametric direction of the plane.
Get: YVec(self: Plane) -> XYZ""" 
class PlanTopology(APIObject,IDisposable):def Dispose(self):pass def GetRoomIds(self):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass Circuits=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Circuits of the PlanTopology.
Get: Circuits(self: PlanTopology) -> PlanCircuitSet"""
 Level=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Level of the PlanTopology.
Get: Level(self: PlanTopology) -> Level""" 
 Phase=property(lambda self:object(),lambda self,v:None,lambda self:None) """The phase of the PlanTopology.
Get: Phase(self: PlanTopology) -> Phase""" 
class PlanTopologySet(APIObject,IDisposable,IEnumerable):def Clear(self):pass def Contains(self,item):pass def Dispose(self):pass def Erase(self,item):pass def ForwardIterator(self):pass def GetEnumerator(self):pass def Insert(self,item):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def ReverseIterator(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the set is empty.
Get: IsEmpty(self: PlanTopologySet) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of objects that are in the set.
Get: Size(self: PlanTopologySet) -> int""" 
class PlanTopologySetIterator(APIObject,IDisposable,IEnumerator):def Dispose(self):pass def MoveNext(self):pass def next(self,*args):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def Reset(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: PlanTopologySetIterator) -> object"""
class PlanViewDirection(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Down=None Undefined=None Up=None value__=Noneclass PlanViewPlane(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass BottomClipPlane=None CutPlane=None TopClipPlane=None UnderlayBottom=None value__=None ViewDepthPlane=Noneclass PlanViewRange(object,IDisposable):def Dispose(self):pass def GetLevelId(self,planViewPlane):pass def GetOffset(self,planViewPlane):pass def ReleaseUnmanagedResources(self,*args):pass def SetLevelId(self,planViewPlane,id):pass def SetOffset(self,planViewPlane,offset):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: PlanViewRange) -> bool"""
 Current=None LevelAbove=None LevelBelow=None Unlimited=Noneclass PlanViewRangeError(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass BottomClipAboveCutPlane=None TopClipBelowCutPlane=None value__=None ViewDepthAboveBottomClip=None ViewDepthBelowTopClip=Noneclass PlanViewRangeLevel(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Above=None Below=None Current=None Unlimited=None Unused=None value__=Noneclass Point(GeometryObject,IDisposable):@staticmethod def Create(coord,id=None):pass def Dispose(self):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass Coord=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the coordinates of the point.
Get: Coord(self: Point) -> XYZ""" 
 Reference=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns a stable reference to the point.
Get: Reference(self: Point) -> Reference""" 
class PointCloudColorMode(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Elevation=None FixedColor=None Intensity=None NoOverride=None Normals=None value__=Noneclass PointCloudFoundStatus(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass FoundOK=None NotFound=None Unknown=None value__=Noneclass PointCloudInstance(Instance,IDisposable):def ContainsScan(self,scanName):pass@staticmethod def Create(document,typeId,transform):pass def Dispose(self):pass def getBoundingBox(self,*args):pass def GetPoints(self,filter,averageDistance,numPoints):pass def GetRegions(self):pass def GetScanOrigin(self,scanName):pass def GetScans(self):pass def GetSelectionFilter(self):pass def HasColor(self):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def SetSelectionFilter(self,pFilter):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass FilterAction=property(lambda self:object(),lambda self,v:None,lambda self:None) """The action taken based on the results of the selection filter applied to this point cloud.
Get: FilterAction(self: PointCloudInstance) -> SelectionFilterActionSet: FilterAction(self: PointCloudInstance) = value"""
 SupportsOverrides=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies whether the instance can have graphic overrides.
Get: SupportsOverrides(self: PointCloudInstance) -> bool""" 
class PointCloudType(ElementType,IDisposable):@staticmethod def Create(document,engineIdentifier,typeIdentifier):pass def Dispose(self):pass def getBoundingBox(self,*args):pass def GetPath(self):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass ColorEncoding=property(lambda self:object(),lambda self,v:None,lambda self:None) """The color encoding used by points extracted from instances of this point cloud.
Get: ColorEncoding(self: PointCloudType) -> PointCloudColorEncoding"""
 EngineIdentifier=property(lambda self:object(),lambda self,v:None,lambda self:None) """The identifier of the engine responsible for handling of the point cloud.
Get: EngineIdentifier(self: PointCloudType) -> str""" 
 FoundStatus=property(lambda self:object(),lambda self,v:None,lambda self:None) """Shows whether the Point Cloud external file could be found.
Get: FoundStatus(self: PointCloudType) -> PointCloudFoundStatus""" 
 Offset=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the offset stored in the point cloud.
Get: Offset(self: PointCloudType) -> XYZ""" 
 Scale=property(lambda self:object(),lambda self,v:None,lambda self:None) """The multiplier applied to the points in all instances of this point cloud.
Get: Scale(self: PointCloudType) -> floatSet: Scale(self: PointCloudType) = value""" 
class PointElementReference(object):class PointLocationOnCurve(object,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,measType,measValue,measFrom):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: PointLocationOnCurve) -> bool"""
 MeasureFrom=property(lambda self:object(),lambda self,v:None,lambda self:None) """The location on the curve from which the measurement is taken.
Get: MeasureFrom(self: PointLocationOnCurve) -> PointOnCurveMeasureFromSet: MeasureFrom(self: PointLocationOnCurve) = value""" 
 MeasurementType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The measurement type.
Get: MeasurementType(self: PointLocationOnCurve) -> PointOnCurveMeasurementTypeSet: MeasurementType(self: PointLocationOnCurve) = value""" 
 MeasurementValue=property(lambda self:object(),lambda self,v:None,lambda self:None) """The measurement value.
Get: MeasurementValue(self: PointLocationOnCurve) -> floatSet: MeasurementValue(self: PointLocationOnCurve) = value""" 
class PointNode(ModelCurveNode,IDisposable):def Dispose(self):pass def GetPoint(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass PointOnCurveMeasureFrom(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Beginning=None End=None value__=Noneclass PointOnCurveMeasurementType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Angle=None ChordLength=None NonNormalizedCurveParameter=None NormalizedCurveParameter=None NormalizedSegmentLength=None SegmentLength=None value__=Noneclass PointOnEdge(PointElementReference):def GetEdgeReference(self):pass def SetEdgeReference(self,reference):pass LocationOnCurve=property(lambda self:object(),lambda self,v:None,lambda self:None) """The point location on curve.
Get: LocationOnCurve(self: PointOnEdge) -> PointLocationOnCurve"""
class PointOnEdgeEdgeIntersection(PointElementReference):def GetEdgeReference1(self):pass def GetEdgeReference2(self):pass def SetEdgeReference1(self,edgeReference):pass def SetEdgeReference2(self,edgeReference):passclass PointOnEdgeFaceIntersection(PointElementReference):def GetEdgeReference(self):pass def GetFaceReference(self):pass def SetEdgeReference(self,edgeReference):pass def SetFaceReference(self,reference):pass OrientWithEdge=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether to orient the ReferencePoint to the edge or the face.
Get: OrientWithEdge(self: PointOnEdgeFaceIntersection) -> boolSet: OrientWithEdge(self: PointOnEdgeFaceIntersection) = value"""
class PointOnFace(PointElementReference):def GetFaceReference(self):pass def SetFaceReference(self,reference):pass UV=property(lambda self:object(),lambda self,v:None,lambda self:None) """The location of the point in the surface's coordinate system.
Get: UV(self: PointOnFace) -> UVSet: UV(self: PointOnFace) = value"""
class PointOnPlane(PointElementReference):def GetPlaneReference(self):pass@staticmethod def IsValidPlaneReference(doc,planeReference):pass@staticmethod def NewPointOnPlane(doc,planeReference,position,xvec):pass def SetPlaneReference(self,planeReference):pass Offset=property(lambda self:object(),lambda self,v:None,lambda self:None) """Signed offset from the plane.
Get: Offset(self: PointOnPlane) -> floatSet: Offset(self: PointOnPlane) = value"""
 Position=property(lambda self:object(),lambda self,v:None,lambda self:None) """The coordinates of the point (or its projection)
on the plane.Get: Position(self: PointOnPlane) -> UVSet: Position(self: PointOnPlane) = value""" 
 XVec=property(lambda self:object(),lambda self,v:None,lambda self:None) """The X-coordinate vector of the point, in the
plane's coordinate system.Get: XVec(self: PointOnPlane) -> UVSet: XVec(self: PointOnPlane) = value""" 
class PointRelativeToPoint(PointElementReference): def GetHostPointReference(self): pass def SetHostPointReference(self,hostPointReference): passclass PolyLine(GeometryObject,IDisposable): def Clone(self): pass @staticmethod def Create(coordinates): pass def Dispose(self): pass def Evaluate(self,param): pass def GetCoordinate(self,index): pass def GetCoordinates(self): pass def GetOutline(self): pass def GetTransformed(self,transform): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass NumberOfCoordinates=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the number of the coordinate points.
Get: NumberOfCoordinates(self: PolyLine) -> int"""
class PolylineNode(ModelCurveNode,IDisposable): def Dispose(self): pass def GetPolyline(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass PolylineSegments(object,IDisposable): def Dispose(self): pass def GetVertices(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass EndLocalParameter=property(lambda self:object(),lambda self,v:None,lambda self:None) """Local parameter associated with the end point.
Get: EndLocalParameter(self: PolylineSegments) -> float"""
 EndParameter=property(lambda self:object(),lambda self,v:None,lambda self:None) """Parameter associated with the end point.
Get: EndParameter(self: PolylineSegments) -> float""" 
 IsFilled=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether the area enclosed by the polyline is to be filled or not.
Get: IsFilled(self: PolylineSegments) -> bool""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: PolylineSegments) -> bool""" 
 LineProperties=property(lambda self:object(),lambda self,v:None,lambda self:None) """Access to the line (pen) properties of the polyline
Get: LineProperties(self: PolylineSegments) -> LineProperties""" 
 StartLocalParameter=property(lambda self:object(),lambda self,v:None,lambda self:None) """Local parameter associated with the start point.
Get: StartLocalParameter(self: PolylineSegments) -> float""" 
 StartParameter=property(lambda self:object(),lambda self,v:None,lambda self:None) """Parameter associated with the start point.
Get: StartParameter(self: PolylineSegments) -> float""" 
class PolymeshFacet(object): def GetVertices(self): pass def ToString(self): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: PolymeshFacet) -> bool"""
 V1=property(lambda self:object(),lambda self,v:None,lambda self:None) """The first vertex of the facet
Get: V1(self: PolymeshFacet) -> int""" 
 V2=property(lambda self:object(),lambda self,v:None,lambda self:None) """The second vertex of the facet
Get: V2(self: PolymeshFacet) -> int""" 
 V3=property(lambda self:object(),lambda self,v:None,lambda self:None) """The third vertex of the facet
Get: V3(self: PolymeshFacet) -> int""" 
class PolymeshTopology(object,IDisposable): def Dispose(self): pass def GetFacet(self,idx): pass def GetFacets(self): pass def GetNormal(self,idx): pass def GetNormals(self): pass def GetPoint(self,idx): pass def GetPoints(self): pass def GetUV(self,idx): pass def GetUVs(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass DistributionOfNormals=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates the distribution of normal vectors along the tessellated polymesh surface.
Get: DistributionOfNormals(self: PolymeshTopology) -> DistributionOfNormals"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: PolymeshTopology) -> bool""" 
 NumberOfFacets=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number of facet in the polymesh.
Get: NumberOfFacets(self: PolymeshTopology) -> int""" 
 NumberOfNormals=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number of normals associated with the polymesh
Get: NumberOfNormals(self: PolymeshTopology) -> int""" 
 NumberOfPoints=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number of points in the polymesh
Get: NumberOfPoints(self: PolymeshTopology) -> int""" 
 NumberOfUVs=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number of UV coordinates available for the polymesh.
Get: NumberOfUVs(self: PolymeshTopology) -> int""" 
class PreferredJunctionType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Tap=None Tee=None value__=Noneclass PreviewFamilyVisibilityMode(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Off=None On=None Uncut=None value__=Noneclass PrimaryDesignOptionMemberFilter(ElementSlowFilter,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,inverted=None): passclass RoutingCriterionBase(object,IDisposable): def Dispose(self): pass def IsEqual(self,pOther): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: RoutingCriterionBase) -> bool"""
class PrimarySizeCriterion(RoutingCriterionBase,IDisposable): @staticmethod def All(): pass def Dispose(self): pass @staticmethod def None(): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,minimumSize,maximumSize): pass MaximumSize=property(lambda self:object(),lambda self,v:None,lambda self:None) """The maximum size of this criterion.
Get: MaximumSize(self: PrimarySizeCriterion) -> floatSet: MaximumSize(self: PrimarySizeCriterion) = value"""
 MinimumSize=property(lambda self:object(),lambda self,v:None,lambda self:None) """The minimum size of this criterion.
Get: MinimumSize(self: PrimarySizeCriterion) -> floatSet: MinimumSize(self: PrimarySizeCriterion) = value""" 
class PrinterResolution(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass High=None Low=None Medium=None value__=None VeryHigh=Noneclass PrintManager(APIObject,IDisposable): def Apply(self): pass def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def SelectNewPrintDriver(self,strPrinterName): pass def SubmitPrint(self,view=None): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Collate=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether to collate of the current print.
Get: Collate(self: PrintManager) -> boolSet: Collate(self: PrintManager) = value"""
 CombinedFile=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether to combine multiple selected views/sheets into a single file.
Get: CombinedFile(self: PrintManager) -> boolSet: CombinedFile(self: PrintManager) = value""" 
 CopyNumber=property(lambda self:object(),lambda self,v:None,lambda self:None) """The copy number.
Get: CopyNumber(self: PrintManager) -> intSet: CopyNumber(self: PrintManager) = value""" 
 IsVirtual=property(lambda self:object(),lambda self,v:None,lambda self:None) """The virtual type in Autodesk Revit.
Get: IsVirtual(self: PrintManager) -> VirtualPrinterType""" 
 PaperSizes=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get all print sizes of current printer.
Get: PaperSizes(self: PrintManager) -> PaperSizeSet""" 
 PaperSources=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get all print sources of current printer.
Get: PaperSources(self: PrintManager) -> PaperSourceSet""" 
 PrinterName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The name of the current printer.
Get: PrinterName(self: PrintManager) -> str""" 
 PrintOrderReverse=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether to reverse the print order of the current print.
Get: PrintOrderReverse(self: PrintManager) -> boolSet: PrintOrderReverse(self: PrintManager) = value""" 
 PrintRange=property(lambda self:object(),lambda self,v:None,lambda self:None) """The print range.
Get: PrintRange(self: PrintManager) -> PrintRangeSet: PrintRange(self: PrintManager) = value""" 
 PrintSetup=property(lambda self:object(),lambda self,v:None,lambda self:None) """The PrintSetup which manages the print settings of current document.
Get: PrintSetup(self: PrintManager) -> PrintSetup""" 
 PrintToFile=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether to print to file.
Get: PrintToFile(self: PrintManager) -> boolSet: PrintToFile(self: PrintManager) = value""" 
 PrintToFileName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The file name when printing to file.
Get: PrintToFileName(self: PrintManager) -> strSet: PrintToFileName(self: PrintManager) = value""" 
 ViewSheetSetting=property(lambda self:object(),lambda self,v:None,lambda self:None) """The ViewSheetSetting which manages the view/sheet set information of current document, and you can change the default view/sheet
set for current project.Get: ViewSheetSetting(self: PrintManager) -> ViewSheetSetting""" 
class PrintParameters(APIObject,IDisposable): def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass ColorDepth=property(lambda self:object(),lambda self,v:None,lambda self:None) """The color depth type.
Get: ColorDepth(self: PrintParameters) -> ColorDepthTypeSet: ColorDepth(self: PrintParameters) = value"""
 HiddenLineViews=property(lambda self:object(),lambda self,v:None,lambda self:None) """The hidden line views type.
Get: HiddenLineViews(self: PrintParameters) -> HiddenLineViewsTypeSet: HiddenLineViews(self: PrintParameters) = value""" 
 HideCropBoundaries=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether to hide crop boundaries when printing.
Get: HideCropBoundaries(self: PrintParameters) -> boolSet: HideCropBoundaries(self: PrintParameters) = value""" 
 HideReforWorkPlanes=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether to hide reference/work planes when printing.
Get: HideReforWorkPlanes(self: PrintParameters) -> boolSet: HideReforWorkPlanes(self: PrintParameters) = value""" 
 HideScopeBoxes=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether to hide scope boxes when printing.
Get: HideScopeBoxes(self: PrintParameters) -> boolSet: HideScopeBoxes(self: PrintParameters) = value""" 
 HideUnreferencedViewTags=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether to hide unreferenced view tags when printing.
Get: HideUnreferencedViewTags(self: PrintParameters) -> boolSet: HideUnreferencedViewTags(self: PrintParameters) = value""" 
 MarginType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The print margin type.
Get: MarginType(self: PrintParameters) -> MarginTypeSet: MarginType(self: PrintParameters) = value""" 
 MaskCoincidentLines=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether to mask coincident lines when printing.
Get: MaskCoincidentLines(self: PrintParameters) -> boolSet: MaskCoincidentLines(self: PrintParameters) = value""" 
 PageOrientation=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Page Orientation of the Print Setting.
Get: PageOrientation(self: PrintParameters) -> PageOrientationTypeSet: PageOrientation(self: PrintParameters) = value""" 
 PaperPlacement=property(lambda self:object(),lambda self,v:None,lambda self:None) """The paper placement type.
Get: PaperPlacement(self: PrintParameters) -> PaperPlacementTypeSet: PaperPlacement(self: PrintParameters) = value""" 
 PaperSize=property(lambda self:object(),lambda self,v:None,lambda self:None) """The page size.
Get: PaperSize(self: PrintParameters) -> PaperSizeSet: PaperSize(self: PrintParameters) = value""" 
 PaperSource=property(lambda self:object(),lambda self,v:None,lambda self:None) """The page source.
Get: PaperSource(self: PrintParameters) -> PaperSourceSet: PaperSource(self: PrintParameters) = value""" 
 RasterQuality=property(lambda self:object(),lambda self,v:None,lambda self:None) """The raster quality type.
Get: RasterQuality(self: PrintParameters) -> RasterQualityTypeSet: RasterQuality(self: PrintParameters) = value""" 
 ReplaceHalftoneWithThinLines=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether to replace halftone with thin lines when printing.
Get: ReplaceHalftoneWithThinLines(self: PrintParameters) -> boolSet: ReplaceHalftoneWithThinLines(self: PrintParameters) = value""" 
 UserDefinedMarginX=property(lambda self:object(),lambda self,v:None,lambda self:None) """The User defined X value of offset from left bottom corner.
Get: UserDefinedMarginX(self: PrintParameters) -> floatSet: UserDefinedMarginX(self: PrintParameters) = value""" 
 UserDefinedMarginY=property(lambda self:object(),lambda self,v:None,lambda self:None) """The User defined Y value of offset from left bottom corner
Get: UserDefinedMarginY(self: PrintParameters) -> floatSet: UserDefinedMarginY(self: PrintParameters) = value""" 
 ViewLinksinBlue=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether to view links in blue when printing.
Get: ViewLinksinBlue(self: PrintParameters) -> boolSet: ViewLinksinBlue(self: PrintParameters) = value""" 
 Zoom=property(lambda self:object(),lambda self,v:None,lambda self:None) """The zoom value to a percentage of the original size.
Get: Zoom(self: PrintParameters) -> intSet: Zoom(self: PrintParameters) = value""" 
 ZoomType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The zoom type.
Get: ZoomType(self: PrintParameters) -> ZoomTypeSet: ZoomType(self: PrintParameters) = value""" 
class PrintRange(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Current=None Select=None value__=None Visible=Noneclass PrintSetting(Element,IDisposable,IPrintSetting): def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the Name of Print Setup.
Get: Name(self: PrintSetting) -> strSet: Name(self: PrintSetting) = value"""
 PrintParameters=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the Parameters of Print Setup.
Get: PrintParameters(self: PrintSetting) -> PrintParameters""" 
class PrintSetup(APIObject,IDisposable): def Delete(self): pass def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Rename(self,newName): pass def Revert(self): pass def Save(self): pass def SaveAs(self,newName): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass CurrentPrintSetting=property(lambda self:object(),lambda self,v:None,lambda self:None) """The current Print Setting of Print Setup.
Get: CurrentPrintSetting(self: PrintSetup) -> IPrintSettingSet: CurrentPrintSetting(self: PrintSetup) = value"""
 InSession=property(lambda self:object(),lambda self,v:None,lambda self:None) """The in-session Print Setting of Print Setup.
Get: InSession(self: PrintSetup) -> InSessionPrintSetting""" 
class Profile(GeometryObject,IDisposable): def Clone(self): pass def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Curves=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieve the curves that make up the boundary of the profile.
Get: Curves(self: Profile) -> CurveArray"""
 Filled=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get or set whether the profile is filled.
Get: Filled(self: Profile) -> boolSet: Filled(self: Profile) = value""" 
class ProfileFamilyUsage(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Any=None ContinuousFooting=None Fascia=None Gutter=None Mullion=None Railing=None Reveal=None SlabEdge=None SlabMetalDeck=None StairNosing=None StairRiser=None StairSupport=None StairTread=None value__=None WallSweep=Noneclass ProfilePlaneLocation(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass End=None MidPoint=None Start=None value__=Noneclass ProjectInfo(Element,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Address=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get or Set the Project Address of the Project Information.
Get: Address(self: ProjectInfo) -> strSet: Address(self: ProjectInfo) = value"""
 Author=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get or Set the Project Author of the Project Information.
Get: Author(self: ProjectInfo) -> strSet: Author(self: ProjectInfo) = value""" 
 BuildingName=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get or Set the Building Name of the Project Information.
Get: BuildingName(self: ProjectInfo) -> strSet: BuildingName(self: ProjectInfo) = value""" 
 ClientName=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get or Set the Client Name of the Project Information.
Get: ClientName(self: ProjectInfo) -> strSet: ClientName(self: ProjectInfo) = value""" 
 IssueDate=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get or Set the Project Issue Date of the Project Information.
Get: IssueDate(self: ProjectInfo) -> strSet: IssueDate(self: ProjectInfo) = value""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get or Set the Project Name of the Project Information.
Get: Name(self: ProjectInfo) -> strSet: Name(self: ProjectInfo) = value""" 
 Number=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get or Set the Project Number of the Project Information.
Get: Number(self: ProjectInfo) -> strSet: Number(self: ProjectInfo) = value""" 
 OrganizationDescription=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get or Set the Organization Description of the Project Information.
Get: OrganizationDescription(self: ProjectInfo) -> strSet: OrganizationDescription(self: ProjectInfo) = value""" 
 OrganizationName=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get or Set the Organization Name of the Project Information.
Get: OrganizationName(self: ProjectInfo) -> strSet: OrganizationName(self: ProjectInfo) = value""" 
 Status=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get or Set the Project Status of the Project Information.
Get: Status(self: ProjectInfo) -> strSet: Status(self: ProjectInfo) = value""" 
class ProjectLocation(Instance,IDisposable): def Dispose(self): pass def Duplicate(self,name): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """The name of the project location.
Get: Name(self: ProjectLocation) -> strSet: Name(self: ProjectLocation) = value"""
 SiteLocation=property(lambda self:object(),lambda self,v:None,lambda self:None) """The site location to which this project location refers.
Get: SiteLocation(self: ProjectLocation) -> SiteLocation""" 
class ProjectLocationSet(APIObject,IDisposable,IEnumerable): def Clear(self): pass def Contains(self,item): pass def Dispose(self): pass def Erase(self,item): pass def ForwardIterator(self): pass def GetEnumerator(self): pass def Insert(self,item): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def ReverseIterator(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the set is empty.
Get: IsEmpty(self: ProjectLocationSet) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of project locations that are in the set.
Get: Size(self: ProjectLocationSet) -> int""" 
class ProjectLocationSetIterator(APIObject,IDisposable,IEnumerator): def Dispose(self): pass def MoveNext(self): pass def next(self,*args): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: ProjectLocationSetIterator) -> object"""
class ProjectPosition(APIObject,IDisposable): def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,ew,ns,elevation,angle): pass Angle=property(lambda self:object(),lambda self,v:None,lambda self:None) """Angle from True North
Get: Angle(self: ProjectPosition) -> floatSet: Angle(self: ProjectPosition) = value"""
 EastWest=property(lambda self:object(),lambda self,v:None,lambda self:None) """East/West offset
Get: EastWest(self: ProjectPosition) -> floatSet: EastWest(self: ProjectPosition) = value""" 
 Elevation=property(lambda self:object(),lambda self,v:None,lambda self:None) """Elevation above ground level.
Get: Elevation(self: ProjectPosition) -> floatSet: Elevation(self: ProjectPosition) = value""" 
 NorthSouth=property(lambda self:object(),lambda self,v:None,lambda self:None) """North/South offset
Get: NorthSouth(self: ProjectPosition) -> floatSet: NorthSouth(self: ProjectPosition) = value""" 
class PropertyLine(Element,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass PropertySetElement(Element,IDisposable): @staticmethod def Create(document,*__args): pass def Dispose(self): pass def Duplicate(self,document,name): pass def getBoundingBox(self,*args): pass def GetStructuralAsset(self): pass def GetThermalAsset(self): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def SetStructuralAsset(self,structuralAsset): pass def SetThermalAsset(self,thermalAsset): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass PropertySetLibrary(Element,IDisposable): def AddPropertySet(self,propertySetId): pass def AddPropertySetWithName(self,propertySetId,name): pass def AddToDocument(self,name,document,overwrite): pass def AddToDocumentWithName(self,name,document,overwrite,addAsName): pass @staticmethod def Create(document): pass def Dispose(self): pass def ExportXml(self,fileName): pass @staticmethod def Find(doc,name): pass def getBoundingBox(self,*args): pass def GetName(self): pass def HasPropertySet(self,name): pass @staticmethod def ImportXml(document,fileName,overwriteExisting): pass def ReleaseUnmanagedResources(self,*args): pass def RemovePropertySet(self,name): pass def RenamePropertySet(self,name,newName): pass def RenameSubclass(self,oldSubclass,newSubclass): pass def setElementType(self,*args): pass def SetName(self,name): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Locked=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether a property set library is locked into a document or not.
   Locked libraries are read-only and cannot be removed.Get: Locked(self: PropertySetLibrary) -> bool"""
 ReadOnly=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether a property set library is read-only or not.
   Read-only libraries cannot be renamed, or added to.Get: ReadOnly(self: PropertySetLibrary) -> boolSet: ReadOnly(self: PropertySetLibrary) = value""" 
class PropOverrideMode(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass ByEntity=None ByLayer=None NewLayer=None value__=Noneclass RadialArray(BaseArray,IDisposable): @staticmethod def ArrayElementsWithoutAssociation(aDoc,dBView,ids,count,axis,angle,anchorMember): pass @staticmethod def ArrayElementWithoutAssociation(aDoc,dBView,id,count,axis,angle,anchorMember): pass @staticmethod def Create(aDoc,dBView,*__args): pass def Dispose(self): pass def getBoundingBox(self,*args): pass def GetCopiedMemberIds(self): pass def GetOriginalMemberIds(self): pass @staticmethod def IsValidArraySize(count): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass NumMembers=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves or changes the number of the arrayed members.
Get: NumMembers(self: RadialArray) -> intSet: NumMembers(self: RadialArray) = value"""
class RasterQualityType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass High=None Low=None Medium=None Presentation=None value__=Noneclass Rectangle(object,IDisposable): def Dispose(self): pass def IsNormalized(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,*__args): pass def __repr__(self,*args): pass Bottom=property(lambda self:object(),lambda self,v:None,lambda self:None) """The y-coordinate of the bottom-right corner of the rectangle.
Get: Bottom(self: Rectangle) -> intSet: Bottom(self: Rectangle) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: Rectangle) -> bool""" 
 Left=property(lambda self:object(),lambda self,v:None,lambda self:None) """The x-coordinate of the top-left corner of the rectangle.
Get: Left(self: Rectangle) -> intSet: Left(self: Rectangle) = value""" 
 Right=property(lambda self:object(),lambda self,v:None,lambda self:None) """The x-coordinate of the bottom-right corner of the rectangle.
Get: Right(self: Rectangle) -> intSet: Right(self: Rectangle) = value""" 
 Top=property(lambda self:object(),lambda self,v:None,lambda self:None) """The y-coordinate of the top-left corner of the rectangle.
Get: Top(self: Rectangle) -> intSet: Top(self: Rectangle) = value""" 
class RectangularGridSegmentOrientation(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Horizontal=None value__=None Vertical=Noneclass Reference(APIObject,IDisposable): def ConvertToStableRepresentation(self,document): pass def CreateLinkReference(self,revitLinkInstance): pass def CreateReferenceInLink(self): pass def Dispose(self): pass @staticmethod def ParseFromStableRepresentation(document,representation): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,element): pass ElementId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The element id for this reference.
Get: ElementId(self: Reference) -> ElementId"""
 ElementReferenceType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The type of reference.
Get: ElementReferenceType(self: Reference) -> ElementReferenceType""" 
 GlobalPoint=property(lambda self:object(),lambda self,v:None,lambda self:None) """The position on which the reference is hit.
Get: GlobalPoint(self: Reference) -> XYZ""" 
 LinkedElementId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The id of the top-level element in the linked document that is referred to by this reference.
Get: LinkedElementId(self: Reference) -> ElementId""" 
 UVPoint=property(lambda self:object(),lambda self,v:None,lambda self:None) """The UV parameters of the reference, if the reference contains a face.
Get: UVPoint(self: Reference) -> UV""" 
class ReferenceableViewUtils(object): @staticmethod def ChangeReferencedView(document,referenceId,desiredViewId): pass @staticmethod def GetReferencedViewId(document,referenceId): pass __all__=[ 'ChangeReferencedView', 'GetReferencedViewId', ]class ReferenceArray(APIObject,IDisposable,IEnumerable): def Append(self,item): pass def Clear(self): pass def Dispose(self): pass def ForwardIterator(self): pass def GetEnumerator(self): pass def Insert(self,item,index): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def ReverseIterator(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __getitem__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass def __setitem__(self,*args): pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the array is empty.
Get: IsEmpty(self: ReferenceArray) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of references that are in the array.
Get: Size(self: ReferenceArray) -> int""" 
class ReferenceArrayArray(APIObject,IDisposable,IEnumerable): def Append(self,item): pass def Clear(self): pass def Dispose(self): pass def ForwardIterator(self): pass def GetEnumerator(self): pass def Insert(self,item,index): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def ReverseIterator(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __getitem__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass def __setitem__(self,*args): pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the array is empty.
Get: IsEmpty(self: ReferenceArrayArray) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of ReferenceArrays that are in the array.
Get: Size(self: ReferenceArrayArray) -> int""" 
class ReferenceArrayArrayIterator(APIObject,IDisposable,IEnumerator): def Dispose(self): pass def MoveNext(self): pass def next(self,*args): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: ReferenceArrayArrayIterator) -> object"""
class ReferenceArrayIterator(APIObject,IDisposable,IEnumerator): def Dispose(self): pass def MoveNext(self): pass def next(self,*args): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: ReferenceArrayIterator) -> object"""
class ReferenceIntersector(object,IDisposable): def Dispose(self): pass def Find(self,origin,direction): pass def FindNearest(self,origin,direction): pass def GetFilter(self): pass def GetTargetElementIds(self): pass def ReleaseUnmanagedResources(self,*args): pass def SetFilter(self,filter): pass def SetTargetElementIds(self,elementIds): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,*__args): pass def __repr__(self,*args): pass FindReferencesInRevitLinks=property(lambda self:object(),lambda self,v:None,lambda self:None) """Determines if references inside Revit Links should be found.
Get: FindReferencesInRevitLinks(self: ReferenceIntersector) -> boolSet: FindReferencesInRevitLinks(self: ReferenceIntersector) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ReferenceIntersector) -> bool""" 
 TargetType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The type of reference to find.
Get: TargetType(self: ReferenceIntersector) -> FindReferenceTargetSet: TargetType(self: ReferenceIntersector) = value""" 
 ViewId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The id of the 3D view used for evaluation.
Get: ViewId(self: ReferenceIntersector) -> ElementIdSet: ViewId(self: ReferenceIntersector) = value""" 
class ReferencePlane(DatumPlane,IDisposable): def Dispose(self): pass def Flip(self): pass def getBoundingBox(self,*args): pass def GetPlane(self): pass def GetReference(self): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass BubbleEnd=property(lambda self:object(),lambda self,v:None,lambda self:None) """The bubble end of the reference plane.
Get: BubbleEnd(self: ReferencePlane) -> XYZSet: BubbleEnd(self: ReferencePlane) = value"""
 Direction=property(lambda self:object(),lambda self,v:None,lambda self:None) """The direction of the reference plane.
Get: Direction(self: ReferencePlane) -> XYZSet: Direction(self: ReferencePlane) = value""" 
 FreeEnd=property(lambda self:object(),lambda self,v:None,lambda self:None) """The free end of the reference plane.
Get: FreeEnd(self: ReferencePlane) -> XYZSet: FreeEnd(self: ReferencePlane) = value""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """The name property of the reference plane.
Get: Name(self: ReferencePlane) -> strSet: Name(self: ReferencePlane) = value""" 
 Normal=property(lambda self:object(),lambda self,v:None,lambda self:None) """The normal vector of the reference plane.
Get: Normal(self: ReferencePlane) -> XYZ""" 
class ReferencePoint(Element,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def GetCoordinatePlaneReferenceXY(self): pass def GetCoordinatePlaneReferenceXZ(self): pass def GetCoordinatePlaneReferenceYZ(self): pass def GetCoordinateSystem(self): pass def GetHubId(self): pass def GetInterpolatingCurves(self): pass def GetPointElementReference(self): pass def GetVisibility(self): pass def ReleaseUnmanagedResources(self,*args): pass def SetCoordinateSystem(self,coordinateSystem): pass def setElementType(self,*args): pass def SetPointElementReference(self,pointElementReference): pass def SetVisibility(self,visibility): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass CoordinatePlaneVisibility=property(lambda self:object(),lambda self,v:None,lambda self:None) """Visibility settings for the coordinate reference planes.
Get: CoordinatePlaneVisibility(self: ReferencePoint) -> CoordinatePlaneVisibilitySet: CoordinatePlaneVisibility(self: ReferencePoint) = value"""
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get: Name(self: ReferencePoint) -> str
Set: Name(self: ReferencePoint) = value""" 
 Position=property(lambda self:object(),lambda self,v:None,lambda self:None) """The position of the ReferencePoint.
Get: Position(self: ReferencePoint) -> XYZSet: Position(self: ReferencePoint) = value""" 
 ShowNormalReferencePlaneOnly=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether all three coordinate planes are shown, or only the
normal (XY) plane.Get: ShowNormalReferencePlaneOnly(self: ReferencePoint) -> boolSet: ShowNormalReferencePlaneOnly(self: ReferencePoint) = value""" 
 Visible=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether the point is visible when the family is loaded
into a project.Get: Visible(self: ReferencePoint) -> boolSet: Visible(self: ReferencePoint) = value""" 
class ReferencePointArray(APIObject,IDisposable,IEnumerable): def Append(self,item): pass def Clear(self): pass def Dispose(self): pass def ForwardIterator(self): pass def GetEnumerator(self): pass def Insert(self,item,index): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def ReverseIterator(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __getitem__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass def __setitem__(self,*args): pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the array is empty.
Get: IsEmpty(self: ReferencePointArray) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of references that are in the array.
Get: Size(self: ReferencePointArray) -> int""" 
class ReferencePointArrayIterator(APIObject,IDisposable,IEnumerator): def Dispose(self): pass def MoveNext(self): pass def next(self,*args): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: ReferencePointArrayIterator) -> object"""
class ReferenceType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass None=None StrongReference=None value__=None WeakReference=Noneclass ReferenceWithContext(object,IDisposable): def Dispose(self): pass def GetInstanceTransform(self): pass def GetReference(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ReferenceWithContext) -> bool"""
 Proximity=property(lambda self:object(),lambda self,v:None,lambda self:None) """The proximity value to the ray's origin when the reference is returned by FindReferencesWithContextByDirection(XYZ, XYZ, View3D) or ReferenceIntersector.Find(XYZ, XYZ).
Get: Proximity(self: ReferenceWithContext) -> float""" 
class RelinquishedItems(object,IDisposable): def Dispose(self): pass def GetRelinquishedElements(self): pass def GetRelinquishedWorksets(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: RelinquishedItems) -> bool"""
class RelinquishOptions(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,relinquishEverything): pass def __repr__(self,*args): pass CheckedOutElements=property(lambda self:object(),lambda self,v:None,lambda self:None) """True means all elements checked out by the current user should be relinquished.
   False means none of these are relinquished.Get: CheckedOutElements(self: RelinquishOptions) -> boolSet: CheckedOutElements(self: RelinquishOptions) = value"""
 FamilyWorksets=property(lambda self:object(),lambda self,v:None,lambda self:None) """True means all family worksets owned by the current user should be relinquished.
   False means none of these are relinquished.Get: FamilyWorksets(self: RelinquishOptions) -> boolSet: FamilyWorksets(self: RelinquishOptions) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: RelinquishOptions) -> bool""" 
 StandardWorksets=property(lambda self:object(),lambda self,v:None,lambda self:None) """True means all project standards worksets owned by the current user should be relinquished.
   False means none of these are relinquished.Get: StandardWorksets(self: RelinquishOptions) -> boolSet: StandardWorksets(self: RelinquishOptions) = value""" 
 UserWorksets=property(lambda self:object(),lambda self,v:None,lambda self:None) """True means all user-created worksets owned by the current user should be relinquished.
   False means none of these are relinquished.Get: UserWorksets(self: RelinquishOptions) -> boolSet: UserWorksets(self: RelinquishOptions) = value""" 
 ViewWorksets=property(lambda self:object(),lambda self,v:None,lambda self:None) """True means all view worksets owned by the current user should be relinquished.
   False means none of these are relinquished.Get: ViewWorksets(self: RelinquishOptions) -> boolSet: ViewWorksets(self: RelinquishOptions) = value""" 
class ReloadLatestOptions(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ReloadLatestOptions) -> bool"""
class RenderDuration(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass ByLevel=None ByTime=None UntilSatisfactory=None value__=Noneclass RenderingImageExposureSettings(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass ExposureValue=property(lambda self:object(),lambda self,v:None,lambda self:None) """The value of rendering image exposure.
Get: ExposureValue(self: RenderingImageExposureSettings) -> floatSet: ExposureValue(self: RenderingImageExposureSettings) = value"""
 Highlights=property(lambda self:object(),lambda self,v:None,lambda self:None) """The highlights value.
Get: Highlights(self: RenderingImageExposureSettings) -> floatSet: Highlights(self: RenderingImageExposureSettings) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: RenderingImageExposureSettings) -> bool""" 
 Saturation=property(lambda self:object(),lambda self,v:None,lambda self:None) """The value of rendering image saturation.
Get: Saturation(self: RenderingImageExposureSettings) -> floatSet: Saturation(self: RenderingImageExposureSettings) = value""" 
 Shadows=property(lambda self:object(),lambda self,v:None,lambda self:None) """The shadows value.
Get: Shadows(self: RenderingImageExposureSettings) -> floatSet: Shadows(self: RenderingImageExposureSettings) = value""" 
 WhitePoint=property(lambda self:object(),lambda self,v:None,lambda self:None) """The white point value.
Get: WhitePoint(self: RenderingImageExposureSettings) -> floatSet: WhitePoint(self: RenderingImageExposureSettings) = value""" 
class RenderingQuality(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Custom=None Draft=None High=None Medium=None value__=None VeryHigh=Noneclass RenderingQualitySettings(object,IDisposable): def Dispose(self): pass def IsCustomQuality(self): pass def IsValidRenderLevel(self,value): pass def IsValidRenderTime(self,value): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: RenderingQualitySettings) -> bool"""
 LightAndMaterialAccuracyMode=property(lambda self:object(),lambda self,v:None,lambda self:None) """A value that controls light and material accuracy mode.
Get: LightAndMaterialAccuracyMode(self: RenderingQualitySettings) -> LightAndMaterialAccuracyModeSet: LightAndMaterialAccuracyMode(self: RenderingQualitySettings) = value""" 
 RenderDuration=property(lambda self:object(),lambda self,v:None,lambda self:None) """A value that controls render duration.
Get: RenderDuration(self: RenderingQualitySettings) -> RenderDurationSet: RenderDuration(self: RenderingQualitySettings) = value""" 
 RenderingQuality=property(lambda self:object(),lambda self,v:None,lambda self:None) """The quality applied for rendering.
Get: RenderingQuality(self: RenderingQualitySettings) -> RenderingQualitySet: RenderingQuality(self: RenderingQualitySettings) = value""" 
 RenderLevel=property(lambda self:object(),lambda self,v:None,lambda self:None) """The render target level as a numerical value between 1 and 40.
Get: RenderLevel(self: RenderingQualitySettings) -> intSet: RenderLevel(self: RenderingQualitySettings) = value""" 
 RenderTime=property(lambda self:object(),lambda self,v:None,lambda self:None) """The render target time as a numerical value between 1 and 32768.
Get: RenderTime(self: RenderingQualitySettings) -> intSet: RenderTime(self: RenderingQualitySettings) = value""" 
class RenderingSettings(object,IDisposable): def Dispose(self): pass def GetBackgroundSettings(self): pass def GetRenderingImageExposureSettings(self): pass def GetRenderingQualitySettings(self): pass def GetRenderingRegionOutline(self): pass def ReleaseUnmanagedResources(self,*args): pass def SetBackgroundSettings(self,background): pass def SetRenderingImageExposureSettings(self,exposure): pass def SetRenderingQualitySettings(self,settings): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass BackgroundStyle=property(lambda self:object(),lambda self,v:None,lambda self:None) """The enum value that controls the background style for rendering.
Get: BackgroundStyle(self: RenderingSettings) -> BackgroundStyleSet: BackgroundStyle(self: RenderingSettings) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: RenderingSettings) -> bool""" 
 LightingSource=property(lambda self:object(),lambda self,v:None,lambda self:None) """The lighting scheme type.
Get: LightingSource(self: RenderingSettings) -> LightingSourceSet: LightingSource(self: RenderingSettings) = value""" 
 PrinterResolution=property(lambda self:object(),lambda self,v:None,lambda self:None) """The resolution level when using printer.
Get: PrinterResolution(self: RenderingSettings) -> PrinterResolutionSet: PrinterResolution(self: RenderingSettings) = value""" 
 ResolutionTarget=property(lambda self:object(),lambda self,v:None,lambda self:None) """The resolution target.
Get: ResolutionTarget(self: RenderingSettings) -> ResolutionTargetSet: ResolutionTarget(self: RenderingSettings) = value""" 
 ResolutionValue=property(lambda self:object(),lambda self,v:None,lambda self:None) """The rendering resolution in dots per inch (DPI).
Get: ResolutionValue(self: RenderingSettings) -> int""" 
 UsesRegionRendering=property(lambda self:object(),lambda self,v:None,lambda self:None) """The bool value that indicates whether to use region rendering.
Get: UsesRegionRendering(self: RenderingSettings) -> boolSet: UsesRegionRendering(self: RenderingSettings) = value""" 
class RenderNodeAction(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Proceed=None Skip=None value__=Noneclass RepeaterBounds(object,IDisposable): def AdjustForCyclicalBounds(self,coordinates): pass def AreCoordinatesInBounds(self,coordinates,treatCyclicalBoundsAsInfinite): pass def Dispose(self): pass def GetLowerBound(self,dimension): pass def GetUpperBound(self,dimension): pass def IsCyclical(self,dimension): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass DimensionCount=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number of dimensions of the bounds (0, 1 or 2 for zero, one or two dimensional arrays.)
Get: DimensionCount(self: RepeaterBounds) -> int"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: RepeaterBounds) -> bool""" 
class RepeaterCoordinates(object,IDisposable): def Dispose(self): pass def GetCoordinate(self,dimension): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,x=None,y=None): pass def __repr__(self,*args): pass DimensionCount=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number of dimensions of the coordinates (0, 1 or 2 for zero, one or two dimensional arrays.)
Get: DimensionCount(self: RepeaterCoordinates) -> int"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: RepeaterCoordinates) -> bool""" 
class RepeatingReferenceSource(object,IDisposable): def Dispose(self): pass def GetBounds(self): pass @staticmethod def GetDefaultRepeatingReferenceSource(document,elementId): pass def GetReference(self,coordinates): pass @staticmethod def HasRepeatingReferenceSource(document,elementId): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass DimensionCount=property(lambda self:object(),lambda self,v:None,lambda self:None) """The dimension count of the repeating reference array.
Get: DimensionCount(self: RepeatingReferenceSource) -> int"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: RepeatingReferenceSource) -> bool""" 
class ResolutionTarget(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Printer=None Screen=None value__=Noneclass ResourceVersionStatus(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Current=None OutOfDate=None Unknown=None value__=Noneclass Revision(Element,IDisposable): @staticmethod def CombineWithNext(document,revisionId): pass @staticmethod def CombineWithPrevious(document,revisionId): pass @staticmethod def Create(document): pass def Dispose(self): pass @staticmethod def GetAllRevisionIds(document): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass @staticmethod def ReorderRevisionSequence(document,newSequence): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Description=property(lambda self:object(),lambda self,v:None,lambda self:None) """The description of this Revision.
Get: Description(self: Revision) -> strSet: Description(self: Revision) = value"""
 Issued=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether this Revision has been issued.
Get: Issued(self: Revision) -> boolSet: Issued(self: Revision) = value""" 
 IssuedBy=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates who has issued or will issue this Revision.
Get: IssuedBy(self: Revision) -> strSet: IssuedBy(self: Revision) = value""" 
 IssuedTo=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates to whom this Revision was or will be issued.
Get: IssuedTo(self: Revision) -> strSet: IssuedTo(self: Revision) = value""" 
 NumberType=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates what number type the Revision Number for this Revision should use.
Get: NumberType(self: Revision) -> RevisionNumberTypeSet: NumberType(self: Revision) = value""" 
 RevisionDate=property(lambda self:object(),lambda self,v:None,lambda self:None) """The date of this Revision.
Get: RevisionDate(self: Revision) -> strSet: RevisionDate(self: Revision) = value""" 
 RevisionNumber=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Revision number of this revision.
Get: RevisionNumber(self: Revision) -> str""" 
 SequenceNumber=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Sequence Number of this Revision.
Get: SequenceNumber(self: Revision) -> int""" 
 Visibility=property(lambda self:object(),lambda self,v:None,lambda self:None) """Controls the visibility of revision clouds and revision tags related to this Revision.
Get: Visibility(self: Revision) -> RevisionVisibilitySet: Visibility(self: Revision) = value""" 
class RevisionCloud(Element,IDisposable): @staticmethod def Create(document,view,revisionId,curves): pass def Dispose(self): pass def getBoundingBox(self,*args): pass def GetSheetIds(self): pass def GetSketchCurves(self): pass def IsRevisionIssued(self): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass RevisionId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Revision associated with this RevisionCloud.
Get: RevisionId(self: RevisionCloud) -> ElementIdSet: RevisionId(self: RevisionCloud) = value"""
class RevisionNumbering(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass PerProject=None PerSheet=None value__=Noneclass RevisionNumberType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Alphanumeric=None None=None Numeric=None value__=Noneclass RevisionSettings(Element,IDisposable): def Dispose(self): pass def GetAlphanumericRevisionSettings(self): pass def getBoundingBox(self,*args): pass def GetNumericRevisionSettings(self): pass @staticmethod def GetRevisionSettings(ccda): pass def IsAcceptableRevisionCloudSpacing(self,rawValue): pass def ReleaseUnmanagedResources(self,*args): pass @staticmethod def RoundRevisionCloudSpacing(ccda,rawValue): pass def SetAlphanumericRevisionSettings(self,newSettings): pass def setElementType(self,*args): pass def SetNumericRevisionSettings(self,newSettings): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass RevisionCloudSpacing=property(lambda self:object(),lambda self,v:None,lambda self:None) """Determines the size in paper space of revision clouds drawn in a project.
Get: RevisionCloudSpacing(self: RevisionSettings) -> floatSet: RevisionCloudSpacing(self: RevisionSettings) = value"""
 RevisionNumbering=property(lambda self:object(),lambda self,v:None,lambda self:None) """Determines how the revision number values will display on sheets.
Get: RevisionNumbering(self: RevisionSettings) -> RevisionNumberingSet: RevisionNumbering(self: RevisionSettings) = value""" 
class RevisionVisibility(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass CloudAndTagVisible=None Hidden=None TagVisible=None value__=Noneclass RevitLinkInstance(Instance,IDisposable): @staticmethod def Create(document,revitLinkTypeId): pass def Dispose(self): pass def getBoundingBox(self,*args): pass def GetLinkDocument(self): pass def MoveBasePointToHostBasePoint(self,resetToOriginalRotation): pass def MoveOriginToHostOrigin(self,resetToOriginalRotation): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass RevitLinkLoadResult(object,IDisposable): def Dispose(self): pass def GetCentralModelName(self): pass def GetExternalResourceReference(self): pass def GetExternalResourceReferencesFromFailedLoads(self): pass def GetLinkLoadResult(self,matchExtResRef): pass def GetModelName(self): pass def GetNestedLinkLoadResults(self): pass def GetParentModelName(self): pass @staticmethod def IsCodeSuccess(code): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,other): pass def __repr__(self,*args): pass ElementId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The id of the created or loaded linked model.
Get: ElementId(self: RevitLinkLoadResult) -> ElementId"""
 IsCircularLink=property(lambda self:object(),lambda self,v:None,lambda self:None) """True if these results are part of a link cycle.
Get: IsCircularLink(self: RevitLinkLoadResult) -> bool""" 
 IsNested=property(lambda self:object(),lambda self,v:None,lambda self:None) """True if these results represent a nested link; false otherwise.
Get: IsNested(self: RevitLinkLoadResult) -> bool""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: RevitLinkLoadResult) -> bool""" 
 LoadResult=property(lambda self:object(),lambda self,v:None,lambda self:None) """Holds the results of creating or loading a link. Results can be LinkLoadResultType.LinkLoaded
   for success, or a variety of errors. See LinkLoadResultType for the full list.Get: LoadResult(self: RevitLinkLoadResult) -> RevitLinkLoadResultType""" 
class RevitLinkLoadResultType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass ExternalServerMissing=None LinkExists=None LinkLoaded=None LinkMayBeUpgraded=None LinkNotFound=None LinkNotLoadedOtherError=None LinkNotOpenable=None LinkOpenAsHost=None SameCentralModelAsHost=None SameModelAsHost=None Uninitialized=None value__=Noneclass RevitLinkOperations(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def SetGetLocalPathForOpenCallback(self,makeLocalCopyForOpen): pass def SetOnLocalLinkSharedCoordinatesSavedCallback(self,onLocalLinkSharedCoordinatesSaved): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: RevitLinkOperations) -> bool"""
class RevitLinkOptions(object,IDisposable): def Dispose(self): pass def GetWorksetConfiguration(self): pass def ReleaseUnmanagedResources(self,*args): pass def SetWorksetConfiguration(self,config): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,*__args): pass def __repr__(self,*args): pass IsRelative=property(lambda self:object(),lambda self,v:None,lambda self:None) """The type of path to use when creating the link. If true, Revit will
   store a relative path for the link. If false, Revit will store an absolute   path.   If the link is to a Revit Server location, isRelative must be false.Get: IsRelative(self: RevitLinkOptions) -> boolSet: IsRelative(self: RevitLinkOptions) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: RevitLinkOptions) -> bool""" 
class RevitLinkType(ElementType,IDisposable): @staticmethod def Create(document,*__args): pass @staticmethod def CreateFromIFC(document,ifcFilePath,revitLinkedFilePath,recreateLink,options): pass def Dispose(self): pass def getBoundingBox(self,*args): pass def GetChildIds(self): pass def GetConversionData(self): pass def GetParentId(self): pass def GetRootId(self): pass @staticmethod def GetTopLevelLink(document,*__args): pass def HasSaveablePositions(self): pass def IsFromLocalPath(self): pass def IsFromRevitServer(self): pass @staticmethod def IsLoaded(document,typeId): pass def IsNotLoadedIntoMultipleOpenDocuments(self): pass def Load(self): pass def LoadFrom(self,*__args): pass def ReleaseUnmanagedResources(self,*args): pass def Reload(self): pass def RevertLocalUnloadStatus(self): pass def SavePositions(self,callback): pass def setElementType(self,*args): pass def Unload(self,callback): pass def UnloadLocally(self,callback): pass def UpdateFromIFC(self,document,ifcFilePath,revitLinkedFilePath,recreateLink): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass AttachmentType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The attachment/overlay status of this link.
Get: AttachmentType(self: RevitLinkType) -> AttachmentTypeSet: AttachmentType(self: RevitLinkType) = value"""
 IsNestedLink=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether this link is a nested or top-level link.
Get: IsNestedLink(self: RevitLinkType) -> bool""" 
 LocallyUnloaded=property(lambda self:object(),lambda self,v:None,lambda self:None) """Checks whether a Revit link in a local model is unloaded
   only for the current user.Get: LocallyUnloaded(self: RevitLinkType) -> bool""" 
 PathType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The type of path the link uses.
Get: PathType(self: RevitLinkType) -> PathTypeSet: PathType(self: RevitLinkType) = value""" 
class Revolution(GenericForm,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Axis=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the Axis of the Revolution.
Get: Axis(self: Revolution) -> ModelLine"""
 EndAngle=property(lambda self:object(),lambda self,v:None,lambda self:None) """The end angle of the revolution relative to the sketch plane.
Get: EndAngle(self: Revolution) -> floatSet: EndAngle(self: Revolution) = value""" 
 Sketch=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the Sketch of the Revolution.
Get: Sketch(self: Revolution) -> Sketch""" 
 StartAngle=property(lambda self:object(),lambda self,v:None,lambda self:None) """The start angle of the revolution relative to the sketch plane.
Get: StartAngle(self: Revolution) -> floatSet: StartAngle(self: Revolution) = value""" 
class RevolvedFace(Face,IDisposable): def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Axis=property(lambda self:object(),lambda self,v:None,lambda self:None) """Axis of the surface.
Get: Axis(self: RevolvedFace) -> XYZ"""
 Curve=property(lambda self:object(),lambda self,v:None,lambda self:None) """Profile curve of the surface.
Get: Curve(self: RevolvedFace) -> Curve""" 
 Origin=property(lambda self:object(),lambda self,v:None,lambda self:None) """Origin of the surface.
Get: Origin(self: RevolvedFace) -> XYZ""" 
class RevolvedSurface(Surface,IDisposable): @staticmethod def Create(*__args): pass def Dispose(self): pass def GetProfileCurve(self): pass @staticmethod def IsValidProfileCurve(*__args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Axis=property(lambda self:object(),lambda self,v:None,lambda self:None) """Axis of the revolved surface. This is the Z axis of the local coordinate system associated with this revolved surface.
Get: Axis(self: RevolvedSurface) -> XYZ"""
 Origin=property(lambda self:object(),lambda self,v:None,lambda self:None) """Center of the circle that defines the base of the revolved surface. This is the origin of the local coordinate system associated with this revolved surface.
Get: Origin(self: RevolvedSurface) -> XYZ""" 
 XDir=property(lambda self:object(),lambda self,v:None,lambda self:None) """X axis of the local coordinate system associated with this revolved surface.
Get: XDir(self: RevolvedSurface) -> XYZ""" 
 YDir=property(lambda self:object(),lambda self,v:None,lambda self:None) """X axis of the local coordinate system associated with this revolved surface.
Get: YDir(self: RevolvedSurface) -> XYZ""" 
class RoofType(HostObjAttributes,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass ThermalProperties=property(lambda self:object(),lambda self,v:None,lambda self:None) """The calculated and settable thermal properties of the RoofType
Get: ThermalProperties(self: RoofType) -> ThermalProperties"""
class RoundingMethod(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Down=None Nearest=None Up=None value__=Noneclass RoutingCondition(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,diameter): pass def __repr__(self,*args): pass Diameter=property(lambda self:object(),lambda self,v:None,lambda self:None) """The diameter of the segment or fitting specified for the routing condition.
Get: Diameter(self: RoutingCondition) -> float"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: RoutingCondition) -> bool""" 
class RoutingConditions(object,IDisposable): def AppendCondition(self,condition): pass def Clear(self): pass def Dispose(self): pass def GetConditionAt(self,index): pass def GetNumberOfConditions(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,errorLevel): pass def __repr__(self,*args): pass ErrorLevel=property(lambda self:object(),lambda self,v:None,lambda self:None) """The error level that the routing preference manager should post errors if the routing conditions do not meet any routing preference rule, could be None, Warning, or Error
Get: ErrorLevel(self: RoutingConditions) -> RoutingPreferenceErrorLevelSet: ErrorLevel(self: RoutingConditions) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: RoutingConditions) -> bool""" 
 PreferredJunctionType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The junction type (Tee or Tap) to select if defined fittings of both junction types meet all routing conditions.
Get: PreferredJunctionType(self: RoutingConditions) -> PreferredJunctionTypeSet: PreferredJunctionType(self: RoutingConditions) = value""" 
class RoutingPreferenceErrorLevel(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Error=None None=None value__=None Warning=Noneclass RoutingPreferenceManager(object,IDisposable): def AddRule(self,groupType,rule,index=None): pass def Dispose(self): pass def GetMEPPartId(self,groupType,conditions): pass def GetNumberOfRules(self,eGroupType): pass def GetRule(self,groupType,index): pass def GetSharedSizes(self,size,shape): pass def ReleaseUnmanagedResources(self,*args): pass def RemoveRule(self,groupType,index): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: RoutingPreferenceManager) -> bool"""
 OwnerId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Id of the MEPCurveType that owns the RoutingPreferenceManager
Get: OwnerId(self: RoutingPreferenceManager) -> ElementId""" 
 PreferredJunctionType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The preferred junction type.
Get: PreferredJunctionType(self: RoutingPreferenceManager) -> PreferredJunctionTypeSet: PreferredJunctionType(self: RoutingPreferenceManager) = value""" 
class RoutingPreferenceRule(object,IDisposable): def AddCriterion(self,myCriterion): pass def Dispose(self): pass def GetCriterion(self,index): pass def ReleaseUnmanagedResources(self,*args): pass def RemoveCriteron(self,index): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,MEPPartId,description): pass def __repr__(self,*args): pass Description=property(lambda self:object(),lambda self,v:None,lambda self:None) """The description of the routing preference rule.
Get: Description(self: RoutingPreferenceRule) -> str"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: RoutingPreferenceRule) -> bool""" 
 MEPPartId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The referenced MEPPart (segment or fitting) type in this rule. It may be InvalidElementId if no MEPPart will be allowed when the conditions satisfy the criteria in this rule.
Get: MEPPartId(self: RoutingPreferenceRule) -> ElementId""" 
 NumberOfCriteria=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the number of routing criteria.
Get: NumberOfCriteria(self: RoutingPreferenceRule) -> int""" 
 RoutingPreferenceManager=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the routing preference manager that owns this rule.
Get: RoutingPreferenceManager(self: RoutingPreferenceRule) -> RoutingPreferenceManager""" 
class RoutingPreferenceRuleGroupType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Caps=None Crosses=None Elbows=None Junctions=None MechanicalJoints=None Segments=None Transitions=None TransitionsOvalToRound=None TransitionsRectangularToOval=None TransitionsRectangularToRound=None Undefined=None Unions=None value__=Noneclass RPCNode(ContentNode,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass RuledFace(Face,IDisposable): def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass IsExtruded=property(lambda self:object(),lambda self,v:None,lambda self:None) """Determines if this is an extruded ruled surface.
Get: IsExtruded(self: RuledFace) -> bool"""
 RulingsAreParallel=property(lambda self:object(),lambda self,v:None,lambda self:None) """Determines if the rulings of this ruled surface are parallel.
Get: RulingsAreParallel(self: RuledFace) -> bool""" 
class RuledSurface(Surface,IDisposable): @staticmethod def Create(*__args): pass def Dispose(self): pass def GetFirstProfileCurve(self): pass def GetFirstProfilePoint(self): pass def GetSecondProfileCurve(self): pass def GetSecondProfilePoint(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass SATExportOptions(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,option=None): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: SATExportOptions) -> bool"""
class SATImportOptions(BaseImportOptions,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,option=None): passclass SaveAsOptions(object,IDisposable): def Dispose(self): pass def GetWorksharingOptions(self): pass def ReleaseUnmanagedResources(self,*args): pass def SetWorksharingOptions(self,worksharingOptions): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass Compact=property(lambda self:object(),lambda self,v:None,lambda self:None) """Default is false: let the OS eliminate as much or as little dead data as it wants to.
   True: force the OS to eliminate all dead data from the file on disk.Get: Compact(self: SaveAsOptions) -> boolSet: Compact(self: SaveAsOptions) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: SaveAsOptions) -> bool""" 
 MaximumBackups=property(lambda self:object(),lambda self,v:None,lambda self:None) """The maximum number of backups to keep on disk.
Get: MaximumBackups(self: SaveAsOptions) -> intSet: MaximumBackups(self: SaveAsOptions) = value""" 
 OverwriteExistingFile=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies if the operation should be able to overwrite an existing file.
Get: OverwriteExistingFile(self: SaveAsOptions) -> boolSet: OverwriteExistingFile(self: SaveAsOptions) = value""" 
 PreviewViewId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The view id that will be used to generate the preview; this id is not saved to the document's permanent settings.
Get: PreviewViewId(self: SaveAsOptions) -> ElementIdSet: PreviewViewId(self: SaveAsOptions) = value""" 
class SaveModifiedLinksOptions(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass DisableSharedPositioning=None DoNotSaveLinks=None SaveLinks=None value__=Noneclass SaveModifiedLinksOptionsForUnloadLocally(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass DoNotSaveLinks=None SaveLinks=None value__=Noneclass SaveOptions(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass Compact=property(lambda self:object(),lambda self,v:None,lambda self:None) """Default is false: let the OS eliminate as much or as little dead data as it wants to.
   True: force the OS to eliminate all dead data from the file on disk.Get: Compact(self: SaveOptions) -> boolSet: Compact(self: SaveOptions) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: SaveOptions) -> bool""" 
 PreviewViewId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The view id that will be used to generate the preview; this id is not saved to the document's permanent settings.
Get: PreviewViewId(self: SaveOptions) -> ElementIdSet: PreviewViewId(self: SaveOptions) = value""" 
class SchedulableField(object,IDisposable): def Dispose(self): pass def Equals(self,obj): pass def GetHashCode(self): pass def GetName(self,document): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __eq__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,fieldType=None,parameterId=None): pass def __ne__(self,*args): pass def __repr__(self,*args): pass FieldType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The type of data displayed by the field.
Get: FieldType(self: SchedulableField) -> ScheduleFieldTypeSet: FieldType(self: SchedulableField) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: SchedulableField) -> bool""" 
 ParameterId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The ID of the parameter displayed by the field.
Get: ParameterId(self: SchedulableField) -> ElementIdSet: ParameterId(self: SchedulableField) = value""" 
class ScheduleDefinition(object,IDisposable): def AddEmbeddedSchedule(self,categoryId): pass def AddField(self,*__args): pass def AddFilter(self,filter): pass def AddSortGroupField(self,sortGroupField): pass def CanFilter(self): pass def CanFilterByGlobalParameters(self,fieldId): pass def CanFilterByParameterExistence(self,fieldId): pass def CanFilterBySubstring(self,fieldId): pass def CanFilterByValue(self,fieldId): pass def CanHaveEmbeddedSchedule(self): pass def CanIncludeLinkedFiles(self): pass def CanSortByField(self,fieldId): pass def ClearFields(self): pass def ClearFilters(self): pass def ClearSortGroupFields(self): pass def Dispose(self): pass def GetField(self,*__args): pass def GetFieldCount(self): pass def GetFieldId(self,index): pass def GetFieldIndex(self,fieldId): pass def GetFieldOrder(self): pass def GetFilter(self,index): pass def GetFilterCount(self): pass def GetFilters(self): pass def GetSchedulableFields(self): pass def GetSortGroupField(self,index): pass def GetSortGroupFieldCount(self): pass def GetSortGroupFields(self): pass def GetValidCategoriesForEmbeddedSchedule(self): pass def InsertCombinedParameterField(self,data,fieldName,index): pass def InsertField(self,*__args): pass def InsertFilter(self,filter,index): pass def InsertSortGroupField(self,sortGroupField,index): pass def IsSchedulableField(self,schedulableField): pass def IsValidCategoryForEmbeddedSchedule(self,categoryId): pass def IsValidCombinedParameters(self,data): pass def IsValidFieldId(self,fieldId): pass def IsValidFieldIndex(self,index): pass def ReleaseUnmanagedResources(self,*args): pass def RemoveEmbeddedSchedule(self): pass def RemoveField(self,*__args): pass def RemoveFilter(self,index): pass def RemoveSortGroupField(self,index): pass def SetFieldOrder(self,fieldIds): pass def SetFilter(self,index,filter): pass def SetFilters(self,filters): pass def SetSortGroupField(self,index,sortGroupField): pass def SetSortGroupFields(self,sortGroupFields): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass AreaSchemeId=property(lambda self:object(),lambda self,v:None,lambda self:None) """In an area schedule, the ID of the area scheme to display.
Get: AreaSchemeId(self: ScheduleDefinition) -> ElementId"""
 CategoryId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The category ID of elements appearing in the schedule.
Get: CategoryId(self: ScheduleDefinition) -> ElementId""" 
 EmbeddedDefinition=property(lambda self:object(),lambda self,v:None,lambda self:None) """The embedded ScheduleDefinition.
Get: EmbeddedDefinition(self: ScheduleDefinition) -> ScheduleDefinition""" 
 FamilyId=property(lambda self:object(),lambda self,v:None,lambda self:None) """In a note block schedule, the ID of the Generic Annotation family
   displayed by the schedule.Get: FamilyId(self: ScheduleDefinition) -> ElementId""" 
 GrandTotalTitle=property(lambda self:object(),lambda self,v:None,lambda self:None) """The title name is used to display at the grand total row. The name is "Grand total", expressed in the Revit session language, by default.
Get: GrandTotalTitle(self: ScheduleDefinition) -> strSet: GrandTotalTitle(self: ScheduleDefinition) = value""" 
 HasEmbeddedSchedule=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if this ScheduleDefinition has an embedded ScheduleDefinition.
Get: HasEmbeddedSchedule(self: ScheduleDefinition) -> bool""" 
 IncludeLinkedFiles=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the schedule includes elements from linked files.
Get: IncludeLinkedFiles(self: ScheduleDefinition) -> boolSet: IncludeLinkedFiles(self: ScheduleDefinition) = value""" 
 IsEmbedded=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if this is an embedded ScheduleDefinition.
Get: IsEmbedded(self: ScheduleDefinition) -> bool""" 
 IsItemized=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the schedule displays each element on a separate row or
   combines multiple grouped elements onto the same row.Get: IsItemized(self: ScheduleDefinition) -> boolSet: IsItemized(self: ScheduleDefinition) = value""" 
 IsKeySchedule=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the schedule is a key schedule.
Get: IsKeySchedule(self: ScheduleDefinition) -> bool""" 
 IsMaterialTakeoff=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the schedule is a material takeoff.
Get: IsMaterialTakeoff(self: ScheduleDefinition) -> bool""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ScheduleDefinition) -> bool""" 
 ShowGrandTotal=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if a grand total row should be displayed at the bottom of
   the schedule.Get: ShowGrandTotal(self: ScheduleDefinition) -> boolSet: ShowGrandTotal(self: ScheduleDefinition) = value""" 
 ShowGrandTotalCount=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the grand total row should display a count of elements
   in the schedule.Get: ShowGrandTotalCount(self: ScheduleDefinition) -> boolSet: ShowGrandTotalCount(self: ScheduleDefinition) = value""" 
 ShowGrandTotalTitle=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the grand total row should display a title.
Get: ShowGrandTotalTitle(self: ScheduleDefinition) -> boolSet: ShowGrandTotalTitle(self: ScheduleDefinition) = value""" 
 ShowHeaders=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the headers will be displayed in the schedule.
Get: ShowHeaders(self: ScheduleDefinition) -> boolSet: ShowHeaders(self: ScheduleDefinition) = value""" 
 ShowTitle=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the title will be displayed in the schedule.
Get: ShowTitle(self: ScheduleDefinition) -> boolSet: ShowTitle(self: ScheduleDefinition) = value""" 
class ScheduleField(object,IDisposable): def CanDisplayMinMax(self): pass def CanTotal(self): pass def CanTotalByAssemblyType(self): pass def CreatesCircularReferences(self,fieldId): pass def Dispose(self): pass def GetCombinedParameters(self): pass def GetFormatOptions(self): pass def GetName(self): pass def GetSchedulableField(self): pass def GetStyle(self): pass def IsValidCombinedParameters(self,data): pass def ReleaseUnmanagedResources(self,*args): pass def ResetOverride(self): pass def SetCombinedParameters(self,data): pass def SetFormatOptions(self,formatOptions): pass def SetStyle(self,style): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass ColumnHeading=property(lambda self:object(),lambda self,v:None,lambda self:None) """The column heading text.
Get: ColumnHeading(self: ScheduleField) -> strSet: ColumnHeading(self: ScheduleField) = value"""
 Definition=property(lambda self:object(),lambda self,v:None,lambda self:None) """The ScheduleDefinition that this field belongs to.
Get: Definition(self: ScheduleField) -> ScheduleDefinition""" 
 DisplayType=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates the chosen display type for the field.
Get: DisplayType(self: ScheduleField) -> ScheduleFieldDisplayTypeSet: DisplayType(self: ScheduleField) = value""" 
 FieldId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The ID of the field in the containing ScheduleDefinition.
Get: FieldId(self: ScheduleField) -> ScheduleFieldId""" 
 FieldIndex=property(lambda self:object(),lambda self,v:None,lambda self:None) """The index of the field in the containing ScheduleDefinition.
Get: FieldIndex(self: ScheduleField) -> int""" 
 FieldType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The type of data displayed by the field.
Get: FieldType(self: ScheduleField) -> ScheduleFieldType""" 
 GridColumnWidth=property(lambda self:object(),lambda self,v:None,lambda self:None) """The width of the column in the editable grid view, measured in feet.
Get: GridColumnWidth(self: ScheduleField) -> floatSet: GridColumnWidth(self: ScheduleField) = value""" 
 HasSchedulableField=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies if this ScheduleField object has access to a SchedulableField.
   Calculated and combined parameter fields will not have the access.Get: HasSchedulableField(self: ScheduleField) -> bool""" 
 HasTotals=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the field displays totals.
Get: HasTotals(self: ScheduleField) -> boolSet: HasTotals(self: ScheduleField) = value""" 
 HeadingOrientation=property(lambda self:object(),lambda self,v:None,lambda self:None) """The orientation of the column heading text.
Get: HeadingOrientation(self: ScheduleField) -> ScheduleHeadingOrientationSet: HeadingOrientation(self: ScheduleField) = value""" 
 HorizontalAlignment=property(lambda self:object(),lambda self,v:None,lambda self:None) """The horizontal alignment of text in the column.
Get: HorizontalAlignment(self: ScheduleField) -> ScheduleHorizontalAlignmentSet: HorizontalAlignment(self: ScheduleField) = value""" 
 IsCalculatedField=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the field is a calculated field (Formula or Percentage).
Get: IsCalculatedField(self: ScheduleField) -> bool""" 
 IsCombinedParameterField=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the field is a combined parameter field.
Get: IsCombinedParameterField(self: ScheduleField) -> bool""" 
 IsHidden=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the field is hidden in the schedule.
Get: IsHidden(self: ScheduleField) -> boolSet: IsHidden(self: ScheduleField) = value""" 
 IsOverridden=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the field is overridden or not.
Get: IsOverridden(self: ScheduleField) -> bool""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ScheduleField) -> bool""" 
 ParameterId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The ID of the parameter displayed by the field.
Get: ParameterId(self: ScheduleField) -> ElementId""" 
 PercentageBy=property(lambda self:object(),lambda self,v:None,lambda self:None) """The ID of the grouped schedule field used to calculate percentage totals.
Get: PercentageBy(self: ScheduleField) -> ScheduleFieldIdSet: PercentageBy(self: ScheduleField) = value""" 
 PercentageOf=property(lambda self:object(),lambda self,v:None,lambda self:None) """The ID of the field to calculate percentages of.
Get: PercentageOf(self: ScheduleField) -> ScheduleFieldIdSet: PercentageOf(self: ScheduleField) = value""" 
 Schedule=property(lambda self:object(),lambda self,v:None,lambda self:None) """The schedule that this field belongs to.
Get: Schedule(self: ScheduleField) -> ViewSchedule""" 
 SheetColumnWidth=property(lambda self:object(),lambda self,v:None,lambda self:None) """The width of the column on a sheet, measured in feet.
Get: SheetColumnWidth(self: ScheduleField) -> floatSet: SheetColumnWidth(self: ScheduleField) = value""" 
 TotalByAssemblyType=property(lambda self:object(),lambda self,v:None,lambda self:None) """In an assembly schedule view, indicates if totals are calculated for all
   assembly instances of the same type or only for a single instance.Get: TotalByAssemblyType(self: ScheduleField) -> boolSet: TotalByAssemblyType(self: ScheduleField) = value""" 
 UnitType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The unit type of this field, if applicable.
Get: UnitType(self: ScheduleField) -> UnitType""" 
class ScheduleFieldDisplayType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Max=None Min=None MinMax=None Standard=None Totals=None value__=Noneclass ScheduleFieldId(object): def Equals(self,obj): pass def GetHashCode(self): pass def ToString(self): pass def __eq__(self,*args): pass @staticmethod def __new__(self,id): pass def __ne__(self,*args): pass IntegerValue=property(lambda self:object(),lambda self,v:None,lambda self:None) """Provides the value of the ScheduleFieldId as an integer.
Get: IntegerValue(self: ScheduleFieldId) -> int"""
 InvalidScheduleFieldId=Noneclass ScheduleFieldType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Analytical=None CombinedParameter=None Count=None ElementType=None Formula=None FromRoom=None Instance=None Material=None MaterialQuantity=None Percentage=None PhysicalInstance=None PhysicalType=None ProjectInfo=None RevitLinkInstance=None RevitLinkType=None Room=None Space=None StructuralMaterial=None ToRoom=None value__=None ViewBased=Noneclass ScheduleFilter(object,IDisposable): def Dispose(self): pass def GetDoubleValue(self): pass def GetElementIdValue(self): pass def GetIntegerValue(self): pass def GetStringValue(self): pass def ReleaseUnmanagedResources(self,*args): pass def SetNullValue(self): pass def SetValue(self,*__args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,fieldId=None,filterType=None,value=None): pass def __repr__(self,*args): pass FieldId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The ID of the field used to filter the schedule.
Get: FieldId(self: ScheduleFilter) -> ScheduleFieldIdSet: FieldId(self: ScheduleFilter) = value""" 
 FilterType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The filter type.
Get: FilterType(self: ScheduleFilter) -> ScheduleFilterTypeSet: FilterType(self: ScheduleFilter) = value""" 
 IsDoubleValue=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the filter has a double value.
Get: IsDoubleValue(self: ScheduleFilter) -> bool""" 
 IsElementIdValue=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the filter has an ElementId value.
Get: IsElementIdValue(self: ScheduleFilter) -> bool""" 
 IsIntegerValue=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the filter has an integer value.
Get: IsIntegerValue(self: ScheduleFilter) -> bool""" 
 IsNullValue=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the filter has no specified value.
Get: IsNullValue(self: ScheduleFilter) -> bool""" 
 IsStringValue=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the filter has a string value.
Get: IsStringValue(self: ScheduleFilter) -> bool""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ScheduleFilter) -> bool""" 
class ScheduleFilterType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass BeginsWith=None Contains=None EndsWith=None Equal=None GreaterThan=None GreaterThanOrEqual=None HasParameter=None Invalid=None IsAssociatedWithGlobalParameter=None IsNotAssociatedWithGlobalParameter=None LessThan=None LessThanOrEqual=None NotBeginsWith=None NotContains=None NotEndsWith=None NotEqual=None value__=Noneclass ScheduleHeadingOrientation(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Horizontal=None value__=None Vertical=Noneclass ScheduleHorizontalAlignment(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Center=None Left=None Right=None value__=Noneclass ScheduleSheetInstance(Element,IDisposable): @staticmethod def Create(document,viewSheetId,scheduleId,origin): pass def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass IsTitleblockRevisionSchedule=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies if this ScheduleSheetInstance is a revision schedule in a titleblock family.
Get: IsTitleblockRevisionSchedule(self: ScheduleSheetInstance) -> bool"""
 Point=property(lambda self:object(),lambda self,v:None,lambda self:None) """Location on the sheet where the ScheduleInstance is placed (in sheet coordinates).
Get: Point(self: ScheduleSheetInstance) -> XYZSet: Point(self: ScheduleSheetInstance) = value""" 
 Rotation=property(lambda self:object(),lambda self,v:None,lambda self:None) """Rotation of the ScheduleInstance.
Get: Rotation(self: ScheduleSheetInstance) -> ViewportRotationSet: Rotation(self: ScheduleSheetInstance) = value""" 
 ScheduleId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Id of the "master" schedule that generates this ScheduleInstance.
Get: ScheduleId(self: ScheduleSheetInstance) -> ElementId""" 
class ScheduleSortGroupField(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,fieldId=None,sortOrder=None): pass def __repr__(self,*args): pass FieldId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The ID of the field that the schedule will be sorted or grouped by.
Get: FieldId(self: ScheduleSortGroupField) -> ScheduleFieldIdSet: FieldId(self: ScheduleSortGroupField) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ScheduleSortGroupField) -> bool""" 
 ShowBlankLine=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if an empty row should be displayed between groups.
Get: ShowBlankLine(self: ScheduleSortGroupField) -> boolSet: ShowBlankLine(self: ScheduleSortGroupField) = value""" 
 ShowFooter=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if a footer row should be displayed after each group.
Get: ShowFooter(self: ScheduleSortGroupField) -> boolSet: ShowFooter(self: ScheduleSortGroupField) = value""" 
 ShowFooterCount=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the footer row should display a count of elements in the group.
Get: ShowFooterCount(self: ScheduleSortGroupField) -> boolSet: ShowFooterCount(self: ScheduleSortGroupField) = value""" 
 ShowFooterTitle=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the footer row should display a title.
Get: ShowFooterTitle(self: ScheduleSortGroupField) -> boolSet: ShowFooterTitle(self: ScheduleSortGroupField) = value""" 
 ShowHeader=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if a header row should be displayed before each group.
Get: ShowHeader(self: ScheduleSortGroupField) -> boolSet: ShowHeader(self: ScheduleSortGroupField) = value""" 
 SortOrder=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if elements in the schedule will be sorted in
   ascending or descending order.Get: SortOrder(self: ScheduleSortGroupField) -> ScheduleSortOrderSet: SortOrder(self: ScheduleSortGroupField) = value""" 
class ScheduleSortOrder(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Ascending=None Descending=None value__=Noneclass SectionType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Body=None Footer=None Header=None None=None Summary=None value__=Noneclass Segment(Element,IDisposable): def AddSize(self,size): pass def Dispose(self): pass def getBoundingBox(self,*args): pass def GetSizes(self): pass def ReleaseUnmanagedResources(self,*args): pass def RemoveSize(self,nominalDiameter): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Description=property(lambda self:object(),lambda self,v:None,lambda self:None) """The description of the segment.
Get: Description(self: Segment) -> strSet: Description(self: Segment) = value"""
 MaterialId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The ElementId of the MaterialElem.
Get: MaterialId(self: Segment) -> ElementId""" 
 Roughness=property(lambda self:object(),lambda self,v:None,lambda self:None) """The roughness value for given material.
Get: Roughness(self: Segment) -> floatSet: Roughness(self: Segment) = value""" 
 SizeCount=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number of size objects in the segment.
Get: SizeCount(self: Segment) -> int""" 
class SelectionFilterAction(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Highlight=None Isolate=None None=None value__=Noneclass SelectionFilterElement(FilterElement,IDisposable): def AddSet(self,ids): pass def AddSingle(self,id): pass def Clear(self): pass def Contains(self,id): pass @staticmethod def Create(document,name): pass def Dispose(self): pass def getBoundingBox(self,*args): pass def GetElementIds(self): pass def IsEmpty(self): pass def ReleaseUnmanagedResources(self,*args): pass def RemoveSet(self,ids): pass def RemoveSingle(self,id): pass def SetElementIds(self,ids): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass ServerPath(ModelPath,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,centralServerLocation,path): passclass ServiceType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass kActiveChilledBeams=None kCentralHeatingConvectors=None kCentralHeatingHotAir=None kCentralHeatingRadiantFloor=None kCentralHeatingRadiators=None kConstantVolumeDualDuct=None kConstantVolumeFixedOA=None kConstantVolumeTerminalReheat=None kConstantVolumeVariableOA=None kFanCoilSystem=None kForcedConvectionHeaterFlue=None kForcedConvectionHeaterNoFlue=None kInductionSystem=None kMultizoneHotDeckColdDeck=None kNoServiceType=None kOtherRoomHeater=None kRadiantCooledCeilings=None kRadiantHeaterFlue=None kRadiantHeaterMultiburner=None kRadiantHeaterNoFlue=None kSplitSystemsWithMechanicalVentilation=None kSplitSystemsWithMechanicalVentilationWithCooling=None kSplitSystemsWithNaturalVentilation=None kVariableRefrigerantFlow=None kVAVDualDuct=None kVAVIndoorPackagedCabinet=None kVAVSingleDuct=None kVAVTerminalReheat=None kWaterLoopHeatPump=None value__=Noneclass SetComparisonResult(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass BothEmpty=None Disjoint=None Equal=None LeftEmpty=None Overlap=None RightEmpty=None Subset=None Superset=None value__=Noneclass Settings(APIObject,IDisposable): def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Categories=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves an object that provides access to all the categories contained in the Autodesk
Revit application and project.Get: Categories(self: Settings) -> Categories"""
 ElectricalSetting=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves an object that provides access to all the electrical settings include voltage type, distribution system type,
demand factor, wire type in the Autodesk Revit application and project.Get: ElectricalSetting(self: Settings) -> ElectricalSetting""" 
 TilePatterns=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves an object that provides access to the TilePattern objects in
the document.Get: TilePatterns(self: Settings) -> TilePatterns""" 
class ShapeImporter(object,IDisposable): def Convert(self,document,filename): pass def Dispose(self): pass @staticmethod def IsServiceAvailable(): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass InputFormat=property(lambda self:object(),lambda self,v:None,lambda self:None) """The format of the incoming data.
Get: InputFormat(self: ShapeImporter) -> ShapeImporterSourceFormatSet: InputFormat(self: ShapeImporter) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ShapeImporter) -> bool""" 
class ShapeImporterSourceFormat(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Auto=None Rhino=None SAT=None value__=Noneclass SharedParameterApplicableRule(FilterRule,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,parameterName): pass ParameterName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The name of the parameter that an element must support to pass this rule.
Get: ParameterName(self: SharedParameterApplicableRule) -> strSet: ParameterName(self: SharedParameterApplicableRule) = value"""
class SharedParameterElement(ParameterElement,IDisposable): @staticmethod def Create(document,sharedParameterDefinition): pass def Dispose(self): pass def getBoundingBox(self,*args): pass @staticmethod def Lookup(document,guidValue): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass GuidValue=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Guid that identifies this shared parameter.
Get: GuidValue(self: SharedParameterElement) -> Guid"""
class ShellLayerType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Exterior=None Interior=None value__=Noneclass ShowHiddenLinesValues(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass All=None ByDiscipline=None None=None value__=Noneclass SimpleWorksetConfiguration(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass AllEditable=None AllWorksets=None AskUserToSpecify=None LastViewed=None value__=Noneclass SiteLocation(ElementType,IDisposable): def ConvertFromProjectTime(self,projectTime): pass def ConvertToProjectTime(self,inputTime): pass def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Elevation=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Elevation of the site location.
Get: Elevation(self: SiteLocation) -> float"""
 Latitude=property(lambda self:object(),lambda self,v:None,lambda self:None) """The latitude of the site location.
Get: Latitude(self: SiteLocation) -> floatSet: Latitude(self: SiteLocation) = value""" 
 Longitude=property(lambda self:object(),lambda self,v:None,lambda self:None) """The longitude of the site location.
Get: Longitude(self: SiteLocation) -> floatSet: Longitude(self: SiteLocation) = value""" 
 PlaceName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The place name of the site.
Get: PlaceName(self: SiteLocation) -> strSet: PlaceName(self: SiteLocation) = value""" 
 TimeZone=property(lambda self:object(),lambda self,v:None,lambda self:None) """Time-zone that contains the site
Get: TimeZone(self: SiteLocation) -> floatSet: TimeZone(self: SiteLocation) = value""" 
 WeatherStationName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The name of the weather station at the site location.
Get: WeatherStationName(self: SiteLocation) -> str""" 
class Sketch(SketchBase,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Profile=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the Profile of the Sketch.
Get: Profile(self: Sketch) -> CurveArrArray"""
 SketchPlane=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the Sketch Plane of the Sketch.
Get: SketchPlane(self: Sketch) -> SketchPlane""" 
class SketchedStairsCurveData(object,IDisposable): def Dispose(self): pass def GetCurve(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,boundaryCurve,height,slopeType): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: SketchedStairsCurveData) -> bool"""
class SketchPlane(Element,IDisposable): @staticmethod def Create(document,*__args): pass def Dispose(self): pass def getBoundingBox(self,*args): pass def GetPlane(self): pass def GetPlaneReference(self): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass IsSuitableForModelElements=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies if the sketch plane can be assigned to model elements.
Get: IsSuitableForModelElements(self: SketchPlane) -> bool"""
class SKPImportOptions(BaseImportOptions,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,option=None): passclass SkyBackgroundSettings(BackgroundSettings,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass SlabEdge(HostedSweep,IDisposable): def AddSegment(self,targetRef): pass def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass SlabEdgeType=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves/set an object that represents the type of the SlabEdge.
Get: SlabEdgeType(self: SlabEdge) -> SlabEdgeTypeSet: SlabEdgeType(self: SlabEdge) = value"""
class SlabEdgeType(HostedSweepType,IDisposable): def Dispose(self): pass def getBoundingBox(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def setElementType(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): passclass SlabShapeCrease(object): CreaseType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The type of the crease.
Get: CreaseType(self: SlabShapeCrease) -> SlabShapeCreaseType"""
 Curve=property(lambda self:object(),lambda self,v:None,lambda self:None) """The geometry of the crease.
Get: Curve(self: SlabShapeCrease) -> Curve""" 
 EndPoints=property(lambda self:object(),lambda self,v:None,lambda self:None) """The vertices of the crease.
Get: EndPoints(self: SlabShapeCrease) -> SlabShapeVertexArray""" 
class SlabShapeCreaseArray(APIObject,IDisposable,IEnumerable): def Append(self,item): pass def Clear(self): pass def Dispose(self): pass def ForwardIterator(self): pass def GetEnumerator(self): pass def Insert(self,item,index): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def ReverseIterator(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __getitem__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass def __setitem__(self,*args): pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the array is empty.
Get: IsEmpty(self: SlabShapeCreaseArray) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of objects that are in the array.
Get: Size(self: SlabShapeCreaseArray) -> int""" 
class SlabShapeCreaseArrayIterator(APIObject,IDisposable,IEnumerator): def Dispose(self): pass def MoveNext(self): pass def next(self,*args): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: SlabShapeCreaseArrayIterator) -> object"""
class SlabShapeCreaseType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Auto=None Boundary=None Invalid=None UserDrawn=None value__=Noneclass SlabShapeEditor(object): def DrawPoint(self,location): pass def DrawSplitLine(self,startVertex,endVertex): pass def Enable(self): pass def ModifySubElement(self,*__args): pass def PickSupport(self,gLine): pass def ResetSlabShape(self): pass IsEnabled=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies if the slab shape editing functionality is enabled.
Get: IsEnabled(self: SlabShapeEditor) -> bool"""
 SlabShapeCreases=property(lambda self:object(),lambda self,v:None,lambda self:None) """All of the creases that can be edited.
Get: SlabShapeCreases(self: SlabShapeEditor) -> SlabShapeCreaseArray""" 
 SlabShapeVertices=property(lambda self:object(),lambda self,v:None,lambda self:None) """All of the vertices that can be edited.
Get: SlabShapeVertices(self: SlabShapeEditor) -> SlabShapeVertexArray""" 
class SlabShapeVertex(object): Position=property(lambda self:object(),lambda self,v:None,lambda self:None) """The position of the vertex.
Get: Position(self: SlabShapeVertex) -> XYZ"""
 VertexType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The type of the vertex.
Get: VertexType(self: SlabShapeVertex) -> SlabShapeVertexType""" 
class SlabShapeVertexArray(APIObject,IDisposable,IEnumerable): def Append(self,item): pass def Clear(self): pass def Dispose(self): pass def ForwardIterator(self): pass def GetEnumerator(self): pass def Insert(self,item,index): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def ReverseIterator(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __getitem__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass def __setitem__(self,*args): pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the array is empty.
Get: IsEmpty(self: SlabShapeVertexArray) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of objects that are in the array.
Get: Size(self: SlabShapeVertexArray) -> int""" 
class SlabShapeVertexArrayIterator(APIObject,IDisposable,IEnumerator): def Dispose(self): pass def MoveNext(self): pass def next(self,*args): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def Reset(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: SlabShapeVertexArrayIterator) -> object"""
class SlabShapeVertexType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Corner=None Edge=None Interior=None Invalid=None value__=Noneclass SlantedOrVerticalColumnType(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass CT_Angle=None CT_EndPoint=None CT_Vertical=None value__=Noneclass Solid(GeometryObject,IDisposable): def ComputeCentroid(self): pass def Dispose(self): pass def GetBoundingBox(self): pass def IntersectWithCurve(self,curve,options): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass Edges=property(lambda self:object(),lambda self,v:None,lambda self:None) """The edges that belong to the solid.
Get: Edges(self: Solid) -> EdgeArray"""
 Faces=property(lambda self:object(),lambda self,v:None,lambda self:None) """The faces that belong to the solid.
Get: Faces(self: Solid) -> FaceArray""" 
 SurfaceArea=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the total surface area of this solid.
Get: SurfaceArea(self: Solid) -> float""" 
 Volume=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the signed volume of this solid.
Get: Volume(self: Solid) -> float""" 
class SolidCurveIntersection(object,IEnumerable[Curve],IEnumerable,IDisposable): def Dispose(self): pass def GetCurveSegment(self,index): pass def GetCurveSegmentExtents(self,index): pass def GetEnumerator(self): pass def ReleaseUnmanagedResources(self,*args): pass def __contains__(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __iter__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: SolidCurveIntersection) -> bool"""
 ResultType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The result type used to calculate the intersections.
Get: ResultType(self: SolidCurveIntersection) -> SolidCurveIntersectionMode""" 
 SegmentCount=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number of segments in the results.
Get: SegmentCount(self: SolidCurveIntersection) -> int""" 
class SolidCurveIntersectionMode(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass CurveSegmentsInside=None CurveSegmentsOutside=None value__=Noneclass SolidCurveIntersectionOptions(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: SolidCurveIntersectionOptions) -> bool"""
 ResultType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The type of results expected by the calculation.  The default is CurveSegmentsInside.
Get: ResultType(self: SolidCurveIntersectionOptions) -> SolidCurveIntersectionModeSet: ResultType(self: SolidCurveIntersectionOptions) = value""" 
class SolidGeometry(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass ACIS=None Polymesh=None value__=Noneclass SolidOptions(object,IDisposable): def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass @staticmethod def __new__(self,materialId,graphicsStyleId): pass def __repr__(self,*args): pass GraphicsStyleId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Defines the graphics style id for the Solid.
Get: GraphicsStyleId(self: SolidOptions) -> ElementIdSet: GraphicsStyleId(self: SolidOptions) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: SolidOptions) -> bool""" 
 MaterialId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Defines the material id for the Solid.
Get: MaterialId(self: SolidOptions) -> ElementIdSet: MaterialId(self: SolidOptions) = value""" 
class SolidOrShellTessellationControls(object,IDisposable): def DisableLevelOfDetail(self): pass def Dispose(self): pass def ReleaseUnmanagedResources(self,*args): pass def UseLevelOfDetail(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass def __repr__(self,*args): pass Accuracy=property(lambda self:object(),lambda self,v:None,lambda self:None) """A positive real number specifying how accurately a triangulation should approximate a solid or shell.
Get: Accuracy(self: SolidOrShellTessellationControls) -> floatSet: Accuracy(self: SolidOrShellTessellationControls) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: SolidOrShellTessellationControls) -> bool""" 
 LevelOfDetail=property(lambda self:object(),lambda self,v:None,lambda self:None) """An number between 0 and 1 (inclusive) specifying the level of detail for the triangulation of a solid or shell.
Get: LevelOfDetail(self: SolidOrShellTessellationControls) -> floatSet: LevelOfDetail(self: SolidOrShellTessellationControls) = value""" 
 MinAngleInTriangle=property(lambda self:object(),lambda self,v:None,lambda self:None) """A non-negative real number specifying the minimum allowed angle for any triangle in the triangulation, in radians.
Get: MinAngleInTriangle(self: SolidOrShellTessellationControls) -> floatSet: MinAngleInTriangle(self: SolidOrShellTessellationControls) = value""" 
 MinExternalAngleBetweenTriangles=property(lambda self:object(),lambda self,v:None,lambda self:None) """A positive real number specifying the minimum allowed value for the external angle between two adjacent triangles, in radians.
Get: MinExternalAngleBetweenTriangles(self: SolidOrShellTessellationControls) -> floatSet: MinExternalAngleBetweenTriangles(self: SolidOrShellTessellationControls) = value""" 
class SolidSolidCutUtils(object): @staticmethod def AddCutBetweenSolids(document,solidToBeCut,cuttingSolid,splitFacesOfCuttingSolid=None): pass @staticmethod def CanElementCutElement(cuttingElement,cutElement,reason): pass @staticmethod def CutExistsBetweenElements(first,second,firstCutsSecond): pass @staticmethod def GetCuttingSolids(element): pass @staticmethod def GetSolidsBeingCut(element): pass @staticmethod def IsAllowedForSolidCut(element): pass @staticmethod def IsElementFromAppropriateContext(element): pass @staticmethod def RemoveCutBetweenSolids(document,first,second): pass @staticmethod def SplitFacesOfCuttingSolid(first,second,split): pass __all__=[ 'AddCutBetweenSolids', 'CanElementCutElement', 'CutExistsBetweenElements', 'GetCuttingSolids', 'GetSolidsBeingCut', 'IsAllowedForSolidCut', 'IsElementFromAppropriateContext', 'RemoveCutBetweenSolids', 'SplitFacesOfCuttingSolid', ]class SolidUtils(object): @staticmethod def Clone(solid): pass @staticmethod def CreateTransformed(solid,transform): pass @staticmethod def IsValidForTessellation(solidOrShell): pass @staticmethod def SplitVolumes(solid): pass @staticmethod def TessellateSolidOrShell(solidOrShell,tessellationControls): pass __all__=[ 'Clone', 'CreateTransformed', 'IsValidForTessellation', 'SplitVolumes', 'TessellateSolidOrShell', ]class SortingOrder(Enum,IComparable,IFormattable,IConvertible): def __eq__(self,*args): pass def __format__(self,*args): pass def __ge__(self,*args): pass def __gt__(self,*args): pass def __init__(self,*args): pass def __le__(self,*args): pass def __lt__(self,*args): pass def __ne__(self,*args): pass def __reduce_ex__(self,*args): pass def __str__(self,*args): pass Ascending=None Descending=None value__=Noneclass SpacingRule(APIObject,IDisposable): def Dispose(self): pass def ReleaseManagedResources(self,*args): pass def ReleaseUnmanagedResources(self,*args): pass def SetLayoutFixedDistance(self,distance,just,gridlinesRotation,offset): pass def SetLayoutFixedNumber(self,number,just,gridlinesRotation,offset): pass def SetLayoutMaximumSpacing(self,distance,just,gridlinesRotation,offset): pass def SetLayoutMinimumSpacing(self,distance,just,gridlinesRotation,offset): pass def SetLayoutNone(self): pass def __enter__(self,*args): pass def __exit__(self,*args): pass def __init__(self,*args): pass BeltMeasurement=property(lambda self:object(),lambda self,v:None,lambda self:None) """On a curved surface, BeltMeasurement specifies where the
grid's distances are measured.Get: BeltMeasurement(self: SpacingRule) -> floatSet: BeltMeasurement(self: SpacingRule) = value"""
 Distance=property(lambda self:object(),lambda self,v:None,lambda self:None) """The exact distance between layout
lines.Get: Distance(self: SpacingRule) -> floatSet: Distance(self: SpacingRule) = value""" 
 GridlinesRotation=property(lambda self:object(),lambda self,v:None,lambda self:None) """An additional rotation to be applied
to this set of grid lines.Get: GridlinesRotation(self: SpacingRule) -> floatSet: GridlinesRotation(self: SpacingRule) = value""" 
 HasBeltMeasurement=property(lambda self:object(),lambda self,v:None,lambda self:None) """True if the gridlines are not parallel due to surface
curvature, and the BeltMeasurement property thereforeapplies.Get: HasBeltMeasurement(self: SpacingRule) -> bool""" 
 Justification=property(lambda self:object(),lambda self,v:None,lambda self:None) """The justification of the lines within
the region.Get: Justification(self: SpacingRule) -> SpacingRuleJustificationSet: Justification(self: SpacingRule) = value""" 
 Layout=property(lambda self:object(),lambda self,v:None,lambda self:None) """A choice of several gridline layout rules.
Get: Layout(self: SpacingRule) -> SpacingRuleLayout""" 
 Number=property(lambda self:object(),lambda self,v:None,lambda self:None) """The exact number of lines in the
region.Get: Number(self: SpacingRule) -> intSet: Number(self: SpacingRule) = value""" 
 Offset=property(lambda self:object(),lambda self,v:None,lambda self:None) """An additional offset applied to the first
gridline.Get: Offset(self: SpacingRule) -> floatSet: Offset(self: SpacingRule) = value""" 
class SpacingRuleJustification(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Beginning=None Center=None End=None value__=Noneclass SpacingRuleLayout(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass FixedDistance=None FixedNumber=None MaximumSpacing=None MinimumSpacing=None None=None value__=Noneclass SpatialElementBoundaryLocation(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Center=None CoreBoundary=None CoreCenter=None Finish=None value__=Noneclass SpatialElementBoundaryOptions(object,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: SpatialElementBoundaryOptions) -> bool"""
 SpatialElementBoundaryLocation=property(lambda self:object(),lambda self,v:None,lambda self:None) """The boundary of spatial element for geometry calculation.
Get: SpatialElementBoundaryLocation(self: SpatialElementBoundaryOptions) -> SpatialElementBoundaryLocationSet: SpatialElementBoundaryLocation(self: SpatialElementBoundaryOptions) = value""" 
 StoreFreeBoundaryFaces=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether to include the free boundary faces in the result.
Get: StoreFreeBoundaryFaces(self: SpatialElementBoundaryOptions) -> boolSet: StoreFreeBoundaryFaces(self: SpatialElementBoundaryOptions) = value""" 
class SpatialElementBoundarySubface(object,IDisposable):def Dispose(self):pass def GetBoundingElementFace(self):pass def GetSpatialElementFace(self):pass def GetSubface(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: SpatialElementBoundarySubface) -> bool"""
 SpatialBoundaryElement=property(lambda self:object(),lambda self,v:None,lambda self:None) """Element that gave rise to this room face.
Get: SpatialBoundaryElement(self: SpatialElementBoundarySubface) -> LinkElementId""" 
 SubfaceArisesFromElementFace=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the subface is coincident with a portion of a (possibly offset) face of the element.
Get: SubfaceArisesFromElementFace(self: SpatialElementBoundarySubface) -> bool""" 
 SubfaceType=property(lambda self:object(),lambda self,v:None,lambda self:None) """Type of the subface.
Get: SubfaceType(self: SpatialElementBoundarySubface) -> SubfaceType""" 
 Valid=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the subface instance is valid and can be used.
Get: Valid(self: SpatialElementBoundarySubface) -> bool""" 
class SpatialElementCalculationLocation(Element,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass MarkerPosition=property(lambda self:object(),lambda self,v:None,lambda self:None) """The position of the spatial element calculation location marker.
Get: MarkerPosition(self: SpatialElementCalculationLocation) -> XYZ"""
class SpatialElementCalculationPoint(SpatialElementCalculationLocation,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass Position=property(lambda self:object(),lambda self,v:None,lambda self:None) """The position of the "in" spatial element calculation point.
Get: Position(self: SpatialElementCalculationPoint) -> XYZSet: Position(self: SpatialElementCalculationPoint) = value"""
class SpatialElementFromToCalculationPoints(SpatialElementCalculationLocation,IDisposable):def Dispose(self):pass def Flip(self):pass def getBoundingBox(self,*args):pass def IsAcceptableFromPosition(self,fromPosition):pass def IsAcceptableToPosition(self,toPosition):pass def MakeFromPositionAcceptable(self,newFromLocation):pass def MakeToPositionAcceptable(self,newToLocation):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass FromPosition=property(lambda self:object(),lambda self,v:None,lambda self:None) """The "from" position of spatial element connecting calculation point.
Get: FromPosition(self: SpatialElementFromToCalculationPoints) -> XYZSet: FromPosition(self: SpatialElementFromToCalculationPoints) = value"""
 ToPosition=property(lambda self:object(),lambda self,v:None,lambda self:None) """The "to" position of spatial element connecting calculation point.
Get: ToPosition(self: SpatialElementFromToCalculationPoints) -> XYZSet: ToPosition(self: SpatialElementFromToCalculationPoints) = value""" 
class SpatialElementGeometryCalculator(object,IDisposable):def CalculateSpatialElementGeometry(self,spatialElement):pass@staticmethod def CanCalculateGeometry(spatialElement):pass def Dispose(self):pass def GetOptions(self):pass@staticmethod def IsRoomOrSpace(spatialElement):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,aDoc,options=None):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: SpatialElementGeometryCalculator) -> bool"""
class SpatialElementGeometryResults(object,IDisposable):def Dispose(self):pass def GetBoundaryFaceInfo(self,face):pass def GetGeometry(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: SpatialElementGeometryResults) -> bool"""
class SpatialElementTagOrientation(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Horizontal=None Model=None value__=None Vertical=Noneclass SpatialElementType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Area=None Room=None Space=None value__=Noneclass SpecialType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Default=None ExteriorWall=None FoundationWall=None InteriorWall=None RetainingWall=None value__=Noneclass SpotDimension(Dimension,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass Location=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get a location point object. This is the location of the spot dimension.
Get: Location(self: SpotDimension) -> Location"""
 SpotDimensionType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The dimension style of this dimension.
Get: SpotDimensionType(self: SpotDimension) -> SpotDimensionTypeSet: SpotDimensionType(self: SpotDimension) = value""" 
class SpotDimensionType(DimensionType,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass StairsEditScope(EditScope,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def Start(self,*__args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,document,transactionName):pass IsPermitted=property(lambda self:object(),lambda self,v:None,lambda self:None) """Tells if the StairsEditScope is permitted to start.
Get: IsPermitted(self: StairsEditScope) -> bool"""
class StartingViewSettings(Element,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass@staticmethod def GetStartingViewSettings(doc):pass def IsAcceptableStartingView(self,viewId):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass ViewId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates the specific view that will be opened when the model is loaded.  InvalidElementId indicates
 that no view has been specified. In that case, Revit will open the last views that were open at the time the file was saved.Get: ViewId(self: StartingViewSettings) -> ElementIdSet: ViewId(self: StartingViewSettings) = value"""
class StickSymbolLocation(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass StickViewBottom=None StickViewCenter=None StickViewLocLine=None StickViewTop=None value__=Noneclass StorageType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Double=None ElementId=None Integer=None None=None String=None value__=Noneclass StringParameterValue(ParameterValue,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,value=None):pass Value=property(lambda self:object(),lambda self,v:None,lambda self:None) """The stored value
Get: Value(self: StringParameterValue) -> strSet: Value(self: StringParameterValue) = value"""
class StructDeckEmbeddingType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Invalid=None MergeWithLayerAbove=None Standalone=None value__=Noneclass StructuralAsset(object,IDisposable):def Copy(self):pass def Dispose(self):pass def Equals(self,*__args):pass def ReleaseUnmanagedResources(self,*args):pass def SetPoissonRatio(self,poissonRatio):pass def SetShearModulus(self,shearModulus):pass def SetThermalExpansionCoefficient(self,thermalExpCoeff):pass def SetYoungModulus(self,youngModulus):pass def __enter__(self,*args):pass def __eq__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,name,structuralAssetClass):pass def __repr__(self,*args):pass Behavior=property(lambda self:object(),lambda self,v:None,lambda self:None) """Flag indicating whether elements of this material behave isotropically or orthotropically.
Get: Behavior(self: StructuralAsset) -> StructuralBehaviorSet: Behavior(self: StructuralAsset) = value"""
 ConcreteBendingReinforcement=property(lambda self:object(),lambda self,v:None,lambda self:None) """The bending reinforcement of the asset.
Get: ConcreteBendingReinforcement(self: StructuralAsset) -> floatSet: ConcreteBendingReinforcement(self: StructuralAsset) = value""" 
 ConcreteCompression=property(lambda self:object(),lambda self,v:None,lambda self:None) """The compression strength of concrete-based assets.
Get: ConcreteCompression(self: StructuralAsset) -> floatSet: ConcreteCompression(self: StructuralAsset) = value""" 
 ConcreteShearReinforcement=property(lambda self:object(),lambda self,v:None,lambda self:None) """The shear reinforcement of the asset.
Get: ConcreteShearReinforcement(self: StructuralAsset) -> floatSet: ConcreteShearReinforcement(self: StructuralAsset) = value""" 
 ConcreteShearStrengthReduction=property(lambda self:object(),lambda self,v:None,lambda self:None) """The shear strength reduction of the asset.
Get: ConcreteShearStrengthReduction(self: StructuralAsset) -> floatSet: ConcreteShearStrengthReduction(self: StructuralAsset) = value""" 
 DampingRatio=property(lambda self:object(),lambda self,v:None,lambda self:None) """The damping ratio of the asset.
Get: DampingRatio(self: StructuralAsset) -> floatSet: DampingRatio(self: StructuralAsset) = value""" 
 Density=property(lambda self:object(),lambda self,v:None,lambda self:None) """The density of the asset.
Get: Density(self: StructuralAsset) -> floatSet: Density(self: StructuralAsset) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: StructuralAsset) -> bool""" 
 Lightweight=property(lambda self:object(),lambda self,v:None,lambda self:None) """Flag indicating whether the asset describes a material that is light-weight or not.
Get: Lightweight(self: StructuralAsset) -> boolSet: Lightweight(self: StructuralAsset) = value""" 
 MetalReductionFactor=property(lambda self:object(),lambda self,v:None,lambda self:None) """The reduction factor of the asset.
Get: MetalReductionFactor(self: StructuralAsset) -> floatSet: MetalReductionFactor(self: StructuralAsset) = value""" 
 MetalResistanceCalculationStrength=property(lambda self:object(),lambda self,v:None,lambda self:None) """The resistance calculation strength of the asset.
Get: MetalResistanceCalculationStrength(self: StructuralAsset) -> floatSet: MetalResistanceCalculationStrength(self: StructuralAsset) = value""" 
 MinimumTensileStrength=property(lambda self:object(),lambda self,v:None,lambda self:None) """The minimum tensile strength of the asset.
Get: MinimumTensileStrength(self: StructuralAsset) -> floatSet: MinimumTensileStrength(self: StructuralAsset) = value""" 
 MinimumYieldStress=property(lambda self:object(),lambda self,v:None,lambda self:None) """The minimum yield stress of the asset.
Get: MinimumYieldStress(self: StructuralAsset) -> floatSet: MinimumYieldStress(self: StructuralAsset) = value""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """The name of the structural asset.
Get: Name(self: StructuralAsset) -> strSet: Name(self: StructuralAsset) = value""" 
 PoissonRatio=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Poisson ratio of the asset.
Get: PoissonRatio(self: StructuralAsset) -> XYZSet: PoissonRatio(self: StructuralAsset) = value""" 
 ShearModulus=property(lambda self:object(),lambda self,v:None,lambda self:None) """The shear modulus of the asset.
Get: ShearModulus(self: StructuralAsset) -> XYZSet: ShearModulus(self: StructuralAsset) = value""" 
 StructuralAssetClass=property(lambda self:object(),lambda self,v:None,lambda self:None) """The type of material that this structural asset describes (e.g. wood, concrete, metal.)
Get: StructuralAssetClass(self: StructuralAsset) -> StructuralAssetClass""" 
 SubClass=property(lambda self:object(),lambda self,v:None,lambda self:None) """The sub-class of the asset.
Get: SubClass(self: StructuralAsset) -> strSet: SubClass(self: StructuralAsset) = value""" 
 ThermalExpansionCoefficient=property(lambda self:object(),lambda self,v:None,lambda self:None) """The thermal expansion coefficient of the asset.
Get: ThermalExpansionCoefficient(self: StructuralAsset) -> XYZSet: ThermalExpansionCoefficient(self: StructuralAsset) = value""" 
 WoodBendingStrength=property(lambda self:object(),lambda self,v:None,lambda self:None) """The bending strength of the asset.
Get: WoodBendingStrength(self: StructuralAsset) -> floatSet: WoodBendingStrength(self: StructuralAsset) = value""" 
 WoodGrade=property(lambda self:object(),lambda self,v:None,lambda self:None) """The grade of wood used in a wood-based asset.
Get: WoodGrade(self: StructuralAsset) -> strSet: WoodGrade(self: StructuralAsset) = value""" 
 WoodParallelCompressionStrength=property(lambda self:object(),lambda self,v:None,lambda self:None) """The parallel compression strength of the asset.
Get: WoodParallelCompressionStrength(self: StructuralAsset) -> floatSet: WoodParallelCompressionStrength(self: StructuralAsset) = value""" 
 WoodParallelShearStrength=property(lambda self:object(),lambda self,v:None,lambda self:None) """The parallel shear strength of the asset.
Get: WoodParallelShearStrength(self: StructuralAsset) -> floatSet: WoodParallelShearStrength(self: StructuralAsset) = value""" 
 WoodPerpendicularCompressionStrength=property(lambda self:object(),lambda self,v:None,lambda self:None) """The perpendicular compression strength of the asset.
Get: WoodPerpendicularCompressionStrength(self: StructuralAsset) -> floatSet: WoodPerpendicularCompressionStrength(self: StructuralAsset) = value""" 
 WoodPerpendicularShearStrength=property(lambda self:object(),lambda self,v:None,lambda self:None) """The perpendicular shear strength of the asset.
Get: WoodPerpendicularShearStrength(self: StructuralAsset) -> floatSet: WoodPerpendicularShearStrength(self: StructuralAsset) = value""" 
 WoodSpecies=property(lambda self:object(),lambda self,v:None,lambda self:None) """The species of wood used in a wood-based asset.
Get: WoodSpecies(self: StructuralAsset) -> strSet: WoodSpecies(self: StructuralAsset) = value""" 
 YoungModulus=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Young's modulus of the asset.
Get: YoungModulus(self: StructuralAsset) -> XYZSet: YoungModulus(self: StructuralAsset) = value""" 
class StructuralAssetClass(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Basic=None Concrete=None Gas=None Generic=None Liquid=None Metal=None Plastic=None Undefined=None value__=None Wood=Noneclass StructuralBehavior(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Isotropic=None Orthotropic=None TransverseIsotropic=None value__=Noneclass StructuralReleaseType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass kBendingMoment=None kFixed=None kPinned=None kUserDefined=None value__=Noneclass SubfaceType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Bottom=None Side=None Top=None value__=Noneclass SubTransaction(object,IDisposable):def Commit(self):pass def Dispose(self):pass def GetStatus(self):pass def HasEnded(self):pass def HasStarted(self):pass def ReleaseUnmanagedResources(self,*args):pass def RollBack(self):pass def Start(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,document):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: SubTransaction) -> bool"""
class SunAndShadowSettings(Element,IDisposable):@staticmethod def CalculateTimeZone(latitude,longitude):pass def Dispose(self):pass def FitToModel(self):pass@staticmethod def GetActiveSunAndShadowSettings(aDocument):pass def getBoundingBox(self,*args):pass def GetFrameAltitude(self,frame):pass def GetFrameAzimuth(self,frame):pass def GetFrameTime(self,frame):pass def GetMatchingPreset(self):pass def GetSunrise(self,date):pass def GetSunset(self,date):pass def IsAfterStartDateAndTime(self,time):pass def IsBeforeEndDateAndTime(self,time):pass def IsFrameValid(self,frame):pass def IsGroundPlaneLevelValid(self,levelId):pass def IsTimeIntervalValid(self,interval):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass ActiveFrame=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies the active animation frame for a single-day or multi-day study,
 starting at 1.0 for the first frame and incrementing in intervals of 1.0.Get: ActiveFrame(self: SunAndShadowSettings) -> floatSet: ActiveFrame(self: SunAndShadowSettings) = value"""
 ActiveFrameTime=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies the date and time of the SunAndShadowSettings element for the active frame.
Get: ActiveFrameTime(self: SunAndShadowSettings) -> DateTime""" 
 Altitude=property(lambda self:object(),lambda self,v:None,lambda self:None) """Altitude setting (angle in radians). This is only relevant when dealing with a SunAndShadowSettings
 element that uses lighting mode.Get: Altitude(self: SunAndShadowSettings) -> floatSet: Altitude(self: SunAndShadowSettings) = value""" 
 Azimuth=property(lambda self:object(),lambda self,v:None,lambda self:None) """Azimuth setting (angle in radians). This is only relevant when dealing with a SunAndShadowSettings
 element that uses lighting mode.Get: Azimuth(self: SunAndShadowSettings) -> floatSet: Azimuth(self: SunAndShadowSettings) = value""" 
 EndDateAndTime=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies the end date and time.
Get: EndDateAndTime(self: SunAndShadowSettings) -> DateTimeSet: EndDateAndTime(self: SunAndShadowSettings) = value""" 
 GroundPlaneHeight=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies the ground plane height.
Get: GroundPlaneHeight(self: SunAndShadowSettings) -> float""" 
 GroundPlaneLevelId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies the element id of the Ground Plane level for the SunAndShadowSettings element.
Get: GroundPlaneLevelId(self: SunAndShadowSettings) -> ElementIdSet: GroundPlaneLevelId(self: SunAndShadowSettings) = value""" 
 Latitude=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies the current latitude used by the SunAndShadowSettings element.
Get: Latitude(self: SunAndShadowSettings) -> float""" 
 Longitude=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies the current longitude used by the SunAndShadowSettings element.
Get: Longitude(self: SunAndShadowSettings) -> float""" 
 NumberOfFrames=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies the total number of animation frames for a single-day or multi-day study.
Get: NumberOfFrames(self: SunAndShadowSettings) -> float""" 
 ProjectLocationId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies the ProjectLocation element used by the SunAndShadowSettings element.
Get: ProjectLocationId(self: SunAndShadowSettings) -> ElementId""" 
 ProjectLocationName=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies the name of the project location used by the SunAndShadowSettings element.
Get: ProjectLocationName(self: SunAndShadowSettings) -> str""" 
 RelativeToView=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies whether the SunAndShadowSettings element is relative to the view
 direction. This is only relevant for lighting mode.Get: RelativeToView(self: SunAndShadowSettings) -> boolSet: RelativeToView(self: SunAndShadowSettings) = value""" 
 SharesSettings=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies whether settings are shared globally.
Get: SharesSettings(self: SunAndShadowSettings) -> boolSet: SharesSettings(self: SunAndShadowSettings) = value""" 
 StartDateAndTime=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies the start or current date and time.
Get: StartDateAndTime(self: SunAndShadowSettings) -> DateTimeSet: StartDateAndTime(self: SunAndShadowSettings) = value""" 
 SunAndShadowType=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies the type of the SunAndShadowSettings element.
Get: SunAndShadowType(self: SunAndShadowSettings) -> SunAndShadowTypeSet: SunAndShadowType(self: SunAndShadowSettings) = value""" 
 SunriseToSunset=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies whether the current single day sun study is set to run from
 sunrise to sunset.Get: SunriseToSunset(self: SunAndShadowSettings) -> boolSet: SunriseToSunset(self: SunAndShadowSettings) = value""" 
 TimeInterval=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies the time interval between animation frames.
Get: TimeInterval(self: SunAndShadowSettings) -> SunStudyTimeIntervalSet: TimeInterval(self: SunAndShadowSettings) = value""" 
 TimeZone=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies the time zone.
Get: TimeZone(self: SunAndShadowSettings) -> float""" 
 UsesDST=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies whether the SunAndShadowSettings element is using daylight savings time.
Get: UsesDST(self: SunAndShadowSettings) -> bool""" 
 UsesGroundPlane=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies whether the SunAndShadowSettings element uses a ground plane.
Get: UsesGroundPlane(self: SunAndShadowSettings) -> boolSet: UsesGroundPlane(self: SunAndShadowSettings) = value""" 
 Visible=property(lambda self:object(),lambda self,v:None,lambda self:None) """Visibility in current view for a per-view SunAndShadowSettings element.
Get: Visible(self: SunAndShadowSettings) -> boolSet: Visible(self: SunAndShadowSettings) = value""" 
class SunAndShadowType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Lighting=None MultiDayStudy=None OneDayStudy=None StillImage=None value__=Noneclass SunStudyTimeInterval(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Day=None Hour=None Minutes15=None Minutes30=None Minutes45=None Month=None value__=None Week=Noneclass Sweep(GenericForm,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass IsTrajectorySegmentationEnabled=property(lambda self:object(),lambda self,v:None,lambda self:None) """The trajectory segmentation option for the sweep.
Get: IsTrajectorySegmentationEnabled(self: Sweep) -> boolSet: IsTrajectorySegmentationEnabled(self: Sweep) = value"""
 MaxSegmentAngle=property(lambda self:object(),lambda self,v:None,lambda self:None) """The maximum segment angle of the sweep in radians.
Get: MaxSegmentAngle(self: Sweep) -> floatSet: MaxSegmentAngle(self: Sweep) = value""" 
 Path3d=property(lambda self:object(),lambda self,v:None,lambda self:None) """The selected curves used for the sweep path.
Get: Path3d(self: Sweep) -> Path3d""" 
 PathSketch=property(lambda self:object(),lambda self,v:None,lambda self:None) """The sketched path for the sweep.
Get: PathSketch(self: Sweep) -> Sketch""" 
 ProfileSketch=property(lambda self:object(),lambda self,v:None,lambda self:None) """The profile sketch of the sweep.
Get: ProfileSketch(self: Sweep) -> Sketch""" 
 ProfileSymbol=property(lambda self:object(),lambda self,v:None,lambda self:None) """The family symbol profile details for the sweep.
Get: ProfileSymbol(self: Sweep) -> FamilySymbolProfile""" 
class SweptBlend(GenericForm,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def GetVertexConnectionMap(self):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def SetVertexConnectionMap(self,vertexMap):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass BottomProfile=property(lambda self:object(),lambda self,v:None,lambda self:None) """The curves which make up the bottom profile of the sketch.
Get: BottomProfile(self: SweptBlend) -> CurveArrArray"""
 BottomProfileSymbol=property(lambda self:object(),lambda self,v:None,lambda self:None) """The bottom family symbol profile of the swept blend.
Get: BottomProfileSymbol(self: SweptBlend) -> FamilySymbolProfile""" 
 BottomSketch=property(lambda self:object(),lambda self,v:None,lambda self:None) """The bottom profile sketch of the swept blend.
Get: BottomSketch(self: SweptBlend) -> Sketch""" 
 PathSketch=property(lambda self:object(),lambda self,v:None,lambda self:None) """The sketched path for the swept blend.
Get: PathSketch(self: SweptBlend) -> Sketch""" 
 SelectedPath=property(lambda self:object(),lambda self,v:None,lambda self:None) """The selected curve used for the swept blend path.
Get: SelectedPath(self: SweptBlend) -> Curve""" 
 TopProfile=property(lambda self:object(),lambda self,v:None,lambda self:None) """The curves which make up the top profile of the sketch.
Get: TopProfile(self: SweptBlend) -> CurveArrArray""" 
 TopProfileSymbol=property(lambda self:object(),lambda self,v:None,lambda self:None) """The top family symbol profile of the swept blend.
Get: TopProfileSymbol(self: SweptBlend) -> FamilySymbolProfile""" 
 TopSketch=property(lambda self:object(),lambda self,v:None,lambda self:None) """The top profile sketch of the swept blend.
Get: TopSketch(self: SweptBlend) -> Sketch""" 
class SweptProfile(object,IDisposable):def Dispose(self):pass def GetDrivingCurve(self):pass def GetSweptProfile(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass EndSetBack=property(lambda self:object(),lambda self,v:None,lambda self:None) """The distance from the end of the driving curve to the point where the sweep actually ends.
Get: EndSetBack(self: SweptProfile) -> float"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: SweptProfile) -> bool""" 
 StartSetBack=property(lambda self:object(),lambda self,v:None,lambda self:None) """The distance from the start of the driving curve to the point where the sweep actually begins.
Get: StartSetBack(self: SweptProfile) -> float""" 
class SymbolicCurve(CurveElement,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def GetVisibility(self):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def SetVisibility(self,visibility):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass IsDrawnInForeground=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if this curve will be drawn in the foreground of the family instance.
Get: IsDrawnInForeground(self: SymbolicCurve) -> boolSet: IsDrawnInForeground(self: SymbolicCurve) = value"""
 ReferenceType=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates the type of reference.
Get: ReferenceType(self: SymbolicCurve) -> ReferenceTypeSet: ReferenceType(self: SymbolicCurve) = value""" 
 Subcategory=property(lambda self:object(),lambda self,v:None,lambda self:None) """The subcategory.
Get: Subcategory(self: SymbolicCurve) -> GraphicsStyleSet: Subcategory(self: SymbolicCurve) = value""" 
class SymbolicCurveArray(APIObject,IDisposable,IEnumerable):def Append(self,item):pass def Clear(self):pass def Dispose(self):pass def ForwardIterator(self):pass def GetEnumerator(self):pass def Insert(self,item,index):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def ReverseIterator(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __getitem__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass def __setitem__(self,*args):pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the array is empty.
Get: IsEmpty(self: SymbolicCurveArray) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of model curves that are in the array.
Get: Size(self: SymbolicCurveArray) -> int""" 
class SymbolicCurveArrayIterator(APIObject,IDisposable,IEnumerator):def Dispose(self):pass def MoveNext(self):pass def next(self,*args):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def Reset(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: SymbolicCurveArrayIterator) -> object"""
class SynchronizeWithCentralOptions(object,IDisposable):def Dispose(self):pass def GetRelinquishOptions(self):pass def ReleaseUnmanagedResources(self,*args):pass def SetRelinquishOptions(self,relinquishOptions):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass Comment=property(lambda self:object(),lambda self,v:None,lambda self:None) """User description of changes made since the last Sync with Central.  Empty by default.
Get: Comment(self: SynchronizeWithCentralOptions) -> strSet: Comment(self: SynchronizeWithCentralOptions) = value"""
 Compact=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether Revit should compact the central model while synchronizing with central.
 This option reduces the size of the central model but many increase the time it takes to perform the save. False by default.Get: Compact(self: SynchronizeWithCentralOptions) -> boolSet: Compact(self: SynchronizeWithCentralOptions) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: SynchronizeWithCentralOptions) -> bool""" 
 RelinquishBorrowedElements=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether Revit should relinquish borrowed elements after synchronizing with central.
Get: RelinquishBorrowedElements(self: SynchronizeWithCentralOptions) -> bool""" 
 RelinquishFamilyWorksets=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether Revit should relinquish Family worksets after synchronizing with central.
Get: RelinquishFamilyWorksets(self: SynchronizeWithCentralOptions) -> bool""" 
 RelinquishProjectStandardWorksets=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether Revit should relinquish Project Standard worksets after synchronizing with central.
Get: RelinquishProjectStandardWorksets(self: SynchronizeWithCentralOptions) -> bool""" 
 RelinquishUserCreatedWorksets=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether Revit should relinquish user-created Standard worksets after synchronizing with central.
Get: RelinquishUserCreatedWorksets(self: SynchronizeWithCentralOptions) -> bool""" 
 RelinquishViewWorksets=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether Revit should relinquish View worksets after synchronizing with central.
Get: RelinquishViewWorksets(self: SynchronizeWithCentralOptions) -> bool""" 
 SaveLocalAfter=property(lambda self:object(),lambda self,v:None,lambda self:None) """True means to save local after saving changes to central.  True by default.
 Silently ignored if the model in the current session is central rather than local.Get: SaveLocalAfter(self: SynchronizeWithCentralOptions) -> boolSet: SaveLocalAfter(self: SynchronizeWithCentralOptions) = value""" 
 SaveLocalBefore=property(lambda self:object(),lambda self,v:None,lambda self:None) """True means to save local before the first reload latest if there are changes not yet saved to local.
 True by default. Silently ignored if the model in the current session is central rather than local.Get: SaveLocalBefore(self: SynchronizeWithCentralOptions) -> boolSet: SaveLocalBefore(self: SynchronizeWithCentralOptions) = value""" 
 SaveLocalFile=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether Revit will save the local file at least once while synchronizing with central.
Get: SaveLocalFile(self: SynchronizeWithCentralOptions) -> bool""" 
class TableCellCalculatedValueData(object,IDisposable):def Dispose(self):pass def GetName(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: TableCellCalculatedValueData) -> bool"""
class TableCellCombinedParameterData(object,IDisposable):@staticmethod def Create():pass def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass CategoryId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Category id for this parameter
Get: CategoryId(self: TableCellCombinedParameterData) -> ElementIdSet: CategoryId(self: TableCellCombinedParameterData) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: TableCellCombinedParameterData) -> bool""" 
 ParamId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The parameter id
Get: ParamId(self: TableCellCombinedParameterData) -> ElementIdSet: ParamId(self: TableCellCombinedParameterData) = value""" 
 Prefix=property(lambda self:object(),lambda self,v:None,lambda self:None) """The prefix for this parameter
Get: Prefix(self: TableCellCombinedParameterData) -> strSet: Prefix(self: TableCellCombinedParameterData) = value""" 
 SampleValue=property(lambda self:object(),lambda self,v:None,lambda self:None) """The sample/example value for the parameter in text form
Get: SampleValue(self: TableCellCombinedParameterData) -> strSet: SampleValue(self: TableCellCombinedParameterData) = value""" 
 Separator=property(lambda self:object(),lambda self,v:None,lambda self:None) """The separator for this parameter
Get: Separator(self: TableCellCombinedParameterData) -> strSet: Separator(self: TableCellCombinedParameterData) = value""" 
 Suffix=property(lambda self:object(),lambda self,v:None,lambda self:None) """The suffix for this parameter
Get: Suffix(self: TableCellCombinedParameterData) -> strSet: Suffix(self: TableCellCombinedParameterData) = value""" 
class TableCellStyle(object,IDisposable):def Dispose(self):pass def GetCellStyleOverrideOptions(self):pass def ReleaseUnmanagedResources(self,*args):pass def ResetOverride(self):pass def SetCellStyleOverrideOptions(self,helper):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,other=None):pass def __repr__(self,*args):pass BackgroundColor=property(lambda self:object(),lambda self,v:None,lambda self:None) """The background color of this cell in the grid view.
Get: BackgroundColor(self: TableCellStyle) -> ColorSet: BackgroundColor(self: TableCellStyle) = value"""
 BorderBottomLineStyle=property(lambda self:object(),lambda self,v:None,lambda self:None) """The element id (GraphicsStyle element) for the bottom line of the cell border.
Get: BorderBottomLineStyle(self: TableCellStyle) -> ElementIdSet: BorderBottomLineStyle(self: TableCellStyle) = value""" 
 BorderLeftLineStyle=property(lambda self:object(),lambda self,v:None,lambda self:None) """The element id (GraphicsStyle element) for the left line of the cell border.
Get: BorderLeftLineStyle(self: TableCellStyle) -> ElementIdSet: BorderLeftLineStyle(self: TableCellStyle) = value""" 
 BorderRightLineStyle=property(lambda self:object(),lambda self,v:None,lambda self:None) """The element id (GraphicsStyle element) for the right line of the cell border.
Get: BorderRightLineStyle(self: TableCellStyle) -> ElementIdSet: BorderRightLineStyle(self: TableCellStyle) = value""" 
 BorderTopLineStyle=property(lambda self:object(),lambda self,v:None,lambda self:None) """The element id (GraphicsStyle element) for the top line of the cell border.
Get: BorderTopLineStyle(self: TableCellStyle) -> ElementIdSet: BorderTopLineStyle(self: TableCellStyle) = value""" 
 FontHorizontalAlignment=property(lambda self:object(),lambda self,v:None,lambda self:None) """The horizontal alignment style of text font.
Get: FontHorizontalAlignment(self: TableCellStyle) -> HorizontalAlignmentStyleSet: FontHorizontalAlignment(self: TableCellStyle) = value""" 
 FontName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The font used for this style
Get: FontName(self: TableCellStyle) -> strSet: FontName(self: TableCellStyle) = value""" 
 FontVerticalAlignment=property(lambda self:object(),lambda self,v:None,lambda self:None) """The vertical alignment style of text font.
Get: FontVerticalAlignment(self: TableCellStyle) -> VerticalAlignmentStyleSet: FontVerticalAlignment(self: TableCellStyle) = value""" 
 IsEnabled=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets or sets the status whether this cell is enabled.
Get: IsEnabled(self: TableCellStyle) -> boolSet: IsEnabled(self: TableCellStyle) = value""" 
 IsFontBold=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets or sets whether the text font is set to bold of this cell.
Get: IsFontBold(self: TableCellStyle) -> boolSet: IsFontBold(self: TableCellStyle) = value""" 
 IsFontItalic=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets or sets whether the text font is set to italic of this cell.
Get: IsFontItalic(self: TableCellStyle) -> boolSet: IsFontItalic(self: TableCellStyle) = value""" 
 IsFontUnderline=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets or sets whether the text font is set to Underline of this cell.
Get: IsFontUnderline(self: TableCellStyle) -> boolSet: IsFontUnderline(self: TableCellStyle) = value""" 
 IsInactivePhaseload=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets or sets whether this is an inactive phase load cell.
Get: IsInactivePhaseload(self: TableCellStyle) -> boolSet: IsInactivePhaseload(self: TableCellStyle) = value""" 
 IsOverridden=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the cell is overridden or not.
Get: IsOverridden(self: TableCellStyle) -> bool""" 
 IsReadOnly=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets or sets whether this cell is read only.
Get: IsReadOnly(self: TableCellStyle) -> boolSet: IsReadOnly(self: TableCellStyle) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: TableCellStyle) -> bool""" 
 SheetBackgroundColor=property(lambda self:object(),lambda self,v:None,lambda self:None) """The background color of this cell in the sheet view.
Get: SheetBackgroundColor(self: TableCellStyle) -> Color""" 
 TextColor=property(lambda self:object(),lambda self,v:None,lambda self:None) """The text color of this cell.
Get: TextColor(self: TableCellStyle) -> ColorSet: TextColor(self: TableCellStyle) = value""" 
 TextOrientation=property(lambda self:object(),lambda self,v:None,lambda self:None) """The orientation of the cell (for vertical/horizontal text) with input in degrees multiplied by 10
Get: TextOrientation(self: TableCellStyle) -> intSet: TextOrientation(self: TableCellStyle) = value""" 
 TextSize=property(lambda self:object(),lambda self,v:None,lambda self:None) """The text size.
Get: TextSize(self: TableCellStyle) -> floatSet: TextSize(self: TableCellStyle) = value""" 
class TableCellStyleOverrideOptions(object,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def SetAllOverrides(self,bOverride):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,other=None):pass def __repr__(self,*args):pass BackgroundColor=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the background color characteristic is overridden.
Get: BackgroundColor(self: TableCellStyleOverrideOptions) -> boolSet: BackgroundColor(self: TableCellStyleOverrideOptions) = value"""
 Bold=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the bold characteristic is overridden.
Get: Bold(self: TableCellStyleOverrideOptions) -> boolSet: Bold(self: TableCellStyleOverrideOptions) = value""" 
 BorderBottomLineStyle=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the border bottom line style characteristic is overridden.
Get: BorderBottomLineStyle(self: TableCellStyleOverrideOptions) -> boolSet: BorderBottomLineStyle(self: TableCellStyleOverrideOptions) = value""" 
 BorderLeftLineStyle=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the border left line style characteristic is overridden.
Get: BorderLeftLineStyle(self: TableCellStyleOverrideOptions) -> boolSet: BorderLeftLineStyle(self: TableCellStyleOverrideOptions) = value""" 
 BorderLineStyle=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the border line style characteristic is overridden.
Get: BorderLineStyle(self: TableCellStyleOverrideOptions) -> boolSet: BorderLineStyle(self: TableCellStyleOverrideOptions) = value""" 
 BorderRightLineStyle=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the border right line style characteristic is overridden.
Get: BorderRightLineStyle(self: TableCellStyleOverrideOptions) -> boolSet: BorderRightLineStyle(self: TableCellStyleOverrideOptions) = value""" 
 BorderTopLineStyle=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the border top line style characteristic is overridden.
Get: BorderTopLineStyle(self: TableCellStyleOverrideOptions) -> boolSet: BorderTopLineStyle(self: TableCellStyleOverrideOptions) = value""" 
 Font=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the font name characteristic is overridden.
Get: Font(self: TableCellStyleOverrideOptions) -> boolSet: Font(self: TableCellStyleOverrideOptions) = value""" 
 FontColor=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the font color characteristic is overridden.
Get: FontColor(self: TableCellStyleOverrideOptions) -> boolSet: FontColor(self: TableCellStyleOverrideOptions) = value""" 
 FontSize=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the font size characteristic is overridden.
Get: FontSize(self: TableCellStyleOverrideOptions) -> boolSet: FontSize(self: TableCellStyleOverrideOptions) = value""" 
 HorizontalAlignment=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the horizontal alignment characteristic is overridden.
Get: HorizontalAlignment(self: TableCellStyleOverrideOptions) -> boolSet: HorizontalAlignment(self: TableCellStyleOverrideOptions) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: TableCellStyleOverrideOptions) -> bool""" 
 Italics=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the italics characteristic is overridden.
Get: Italics(self: TableCellStyleOverrideOptions) -> boolSet: Italics(self: TableCellStyleOverrideOptions) = value""" 
 TextOrientation=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the text orientation characteristic is overridden.
Get: TextOrientation(self: TableCellStyleOverrideOptions) -> boolSet: TextOrientation(self: TableCellStyleOverrideOptions) = value""" 
 Underline=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the underline characteristic is overridden.
Get: Underline(self: TableCellStyleOverrideOptions) -> boolSet: Underline(self: TableCellStyleOverrideOptions) = value""" 
 VerticalAlignment=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the vertical alignment characteristic is overridden.
Get: VerticalAlignment(self: TableCellStyleOverrideOptions) -> boolSet: VerticalAlignment(self: TableCellStyleOverrideOptions) = value""" 
class TableData(object,IDisposable):def Dispose(self):pass def GetSectionData(self,*__args):pass def IsEqual(self,OtherElem):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass FreezeColumnsAndRows=property(lambda self:object(),lambda self,v:None,lambda self:None) """set to true if the columns and rows should be unmovable by the slider grips
Get: FreezeColumnsAndRows(self: TableData) -> boolSet: FreezeColumnsAndRows(self: TableData) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: TableData) -> bool""" 
 NumberOfSections=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the number of items in section data array.
Get: NumberOfSections(self: TableData) -> int""" 
 Width=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets or sets the table width in feet
Get: Width(self: TableData) -> floatSet: Width(self: TableData) = value""" 
 WidthInPixels=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the width of the panel schedule in pixels
Get: WidthInPixels(self: TableData) -> int""" 
class TableMergedCell(object,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,top=None,left=None,bottom=None,right=None):pass def __repr__(self,*args):pass Bottom=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies the row index of the bottom-right corner of a table grid.
Get: Bottom(self: TableMergedCell) -> intSet: Bottom(self: TableMergedCell) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: TableMergedCell) -> bool""" 
 Left=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies the column index of the top-left corner of a table grid.
Get: Left(self: TableMergedCell) -> intSet: Left(self: TableMergedCell) = value""" 
 Right=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies the column index of the bottom-right corner of a table grid.
Get: Right(self: TableMergedCell) -> intSet: Right(self: TableMergedCell) = value""" 
 Top=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies the row index of the top-left corner of a table grid.
Get: Top(self: TableMergedCell) -> intSet: Top(self: TableMergedCell) = value""" 
class TableSectionData(object,IDisposable):def AllowOverrideCellStyle(self,nRow,nCol):pass def CanInsertColumn(self,nIndex):pass def CanInsertRow(self,nIndex):pass def CanRemoveColumn(self,nIndex):pass def CanRemoveRow(self,nIndex):pass def ClearCell(self,nRow,nCol):pass def Dispose(self):pass def GetCellCalculatedValue(self,*__args):pass def GetCellCategoryId(self,*__args):pass def GetCellCombinedParameters(self,*__args):pass def GetCellFormatOptions(self,*__args):pass def GetCellParamId(self,*__args):pass def GetCellText(self,nRow,nCol):pass def GetCellType(self,*__args):pass def GetCellUnitType(self,nRow,nCol):pass def GetColumnWidth(self,nCol):pass def GetColumnWidthInPixels(self,nCol):pass def GetMergedCell(self,nRow,nCol):pass def GetRowHeight(self,nRow):pass def GetRowHeightInPixels(self,nRow):pass def GetTableCellStyle(self,nRow,nCol):pass def InsertColumn(self,index):pass def InsertImage(self,nRow,nColumn,imageSymbolId):pass def InsertRow(self,nIndex):pass def IsAcceptableParamIdAndCategoryId(self,*__args):pass def IsCellFormattable(self,nRow,nCol):pass def IsCellOverridden(self,*__args):pass def IsDataOutOfDate(self):pass def IsValidColumnNumber(self,nCol):pass def IsValidImageSymbolId(self,imageSymbolId):pass def IsValidRowNumber(self,nRow):pass def MergeCells(self,mergedCell):pass def RefreshData(self):pass def ReleaseUnmanagedResources(self,*args):pass def RemoveColumn(self,nIndex):pass def RemoveRow(self,nIndex):pass def ResetCellOverride(self,*__args):pass def SetCellCalculatedValue(self,*__args):pass def SetCellCombinedParameters(self,*__args):pass def SetCellFormatOptions(self,nRow,nCol,options):pass def SetCellParamIdAndCategoryId(self,*__args):pass def SetCellStyle(self,*__args):pass def SetCellText(self,nRow,nCol,text):pass def SetCellType(self,*__args):pass def SetColumnWidth(self,nCol,width):pass def SetColumnWidthInPixels(self,nCol,width):pass def SetMergedCell(self,nRow,nCol,mergedCell):pass def SetRowHeight(self,nRow,height):pass def SetRowHeightInPixels(self,nRow,height):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass FirstColumnNumber=property(lambda self:object(),lambda self,v:None,lambda self:None) """The first column in this section of the table.
Get: FirstColumnNumber(self: TableSectionData) -> int"""
 FirstRowNumber=property(lambda self:object(),lambda self,v:None,lambda self:None) """The first row in this section of the table.
Get: FirstRowNumber(self: TableSectionData) -> int""" 
 HideSection=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether or not the section is hidden.
Get: HideSection(self: TableSectionData) -> boolSet: HideSection(self: TableSectionData) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: TableSectionData) -> bool""" 
 LastColumnNumber=property(lambda self:object(),lambda self,v:None,lambda self:None) """The last column in this section of the table.
Get: LastColumnNumber(self: TableSectionData) -> int""" 
 LastRowNumber=property(lambda self:object(),lambda self,v:None,lambda self:None) """The last row in this section of the table.
Get: LastRowNumber(self: TableSectionData) -> int""" 
 NeedsRefresh=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the table data need to refresh.
Get: NeedsRefresh(self: TableSectionData) -> boolSet: NeedsRefresh(self: TableSectionData) = value""" 
 NumberOfColumns=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets or sets the number of items in column data array.
Get: NumberOfColumns(self: TableSectionData) -> intSet: NumberOfColumns(self: TableSectionData) = value""" 
 NumberOfRows=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets or sets the number of items in row data array.
Get: NumberOfRows(self: TableSectionData) -> intSet: NumberOfRows(self: TableSectionData) = value""" 
class TableView(View,IDisposable):def Dispose(self):pass def GetAvailableParameterCategories(self,sectionType,row):pass@staticmethod def GetAvailableParameters(cda,categoryId):pass def getBoundingBox(self,*args):pass def GetCalculatedValueName(self,sectionType,row,column):pass def GetCalculatedValueText(self,sectionType,row,column):pass def GetCellText(self,sectionType,row,column):pass def IsValidSectionType(self,sectionType):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass MaximumColumnWidth=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the maximum column width
Get: MaximumColumnWidth(self: TableView) -> int"""
 MaximumGridWidth=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the allowed maximum grid width
Get: MaximumGridWidth(self: TableView) -> int""" 
 MaximumRowHeight=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the maximum row height
Get: MaximumRowHeight(self: TableView) -> int""" 
 MinimumColumnWidth=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the minimum column width
Get: MinimumColumnWidth(self: TableView) -> int""" 
 MinimumRowHeight=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the minimum row height
Get: MinimumRowHeight(self: TableView) -> int""" 
 TargetId=property(lambda self:object(),lambda self,v:None,lambda self:None) """the element id of the element that is being viewed
Get: TargetId(self: TableView) -> ElementIdSet: TargetId(self: TableView) = value""" 
class TagMode(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass TM_ADDBY_CATEGORY=None TM_ADDBY_MATERIAL=None TM_ADDBY_MULTICATEGORY=None value__=Noneclass TagOrientation(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Horizontal=None value__=None Vertical=Noneclass TemporaryViewMode(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass ExplodedView=None PreviewFamilyVisibility=None Raytrace=None RevealConstraints=None RevealHiddenElements=None TemporaryHideIsolate=None TemporaryViewProperties=None value__=None WorksharingDisplay=Noneclass TemporaryViewModes(APIObject,IDisposable):def DeactivateAllModes(self):pass def DeactivateMode(self,mode):pass def Dispose(self):pass def GetCaption(self,mode):pass def IsModeActive(self,mode):pass def IsModeAvailable(self,mode):pass def IsModeEnabled(self,mode):pass def IsValidState(self,state):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: TemporaryViewModes) -> bool"""
 PreviewFamilyVisibility=property(lambda self:object(),lambda self,v:None,lambda self:None) """The current state of the PreviewFamilyVisibility mode in the associated view.
Get: PreviewFamilyVisibility(self: TemporaryViewModes) -> PreviewFamilyVisibilityModeSet: PreviewFamilyVisibility(self: TemporaryViewModes) = value""" 
 RevealConstraints=property(lambda self:object(),lambda self,v:None,lambda self:None) """The current state of the RevealConstraints mode in the associated view.
Get: RevealConstraints(self: TemporaryViewModes) -> boolSet: RevealConstraints(self: TemporaryViewModes) = value""" 
 RevealHiddenElements=property(lambda self:object(),lambda self,v:None,lambda self:None) """The current state of the RevealHiddenElements mode in the associated view.
Get: RevealHiddenElements(self: TemporaryViewModes) -> boolSet: RevealHiddenElements(self: TemporaryViewModes) = value""" 
 WorksharingDisplay=property(lambda self:object(),lambda self,v:None,lambda self:None) """The current state of the WorksharingDisplay mode in the associated view.
Get: WorksharingDisplay(self: TemporaryViewModes) -> WorksharingDisplayModeSet: WorksharingDisplay(self: TemporaryViewModes) = value""" 
 PreviewFamilyVisibilityDefaultOnState=False PreviewFamilyVisibilityDefaultUncutState=Falseclass TessellatedBuildIssue(object,IDisposable):def Dispose(self):pass def GetIssueDescription(self):pass def IsValidIssue(self):pass def MakesDataUnusable(self):pass def ReleaseUnmanagedResources(self,*args):pass def ReportIssueToDataSource(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: TessellatedBuildIssue) -> bool""" 
 NumberEncountered=property(lambda self:object(),lambda self,v:None,lambda self:None) """How many times this issue was encountered in its face set
 during the face set processing. This number can be less than the total number of such issues in the face set, as the face set processing could be aborted due to the presence of the issues which could not be handled.Get: NumberEncountered(self: TessellatedBuildIssue) -> int""" 
class TessellatedBuildIssueType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass AllFine=None DegenOriginalLoop=None EdgeTraversalForFlip=None EdgeTwiceUsedByFace=None EmptyFace=None EmptyLoop=None FaceWithIslands=None InconsistentInnerOuterOriginalLoopCCW=None InconsitentMultiEdgeTraversalForFlip=None InternalError=None InternalLightError=None InternalMissingError=None InternalUtilityError=None IntersectingOriginalLoops=None LoopOnBestFitSelfIntersects=None LostAllLoops=None LostTooManyLoopVertices=None NonManifoldEdge=None NonPlanarFace=None NotSetYet=None NumberOfIssueTypes=None OriginalLoopGeomAcuteAngle=None OriginalLoopMeshAcuteAngle=None OriginalLoopsProximity=None OriginalPointsTooFarFromTheirPlane=None OuterLoopIsNotFirst=None OverlappingAdjacentFaces=None PartitionPointsTooFarFromTrueEdge=None TooFewOriginalVertices=None TooShortOriginalLoopGeomSegment=None TooShortOriginalLoopMeshSegment=None TooSmallVertexSegementDistInFinalLoop=None TooSmallVertexSegementDistInOriginalLoop=None UnarticulatedNonManifoldEdge=None value__=Noneclass TessellatedFace(object,IDisposable):def Dispose(self):pass def GetBoundaryLoops(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,*__args):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: TessellatedFace) -> bool"""
 MaterialId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Material of the face.
Get: MaterialId(self: TessellatedFace) -> ElementIdSet: MaterialId(self: TessellatedFace) = value""" 
class TessellatedShapeBuilder(ShapeBuilder,IDisposable):def AddFace(self,face):pass def AreTargetAndFallbackCompatible(self,target,fallback):pass def Build(self):pass def CancelConnectedFaceSet(self):pass def Clear(self):pass def CloseConnectedFaceSet(self):pass@staticmethod def CreateMeshByExtrusion(profileLoops,extrusionDirection,extrusionDistance,materialId):pass def Dispose(self):pass def DoesFaceHaveEnoughLoopsAndVertices(self,face):pass def GetBuildResult(self):pass def OpenConnectedFaceSet(self,isSolid):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass Fallback=property(lambda self:object(),lambda self,v:None,lambda self:None) """Defines acceptable fallback if the desired type of geometry can't be built.
Get: Fallback(self: TessellatedShapeBuilder) -> TessellatedShapeBuilderFallbackSet: Fallback(self: TessellatedShapeBuilder) = value"""
 GraphicsStyleId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Optional - if set, the built geometry will use that graphics style.
Get: GraphicsStyleId(self: TessellatedShapeBuilder) -> ElementIdSet: GraphicsStyleId(self: TessellatedShapeBuilder) = value""" 
 IsFaceSetOpen=property(lambda self:object(),lambda self,v:None,lambda self:None) """Flag whether the current set of connected faces is open and
 additional tessellation faces can be added to it.Get: IsFaceSetOpen(self: TessellatedShapeBuilder) -> bool""" 
 LogInteger=property(lambda self:object(),lambda self,v:None,lambda self:None) """Integer value used for logging, if it is performed. Usually
 the number of the face set(s) in the IFC file, from which they are imported. Any value is acceptable.Get: LogInteger(self: TessellatedShapeBuilder) -> intSet: LogInteger(self: TessellatedShapeBuilder) = value""" 
 LogString=property(lambda self:object(),lambda self,v:None,lambda self:None) """String used for logging, if any. Usually the name of the file from which
 face sets were imported.Get: LogString(self: TessellatedShapeBuilder) -> strSet: LogString(self: TessellatedShapeBuilder) = value""" 
 NumberOfCompletedFaceSets=property(lambda self:object(),lambda self,v:None,lambda self:None) """Number of completed face sets.
Get: NumberOfCompletedFaceSets(self: TessellatedShapeBuilder) -> int""" 
 OwnerInfo=property(lambda self:object(),lambda self,v:None,lambda self:None) """String used for logging, if any. Usually describes the element or object, which
 either defined or will own the geoemtrical objects to be built.Get: OwnerInfo(self: TessellatedShapeBuilder) -> strSet: OwnerInfo(self: TessellatedShapeBuilder) = value""" 
 Target=property(lambda self:object(),lambda self,v:None,lambda self:None) """Requests the type of geometry to be built.
Get: Target(self: TessellatedShapeBuilder) -> TessellatedShapeBuilderTargetSet: Target(self: TessellatedShapeBuilder) = value""" 
class TessellatedShapeBuilderFallback(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Abort=None Mesh=None Salvage=None value__=Noneclass TessellatedShapeBuilderOutcome(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Mesh=None Mixed=None Nothing=None Sheet=None Solid=None value__=Noneclass TessellatedShapeBuilderResult(object,IDisposable):def Dispose(self):pass def GetGeometricalObjects(self):pass def GetIssuesForFaceSet(self,setIndex):pass def GetNumberOfFaceSets(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass AreObjectsAvailable=property(lambda self:object(),lambda self,v:None,lambda self:None) """Shows whether 'issues' still contains the original data or whether
 these data have already been relinquished by 'getGeometricalObjects'. The former is true, the later is false.Get: AreObjectsAvailable(self: TessellatedShapeBuilderResult) -> bool"""
 HasInvalidData=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether there were any inconsistencies in the face sets,
 stored in the tessellated shape builder while building geometrical objects.Get: HasInvalidData(self: TessellatedShapeBuilderResult) -> bool""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: TessellatedShapeBuilderResult) -> bool""" 
 Outcome=property(lambda self:object(),lambda self,v:None,lambda self:None) """What kinds of geometrical objects were built.
Get: Outcome(self: TessellatedShapeBuilderResult) -> TessellatedShapeBuilderOutcome""" 
class TessellatedShapeBuilderTarget(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass AnyGeometry=None Mesh=None Solid=None value__=Noneclass TextAlignFlags(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass TEF_ALIGN_BOTTOM=None TEF_ALIGN_CENTER=None TEF_ALIGN_LEFT=None TEF_ALIGN_MIDDLE=None TEF_ALIGN_RIGHT=None TEF_ALIGN_TOP=None value__=Noneclass TextAlignMask(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass horzAlignMask=None value__=None vertAlignMask=Noneclass TextBaselineStyle(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Normal=None Subscript=None Superscript=None value__=Noneclass TextElement(Element,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass@staticmethod def GetMaximumAllowedWidth(cdda=None,typeId=None):pass@staticmethod def GetMinimumAllowedWidth(cdda=None,typeId=None):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass BaseDirection=property(lambda self:object(),lambda self,v:None,lambda self:None) """Direction of the base line of the text element.
Get: BaseDirection(self: TextElement) -> XYZ"""
 Coord=property(lambda self:object(),lambda self,v:None,lambda self:None) """Position of the text (in model coordinates.)
Get: Coord(self: TextElement) -> XYZSet: Coord(self: TextElement) = value""" 
 Height=property(lambda self:object(),lambda self,v:None,lambda self:None) """Height of the area of the text content.
Get: Height(self: TextElement) -> float""" 
 HorizontalAlignment=property(lambda self:object(),lambda self,v:None,lambda self:None) """Horizontal alignment of the text content within the text area of the element.
Get: HorizontalAlignment(self: TextElement) -> HorizontalTextAlignmentSet: HorizontalAlignment(self: TextElement) = value""" 
 IsTextWrappingActive=property(lambda self:object(),lambda self,v:None,lambda self:None) """A flag identifying whether text-wrapping is currently active in this text element or not.
Get: IsTextWrappingActive(self: TextElement) -> bool""" 
 KeepRotatedTextReadable=property(lambda self:object(),lambda self,v:None,lambda self:None) """A flag to control how text behaves inside a rotated text element.
Get: KeepRotatedTextReadable(self: TextElement) -> boolSet: KeepRotatedTextReadable(self: TextElement) = value""" 
 Symbol=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get the type of the TextElement object.
Get: Symbol(self: TextElement) -> TextElementType""" 
 Text=property(lambda self:object(),lambda self,v:None,lambda self:None) """The content of the element as a plain string stripped of all formating.
Get: Text(self: TextElement) -> strSet: Text(self: TextElement) = value""" 
 UpDirection=property(lambda self:object(),lambda self,v:None,lambda self:None) """Direction along the vertical axis of letters of the text note.
Get: UpDirection(self: TextElement) -> XYZ""" 
 VerticalAlignment=property(lambda self:object(),lambda self,v:None,lambda self:None) """Vertical alignment of the text content within the text area of the element.
Get: VerticalAlignment(self: TextElement) -> VerticalTextAlignment""" 
 Width=property(lambda self:object(),lambda self,v:None,lambda self:None) """Width of the area of the text content.
Get: Width(self: TextElement) -> floatSet: Width(self: TextElement) = value""" 
class TextElementBackground(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass TBGR_OPAQUE=None TBGR_TRANSPARENT=None value__=Noneclass TextElementType(LineAndTextAttrSymbol,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass TextListStyle(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Bullet=None LetterLowercase=None LetterUppercase=None None=None NumberArabic=None NumberRomanLowercase=None NumberRomanUppercase=None value__=Noneclass TextNode(RenderNode,IDisposable):def Dispose(self):pass def GetFormattedText(self):pass def GetFormattedTextRuns(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass BaseDirection=property(lambda self:object(),lambda self,v:None,lambda self:None) """Direction of the base line of the text object in model space.
Get: BaseDirection(self: TextNode) -> XYZ"""
 Color=property(lambda self:object(),lambda self,v:None,lambda self:None) """The color of the text.
Get: Color(self: TextNode) -> Color""" 
 FontHeight=property(lambda self:object(),lambda self,v:None,lambda self:None) """Height [ft] of the text font, in model space.
Get: FontHeight(self: TextNode) -> float""" 
 FontName=property(lambda self:object(),lambda self,v:None,lambda self:None) """The name of the text font.
Get: FontName(self: TextNode) -> str""" 
 Height=property(lambda self:object(),lambda self,v:None,lambda self:None) """Height [ft] of the area of the text content in model space.
Get: Height(self: TextNode) -> float""" 
 HorizontalAlignment=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates default horizontal alignment of the text.
Get: HorizontalAlignment(self: TextNode) -> HorizontalTextAlignment""" 
 IsBold=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether the default formatting is set to bold text.
Get: IsBold(self: TextNode) -> bool""" 
 IsForRightToLeftReading=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether the text uses Right-To-Left reading order.
Get: IsForRightToLeftReading(self: TextNode) -> bool""" 
 IsItalic=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether the default formatting is set to italic text.
Get: IsItalic(self: TextNode) -> bool""" 
 IsKeptReadable=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates text behavior inside a rotated text object.
Get: IsKeptReadable(self: TextNode) -> bool""" 
 IsTransparent=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether the text background is transparent or opaque.
Get: IsTransparent(self: TextNode) -> bool""" 
 IsUnderlined=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether the default formatting is set to underlined text.
Get: IsUnderlined(self: TextNode) -> bool""" 
 Position=property(lambda self:object(),lambda self,v:None,lambda self:None) """Position of the text in model coordinates.
Get: Position(self: TextNode) -> XYZ""" 
 TabSize=property(lambda self:object(),lambda self,v:None,lambda self:None) """The size [ft] of the interval between tab stops, in model space.
Get: TabSize(self: TextNode) -> float""" 
 Text=property(lambda self:object(),lambda self,v:None,lambda self:None) """The content of the text annotation as a plain string stripped of all formatting.
Get: Text(self: TextNode) -> str""" 
 TextSize=property(lambda self:object(),lambda self,v:None,lambda self:None) """Height [ft] of the text in model space.
Get: TextSize(self: TextNode) -> float""" 
 UpDirection=property(lambda self:object(),lambda self,v:None,lambda self:None) """Direction along the vertical axis of letters of the text object in model space.
Get: UpDirection(self: TextNode) -> XYZ""" 
 VerticalAlignment=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates default vertical alignment of the text.
Get: VerticalAlignment(self: TextNode) -> VerticalTextAlignment""" 
 Width=property(lambda self:object(),lambda self,v:None,lambda self:None) """Width [ft] of the area of the text content in model space.
Get: Width(self: TextNode) -> float""" 
 WidthScale=property(lambda self:object(),lambda self,v:None,lambda self:None) """Scale applied to the width of the text.
Get: WidthScale(self: TextNode) -> float""" 
class TextNote(TextElement,IDisposable):def AddLeader(self,leaderType):pass@staticmethod def Create(document,viewId,position,*__args):pass def Dispose(self):pass def getBoundingBox(self,*args):pass def GetFormattedText(self):pass def GetLeaders(self):pass def ReleaseUnmanagedResources(self,*args):pass def RemoveLeaders(self):pass def setElementType(self,*args):pass def SetFormattedText(self,formattedText):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass LeaderCount=property(lambda self:object(),lambda self,v:None,lambda self:None) """Number of leader objects currently attached to the text note.
Get: LeaderCount(self: TextNote) -> int"""
 LeaderLeftAttachment=property(lambda self:object(),lambda self,v:None,lambda self:None) """Attachment position of leaders on the left side of the text note.
Get: LeaderLeftAttachment(self: TextNote) -> LeaderAtachementSet: LeaderLeftAttachment(self: TextNote) = value""" 
 LeaderRightAttachment=property(lambda self:object(),lambda self,v:None,lambda self:None) """Attachment position of leaders on the right side of the text note.
Get: LeaderRightAttachment(self: TextNote) -> LeaderAtachementSet: LeaderRightAttachment(self: TextNote) = value""" 
 TextNoteType=property(lambda self:object(),lambda self,v:None,lambda self:None) """Access the type of the TextNote object.
Get: TextNoteType(self: TextNote) -> TextNoteTypeSet: TextNoteType(self: TextNote) = value""" 
class TextNoteLeaderStyles(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass LCS_NONE=None LCS_ONE_SEG_ARC=None LCS_ONE_SEG_LINE=None LCS_TWO_SEG_LINE=None value__=Noneclass TextNoteLeaderTypes(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass TNLT_ARC_L=None TNLT_ARC_R=None TNLT_STRAIGHT_L=None TNLT_STRAIGHT_R=None value__=Noneclass TextNoteOptions(object,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,typeId=None):pass def __repr__(self,*args):pass HorizontalAlignment=property(lambda self:object(),lambda self,v:None,lambda self:None) """Horizontal alignment of the text.
Get: HorizontalAlignment(self: TextNoteOptions) -> HorizontalTextAlignmentSet: HorizontalAlignment(self: TextNoteOptions) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: TextNoteOptions) -> bool""" 
 KeepRotatedTextReadable=property(lambda self:object(),lambda self,v:None,lambda self:None) """Flag controling whether a rotate text is to stay oriented to be always readable.
Get: KeepRotatedTextReadable(self: TextNoteOptions) -> boolSet: KeepRotatedTextReadable(self: TextNoteOptions) = value""" 
 Rotation=property(lambda self:object(),lambda self,v:None,lambda self:None) """Base line angle of a text note, in radians.
Get: Rotation(self: TextNoteOptions) -> floatSet: Rotation(self: TextNoteOptions) = value""" 
 TypeId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Id of a text type that defines the style of a text note.
Get: TypeId(self: TextNoteOptions) -> ElementIdSet: TypeId(self: TextNoteOptions) = value""" 
class TextNoteType(TextElementType,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass TextRange(object,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,*__args):pass def __repr__(self,*args):pass End=property(lambda self:object(),lambda self,v:None,lambda self:None) """The index of the first character after the end of the range
Get: End(self: TextRange) -> int"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: TextRange) -> bool""" 
 Length=property(lambda self:object(),lambda self,v:None,lambda self:None) """The length of the range.
Get: Length(self: TextRange) -> intSet: Length(self: TextRange) = value""" 
 Start=property(lambda self:object(),lambda self,v:None,lambda self:None) """The start index of a range within the Autodesk.Revit.DB.FormattedText.
Get: Start(self: TextRange) -> intSet: Start(self: TextRange) = value""" 
class TextTreatment(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Approximate=None Exact=None value__=Noneclass ThermalAsset(object,IDisposable):def Copy(self):pass def Dispose(self):pass def Equals(self,*__args):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __eq__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,name,materialType):pass def __repr__(self,*args):pass Behavior=property(lambda self:object(),lambda self,v:None,lambda self:None) """Flag indicating whether elements of this material behave isotropically or orthotropically.
Get: Behavior(self: ThermalAsset) -> StructuralBehaviorSet: Behavior(self: ThermalAsset) = value"""
 Compressibility=property(lambda self:object(),lambda self,v:None,lambda self:None) """The compressibility of the asset.
Get: Compressibility(self: ThermalAsset) -> floatSet: Compressibility(self: ThermalAsset) = value""" 
 Density=property(lambda self:object(),lambda self,v:None,lambda self:None) """The density of the asset.
Get: Density(self: ThermalAsset) -> floatSet: Density(self: ThermalAsset) = value""" 
 ElectricalResistivity=property(lambda self:object(),lambda self,v:None,lambda self:None) """The electrical resistivity of the asset.
Get: ElectricalResistivity(self: ThermalAsset) -> floatSet: ElectricalResistivity(self: ThermalAsset) = value""" 
 Emissivity=property(lambda self:object(),lambda self,v:None,lambda self:None) """The emissivity of the asset.
Get: Emissivity(self: ThermalAsset) -> floatSet: Emissivity(self: ThermalAsset) = value""" 
 GasViscosity=property(lambda self:object(),lambda self,v:None,lambda self:None) """The gas viscosity of the asset.
Get: GasViscosity(self: ThermalAsset) -> floatSet: GasViscosity(self: ThermalAsset) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ThermalAsset) -> bool""" 
 LiquidViscosity=property(lambda self:object(),lambda self,v:None,lambda self:None) """The liquid viscosity of the asset.
Get: LiquidViscosity(self: ThermalAsset) -> floatSet: LiquidViscosity(self: ThermalAsset) = value""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """The name of the thermal asset.
Get: Name(self: ThermalAsset) -> strSet: Name(self: ThermalAsset) = value""" 
 Permeability=property(lambda self:object(),lambda self,v:None,lambda self:None) """The permeability of the asset.
Get: Permeability(self: ThermalAsset) -> floatSet: Permeability(self: ThermalAsset) = value""" 
 Porosity=property(lambda self:object(),lambda self,v:None,lambda self:None) """The porosity of the asset.
Get: Porosity(self: ThermalAsset) -> floatSet: Porosity(self: ThermalAsset) = value""" 
 Reflectivity=property(lambda self:object(),lambda self,v:None,lambda self:None) """The reflectivity of the asset.
Get: Reflectivity(self: ThermalAsset) -> floatSet: Reflectivity(self: ThermalAsset) = value""" 
 SpecificHeat=property(lambda self:object(),lambda self,v:None,lambda self:None) """The specific heat of the asset.
Get: SpecificHeat(self: ThermalAsset) -> floatSet: SpecificHeat(self: ThermalAsset) = value""" 
 SpecificHeatOfVaporization=property(lambda self:object(),lambda self,v:None,lambda self:None) """The specific heat of vaporization of the asset.
Get: SpecificHeatOfVaporization(self: ThermalAsset) -> floatSet: SpecificHeatOfVaporization(self: ThermalAsset) = value""" 
 ThermalConductivity=property(lambda self:object(),lambda self,v:None,lambda self:None) """The thermal conductivity of the asset.
Get: ThermalConductivity(self: ThermalAsset) -> floatSet: ThermalConductivity(self: ThermalAsset) = value""" 
 ThermalMaterialType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The type of material that this thermal asset describes (e.g. solid, liquid, gas.)
Get: ThermalMaterialType(self: ThermalAsset) -> ThermalMaterialType""" 
 TransmitsLight=property(lambda self:object(),lambda self,v:None,lambda self:None) """A boolean flag that indicates whether or not the asset transmits light.
Get: TransmitsLight(self: ThermalAsset) -> boolSet: TransmitsLight(self: ThermalAsset) = value""" 
 VaporPressure=property(lambda self:object(),lambda self,v:None,lambda self:None) """The vapor pressure of the asset.
Get: VaporPressure(self: ThermalAsset) -> floatSet: VaporPressure(self: ThermalAsset) = value""" 
class ThermalMaterialType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Gas=None Liquid=None Solid=None Undefined=None value__=Noneclass ThermalProperties(APIObject,IDisposable):def Dispose(self):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass Absorptance=property(lambda self:object(),lambda self,v:None,lambda self:None) """Value of absorptance.
Get: Absorptance(self: ThermalProperties) -> floatSet: Absorptance(self: ThermalProperties) = value"""
 HeatTransferCoefficient=property(lambda self:object(),lambda self,v:None,lambda self:None) """The heat transfer coefficient value (U-Value).
 The unit is watts per meter-squared kelvin (W/(m^2*K)).Get: HeatTransferCoefficient(self: ThermalProperties) -> float""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ThermalProperties) -> bool""" 
 Roughness=property(lambda self:object(),lambda self,v:None,lambda self:None) """Value of roughness.
Get: Roughness(self: ThermalProperties) -> intSet: Roughness(self: ThermalProperties) = value""" 
 ThermalMass=property(lambda self:object(),lambda self,v:None,lambda self:None) """The calculated thermal mass value.
 The unit is kilogram feet-squared per second squared kelvin (kg ft^2/(s^2 K)).Get: ThermalMass(self: ThermalProperties) -> float""" 
 ThermalResistance=property(lambda self:object(),lambda self,v:None,lambda self:None) """The calculated thermal resistance value (R-Value).
 The unit is meter-squared kelvin per watt ((m^2*K)/Watt).Get: ThermalResistance(self: ThermalProperties) -> float""" 
class TilePattern(ElementType,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass TilePatternType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The built-in system tile pattern specified by
this object.Get: TilePatternType(self: TilePattern) -> TilePatternsBuiltIn"""
 TilesPerSeedNode=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get the number of tiles located at each seed node.
Get: TilesPerSeedNode(self: TilePattern) -> int""" 
class TilePatterns(APIObject,IDisposable):def Dispose(self):pass def GetTilePattern(self,tilePatternBuiltIn):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass TilePatternsBuiltIn(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Arrows=None HalfStep=None Hexagon=None Octagon=None OctagonRotate=None Rectangle=None RectangleCheckerboard=None Rhomboid=None RhomboidCheckerboard=None ThirdStep=None TriangleCheckerboard_Bent=None TriangleCheckerboard_Flat=None TriangleStep_Bent=None Triangle_Bent=None Triangle_Flat=None value__=None ZigZag=Noneclass Transaction(object,IDisposable):def Commit(self,options=None):pass def Dispose(self):pass def GetFailureHandlingOptions(self):pass def GetName(self):pass def GetStatus(self):pass def HasEnded(self):pass def HasStarted(self):pass def ReleaseUnmanagedResources(self,*args):pass def RollBack(self,options=None):pass def SetFailureHandlingOptions(self,options):pass def SetName(self,name):pass def Start(self,name=None):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,document,name=None):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: Transaction) -> bool"""
class TransactionGroup(object,IDisposable):def Assimilate(self):pass def Commit(self):pass def Dispose(self):pass def GetName(self):pass def GetStatus(self):pass def HasEnded(self):pass def HasStarted(self):pass def ReleaseUnmanagedResources(self,*args):pass def RollBack(self):pass def SetName(self,name):pass def Start(self,transGroupName=None):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,document,transGroupName=None):pass def __repr__(self,*args):pass IsFailureHandlingForcedModal=property(lambda self:object(),lambda self,v:None,lambda self:None) """Forces all transactions finished inside this group to use modal failure handling
 regardless of what failure handling options are set for those transactions.Get: IsFailureHandlingForcedModal(self: TransactionGroup) -> boolSet: IsFailureHandlingForcedModal(self: TransactionGroup) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: TransactionGroup) -> bool""" 
class TransactionStatus(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Committed=None Error=None Pending=None Proceed=None RolledBack=None Started=None Uninitialized=None value__=Noneclass TransactWithCentralOptions(object,IDisposable):def Dispose(self):pass def GetLockCallback(self):pass def ReleaseUnmanagedResources(self,*args):pass def SetLockCallback(self,lockCallback):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: TransactWithCentralOptions) -> bool"""
class Transform(APIObject,IDisposable):def AlmostEqual(self,right):pass@staticmethod def CreateReflection(plane):pass@staticmethod def CreateRotation(axis,angle):pass@staticmethod def CreateRotationAtPoint(axis,angle,origin):pass@staticmethod def CreateTranslation(vector):pass def Dispose(self):pass def Multiply(self,right):pass def OfPoint(self,point):pass def OfVector(self,vec):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def ScaleBasis(self,scale):pass def ScaleBasisAndOrigin(self,scale):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __mul__(self,*args):pass@staticmethod def __new__(self,source):pass def __rmul__(self,*args):pass BasisX=property(lambda self:object(),lambda self,v:None,lambda self:None) """The basis of the X axis of this transformation.
Get: BasisX(self: Transform) -> XYZSet: BasisX(self: Transform) = value"""
 BasisY=property(lambda self:object(),lambda self,v:None,lambda self:None) """The basis of the Y axis of this transformation.
Get: BasisY(self: Transform) -> XYZSet: BasisY(self: Transform) = value""" 
 BasisZ=property(lambda self:object(),lambda self,v:None,lambda self:None) """The basis of the Z axis of this transformation.
Get: BasisZ(self: Transform) -> XYZSet: BasisZ(self: Transform) = value""" 
 Determinant=property(lambda self:object(),lambda self,v:None,lambda self:None) """The determinant of this transformation.
Get: Determinant(self: Transform) -> float""" 
 HasReflection=property(lambda self:object(),lambda self,v:None,lambda self:None) """The boolean value that indicates whether this transformation produces reflection.
Get: HasReflection(self: Transform) -> bool""" 
 Inverse=property(lambda self:object(),lambda self,v:None,lambda self:None) """The inverse transformation of this transformation.
Get: Inverse(self: Transform) -> Transform""" 
 IsConformal=property(lambda self:object(),lambda self,v:None,lambda self:None) """The boolean value that indicates whether this transformation is conformal.
Get: IsConformal(self: Transform) -> bool""" 
 IsIdentity=property(lambda self:object(),lambda self,v:None,lambda self:None) """The boolean value that indicates whether this transformation is an identity.
Get: IsIdentity(self: Transform) -> bool""" 
 IsTranslation=property(lambda self:object(),lambda self,v:None,lambda self:None) """The boolean value that indicates whether this transformation is a translation.
Get: IsTranslation(self: Transform) -> bool""" 
 Origin=property(lambda self:object(),lambda self,v:None,lambda self:None) """Defines the origin of the old coordinate system in the new coordinate system.
Get: Origin(self: Transform) -> XYZSet: Origin(self: Transform) = value""" 
 Scale=property(lambda self:object(),lambda self,v:None,lambda self:None) """The real number that represents the scale of the transformation.
Get: Scale(self: Transform) -> float""" 
 Identity=Noneclass TransmissionData(object,IDisposable):def Dispose(self):pass@staticmethod def DocumentIsNotTransmitted(filePath):pass def GetAllExternalFileReferenceIds(self):pass def GetDesiredReferenceData(self,elemId):pass def GetLastSavedReferenceData(self,elemId):pass@staticmethod def IsDocumentTransmitted(filePath):pass@staticmethod def ReadTransmissionData(path):pass def ReleaseUnmanagedResources(self,*args):pass def SetDesiredReferenceData(self,elemId,path,pathType,shouldLoad):pass@staticmethod def WriteTransmissionData(path,data):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,other):pass def __repr__(self,*args):pass IsTransmitted=property(lambda self:object(),lambda self,v:None,lambda self:None) """Determines whether this file has been transmitted or not.
Get: IsTransmitted(self: TransmissionData) -> boolSet: IsTransmitted(self: TransmissionData) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: TransmissionData) -> bool""" 
 UserData=property(lambda self:object(),lambda self,v:None,lambda self:None) """A string which users can store notes in.
Get: UserData(self: TransmissionData) -> strSet: UserData(self: TransmissionData) = value""" 
 Version=property(lambda self:object(),lambda self,v:None,lambda self:None) """The format version for TransmissionData
Get: Version(self: TransmissionData) -> int""" 
class TransmittedModelOptions(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass CancelOperation=None KeepAsTransmitted=None SaveAsNewCentral=None value__=Noneclass TriangleInShellComponent(object,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,other):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: TriangleInShellComponent) -> bool"""
 VertexIndex0=property(lambda self:object(),lambda self,v:None,lambda self:None) """Index of the triangle's first vertex in the TriangulatedShellComponent's array of vertices.
Get: VertexIndex0(self: TriangleInShellComponent) -> int""" 
 VertexIndex1=property(lambda self:object(),lambda self,v:None,lambda self:None) """Index of the triangle's second vertex in the TriangulatedShellComponent's array of vertices.
Get: VertexIndex1(self: TriangleInShellComponent) -> int""" 
 VertexIndex2=property(lambda self:object(),lambda self,v:None,lambda self:None) """Index of the triangle's third vertex in the TriangulatedShellComponent's array of vertices.
Get: VertexIndex2(self: TriangleInShellComponent) -> int""" 
class TriangulatedShellComponent(object,IDisposable):def Clear(self):pass def Dispose(self):pass def GetTriangle(self,triangleIndex):pass def GetVertex(self,vertexIndex):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass IsClosed=property(lambda self:object(),lambda self,v:None,lambda self:None) """True if and only if the triangulation represents a topologically closed shell
 (i.e., each edge is shared by two triangles).Get: IsClosed(self: TriangulatedShellComponent) -> bool"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: TriangulatedShellComponent) -> bool""" 
 TriangleCount=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number of triangles in the triangulation.
Get: TriangleCount(self: TriangulatedShellComponent) -> int""" 
 VertexCount=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number of vertices in the triangulation.
Get: VertexCount(self: TriangulatedShellComponent) -> int""" 
class TriangulatedSolidOrShell(object,IDisposable):def Dispose(self):pass def GetShellComponent(self,componentIndex):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: TriangulatedSolidOrShell) -> bool"""
 ShellComponentCount=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number of TriangulatedShellComponents that this TriangulatedSolidOrShell contains.
Get: ShellComponentCount(self: TriangulatedSolidOrShell) -> int""" 
class TriangulationInterface(object,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: TriangulationInterface) -> bool"""
class TriangulationInterfaceForTriangulatedShellComponent(TriangulationInterface,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,externalTriangulatedShellComponent):passclass TriangulationInterfaceForTriangulatedSolidOrShell(TriangulationInterface,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,externalTriangulatedSolidOrShell):passclass TriOrQuadFacet(object,IDisposable):def Dispose(self):pass def GetVertexIndex(self,index):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: TriOrQuadFacet) -> bool"""
 Normal=property(lambda self:object(),lambda self,v:None,lambda self:None) """A unit normal vector for this facet.
Get: Normal(self: TriOrQuadFacet) -> XYZ""" 
 NumberOfVertices=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number of vertices (3 for a triangle, 4 for a quadrilateral, 0 for an unset TriOrQuadFacet).
Get: NumberOfVertices(self: TriOrQuadFacet) -> int""" 
class TypeBinding(ElementBinding,IDisposable):def Dispose(self):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,categories=None):passclass UnderlayOrientation(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass LookingDown=None LookingUp=None value__=Noneclass UnitFormatUtils(object):@staticmethod def Format(units,unitType,value,maxAccuracy,forEditing,formatValueOptions=None):pass@staticmethod def TryParse(units,unitType,stringToParse,*__args):pass __all__=['Format','TryParse',]class UnitGroup(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Common=None Electrical=None Energy=None HVAC=None Piping=None Structural=None value__=Noneclass Units(object,IDisposable):def Dispose(self):pass def GetFormatOptions(self,unitType):pass@staticmethod def GetModifiableUnitTypes():pass@staticmethod def IsModifiableUnitType(unitType):pass def ReleaseUnmanagedResources(self,*args):pass def SetFormatOptions(self,unitType,options):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,unitSystem):pass def __repr__(self,*args):pass DecimalSymbol=property(lambda self:object(),lambda self,v:None,lambda self:None) """The symbol used to separate the integer and fractional parts of a number.
Get: DecimalSymbol(self: Units) -> DecimalSymbolSet: DecimalSymbol(self: Units) = value"""
 DigitGroupingAmount=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number of digits in each group when numbers are formatted with digit grouping.
Get: DigitGroupingAmount(self: Units) -> DigitGroupingAmountSet: DigitGroupingAmount(self: Units) = value""" 
 DigitGroupingSymbol=property(lambda self:object(),lambda self,v:None,lambda self:None) """The symbol used to separate groups of digits when numbers are formatted with digit grouping.
Get: DigitGroupingSymbol(self: Units) -> DigitGroupingSymbolSet: DigitGroupingSymbol(self: Units) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: Units) -> bool""" 
class UnitSymbolType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass UST_ACRES=None UST_AMPERE=None UST_ATM=None UST_BAHT=None UST_BAR=None UST_BTU=None UST_BTU_PER_F=None UST_BTU_PER_H=None UST_BTU_PER_H_CU_FT=None UST_BTU_PER_H_FT_DEGREE_F=None UST_BTU_PER_H_SQ_FT=None UST_BTU_PER_H_SQ_FT_DEGREE_F=None UST_BTU_PER_LB=None UST_BTU_PER_LB_DEGREE_F=None UST_BTU_PER_S=None UST_CAL=None UST_CAL_PER_S=None UST_CD=None UST_CD_PER_SQ_M=None UST_CF=None UST_CFM=None UST_CFM_PER_CF=None UST_CFM_PER_CU_FT=None UST_CFM_PER_SF=None UST_CFM_PER_SQ_FT=None UST_CFM_PER_TON=None UST_CHINESE_HONG_KONG_SAR=None UST_CM=None UST_CMH=None UST_CMS=None UST_CM_CARET_2=None UST_CM_CARET_3=None UST_CM_PER_MIN=None UST_CM_SUP_2=None UST_CM_SUP_3=None UST_CM_SUP_4=None UST_CM_SUP_6=None UST_COLON_10=None UST_COLON_12=None UST_CP=None UST_CPS=None UST_CU_FT_PER_MIN=None UST_CU_M_PER_H=None UST_CU_M_PER_S=None UST_CY=None UST_DA_N=None UST_DA_N_DASH_M=None UST_DA_N_DASH_M_PER_M=None UST_DA_N_PER_M=None UST_DA_N_PER_M_SUP_2=None UST_DEGREE_C=None UST_DEGREE_C_DIFFERENCE=None UST_DEGREE_F=None UST_DEGREE_F_DIFFERENCE=None UST_DEGREE_R=None UST_DEGREE_R_DIFFERENCE=None UST_DEGREE_SYMBOL=None UST_DELTA_DEGREE_C=None UST_DELTA_DEGREE_F=None UST_DELTA_DEGREE_R=None UST_DELTA_KELVIN=None UST_DM=None UST_DOLLAR=None UST_DONG=None UST_EURO_PREFIX=None UST_EURO_SUFFIX=None UST_FC=None UST_FEET_OF_WATER=None UST_FEET_OF_WATER_PER_100FT=None UST_FL=None UST_FL_LOWERCASE=None UST_FOOT_SINGLE_QUOTE=None UST_FPM=None UST_FPS=None UST_FT=None UST_FTC=None UST_FTH2O=None UST_FTH2O_PER_100FT=None UST_FTL=None UST_FT_CARET_2=None UST_FT_CARET_3=None UST_FT_OF_WATER=None UST_FT_OF_WATER_PER_100FT=None UST_FT_PER_KIP=None UST_FT_PER_MIN=None UST_FT_PER_S=None UST_FT_PER_SQ_S=None UST_FT_SUP_2=None UST_FT_SUP_2_PER_KIP=None UST_FT_SUP_3=None UST_FT_SUP_3_PER_KIP=None UST_FT_SUP_4=None UST_FT_SUP_6=None UST_GAL=None UST_GAL_PER_H=None UST_GAL_PER_MIN=None UST_GPH=None UST_GPM=None UST_GRAD=None UST_GR_PER_H_SQ_FT_IN_HG=None UST_H=None UST_HECTARES=None UST_HP=None UST_HZ=None UST_H_SQ_FT_DEGREE_F_PER_BTU=None UST_IN=None UST_INCH_DOUBLE_QUOTE=None UST_INV_DEGREE_C=None UST_INV_DEGREE_F=None UST_INV_KIP=None UST_INV_K_N=None UST_IN_CARET_2=None UST_IN_CARET_3=None UST_IN_HG=None UST_IN_PER_SQ_S=None UST_IN_SUP_2=None UST_IN_SUP_3=None UST_IN_SUP_4=None UST_IN_SUP_6=None UST_IN_WG=None UST_IN_WG_PER_100FT=None UST_JOULE=None UST_J_PER_G=None UST_J_PER_G_CELSIUS=None UST_J_PER_KELVIN=None UST_J_PER_KG_CELSIUS=None UST_KCAL=None UST_KCAL_PER_S=None UST_KELVIN=None UST_KELVIN_DIFFERENCE=None UST_KGF=None UST_KGF_DASH_M=None UST_KGF_DASH_M_PER_M=None UST_KGF_PER_M=None UST_KGF_PER_M_SUP_2=None UST_KGM=None UST_KGM_PER_M=None UST_KGM_PER_SQ_M=None UST_KG_PER_CU_M=None UST_KILOAMPERE=None UST_KILOPASCAL=None UST_KILOVOLT=None UST_KILOVOLTAMPERE=None UST_KILOWATT=None UST_KIP=None UST_KIPS_PER_CU_FT=None UST_KIPS_PER_IN=None UST_KIP_DASH_FT=None UST_KIP_DASH_FT_PER_FT=None UST_KIP_FT_PER_DEGREE=None UST_KIP_FT_PER_DEGREE_PER_FT=None UST_KIP_PER_FT=None UST_KIP_PER_IN_SUP_3=None UST_KIP_PER_SQ_FT=None UST_KIP_PER_SQ_IN=None UST_KJ=None UST_KJ_PER_KELVIN=None UST_KM_PER_H=None UST_KM_PER_SQ_S=None UST_KN_PER_M_SUP_3=None UST_KRONER=None UST_KSF=None UST_KSI=None UST_KWH=None UST_K_N=None UST_K_N_DASH_M=None UST_K_N_DASH_M_PER_M=None UST_K_N_M_PER_DEGREE=None UST_K_N_M_PER_DEGREE_PER_M=None UST_K_N_PER_CM_SUP_2=None UST_K_N_PER_M=None UST_K_N_PER_MM_SUP_2=None UST_K_N_PER_M_SUP_2=None UST_L=None UST_LBF=None UST_LBF_DASH_FT=None UST_LBF_DASH_FT_PER_FT=None UST_LBF_PER_CU_FT=None UST_LBF_PER_FT=None UST_LBF_PER_SQ_FT=None UST_LBF_PER_SQ_IN=None UST_LBM=None UST_LBM_PER_CU_FT=None UST_LBM_PER_CU_IN=None UST_LBM_PER_FT=None UST_LBM_PER_FT_H=None UST_LBM_PER_FT_S=None UST_LBM_PER_SQ_FT=None UST_LB_FORCE=None UST_LB_FORCE_DASH_FT=None UST_LB_FORCE_DASH_FT_PER_FT=None UST_LB_FORCE_PER_CU_FT=None UST_LB_FORCE_PER_FT=None UST_LB_FORCE_PER_FT_H=None UST_LB_FORCE_PER_FT_S=None UST_LB_FORCE_PER_SQ_FT=None UST_LB_FORCE_PER_SQ_IN=None UST_LB_MASS=None UST_LB_MASS_PER_CU_FT=None UST_LB_MASS_PER_CU_IN=None UST_LB_MASS_PER_FT=None UST_LF=None UST_LM=None UST_LM_PER_W=None UST_LPM=None UST_LPS=None UST_LPS_PER_SQ_M=None UST_LX=None UST_L_PER_M=None UST_L_PER_S=None UST_L_PER_S_CU_M=None UST_L_PER_S_KW=None UST_L_PER_S_SQ_M=None UST_M=None UST_MEGAPASCAL=None UST_MILLIAMPERE=None UST_MILLIVOLT=None UST_MIN=None UST_MI_PER_H=None UST_MI_PER_SQ_S=None UST_MM=None UST_MM_CARET_2=None UST_MM_CARET_3=None UST_MM_HG=None UST_MM_SUP_2=None UST_MM_SUP_3=None UST_MM_SUP_4=None UST_MM_SUP_6=None UST_MS=None UST_M_CARET_2=None UST_M_CARET_3=None UST_M_N=None UST_M_N_DASH_M=None UST_M_N_DASH_M_PER_M=None UST_M_N_PER_M=None UST_M_N_PER_M_SUP_2=None UST_M_PER_K_N=None UST_M_PER_S=None UST_M_PER_SQ_S=None UST_M_SUP_2=None UST_M_SUP_2_PER_K_N=None UST_M_SUP_3=None UST_M_SUP_3_PER_K_N=None UST_M_SUP_4=None UST_M_SUP_6=None UST_N=None UST_NG_PER_PA_S_SQ_M=None UST_NONE=None UST_N_DASH_M=None UST_N_DASH_M_PER_M=None UST_N_PER_M=None UST_N_PER_MM_SUP_2=None UST_N_PER_M_SUP_2=None UST_OHM_M=None UST_ONE_COLON=None UST_PASCAL=None UST_PASCAL_PER_M=None UST_PA_S=None UST_PERCENT_SIGN=None UST_PER_MILLE_SIGN=None UST_POUND=None UST_PSF=None UST_PSI=None UST_PSIA=None UST_PSIG=None UST_RAD=None UST_RAD_PER_S=None UST_S=None UST_SF=None UST_SF_PER_KBTU_PER_H=None UST_SF_PER_MBH=None UST_SF_PER_TON=None UST_SHEQEL=None UST_SLOPE_DEGREE_SYMBOL=None UST_SQ_CM_PER_M=None UST_SQ_FT_PER_FT=None UST_SQ_FT_PER_KBTU_PER_H=None UST_SQ_FT_PER_MBH=None UST_SQ_FT_PER_TON=None UST_SQ_IN_PER_FT=None UST_SQ_MM_PER_M=None UST_SQ_M_K_PER_WATT=None UST_SQ_M_PER_KW=None UST_SQ_M_PER_M=None UST_TF=None UST_TF_DASH_M=None UST_TF_DASH_M_PER_M=None UST_TF_PER_M=None UST_TF_PER_M_SUP_2=None UST_THERM=None UST_TM=None UST_TON=None UST_TON_OF_REFRIGERATION=None UST_UIN_PER_IN_F=None UST_UM_PER_M_C=None UST_USGPH=None UST_USGPM=None UST_USTONNES_FORCE_AS_MASS_ST=None UST_USTONNES_FORCE_AS_MASS_T=None UST_USTONNES_FORCE_AS_MASS_TONS=None UST_USTONNES_FORCE_STF=None UST_USTONNES_FORCE_TONSF=None UST_USTONNES_MASS_ST=None UST_USTONNES_MASS_T=None UST_USTONNES_MASS_TONS=None UST_VOLT=None UST_VOLTAMPERE=None UST_WATT=None UST_WATTS_PER_METER_KELVIN=None UST_WATT_PER_CU_FT=None UST_WATT_PER_CU_M=None UST_WATT_PER_SQ_FT=None UST_WATT_PER_SQ_M=None UST_WATT_PER_SQ_M_K=None UST_WON=None UST_YEN=None value__=Noneclass UnitSystem(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Imperial=None Metric=None value__=Noneclass UnitType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass UT_Acceleration=None UT_Angle=None UT_Area=None UT_AreaForce=None UT_AreaForcePerLength=None UT_AreaForceScale=None UT_Bar_Diameter=None UT_Color_Temperature=None UT_Crack_Width=None UT_Currency=None UT_Custom=None UT_DecSheetLength=None UT_Displacement_Deflection=None UT_Electrical_Apparent_Power=None UT_Electrical_CableTraySize=None UT_Electrical_ConduitSize=None UT_Electrical_Current=None UT_Electrical_Demand_Factor=None UT_Electrical_Efficacy=None UT_Electrical_Frequency=None UT_Electrical_Illuminance=None UT_Electrical_Luminance=None UT_Electrical_Luminous_Flux=None UT_Electrical_Luminous_Intensity=None UT_Electrical_Potential=None UT_Electrical_Power=None UT_Electrical_Power_Density=None UT_Electrical_Resistivity=None UT_Electrical_Temperature=None UT_Electrical_TemperatureDifference=None UT_Electrical_Wattage=None UT_Energy=None UT_Force=None UT_ForceLengthPerAngle=None UT_ForcePerLength=None UT_ForceScale=None UT_HVAC_Airflow=None UT_HVAC_Airflow_Density=None UT_HVAC_Airflow_Divided_By_Cooling_Load=None UT_HVAC_Airflow_Divided_By_Volume=None UT_HVAC_Area_Divided_By_Cooling_Load=None UT_HVAC_Area_Divided_By_Heating_Load=None UT_HVAC_CoefficientOfHeatTransfer=None UT_HVAC_Cooling_Load=None UT_HVAC_Cooling_Load_Divided_By_Area=None UT_HVAC_Cooling_Load_Divided_By_Volume=None UT_HVAC_CrossSection=None UT_HVAC_Density=None UT_HVAC_DuctInsulationThickness=None UT_HVAC_DuctLiningThickness=None UT_HVAC_DuctSize=None UT_HVAC_Energy=None UT_HVAC_Factor=None UT_HVAC_Friction=None UT_HVAC_HeatGain=None UT_HVAC_Heating_Load=None UT_HVAC_Heating_Load_Divided_By_Area=None UT_HVAC_Heating_Load_Divided_By_Volume=None UT_HVAC_Permeability=None UT_HVAC_Power=None UT_HVAC_Power_Density=None UT_HVAC_Pressure=None UT_HVAC_Roughness=None UT_HVAC_Slope=None UT_HVAC_SpecificHeat=None UT_HVAC_SpecificHeatOfVaporization=None UT_HVAC_Temperature=None UT_HVAC_TemperatureDifference=None UT_HVAC_ThermalConductivity=None UT_HVAC_ThermalMass=None UT_HVAC_ThermalResistance=None UT_HVAC_Velocity=None UT_HVAC_Viscosity=None UT_Length=None UT_LinearForce=None UT_LinearForceLengthPerAngle=None UT_LinearForcePerLength=None UT_LinearForceScale=None UT_LinearMoment=None UT_LinearMomentScale=None UT_Mass=None UT_MassDensity=None UT_MassPerUnitArea=None UT_Mass_per_Unit_Length=None UT_Moment=None UT_MomentScale=None UT_Moment_of_Inertia=None UT_Number=None UT_Period=None UT_PipeInsulationThickness=None UT_PipeMass=None UT_PipeMassPerUnitLength=None UT_PipeSize=None UT_Pipe_Dimension=None UT_Piping_Density=None UT_Piping_Flow=None UT_Piping_Friction=None UT_Piping_Pressure=None UT_Piping_Roughness=None UT_Piping_Slope=None UT_Piping_Temperature=None UT_Piping_TemperatureDifference=None UT_Piping_Velocity=None UT_Piping_Viscosity=None UT_Piping_Volume=None UT_Pulsation=None UT_Reinforcement_Area=None UT_Reinforcement_Area_per_Unit_Length=None UT_Reinforcement_Cover=None UT_Reinforcement_Length=None UT_Reinforcement_Spacing=None UT_Reinforcement_Volume=None UT_Rotation=None UT_Section_Area=None UT_Section_Dimension=None UT_Section_Modulus=None UT_Section_Property=None UT_SheetLength=None UT_SiteAngle=None UT_Slope=None UT_Stress=None UT_Structural_Frequency=None UT_Structural_Velocity=None UT_Surface_Area=None UT_ThermalExpansion=None UT_Undefined=None UT_UnitWeight=None UT_Volume=None UT_Warping_Constant=None UT_Weight=None UT_Weight_per_Unit_Length=None UT_WireSize=None value__=Noneclass UnitUtils(object):@staticmethod def Convert(value,currentDisplayUnit,desiredDisplayUnit):pass@staticmethod def ConvertFromInternalUnits(value,displayUnit):pass@staticmethod def ConvertToInternalUnits(value,displayUnit):pass@staticmethod def GetTypeCatalogString(*__args):pass@staticmethod def GetUnitGroup(unitType):pass@staticmethod def GetValidDisplayUnits(unitType=None):pass@staticmethod def GetValidUnitTypes():pass@staticmethod def IsValidDisplayUnit(*__args):pass@staticmethod def IsValidUnitType(unitType):pass __all__=['Convert','ConvertFromInternalUnits','ConvertToInternalUnits','GetTypeCatalogString','GetUnitGroup','GetValidDisplayUnits','GetValidUnitTypes','IsValidDisplayUnit','IsValidUnitType',]class UpdaterData(object,IDisposable):def Dispose(self):pass def GetAddedElementIds(self):pass def GetDeletedElementIds(self):pass def GetDocument(self):pass def GetModifiedElementIds(self):pass def IsChangeTriggered(self,id,type):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: UpdaterData) -> bool"""
class UpdaterId(object,IDisposable):def Dispose(self):pass def GetAddInId(self):pass def GetGUID(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,addInId,val):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: UpdaterId) -> bool"""
class UpdaterInfo(object,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass AdditionalInformation=property(lambda self:object(),lambda self,v:None,lambda self:None) """Additional information about the updater.
Get: AdditionalInformation(self: UpdaterInfo) -> str"""
 ApplicationName=property(lambda self:object(),lambda self,v:None,lambda self:None) """Name of the application that owns the updater.
Get: ApplicationName(self: UpdaterInfo) -> str""" 
 IsOptional=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether the updater is optional or not.
Get: IsOptional(self: UpdaterInfo) -> bool""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: UpdaterInfo) -> bool""" 
 UpdaterName=property(lambda self:object(),lambda self,v:None,lambda self:None) """Name of the updater.
Get: UpdaterName(self: UpdaterInfo) -> str""" 
class UpdaterRegistry(object,IDisposable):@staticmethod def AddTrigger(id,*__args):pass@staticmethod def DisableUpdater(id):pass def Dispose(self):pass@staticmethod def EnableUpdater(id):pass@staticmethod def GetIsUpdaterOptional(id):pass@staticmethod def GetRegisteredUpdaterInfos(document=None):pass@staticmethod def IsUpdaterEnabled(id):pass@staticmethod def IsUpdaterRegistered(id,document=None):pass@staticmethod def RegisterUpdater(updater,*__args):pass def ReleaseUnmanagedResources(self,*args):pass@staticmethod def RemoveAllTriggers(id):pass@staticmethod def RemoveDocumentTriggers(id,document):pass@staticmethod def SetExecutionOrder(first,second):pass@staticmethod def SetIsUpdaterOptional(id,isOptional):pass@staticmethod def UnregisterUpdater(id,document=None):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: UpdaterRegistry) -> bool"""
class UV(object):def Add(self,source):pass def AngleTo(self,source):pass def CrossProduct(self,source):pass def DistanceTo(self,source):pass def Divide(self,value):pass def DotProduct(self,source):pass def GetLength(self):pass def IsAlmostEqualTo(self,source,tolerance=None):pass def IsUnitLength(self):pass def IsZeroLength(self):pass def Multiply(self,value):pass def Negate(self):pass def Normalize(self):pass def Subtract(self,source):pass def ToString(self):pass def __add__(self,*args):pass def __div__(self,*args):pass def __getitem__(self,*args):pass def __mul__(self,*args):pass def __neg__(self,*args):pass@staticmethod def __new__(self,u=None,v=None):pass def __radd__(self,*args):pass def __rmul__(self,*args):pass def __rsub__(self,*args):pass def __sub__(self,*args):pass U=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the first coordinate.
Get: U(self: UV) -> float"""
 V=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the second coordinate.
Get: V(self: UV) -> float""" 
 BasisU=None BasisV=None Zero=Noneclass UVGridlineType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass U=None V=None value__=Noneclass ValueAtPointBase(object,IDisposable):def ClearAllFlags(self):pass def ClearFlagsAt(self,measurement):pass def Dispose(self):pass def GetFlags(self,measurement):pass def ReleaseUnmanagedResources(self,*args):pass def SetFlags(self,flags,measurement=None):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ValueAtPointBase) -> bool""" 
class ValueAtPointFlags(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass DisplayFence=None DisplayText=None None=None value__=Noneclass ValueParsingOptions(object,IDisposable):def Dispose(self):pass def GetFormatOptions(self):pass def ReleaseUnmanagedResources(self,*args):pass def SetFormatOptions(self,formatOptions):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass AllowedValues=property(lambda self:object(),lambda self,v:None,lambda self:None) """The allowable range of values to be parsed.
Get: AllowedValues(self: ValueParsingOptions) -> AllowedValuesSet: AllowedValues(self: ValueParsingOptions) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ValueParsingOptions) -> bool""" 
class VertexIndexPair(object):@staticmethod def __new__(self,iTop,iBottom):pass Bottom=property(lambda self:object(),lambda self,v:None,lambda self:None) """The index of the vertex pair from the bottom profile.
Get: Bottom(self: VertexIndexPair) -> intSet: Bottom(self: VertexIndexPair) = value"""
 Top=property(lambda self:object(),lambda self,v:None,lambda self:None) """The index of the vertex pair from the top profile.
Get: Top(self: VertexIndexPair) -> intSet: Top(self: VertexIndexPair) = value""" 
class VertexIndexPairArray(APIObject,IDisposable,IEnumerable):def Append(self,item):pass def Clear(self):pass def Dispose(self):pass def ForwardIterator(self):pass def GetEnumerator(self):pass def Insert(self,item,index):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def ReverseIterator(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __getitem__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass def __setitem__(self,*args):pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the array is empty.
Get: IsEmpty(self: VertexIndexPairArray) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of VertexIndex pairs that are in the array.
Get: Size(self: VertexIndexPairArray) -> int""" 
class VertexIndexPairArrayIterator(APIObject,IDisposable,IEnumerator):def Dispose(self):pass def MoveNext(self):pass def next(self,*args):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def Reset(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: VertexIndexPairArrayIterator) -> object"""
class VertexPair(object,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,firstVertexIdx,secondVertexIdx):pass def __repr__(self,*args):pass First=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies the first index of VertexPair.
Get: First(self: VertexPair) -> intSet: First(self: VertexPair) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: VertexPair) -> bool""" 
 Second=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies the second index of VertexPair.
Get: Second(self: VertexPair) -> intSet: Second(self: VertexPair) = value""" 
class VerticalAlignmentStyle(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Bottom=None Middle=None Top=None value__=Noneclass VerticalTextAlignment(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Bottom=None Middle=None Top=None value__=Noneclass View3D(View,IDisposable):def CanResetCameraTarget(self):pass def CanSaveOrientation(self):pass def CanToggleBetweenPerspectiveAndIsometric(self):pass@staticmethod def CreateIsometric(document,viewFamilyTypeId):pass@staticmethod def CreatePerspective(document,viewFamilyTypeId):pass def Dispose(self):pass def getBoundingBox(self,*args):pass def GetOrientation(self):pass def GetRenderingSettings(self):pass def GetSavedOrientation(self):pass def GetSectionBox(self):pass def HasBeenLocked(self):pass def OrientTo(self,forwardDirection):pass def ReleaseUnmanagedResources(self,*args):pass def ResetCameraTarget(self):pass def RestoreOrientationAndLock(self):pass def SaveOrientation(self):pass def SaveOrientationAndLock(self):pass def setElementType(self,*args):pass def SetOrientation(self,newViewOrientation3D):pass def SetRenderingSettings(self,settings):pass def SetSectionBox(self,boundingBoxXYZ):pass def ToggleToIsometric(self):pass def ToggleToPerspective(self):pass def Unlock(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass IsLocked=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the view is locked.
Get: IsLocked(self: View3D) -> bool"""
 IsPerspective=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies whether this is a perspective view.
Get: IsPerspective(self: View3D) -> bool""" 
 IsSectionBoxActive=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies whether or not the section box is active in this 3D view.
Get: IsSectionBoxActive(self: View3D) -> boolSet: IsSectionBoxActive(self: View3D) = value""" 
class ViewCropRegionShapeManager(object,IDisposable):def Dispose(self):pass def GetAnnotationCropShape(self):pass def GetCropShape(self):pass def GetSplitRegionMaximum(self,regionIndex):pass def GetSplitRegionMinimum(self,regionIndex):pass def IsCropRegionShapeValid(self,boundary):pass def ReleaseUnmanagedResources(self,*args):pass def RemoveCropRegionShape(self):pass def RemoveSplit(self):pass def RemoveSplitRegion(self,regionIndex):pass def SetCropShape(self,boundary):pass def SplitRegionHorizontally(self,regionIndex,leftPart,rightPart):pass def SplitRegionVertically(self,regionIndex,topPart,bottomPart):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass BottomAnnotationCropOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) """The offset from the bottom of the view crop that determines the location of the annotation crop bottom boundary.
Get: BottomAnnotationCropOffset(self: ViewCropRegionShapeManager) -> floatSet: BottomAnnotationCropOffset(self: ViewCropRegionShapeManager) = value"""
 CanBeSplit=property(lambda self:object(),lambda self,v:None,lambda self:None) """Verifies that the crop of the associated view is permitted to have multiple regions.
Get: CanBeSplit(self: ViewCropRegionShapeManager) -> bool""" 
 CanHaveAnnotationCrop=property(lambda self:object(),lambda self,v:None,lambda self:None) """Verifies that the view is allowed to have an annotation crop.
Get: CanHaveAnnotationCrop(self: ViewCropRegionShapeManager) -> bool""" 
 CanHaveShape=property(lambda self:object(),lambda self,v:None,lambda self:None) """Verifies that the crop of the associated view is permitted to have a non-rectangular shape.
Get: CanHaveShape(self: ViewCropRegionShapeManager) -> bool""" 
 IsSplitHorizontally=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether or not the view's crop is split (and the split is horizontal).
Get: IsSplitHorizontally(self: ViewCropRegionShapeManager) -> bool""" 
 IsSplitVertically=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether or not the view's crop is split (and the split is vertical).
Get: IsSplitVertically(self: ViewCropRegionShapeManager) -> bool""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ViewCropRegionShapeManager) -> bool""" 
 LeftAnnotationCropOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) """The offset from the left of the view crop that determines the location of the annotation crop left boundary.
Get: LeftAnnotationCropOffset(self: ViewCropRegionShapeManager) -> floatSet: LeftAnnotationCropOffset(self: ViewCropRegionShapeManager) = value""" 
 NumberOfSplitRegions=property(lambda self:object(),lambda self,v:None,lambda self:None) """The number of split crop regions (1 if the crop is not currently split).
Get: NumberOfSplitRegions(self: ViewCropRegionShapeManager) -> int""" 
 RightAnnotationCropOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) """The offset from the right of the view crop that determines the location of the annotation crop right boundary.
Get: RightAnnotationCropOffset(self: ViewCropRegionShapeManager) -> floatSet: RightAnnotationCropOffset(self: ViewCropRegionShapeManager) = value""" 
 ShapeSet=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether or not the view crop has a non-rectangular shape set.
Get: ShapeSet(self: ViewCropRegionShapeManager) -> bool""" 
 Split=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether or not the view crop is split.
Get: Split(self: ViewCropRegionShapeManager) -> bool""" 
 TopAnnotationCropOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) """The offset from the top of the view crop that determines the location of the annotation crop top boundary.
Get: TopAnnotationCropOffset(self: ViewCropRegionShapeManager) -> floatSet: TopAnnotationCropOffset(self: ViewCropRegionShapeManager) = value""" 
class ViewDetailLevel(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Coarse=None Fine=None Medium=None Undefined=None value__=Noneclass ViewDiscipline(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Architectural=None Coordination=None Electrical=None Mechanical=None Plumbing=None Structural=None value__=Noneclass ViewDisplayBackground(object,IDisposable):@staticmethod def CreateGradient(skyColor,horizonColor,groundColor):pass@staticmethod def CreateImage(imagePath,flags,imageOffsets,imageScales):pass@staticmethod def CreateSky():pass def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass BackgroundColor=property(lambda self:object(),lambda self,v:None,lambda self:None) """The color of the horizon when the type is 'Gradient'.
Get: BackgroundColor(self: ViewDisplayBackground) -> Color"""
 GroundColor=property(lambda self:object(),lambda self,v:None,lambda self:None) """The color of the ground when the type is 'Gradient' or 'SunAndClouds'.
Get: GroundColor(self: ViewDisplayBackground) -> Color""" 
 HorizontalImageOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) """The distance between the left viewport boundary and the left edge of the background image.
Get: HorizontalImageOffset(self: ViewDisplayBackground) -> float""" 
 HorizontalImageScale=property(lambda self:object(),lambda self,v:None,lambda self:None) """The horizontal scale of the background image; the scale of 1.0 puts the image pixel-to-pixel.
Get: HorizontalImageScale(self: ViewDisplayBackground) -> float""" 
 ImageFlags=property(lambda self:object(),lambda self,v:None,lambda self:None) """The image alignment indicators when the type is 'Image'.
Get: ImageFlags(self: ViewDisplayBackground) -> ViewDisplayBackgroundImageFlags""" 
 ImagePath=property(lambda self:object(),lambda self,v:None,lambda self:None) """The path to the image file when the type is 'Image'.
Get: ImagePath(self: ViewDisplayBackground) -> str""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ViewDisplayBackground) -> bool""" 
 SkyColor=property(lambda self:object(),lambda self,v:None,lambda self:None) """The color of the sky when the type is 'Gradient'.
Get: SkyColor(self: ViewDisplayBackground) -> Color""" 
 Type=property(lambda self:object(),lambda self,v:None,lambda self:None) """The type of the background.
Get: Type(self: ViewDisplayBackground) -> ViewDisplayBackgroundType""" 
 VerticalImageOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) """The distance between the bottom viewport boundary and the bottom edge of the background image.
Get: VerticalImageOffset(self: ViewDisplayBackground) -> float""" 
 VerticalImageScale=property(lambda self:object(),lambda self,v:None,lambda self:None) """The vertical scale of the background image; the scale of 1.0 puts the image pixel-to-pixel.
Get: VerticalImageScale(self: ViewDisplayBackground) -> float""" 
class ViewDisplayBackgroundImageFlags(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass FitToScreen=None FixedAspectRatio=None None=None UseTiling=None value__=Noneclass ViewDisplayBackgroundType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Gradient=None Image=None None=None SunAndClouds=None value__=Noneclass ViewDisplayDepthCueing(object,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def SetStartEndPercentages(self,startPercentage,endPercentage):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass EnableDepthCueing=property(lambda self:object(),lambda self,v:None,lambda self:None) """True to enable depth cueing. False to disable it.
Get: EnableDepthCueing(self: ViewDisplayDepthCueing) -> boolSet: EnableDepthCueing(self: ViewDisplayDepthCueing) = value"""
 EndPercentage=property(lambda self:object(),lambda self,v:None,lambda self:None) """The end percentage defines where depth cueing ends.
 Values between 0 and 100.Get: EndPercentage(self: ViewDisplayDepthCueing) -> int""" 
 FadeTo=property(lambda self:object(),lambda self,v:None,lambda self:None) """The fade to defines the maximum fading in per cent.
 Values between 0 and 100.Get: FadeTo(self: ViewDisplayDepthCueing) -> intSet: FadeTo(self: ViewDisplayDepthCueing) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ViewDisplayDepthCueing) -> bool""" 
 StartPercentage=property(lambda self:object(),lambda self,v:None,lambda self:None) """The start percentage defines where depth cueing starts.
 Values between 0 and 100.Get: StartPercentage(self: ViewDisplayDepthCueing) -> int""" 
class ViewDisplayEdges(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass None=None Simple=None value__=Noneclass ViewDisplayModel(object,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass EnableSilhouettes=property(lambda self:object(),lambda self,v:None,lambda self:None) """True to show silhouettes edges. False to disable showing them.
Get: EnableSilhouettes(self: ViewDisplayModel) -> boolSet: EnableSilhouettes(self: ViewDisplayModel) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ViewDisplayModel) -> bool""" 
 ShowHiddenLines=property(lambda self:object(),lambda self,v:None,lambda self:None) """True to enable hidden lines. False to disable showing them.
Get: ShowHiddenLines(self: ViewDisplayModel) -> ShowHiddenLinesValuesSet: ShowHiddenLines(self: ViewDisplayModel) = value""" 
 SilhouetteEdgesGStyleId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Style ID for silhouette edges
Get: SilhouetteEdgesGStyleId(self: ViewDisplayModel) -> ElementIdSet: SilhouetteEdgesGStyleId(self: ViewDisplayModel) = value""" 
 SmoothEdges=property(lambda self:object(),lambda self,v:None,lambda self:None) """True to enable "smooth edge" (anti-aliasing) effect. False to disable it.
Get: SmoothEdges(self: ViewDisplayModel) -> boolSet: SmoothEdges(self: ViewDisplayModel) = value""" 
 Transparency=property(lambda self:object(),lambda self,v:None,lambda self:None) """The percentage (0..100) of surface transparency
 0 means the surfaces are opaque, 100 means they are fully transparentGet: Transparency(self: ViewDisplayModel) -> intSet: Transparency(self: ViewDisplayModel) = value""" 
class ViewDisplaySketchyLines(object,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass EnableSketchyLines=property(lambda self:object(),lambda self,v:None,lambda self:None) """True to enable sketchy lines visibility. False to disable it.
Get: EnableSketchyLines(self: ViewDisplaySketchyLines) -> boolSet: EnableSketchyLines(self: ViewDisplaySketchyLines) = value"""
 Extension=property(lambda self:object(),lambda self,v:None,lambda self:None) """The extension scale value. Controls the magnitude of line's extension.
 Values between 0 and 10.Get: Extension(self: ViewDisplaySketchyLines) -> intSet: Extension(self: ViewDisplaySketchyLines) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ViewDisplaySketchyLines) -> bool""" 
 Jitter=property(lambda self:object(),lambda self,v:None,lambda self:None) """The jitter defines jitteriness of the line.
 Values between 0 and 10.Get: Jitter(self: ViewDisplaySketchyLines) -> intSet: Jitter(self: ViewDisplaySketchyLines) = value""" 
class ViewDuplicateOption(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass AsDependent=None Duplicate=None value__=None WithDetailing=Noneclass ViewFamily(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass AreaPlan=None CeilingPlan=None CostReport=None Detail=None Drafting=None Elevation=None FloorPlan=None GraphicalColumnSchedule=None ImageView=None Invalid=None Legend=None LoadsReport=None PanelSchedule=None PressureLossReport=None Schedule=None Section=None Sheet=None StructuralPlan=None ThreeDimensional=None value__=None Walkthrough=Noneclass ViewFamilyType(ElementType,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def IsValidDefaultTemplate(self,templateId):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass DefaultTemplateId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The default template id assigned to this view type.
Get: DefaultTemplateId(self: ViewFamilyType) -> ElementIdSet: DefaultTemplateId(self: ViewFamilyType) = value"""
 PlanViewDirection=property(lambda self:object(),lambda self,v:None,lambda self:None) """The PlanViewDirection of this view.
Get: PlanViewDirection(self: ViewFamilyType) -> PlanViewDirectionSet: PlanViewDirection(self: ViewFamilyType) = value""" 
 ViewFamily=property(lambda self:object(),lambda self,v:None,lambda self:None) """The ViewFamily for this view type.
Get: ViewFamily(self: ViewFamilyType) -> ViewFamily""" 
class ViewNavigationToolSettings(Element,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def GetHomeCamera(self):pass@staticmethod def GetViewNavigationToolSettings(pADoc):pass def IsHomeCameraSet(self):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass ViewNode(RenderNode,IDisposable):def Dispose(self):pass def GetCameraInfo(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass LevelOfDetail=property(lambda self:object(),lambda self,v:None,lambda self:None) """The level of detail the view is going to be rendered at.
Get: LevelOfDetail(self: ViewNode) -> intSet: LevelOfDetail(self: ViewNode) = value"""
 ViewId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The Id of the view element.
Get: ViewId(self: ViewNode) -> ElementId""" 
class ViewOrientation3D(object,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,eyePosition,upDirection,forwardDirection):pass def __repr__(self,*args):pass EyePosition=property(lambda self:object(),lambda self,v:None,lambda self:None) """The eye position point
Get: EyePosition(self: ViewOrientation3D) -> XYZ"""
 ForwardDirection=property(lambda self:object(),lambda self,v:None,lambda self:None) """The forward direction vector
Get: ForwardDirection(self: ViewOrientation3D) -> XYZ""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ViewOrientation3D) -> bool""" 
 UpDirection=property(lambda self:object(),lambda self,v:None,lambda self:None) """The up direction vector
Get: UpDirection(self: ViewOrientation3D) -> XYZ""" 
class ViewPlan(View,IDisposable):def CheckPlanViewRangeValidity(self,planViewRange):pass@staticmethod def Create(document,viewFamilyTypeId,levelId):pass@staticmethod def CreateAreaPlan(document,areaSchemeId,levelId):pass def Dispose(self):pass def getBoundingBox(self,*args):pass def GetUnderlayBaseLevel(self):pass def GetUnderlayOrientation(self):pass def GetUnderlayTopLevel(self):pass def GetViewRange(self):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def SetUnderlayBaseLevel(self,levelId):pass def SetUnderlayOrientation(self,uo):pass def SetUnderlayRange(self,baseLevelId,topLevelId):pass def SetViewRange(self,planViewRange):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass AreaScheme=property(lambda self:object(),lambda self,v:None,lambda self:None) """The area scheme.
Get: AreaScheme(self: ViewPlan) -> AreaScheme"""
class ViewPlanType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass CeilingPlan=None FloorPlan=None value__=Noneclass Viewport(Element,IDisposable):@staticmethod def CanAddViewToSheet(document,viewSheetId,viewId):pass@staticmethod def Create(document,viewSheetId,viewId,point):pass def Dispose(self):pass def getBoundingBox(self,*args):pass def GetBoxCenter(self):pass def GetBoxOutline(self):pass def GetLabelOutline(self):pass def ReleaseUnmanagedResources(self,*args):pass def SetBoxCenter(self,newCenterPoint):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass Rotation=property(lambda self:object(),lambda self,v:None,lambda self:None) """The rotation of the viewport on the sheet.
Get: Rotation(self: Viewport) -> ViewportRotationSet: Rotation(self: Viewport) = value"""
 SheetId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The element id of the ViewSheet on which the viewport appears,
 or InvalidElementId if this viewport does not associate a view with placement onto a sheet.Get: SheetId(self: Viewport) -> ElementId""" 
 ViewId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The element id of the associated View.
Get: ViewId(self: Viewport) -> ElementId""" 
class ViewportRotation(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Clockwise=None Counterclockwise=None None=None value__=Noneclass ViewSchedule(TableView,IDisposable):def CanGroupHeaders(self,top,left,bottom,right):pass def CanUngroupHeaders(self,top,left,bottom,right):pass@staticmethod def CreateKeynoteLegend(document):pass@staticmethod def CreateKeySchedule(document,categoryId):pass@staticmethod def CreateMaterialTakeoff(document,categoryId):pass@staticmethod def CreateNoteBlock(document,familyId):pass@staticmethod def CreateRevisionSchedule(document):pass@staticmethod def CreateSchedule(document,categoryId,areaSchemeId=None):pass@staticmethod def CreateSheetList(document):pass@staticmethod def CreateViewList(document):pass def Dispose(self):pass def Export(self,folder,name,options):pass def getBoundingBox(self,*args):pass@staticmethod def GetDefaultNameForKeynoteLegend(document):pass@staticmethod def GetDefaultNameForKeySchedule(document,categoryId):pass@staticmethod def GetDefaultNameForMaterialTakeoff(document,categoryId):pass@staticmethod def GetDefaultNameForNoteBlock(document):pass@staticmethod def GetDefaultNameForRevisionSchedule(document):pass@staticmethod def GetDefaultNameForSchedule(document,categoryId,areaSchemeId=None):pass@staticmethod def GetDefaultNameForSheetList(document):pass@staticmethod def GetDefaultNameForViewList(document):pass@staticmethod def GetDefaultParameterNameForKeySchedule(document,categoryId):pass def GetTableData(self):pass@staticmethod def GetValidCategoriesForKeySchedule():pass@staticmethod def GetValidCategoriesForMaterialTakeoff():pass@staticmethod def GetValidCategoriesForSchedule():pass@staticmethod def GetValidFamiliesForNoteBlock(document):pass def GroupHeaders(self,top,left,bottom,right,caption=None):pass def HasImageField(self):pass def IsDataOutOfDate(self):pass@staticmethod def IsValidCategoryForKeySchedule(categoryId):pass@staticmethod def IsValidCategoryForMaterialTakeoff(categoryId):pass@staticmethod def IsValidCategoryForSchedule(categoryId):pass@staticmethod def IsValidFamilyForNoteBlock(document,familyId):pass def IsValidTextTypeId(self,textTypeId):pass def RefreshData(self):pass def ReleaseUnmanagedResources(self,*args):pass def RestoreImageSize(self):pass def setElementType(self,*args):pass def UngroupHeaders(self,top,left,bottom,right):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass BodyTextTypeId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Defines the default text style used for the data section of the schedule.
Get: BodyTextTypeId(self: ViewSchedule) -> ElementIdSet: BodyTextTypeId(self: ViewSchedule) = value"""
 Definition=property(lambda self:object(),lambda self,v:None,lambda self:None) """The primary ScheduleDefinition.
Get: Definition(self: ViewSchedule) -> ScheduleDefinition""" 
 EmbeddedDefinition=property(lambda self:object(),lambda self,v:None,lambda self:None) """The embedded ScheduleDefinition.
Get: EmbeddedDefinition(self: ViewSchedule) -> ScheduleDefinition""" 
 HeaderTextTypeId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Defines the default text style used in the column headers in the body section of the schedule.
Get: HeaderTextTypeId(self: ViewSchedule) -> ElementIdSet: HeaderTextTypeId(self: ViewSchedule) = value""" 
 ImageRowHeight=property(lambda self:object(),lambda self,v:None,lambda self:None) """Defines the image row height in the schedule.
Get: ImageRowHeight(self: ViewSchedule) -> floatSet: ImageRowHeight(self: ViewSchedule) = value""" 
 IsInternalKeynoteSchedule=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies if this ViewSchedule is an internal schedule used when keynotes are filtered based on the elements that are shown on a sheet.
Get: IsInternalKeynoteSchedule(self: ViewSchedule) -> bool""" 
 IsTitleblockRevisionSchedule=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies if this ViewSchedule is an internal schedule used to display revision schedules as part of a titleblock.
Get: IsTitleblockRevisionSchedule(self: ViewSchedule) -> bool""" 
 KeyScheduleParameterName=property(lambda self:object(),lambda self,v:None,lambda self:None) """In a key schedule, the name of the parameter for choosing one of the keys.
Get: KeyScheduleParameterName(self: ViewSchedule) -> strSet: KeyScheduleParameterName(self: ViewSchedule) = value""" 
 TitleTextTypeId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Defines the default text style used in the header section of the schedule.
Get: TitleTextTypeId(self: ViewSchedule) -> ElementIdSet: TitleTextTypeId(self: ViewSchedule) = value""" 
class ViewScheduleExportOptions(object,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,other=None):pass def __repr__(self,*args):pass ColumnHeaders=property(lambda self:object(),lambda self,v:None,lambda self:None) """How to export column headers. Default is MultipleRows.
Get: ColumnHeaders(self: ViewScheduleExportOptions) -> ExportColumnHeadersSet: ColumnHeaders(self: ViewScheduleExportOptions) = value"""
 FieldDelimiter=property(lambda self:object(),lambda self,v:None,lambda self:None) """How to delimit fields. Default is Tab.
Get: FieldDelimiter(self: ViewScheduleExportOptions) -> strSet: FieldDelimiter(self: ViewScheduleExportOptions) = value""" 
 HeadersFootersBlanks=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether to export group headers, footers, and blank lines. Default is true.
Get: HeadersFootersBlanks(self: ViewScheduleExportOptions) -> boolSet: HeadersFootersBlanks(self: ViewScheduleExportOptions) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: ViewScheduleExportOptions) -> bool""" 
 TextQualifier=property(lambda self:object(),lambda self,v:None,lambda self:None) """How to qualify text fields. Default is DoubleQuote.
Get: TextQualifier(self: ViewScheduleExportOptions) -> ExportTextQualifierSet: TextQualifier(self: ViewScheduleExportOptions) = value""" 
 Title=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether or not to export the schedule title. Default is true.
Get: Title(self: ViewScheduleExportOptions) -> boolSet: Title(self: ViewScheduleExportOptions) = value""" 
class ViewSection(View,IDisposable):@staticmethod def CreateCallout(document,parentViewId,viewFamilyTypeId,point1,point2):pass@staticmethod def CreateDetail(document,viewFamilyTypeId,sectionBox):pass@staticmethod def CreateReferenceCallout(document,parentViewId,viewIdToReference,point1,point2):pass@staticmethod def CreateReferenceSection(document,parentViewId,viewIdToReference,headPoint,tailPoint):pass@staticmethod def CreateSection(document,viewFamilyTypeId,sectionBox):pass def Dispose(self):pass def getBoundingBox(self,*args):pass@staticmethod def IsParentViewValidForCallout(document,parentViewId):pass@staticmethod def IsViewFamilyTypeValidForCallout(document,viewFamilyTypeId,parentViewId):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass ViewSet(APIObject,IDisposable,IEnumerable):def Clear(self):pass def Contains(self,item):pass def Dispose(self):pass def Erase(self,item):pass def ForwardIterator(self):pass def GetEnumerator(self):pass def Insert(self,item):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def ReverseIterator(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass IsEmpty=property(lambda self:object(),lambda self,v:None,lambda self:None) """Test to see if the set is empty.
Get: IsEmpty(self: ViewSet) -> bool"""
 Size=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the number of views that are in the set.
Get: Size(self: ViewSet) -> int""" 
class ViewSetIterator(APIObject,IDisposable,IEnumerator):def Dispose(self):pass def MoveNext(self):pass def next(self,*args):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def Reset(self):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __iter__(self,*args):pass Current=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves the item that is the current focus of the iterator.
Get: Current(self: ViewSetIterator) -> object"""
class ViewShapeBuilder(ShapeBuilder,IDisposable):def AddCurve(self,GCurve):pass def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def Reset(self):pass@staticmethod def ValidateCurve(GCurve,targetViewType=None):pass@staticmethod def ValidateShape(shape,targetViewType):pass@staticmethod def ValidateViewType(targetViewType):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,targetViewType=None):pass ViewNormal=property(lambda self:object(),lambda self,v:None,lambda self:None) """Normal of the view that will display the shape being built. Must be set explicitly before adding any geometry. Must be a unit vector.
 This is used to validate incoming geometry - it must be orthogonal to the viewNormal.Get: ViewNormal(self: ViewShapeBuilder) -> XYZSet: ViewNormal(self: ViewShapeBuilder) = value"""
 ViewType=property(lambda self:object(),lambda self,v:None,lambda self:None) """View type where the view-specific shape currently being built will be used
Get: ViewType(self: ViewShapeBuilder) -> DirectShapeTargetViewTypeSet: ViewType(self: ViewShapeBuilder) = value""" 
class ViewSheet(View,IDisposable):def ConvertToRealSheet(self,titleBlockTypeId):pass@staticmethod def Create(document,titleBlockTypeId):pass@staticmethod def CreatePlaceholder(aDoc):pass def DeleteViewport(self,viewport):pass def Dispose(self):pass def GetAdditionalRevisionIds(self):pass def GetAllPlacedViews(self):pass def GetAllRevisionIds(self):pass def GetAllViewports(self):pass def getBoundingBox(self,*args):pass def GetCurrentRevision(self):pass def GetRevisionCloudNumberOnSheet(self,revisionCloudId):pass def GetRevisionNumberOnSheet(self,revisionId):pass def ReleaseUnmanagedResources(self,*args):pass def SetAdditionalRevisionIds(self,projectRevisionIds):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass IsPlaceholder=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies whether or not the view sheet represents a placeholder sheet.
Get: IsPlaceholder(self: ViewSheet) -> bool"""
 SheetNumber=property(lambda self:object(),lambda self,v:None,lambda self:None) """The sheet number of the document.
Get: SheetNumber(self: ViewSheet) -> strSet: SheetNumber(self: ViewSheet) = value""" 
class ViewSheetSet(Element,IDisposable,IViewSheetSet):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """The view sheet set name.
Get: Name(self: ViewSheetSet) -> strSet: Name(self: ViewSheetSet) = value"""
 Views=property(lambda self:object(),lambda self,v:None,lambda self:None) """The views.
Get: Views(self: ViewSheetSet) -> ViewSetSet: Views(self: ViewSheetSet) = value""" 
class ViewSheetSetting(APIObject,IDisposable):def Delete(self):pass def Dispose(self):pass def ReleaseManagedResources(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def Rename(self,newName):pass def Revert(self):pass def Save(self):pass def SaveAs(self,newName):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass AvailableViews=property(lambda self:object(),lambda self,v:None,lambda self:None) """All views that can be printed.
Get: AvailableViews(self: ViewSheetSetting) -> ViewSet"""
 CurrentViewSheetSet=property(lambda self:object(),lambda self,v:None,lambda self:None) """The current view sheet set of PrintSetup.
Get: CurrentViewSheetSet(self: ViewSheetSetting) -> IViewSheetSetSet: CurrentViewSheetSet(self: ViewSheetSetting) = value""" 
 InSession=property(lambda self:object(),lambda self,v:None,lambda self:None) """The in-session view sheet set of Print Setup.
Get: InSession(self: ViewSheetSetting) -> InSessionViewSheetSet""" 
class ViewTemplateApplicationOption(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass AllParameters=None AllParametersAndStickIfNone=None UncontrolledParameters=None value__=Noneclass ViewType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass AreaPlan=None CeilingPlan=None ColumnSchedule=None CostReport=None Detail=None DraftingView=None DrawingSheet=None Elevation=None EngineeringPlan=None FloorPlan=None Internal=None Legend=None LoadsReport=None PanelSchedule=None PresureLossReport=None ProjectBrowser=None Rendering=None Report=None Schedule=None Section=None SystemBrowser=None ThreeD=None Undefined=None value__=None Walkthrough=Noneclass VirtualPrinterType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass AdobePDF=None DWFWriter=None None=None value__=None XPSWriter=Noneclass Visibility(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Contextual=None Highlight=None Invisible=None value__=None Visible=Noneclass Wall(HostObject,IDisposable):@staticmethod def Create(document,*__args):pass def Dispose(self):pass def Flip(self):pass def getBoundingBox(self,*args):pass def GetStackedWallMemberIds(self):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass CurtainGrid=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get the grid object of a curtain wall
Get: CurtainGrid(self: Wall) -> CurtainGrid"""
 Flipped=property(lambda self:object(),lambda self,v:None,lambda self:None) """Property to test whether the wall orientation is flipped.
Get: Flipped(self: Wall) -> bool""" 
 IsStackedWall=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies if the wall is a stacked wall.
Get: IsStackedWall(self: Wall) -> bool""" 
 IsStackedWallMember=property(lambda self:object(),lambda self,v:None,lambda self:None) """Identifies if the wall is a member of a stacked wall.
Get: IsStackedWallMember(self: Wall) -> bool""" 
 Orientation=property(lambda self:object(),lambda self,v:None,lambda self:None) """The normal vector projected from the exterior side of the wall.
Get: Orientation(self: Wall) -> XYZ""" 
 StackedWallOwnerId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the stacked wall which contains this stacked wall member.
Get: StackedWallOwnerId(self: Wall) -> ElementId""" 
 StructuralUsage=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves or changes  the wall's designated structural usage.
Get: StructuralUsage(self: Wall) -> StructuralWallUsageSet: StructuralUsage(self: Wall) = value""" 
 WallType=property(lambda self:object(),lambda self,v:None,lambda self:None) """Retrieves or changes the type of the wall.
Get: WallType(self: Wall) -> WallTypeSet: WallType(self: Wall) = value""" 
 Width=property(lambda self:object(),lambda self,v:None,lambda self:None) """Get the overall thickness of the wall.
Get: Width(self: Wall) -> float""" 
class WallFoundation(HostObject,IDisposable):@staticmethod def Create(document,typeId,wallId):pass def Dispose(self):pass def getBoundingBox(self,*args):pass def GetFoundationType(self):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def SetFoundationType(self,type):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass WallId=property(lambda self:object(),lambda self,v:None,lambda self:None) """Returns the id of the host wall.
Get: WallId(self: WallFoundation) -> ElementId"""
class WallFoundationType(HostObjAttributes,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass WallFunction(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Coreshaft=None Exterior=None Foundation=None Interior=None Retaining=None Soffit=None value__=Noneclass WallKind(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Basic=None Curtain=None Stacked=None Unknown=None value__=Noneclass WallLocationLine(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass CoreCenterline=None CoreExterior=None CoreInterior=None FinishFaceExterior=None FinishFaceInterior=None value__=None WallCenterline=Noneclass WallSide(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Exterior=None Interior=None value__=Noneclass WallSweep(HostObject,IDisposable):@staticmethod def Create(wall,wallSweepType,wallSweepInfo):pass def Dispose(self):pass def getBoundingBox(self,*args):pass def GetHostIds(self):pass def GetWallSweepInfo(self):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass@staticmethod def WallAllowsWallSweep(wall):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass WallSweepInfo(object,IDisposable):def Dispose(self):pass def IsEqual(self,toCompare):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,*__args):pass def __repr__(self,*args):pass CutsWall=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if you want the sweep to cut geometry out of the host wall.
Get: CutsWall(self: WallSweepInfo) -> boolSet: CutsWall(self: WallSweepInfo) = value"""
 DefaultSetback=property(lambda self:object(),lambda self,v:None,lambda self:None) """The sweep setback distance from inserts, such as windows and doors.
Get: DefaultSetback(self: WallSweepInfo) -> floatSet: DefaultSetback(self: WallSweepInfo) = value""" 
 Distance=property(lambda self:object(),lambda self,v:None,lambda self:None) """The distance from either the top or base of the wall.
Get: Distance(self: WallSweepInfo) -> floatSet: Distance(self: WallSweepInfo) = value""" 
 DistanceMeasuredFrom=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if Distance is measured from the top or bottom of the wall.
Get: DistanceMeasuredFrom(self: WallSweepInfo) -> DistanceMeasuredFromSet: DistanceMeasuredFrom(self: WallSweepInfo) = value""" 
 Id=property(lambda self:object(),lambda self,v:None,lambda self:None) """The id of the sweep or reveal.
Get: Id(self: WallSweepInfo) -> intSet: Id(self: WallSweepInfo) = value""" 
 IsCutByInserts=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the sweep is cut by wall inserts.
Get: IsCutByInserts(self: WallSweepInfo) -> boolSet: IsCutByInserts(self: WallSweepInfo) = value""" 
 IsFixed=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the described wall sweep is fixed.  A sweep is fixed if it is a part of a vertical compound structure.
Get: IsFixed(self: WallSweepInfo) -> bool""" 
 IsProfileFlipped=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates if the profile is applied upside-down.
Get: IsProfileFlipped(self: WallSweepInfo) -> boolSet: IsProfileFlipped(self: WallSweepInfo) = value""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: WallSweepInfo) -> bool""" 
 IsVertical=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether the sweep or reveal is swept vertically or horizontally.
Get: IsVertical(self: WallSweepInfo) -> bool""" 
 MaterialId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The element id of the material used to create the sweep or reveal.
Get: MaterialId(self: WallSweepInfo) -> ElementIdSet: MaterialId(self: WallSweepInfo) = value""" 
 ProfileId=property(lambda self:object(),lambda self,v:None,lambda self:None) """The element id of the profile family used to create the sweep or reveal.
Get: ProfileId(self: WallSweepInfo) -> ElementIdSet: ProfileId(self: WallSweepInfo) = value""" 
 WallOffset=property(lambda self:object(),lambda self,v:None,lambda self:None) """The offset from the sweep or reveal to the wall.
Get: WallOffset(self: WallSweepInfo) -> floatSet: WallOffset(self: WallSweepInfo) = value""" 
 WallSide=property(lambda self:object(),lambda self,v:None,lambda self:None) """The side of the wall to which the sweep or reveal is attached.
Get: WallSide(self: WallSweepInfo) -> WallSideSet: WallSide(self: WallSweepInfo) = value""" 
 WallSweepType=property(lambda self:object(),lambda self,v:None,lambda self:None) """The type (either a wall sweep or a reveal).
Get: WallSweepType(self: WallSweepInfo) -> WallSweepTypeSet: WallSweepType(self: WallSweepInfo) = value""" 
class WallSweepType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Reveal=None Sweep=None value__=Noneclass WallType(HostObjAttributes,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass Function=property(lambda self:object(),lambda self,v:None,lambda self:None) """The wall function.
Get: Function(self: WallType) -> WallFunctionSet: Function(self: WallType) = value"""
 Kind=property(lambda self:object(),lambda self,v:None,lambda self:None) """The nature of the wall.
Get: Kind(self: WallType) -> WallKind""" 
 ThermalProperties=property(lambda self:object(),lambda self,v:None,lambda self:None) """The calculated and settable thermal properties of the WallType
Get: ThermalProperties(self: WallType) -> ThermalProperties""" 
 Width=property(lambda self:object(),lambda self,v:None,lambda self:None) """The overall thickness of this type of wall.
Get: Width(self: WallType) -> float""" 
class WallUtils(object):@staticmethod def AllowWallJoinAtEnd(wall,end):pass@staticmethod def DisallowWallJoinAtEnd(wall,end):pass@staticmethod def IsWallJoinAllowedAtEnd(wall,end):pass __all__=['AllowWallJoinAtEnd','DisallowWallJoinAtEnd','IsWallJoinAllowedAtEnd',]class WireframeBuilder(ShapeBuilder,IDisposable):def AddCurve(self,GCurve):pass def AddPoint(self,GPoint):pass def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def Reset(self):pass@staticmethod def ValidateCurve(GCurve):pass@staticmethod def ValidatePoint(GPoint):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass WorksetPreview(object,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass Id=property(lambda self:object(),lambda self,v:None,lambda self:None) """Id of the workset.
Get: Id(self: WorksetPreview) -> WorksetId"""
 IsDefaultWorkset=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether the workset is the default one.
Get: IsDefaultWorkset(self: WorksetPreview) -> bool""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: WorksetPreview) -> bool""" 
 Name=property(lambda self:object(),lambda self,v:None,lambda self:None) """Name of the workset.
Get: Name(self: WorksetPreview) -> str""" 
 Owner=property(lambda self:object(),lambda self,v:None,lambda self:None) """User name of the workset.
Get: Owner(self: WorksetPreview) -> str""" 
 UniqueId=property(lambda self:object(),lambda self,v:None,lambda self:None) """UniqueId of the workset.
Get: UniqueId(self: WorksetPreview) -> Guid""" 
class Workset(WorksetPreview,IDisposable):@staticmethod def Create(document,name):pass def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass IsEditable=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether the workset is editable.
Get: IsEditable(self: Workset) -> bool"""
 IsOpen=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether the workset is open (rather than closed).
Get: IsOpen(self: Workset) -> bool""" 
 IsVisibleByDefault=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether the workset is visible by default.
Get: IsVisibleByDefault(self: Workset) -> bool""" 
 Kind=property(lambda self:object(),lambda self,v:None,lambda self:None) """Kind of the workset.
Get: Kind(self: Workset) -> WorksetKind""" 
class WorksetConfiguration(object,IDisposable):def Close(self,worksetsToClose):pass def Dispose(self):pass def Open(self,worksetsToOpen):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,*__args):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: WorksetConfiguration) -> bool"""
class WorksetConfigurationOption(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass CloseAllWorksets=None OpenAllWorksets=None OpenLastViewed=None value__=Noneclass WorksetDefaultVisibilitySettings(Element,IDisposable):def Dispose(self):pass def getBoundingBox(self,*args):pass@staticmethod def GetWorksetDefaultVisibilitySettings(aDoc):pass def IsWorksetVisible(self,worksetId):pass def ReleaseUnmanagedResources(self,*args):pass def setElementType(self,*args):pass def SetWorksetVisibility(self,worksetId,visible):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass WorksetFilter(object,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass IncludeStandaloneWorksetsOnly=property(lambda self:object(),lambda self,v:None,lambda self:None) """True if the results of the filter only match stand-alone worksets; worksets that are not stand-alone will be rejected.
Get: IncludeStandaloneWorksetsOnly(self: WorksetFilter) -> boolSet: IncludeStandaloneWorksetsOnly(self: WorksetFilter) = value"""
 Inverted=property(lambda self:object(),lambda self,v:None,lambda self:None) """True if the results of the filter are inverted; worksets that would normally be accepted by this filter will be rejected,
 and worksets that would normally be rejected will be accepted.Get: Inverted(self: WorksetFilter) -> bool""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: WorksetFilter) -> bool""" 
class WorksetId(object):def Compare(self,id):pass def Equals(self,obj):pass def GetHashCode(self):pass def ToString(self):pass def __cmp__(self,*args):pass def __eq__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass@staticmethod def __new__(self,id):pass def __ne__(self,*args):pass IntegerValue=property(lambda self:object(),lambda self,v:None,lambda self:None) """Provides the value of the WorksetId as an integer.
Get: IntegerValue(self: WorksetId) -> int"""
 InvalidWorksetId=Noneclass WorksetKind(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass FamilyWorkset=None OtherWorkset=None StandardWorkset=None UserWorkset=None value__=None ViewWorkset=Noneclass WorksetKindFilter(WorksetFilter,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,worksetKind,inverted=None):pass WorksetKind=property(lambda self:object(),lambda self,v:None,lambda self:None) """The WorksetKind.
Get: WorksetKind(self: WorksetKindFilter) -> WorksetKind""" 
class WorksetTable(object,IDisposable):def Dispose(self):pass def GetActiveWorksetId(self):pass def GetWorkset(self,*__args):pass@staticmethod def IsWorksetNameUnique(aDoc,name):pass def ReleaseUnmanagedResources(self,*args):pass@staticmethod def RenameWorkset(aDoc,worksetId,name):pass def SetActiveWorksetId(self,worksetId):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: WorksetTable) -> bool"""
class WorksetVisibility(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass Hidden=None UseGlobalSetting=None value__=None Visible=Noneclass WorksharingDisplayGraphicSettings(object,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass@staticmethod def __new__(self,shouldApply,lineColor):pass def __repr__(self,*args):pass FillColor=property(lambda self:object(),lambda self,v:None,lambda self:None) """The fill color that will be applied to elements when these settings are
 applied. Note that this is automatically set by increasing the luma of the specified line color by 65%.Get: FillColor(self: WorksharingDisplayGraphicSettings) -> Color"""
 IsApplied=property(lambda self:object(),lambda self,v:None,lambda self:None) """Indicates whether this set of graphic overrides will be applied.
Get: IsApplied(self: WorksharingDisplayGraphicSettings) -> bool""" 
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: WorksharingDisplayGraphicSettings) -> bool""" 
 LineColor=property(lambda self:object(),lambda self,v:None,lambda self:None) """The line color that will be applied to elements when these settings are
 applied.Get: LineColor(self: WorksharingDisplayGraphicSettings) -> Color""" 
class WorksharingDisplayMode(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass CheckoutStatus=None ModelUpdates=None Off=None Owners=None value__=None Worksets=Noneclass WorksharingDisplaySettings(Element,IDisposable):def CanUserHaveOverrides(self,username):pass def Dispose(self):pass def GetAllUsersWithGraphicOverrides(self):pass def getBoundingBox(self,*args):pass def GetGraphicOverrides(self,*__args):pass@staticmethod def GetOrCreateWorksharingDisplaySettings(doc):pass def GetRemovedUsers(self):pass def ReleaseUnmanagedResources(self,*args):pass def RemoveUsers(self,document,usersToRemove,usersActuallyRemoved):pass def RestoreUsers(self,usersToRestore):pass def setElementType(self,*args):pass def SetGraphicOverrides(self,*__args):pass def UserHasGraphicOverrides(self,username):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):passclass WorksharingSaveAsOptions(object,IDisposable):def Dispose(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass ClearTransmitted=property(lambda self:object(),lambda self,v:None,lambda self:None) """For a transmitted model opened with DetachAndPreserveWorksets,
 clear its transmitted flag in the Save/SaveAs operation.Get: ClearTransmitted(self: WorksharingSaveAsOptions) -> boolSet: ClearTransmitted(self: WorksharingSaveAsOptions) = value"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: WorksharingSaveAsOptions) -> bool""" 
 OpenWorksetsDefault=property(lambda self:object(),lambda self,v:None,lambda self:None) """The default set of user-worksets to open when opening the model in the UI.
 Default is AskUserToSpecify.Get: OpenWorksetsDefault(self: WorksharingSaveAsOptions) -> SimpleWorksetConfigurationSet: OpenWorksetsDefault(self: WorksharingSaveAsOptions) = value""" 
 SaveAsCentral=property(lambda self:object(),lambda self,v:None,lambda self:None) """Whether to save the new model as a central instead of local model.
 True: save as a central model. Default is false: save as a local model.Get: SaveAsCentral(self: WorksharingSaveAsOptions) -> boolSet: SaveAsCentral(self: WorksharingSaveAsOptions) = value""" 
class WorksharingTooltipInfo(object,IDisposable):def Dispose(self):pass def GetRequesters(self):pass def ReleaseUnmanagedResources(self,*args):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass Creator=property(lambda self:object(),lambda self,v:None,lambda self:None) """The user name of the user who created the element.
Get: Creator(self: WorksharingTooltipInfo) -> str"""
 IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: WorksharingTooltipInfo) -> bool""" 
 LastChangedBy=property(lambda self:object(),lambda self,v:None,lambda self:None) """The user name of the most recent user who saved a user change of this element
 to the central model.Get: LastChangedBy(self: WorksharingTooltipInfo) -> str""" 
 Owner=property(lambda self:object(),lambda self,v:None,lambda self:None) """The current owner of the element or empty string if no one owns the element.
Get: Owner(self: WorksharingTooltipInfo) -> str""" 
class WorksharingUtils(object,IDisposable):@staticmethod def CheckoutElements(document,elementsToCheckout,options=None):pass@staticmethod def CheckoutWorksets(document,worksetsToCheckout,options=None):pass@staticmethod def CreateNewLocal(sourcePath,targetPath):pass def Dispose(self):pass@staticmethod def GetCheckoutStatus(document,elementId,owner=None):pass@staticmethod def GetModelUpdatesStatus(document,elementId):pass@staticmethod def GetUserWorksetInfo(path):pass@staticmethod def GetWorksharingTooltipInfo(document,elementId):pass def ReleaseUnmanagedResources(self,*args):pass@staticmethod def RelinquishOwnership(document,generalCategories,options):pass def __enter__(self,*args):pass def __exit__(self,*args):pass def __init__(self,*args):pass def __repr__(self,*args):pass IsValidObject=property(lambda self:object(),lambda self,v:None,lambda self:None) """Specifies whether the .NET object represents a valid Revit entity.
Get: IsValidObject(self: WorksharingUtils) -> bool"""
class XYZ(object):def Add(self,source):pass def AngleOnPlaneTo(self,right,normal):pass def AngleTo(self,source):pass def CrossProduct(self,source):pass def DistanceTo(self,source):pass def Divide(self,value):pass def DotProduct(self,source):pass def GetLength(self):pass def IsAlmostEqualTo(self,source,tolerance=None):pass def IsUnitLength(self):pass@staticmethod def IsWithinLengthLimits(point):pass def IsZeroLength(self):pass def Multiply(self,value):pass def Negate(self):pass def Normalize(self):pass def Subtract(self,source):pass def ToString(self):pass def TripleProduct(self,middle,right):pass def __add__(self,*args):pass def __div__(self,*args):pass def __getitem__(self,*args):pass def __mul__(self,*args):pass def __neg__(self,*args):pass@staticmethod def __new__(self,x=None,y=None,z=None):pass def __radd__(self,*args):pass def __rmul__(self,*args):pass def __rsub__(self,*args):pass def __sub__(self,*args):pass X=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the first coordinate.
Get: X(self: XYZ) -> float"""
 Y=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the second coordinate.
Get: Y(self: XYZ) -> float""" 
 Z=property(lambda self:object(),lambda self,v:None,lambda self:None) """Gets the third coordinate.
Get: Z(self: XYZ) -> float""" 
 BasisX=None BasisY=None BasisZ=None Zero=Noneclass ZoomFitType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass FitToPage=None value__=None Zoom=Noneclass ZoomType(Enum,IComparable,IFormattable,IConvertible):def __eq__(self,*args):pass def __format__(self,*args):pass def __ge__(self,*args):pass def __gt__(self,*args):pass def __init__(self,*args):pass def __le__(self,*args):pass def __lt__(self,*args):pass def __ne__(self,*args):pass def __reduce_ex__(self,*args):pass def __str__(self,*args):pass FitToPage=None value__=None Zoom=None
# Created by pyminifier (https://github.com/liftoff/pyminifier)
